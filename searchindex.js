Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross Validation", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 415, 416, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 465, 466, 467, 468, 470, 472, 473, 476, 479, 480, 481, 482, 484, 485, 486, 488, 491, 492, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 686, 687, 689, 690, 692, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 714, 718, 719, 720, 721, 722, 723, 724, 725, 730, 736, 737, 738, 739, 740, 741, 743, 744, 745, 747, 750, 751, 756, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 901, 902, 907, 908, 910, 912, 913, 918, 920, 925, 927, 930, 931, 932, 934, 935, 938, 939, 948, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "wa": [0, 4, 8, 13, 16, 34, 40, 69, 70, 79, 85, 91, 125, 128, 157, 166, 172, 175, 221, 247, 250, 252, 254, 256, 262, 263, 294, 303, 308, 309, 313, 318, 319, 341, 343, 350, 352, 356, 365, 367, 368, 370, 374, 375, 383, 386, 389, 391, 392, 395, 398, 399, 403, 407, 424, 425, 429, 433, 437, 440, 443, 452, 457, 498, 506, 518, 519, 521, 523, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 568, 569, 571, 573, 574, 585, 610, 613, 624, 633, 634, 637, 638, 639, 641, 647, 648, 668, 669, 696, 711, 712, 750, 765, 766, 769, 777, 778, 779, 782, 783, 793, 804, 806, 818, 828, 854, 855, 874, 878, 884, 885, 887, 912, 913, 931, 952, 953, 954, 963, 964, 967, 970, 974, 977, 980, 984, 990, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "start": [0, 4, 7, 10, 12, 26, 53, 57, 63, 66, 73, 85, 97, 108, 114, 119, 121, 142, 145, 153, 155, 167, 172, 176, 177, 185, 196, 197, 198, 204, 214, 217, 221, 230, 244, 256, 264, 276, 312, 317, 341, 350, 352, 356, 357, 358, 359, 363, 370, 371, 372, 374, 375, 376, 381, 383, 386, 392, 395, 399, 400, 404, 405, 407, 424, 426, 433, 437, 439, 516, 521, 593, 600, 615, 628, 636, 642, 649, 651, 659, 660, 661, 673, 677, 763, 764, 777, 778, 779, 782, 783, 793, 823, 824, 825, 827, 829, 837, 923, 948, 953, 960, 963, 968, 969, 978, 985, 988, 990, 998, 999, 1008, 1010, 1013, 1015, 1017, 1018, 1019, 1020, 1021], "2007": [0, 38, 184, 365, 395, 404, 424, 435, 437, 443, 445, 549, 639, 674, 700, 716, 719, 740, 741, 775, 956, 960, 962, 964], "googl": [0, 17, 381, 395, 426, 983, 995, 1005], "summer": [0, 4, 48, 1005], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 364, 368, 369, 371, 373, 374, 379, 381, 383, 384, 386, 389, 391, 394, 395, 402, 403, 426, 427, 430, 432, 442, 479, 509, 513, 514, 520, 521, 525, 526, 528, 529, 531, 549, 555, 564, 565, 568, 569, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 665, 666, 668, 669, 809, 810, 811, 848, 855, 932, 961, 965, 974, 976, 978, 979, 980, 984, 985, 987, 988, 991, 999, 1005, 1007, 1008], "david": [0, 2, 37, 56, 80, 175, 198, 257, 259, 303, 341, 342, 343, 365, 395, 402, 405, 445, 515, 519, 550, 551, 605, 606, 611, 707, 777, 878, 954, 960, 968, 977, 988, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "cournapeau": [0, 2, 1005, 1008], "later": [0, 11, 34, 53, 114, 122, 148, 167, 172, 175, 289, 343, 352, 376, 381, 382, 386, 389, 827, 850, 851, 859, 861, 974, 994, 999, 1008, 1011, 1013, 1017], "year": [0, 4, 131, 145, 153, 165, 166, 167, 196, 197, 214, 367, 369, 381, 399, 403, 405, 781, 786, 788, 860, 960, 964, 985, 988, 997], "matthieu": [0, 2, 1005, 1009, 1020], "brucher": [0, 2, 1005], "work": [0, 4, 9, 17, 32, 34, 44, 45, 48, 52, 66, 77, 111, 112, 118, 131, 145, 154, 155, 165, 166, 167, 185, 188, 205, 213, 241, 243, 254, 282, 283, 304, 309, 311, 312, 330, 333, 342, 343, 347, 352, 357, 358, 359, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 378, 382, 383, 384, 386, 391, 392, 393, 395, 396, 397, 400, 402, 403, 404, 407, 408, 409, 410, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 443, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 491, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 678, 691, 724, 756, 760, 761, 762, 763, 770, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 869, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 918, 922, 953, 954, 956, 958, 959, 960, 961, 963, 964, 966, 967, 970, 971, 974, 977, 978, 984, 985, 988, 990, 991, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "part": [0, 31, 36, 60, 67, 70, 81, 112, 117, 121, 126, 134, 135, 136, 137, 142, 153, 163, 175, 244, 251, 253, 270, 292, 300, 303, 305, 343, 358, 365, 367, 370, 372, 376, 378, 382, 383, 386, 393, 395, 399, 400, 402, 403, 405, 432, 476, 477, 478, 504, 514, 520, 525, 557, 567, 568, 569, 596, 608, 773, 846, 864, 866, 867, 868, 869, 870, 871, 872, 953, 954, 956, 961, 965, 983, 984, 985, 986, 988, 992, 999, 1001, 1005, 1013, 1014, 1016, 1018, 1020], "hi": [0, 396, 964, 999], "thesi": [0, 367, 395, 402], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 56, 57, 59, 65, 66, 70, 71, 73, 74, 77, 79, 80, 81, 85, 88, 94, 96, 99, 102, 103, 108, 112, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126, 128, 131, 141, 142, 144, 145, 148, 152, 153, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 184, 185, 187, 191, 196, 197, 198, 199, 200, 201, 204, 213, 214, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 244, 246, 250, 252, 253, 254, 256, 257, 258, 259, 261, 262, 265, 266, 268, 270, 271, 274, 276, 282, 283, 285, 295, 298, 299, 300, 303, 304, 305, 308, 309, 310, 312, 313, 318, 320, 328, 336, 341, 342, 343, 346, 350, 352, 356, 357, 358, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 421, 424, 425, 426, 427, 428, 430, 431, 432, 435, 445, 446, 447, 452, 455, 458, 476, 479, 486, 491, 492, 494, 506, 517, 519, 521, 523, 524, 525, 527, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 571, 574, 585, 589, 592, 593, 594, 613, 615, 616, 617, 619, 626, 627, 628, 630, 631, 632, 634, 636, 638, 641, 642, 644, 646, 648, 649, 651, 652, 657, 658, 659, 662, 663, 667, 668, 669, 679, 682, 686, 695, 701, 703, 708, 710, 711, 716, 717, 720, 722, 724, 736, 738, 739, 763, 765, 767, 770, 774, 776, 777, 778, 779, 782, 783, 785, 793, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 829, 831, 832, 833, 838, 846, 848, 854, 855, 859, 860, 862, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 886, 889, 891, 896, 900, 902, 918, 932, 953, 954, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 976, 977, 978, 979, 980, 985, 987, 988, 990, 997, 998, 999, 1002, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "2010": [0, 47, 66, 78, 167, 261, 262, 392, 395, 397, 399, 400, 408, 458, 519, 687, 691, 702, 703, 722, 806, 838, 839, 956, 960, 964, 968, 978, 983, 1005], "fabian": [0, 2, 183, 201, 218, 288, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014], "pedregosa": [0, 2, 183, 201, 218, 288, 1005, 1006, 1007, 1008, 1009, 1011], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 65, 66, 81, 96, 100, 185, 186, 218, 230, 243, 983, 985, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 65, 66, 72, 81, 88, 89, 96, 100, 101, 179, 185, 186, 193, 194, 218, 220, 228, 230, 243, 300, 332, 333, 384, 983, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 66, 94, 96, 102, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 384, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 66, 94, 96, 102, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 384, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "vincent": [0, 2, 47, 66, 151, 155, 988, 1005, 1007, 1009, 1010, 1012, 1015, 1020, 1021], "michel": [0, 2, 47, 66, 1005, 1007, 1008, 1010, 1012, 1019, 1020], "inria": [0, 5, 9, 30, 37, 52, 54, 56, 74, 81, 154, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 303, 336, 341, 342, 343, 641, 982, 1005], "took": [0, 42, 264], "leadership": 0, "made": [0, 69, 80, 88, 99, 131, 155, 166, 167, 196, 214, 247, 260, 304, 309, 328, 347, 356, 365, 367, 370, 374, 383, 384, 395, 403, 407, 427, 430, 432, 442, 479, 486, 571, 572, 574, 613, 614, 639, 648, 668, 669, 717, 765, 779, 782, 783, 793, 797, 798, 799, 818, 821, 822, 965, 970, 980, 984, 988, 996, 998, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1018, 1019], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 57, 60, 63, 64, 65, 66, 69, 70, 71, 74, 79, 84, 85, 88, 89, 90, 99, 103, 110, 114, 115, 116, 117, 118, 120, 122, 125, 128, 129, 130, 131, 141, 142, 145, 148, 149, 150, 153, 154, 155, 156, 161, 165, 166, 167, 169, 172, 175, 177, 179, 185, 192, 193, 194, 197, 198, 204, 205, 210, 218, 221, 229, 230, 232, 233, 235, 237, 238, 243, 247, 251, 256, 258, 259, 263, 265, 267, 268, 274, 276, 278, 279, 281, 285, 286, 287, 292, 294, 298, 300, 303, 304, 305, 309, 310, 317, 320, 324, 325, 328, 330, 341, 342, 343, 346, 347, 350, 352, 357, 358, 364, 365, 367, 368, 369, 372, 374, 375, 376, 378, 381, 383, 392, 393, 395, 398, 399, 400, 402, 403, 404, 405, 407, 427, 430, 433, 442, 443, 447, 455, 466, 470, 471, 473, 474, 475, 477, 480, 483, 485, 487, 491, 492, 493, 511, 516, 517, 521, 524, 536, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 565, 567, 571, 572, 573, 574, 576, 593, 594, 600, 604, 607, 614, 615, 616, 617, 629, 635, 642, 649, 651, 657, 659, 671, 678, 681, 682, 683, 685, 695, 699, 718, 745, 746, 764, 774, 777, 778, 782, 783, 784, 786, 791, 793, 800, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 826, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 846, 854, 858, 859, 860, 863, 870, 871, 883, 886, 889, 890, 891, 892, 894, 896, 901, 902, 903, 920, 922, 931, 935, 938, 950, 953, 954, 958, 959, 960, 961, 963, 964, 965, 966, 967, 971, 974, 975, 978, 979, 980, 988, 990, 996, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "public": [0, 78, 364, 370, 372, 374, 375, 381, 382, 383, 384, 399, 402, 647, 654, 668, 669, 675, 960, 968, 1005, 1010, 1011, 1016, 1017, 1018], "releas": [0, 34, 314, 357, 359, 368, 370, 371, 373, 378, 381, 383, 403, 427, 430, 447, 450, 473, 474, 479, 484, 487, 495, 498, 507, 521, 544, 545, 547, 548, 550, 582, 585, 611, 613, 615, 617, 623, 629, 631, 635, 641, 652, 663, 671, 684, 685, 700, 730, 770, 779, 782, 783, 785, 793, 807, 823, 825, 842, 846, 851, 854, 855, 856, 860, 861, 878, 879, 881, 886, 890, 913, 932, 980, 982, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "februari": [0, 397, 456, 964, 1006, 1010], "1st": [0, 4, 59, 89, 156, 197, 303, 859, 860], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 65, 69, 70, 71, 95, 118, 134, 142, 145, 148, 153, 166, 167, 172, 178, 196, 198, 213, 226, 230, 231, 243, 246, 252, 256, 258, 259, 265, 266, 276, 278, 304, 311, 312, 321, 325, 328, 336, 341, 342, 343, 352, 357, 365, 368, 370, 371, 372, 374, 375, 378, 381, 382, 383, 386, 393, 395, 396, 397, 398, 399, 400, 402, 403, 405, 407, 412, 421, 425, 429, 430, 432, 433, 436, 439, 452, 461, 479, 509, 516, 519, 520, 521, 522, 523, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 550, 552, 571, 572, 574, 585, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 621, 627, 628, 633, 634, 637, 638, 639, 641, 642, 647, 648, 649, 651, 654, 657, 658, 659, 662, 675, 682, 690, 692, 717, 723, 750, 771, 782, 783, 809, 810, 811, 812, 816, 817, 818, 819, 820, 823, 828, 831, 838, 839, 846, 854, 871, 872, 876, 877, 881, 883, 884, 885, 886, 887, 889, 891, 912, 915, 918, 953, 956, 957, 958, 960, 961, 965, 966, 967, 968, 970, 972, 974, 978, 979, 980, 988, 990, 999, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 60, 73, 90, 112, 119, 126, 128, 131, 142, 148, 153, 154, 163, 166, 172, 185, 196, 216, 217, 223, 229, 243, 251, 256, 261, 278, 293, 298, 311, 341, 342, 356, 364, 365, 367, 370, 372, 375, 381, 383, 392, 394, 395, 396, 399, 401, 402, 403, 405, 430, 432, 447, 470, 482, 491, 492, 521, 538, 539, 542, 543, 546, 547, 548, 553, 571, 572, 574, 593, 628, 629, 635, 671, 672, 673, 674, 675, 676, 777, 778, 779, 782, 783, 793, 809, 810, 816, 817, 818, 819, 820, 840, 841, 848, 865, 889, 890, 891, 892, 904, 932, 953, 956, 961, 964, 965, 967, 972, 974, 978, 980, 981, 983, 984, 987, 988, 990, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1018, 1021], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 43, 45, 46, 47, 50, 53, 56, 59, 61, 63, 64, 69, 70, 77, 79, 84, 85, 88, 90, 91, 99, 101, 109, 115, 117, 118, 119, 121, 141, 142, 145, 148, 149, 153, 154, 155, 161, 165, 166, 167, 168, 169, 172, 175, 196, 197, 198, 214, 221, 225, 227, 232, 234, 235, 242, 243, 244, 246, 250, 256, 257, 259, 262, 263, 270, 276, 278, 282, 283, 298, 303, 304, 305, 308, 310, 311, 317, 318, 319, 325, 331, 333, 341, 342, 350, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 475, 477, 478, 479, 491, 492, 497, 506, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 668, 670, 671, 672, 673, 674, 675, 682, 687, 688, 695, 698, 703, 708, 713, 718, 724, 738, 739, 740, 741, 764, 767, 768, 772, 775, 777, 778, 779, 782, 783, 784, 785, 790, 793, 797, 802, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 901, 903, 905, 907, 918, 939, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 984, 985, 988, 990, 991, 994, 995, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "appear": [0, 8, 46, 48, 112, 166, 251, 253, 254, 282, 283, 292, 294, 299, 317, 341, 342, 343, 365, 368, 370, 375, 383, 397, 400, 471, 472, 538, 550, 551, 562, 593, 610, 611, 613, 680, 683, 685, 695, 699, 701, 764, 771, 780, 797, 816, 817, 818, 819, 820, 883, 886, 920, 960, 966, 970, 1005, 1013, 1017, 1018], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 56, 62, 66, 70, 71, 91, 94, 104, 109, 112, 121, 125, 140, 153, 160, 165, 166, 167, 168, 175, 177, 184, 185, 194, 196, 197, 211, 214, 226, 232, 234, 247, 256, 265, 266, 298, 304, 305, 308, 309, 311, 312, 313, 325, 336, 341, 342, 343, 346, 350, 352, 356, 357, 364, 365, 367, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 415, 417, 425, 427, 429, 430, 431, 432, 436, 444, 446, 447, 448, 451, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 498, 517, 521, 523, 524, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 614, 616, 617, 629, 635, 641, 642, 653, 654, 663, 675, 677, 682, 688, 692, 696, 701, 798, 818, 823, 824, 825, 827, 829, 831, 832, 833, 840, 844, 845, 846, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 870, 879, 881, 882, 889, 890, 891, 892, 896, 897, 917, 932, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 983, 984, 985, 990, 999, 1002, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 140, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 172, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 229, 230, 231, 232, 234, 236, 238, 241, 242, 243, 245, 246, 247, 251, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 316, 317, 319, 320, 321, 324, 325, 327, 328, 331, 332, 333, 334, 335, 336, 337, 341, 342, 343, 347, 348, 350, 352, 357, 358, 364, 365, 367, 368, 370, 371, 372, 375, 376, 381, 382, 383, 386, 387, 388, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 418, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 442, 443, 445, 447, 449, 450, 452, 453, 454, 455, 457, 458, 459, 461, 465, 466, 467, 468, 476, 477, 479, 480, 487, 488, 489, 490, 493, 495, 499, 500, 501, 502, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 560, 564, 566, 567, 570, 576, 577, 585, 586, 590, 591, 593, 595, 600, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 675, 676, 677, 682, 683, 685, 686, 687, 688, 692, 696, 699, 700, 704, 705, 706, 708, 710, 711, 712, 713, 716, 717, 718, 719, 723, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 738, 739, 750, 751, 757, 763, 764, 765, 766, 767, 768, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 845, 846, 847, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 869, 873, 874, 875, 876, 877, 878, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 907, 912, 916, 917, 918, 920, 921, 922, 923, 927, 928, 930, 931, 932, 938, 953, 954, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 970, 971, 974, 975, 977, 979, 980, 982, 983, 987, 990, 991, 994, 995, 997, 998, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1017, 1018, 1020], "month": [0, 4, 153, 167, 304, 365, 370, 374, 384, 1005], "cycl": [0, 4, 42, 44, 50, 61, 94, 181, 242, 247, 263, 265, 311, 312, 370, 374, 394, 400, 562, 563, 610, 782, 783, 897, 953, 954, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "thrive": [0, 370], "intern": [0, 26, 70, 81, 99, 122, 134, 149, 160, 163, 196, 276, 278, 297, 306, 318, 343, 352, 357, 365, 367, 372, 376, 379, 381, 383, 389, 392, 395, 399, 400, 402, 403, 405, 406, 421, 423, 428, 448, 451, 494, 517, 518, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 576, 577, 593, 594, 621, 623, 626, 629, 635, 651, 655, 659, 661, 679, 691, 713, 716, 740, 741, 765, 807, 821, 822, 837, 838, 839, 841, 842, 846, 860, 862, 876, 877, 879, 881, 882, 883, 886, 889, 890, 891, 892, 932, 960, 961, 962, 964, 967, 970, 974, 976, 979, 980, 988, 1005, 1008, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 59, 73, 79, 80, 84, 85, 94, 114, 117, 119, 121, 125, 130, 144, 148, 153, 154, 155, 161, 166, 167, 168, 172, 189, 193, 196, 197, 198, 202, 213, 214, 217, 225, 229, 231, 235, 238, 241, 242, 244, 246, 247, 251, 254, 255, 256, 259, 260, 262, 267, 268, 274, 282, 283, 284, 286, 294, 298, 299, 301, 303, 308, 309, 310, 311, 312, 316, 319, 328, 333, 335, 341, 350, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 378, 379, 381, 382, 383, 384, 389, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 407, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 476, 477, 480, 481, 491, 492, 499, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 602, 610, 611, 612, 613, 615, 616, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 668, 670, 671, 672, 673, 674, 675, 678, 694, 696, 703, 723, 745, 756, 760, 773, 777, 778, 779, 780, 782, 783, 784, 785, 786, 793, 797, 800, 805, 806, 809, 810, 812, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 896, 900, 901, 902, 920, 933, 949, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 976, 977, 978, 979, 980, 985, 988, 990, 994, 997, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "been": [0, 4, 9, 16, 26, 44, 53, 59, 80, 99, 145, 148, 153, 155, 166, 221, 225, 227, 232, 254, 256, 262, 308, 309, 310, 311, 312, 318, 341, 352, 357, 364, 365, 367, 368, 369, 370, 372, 374, 376, 378, 379, 381, 382, 383, 384, 389, 392, 393, 395, 397, 399, 400, 402, 405, 418, 421, 452, 454, 455, 457, 461, 470, 506, 517, 519, 532, 533, 550, 551, 564, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 616, 617, 641, 642, 649, 651, 656, 658, 659, 660, 661, 703, 773, 779, 782, 783, 785, 793, 805, 806, 830, 878, 881, 954, 956, 957, 959, 960, 961, 964, 965, 967, 970, 974, 976, 978, 979, 980, 985, 988, 990, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "lead": [0, 7, 25, 31, 37, 52, 60, 71, 118, 121, 144, 145, 166, 167, 168, 175, 185, 187, 196, 200, 230, 256, 257, 259, 263, 281, 282, 294, 298, 300, 303, 304, 310, 328, 342, 346, 352, 356, 357, 364, 369, 378, 379, 382, 383, 389, 392, 393, 395, 397, 399, 400, 401, 402, 404, 435, 445, 448, 451, 479, 498, 510, 518, 521, 522, 523, 526, 530, 534, 540, 541, 542, 543, 546, 547, 548, 549, 589, 613, 629, 630, 633, 635, 636, 637, 643, 644, 645, 646, 662, 674, 678, 728, 777, 782, 783, 809, 821, 822, 826, 845, 852, 862, 873, 874, 879, 881, 889, 890, 891, 892, 953, 958, 960, 961, 963, 964, 965, 967, 968, 970, 972, 974, 977, 978, 980, 988, 990, 1008, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1020], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 87, 90, 91, 92, 94, 97, 99, 102, 103, 104, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 131, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 167, 168, 169, 172, 175, 177, 178, 179, 181, 184, 185, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 204, 205, 213, 214, 216, 220, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 246, 247, 250, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 281, 282, 283, 284, 285, 286, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 318, 319, 325, 326, 328, 332, 333, 334, 336, 337, 338, 341, 342, 343, 346, 348, 349, 350, 352, 356, 357, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 927, 929, 930, 931, 932, 933, 934, 935, 938, 948, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 977, 978, 979, 980, 981, 983, 984, 985, 987, 988, 990, 991, 992, 994, 995, 996, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "decis": [0, 4, 16, 25, 27, 31, 34, 55, 57, 59, 107, 108, 111, 112, 114, 126, 132, 152, 166, 178, 179, 188, 205, 206, 209, 210, 225, 226, 228, 235, 259, 279, 284, 287, 292, 298, 299, 300, 303, 315, 322, 324, 325, 326, 327, 328, 329, 330, 334, 337, 338, 341, 351, 356, 359, 366, 367, 370, 383, 393, 395, 402, 421, 452, 483, 487, 502, 519, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 576, 577, 614, 615, 616, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 681, 683, 685, 686, 690, 703, 708, 709, 717, 721, 722, 724, 738, 764, 770, 771, 774, 779, 782, 783, 793, 807, 809, 810, 812, 823, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 958, 964, 965, 966, 967, 968, 970, 971, 972, 977, 978, 979, 982, 984, 985, 986, 988, 997, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1021], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 55, 60, 61, 66, 72, 99, 118, 121, 126, 142, 145, 148, 153, 156, 165, 166, 167, 168, 175, 182, 185, 188, 189, 190, 192, 196, 197, 198, 202, 214, 218, 227, 229, 231, 232, 241, 243, 246, 247, 251, 256, 258, 259, 265, 266, 267, 285, 294, 298, 299, 304, 312, 328, 338, 341, 342, 343, 352, 356, 357, 358, 359, 364, 365, 368, 369, 371, 372, 373, 375, 376, 378, 381, 383, 386, 389, 392, 393, 395, 396, 397, 399, 400, 402, 403, 404, 405, 407, 424, 425, 426, 427, 429, 430, 432, 434, 435, 436, 441, 442, 443, 445, 471, 486, 497, 498, 505, 506, 510, 515, 517, 524, 534, 535, 538, 539, 566, 567, 590, 591, 614, 632, 638, 639, 654, 674, 678, 719, 724, 750, 751, 763, 777, 778, 779, 781, 784, 790, 794, 795, 796, 798, 799, 803, 804, 811, 812, 815, 848, 857, 860, 861, 865, 869, 871, 872, 873, 874, 887, 895, 901, 902, 912, 918, 924, 925, 950, 953, 954, 956, 958, 960, 961, 963, 964, 965, 966, 967, 969, 970, 971, 972, 974, 977, 978, 979, 980, 982, 983, 984, 985, 987, 988, 990, 995, 997, 999, 1002, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "process": [0, 4, 5, 19, 26, 30, 31, 45, 46, 47, 48, 50, 65, 69, 71, 73, 78, 80, 95, 96, 98, 118, 125, 134, 135, 136, 137, 158, 165, 175, 198, 232, 241, 242, 247, 256, 258, 259, 268, 298, 310, 317, 342, 343, 346, 356, 357, 358, 359, 365, 369, 370, 372, 374, 376, 379, 381, 382, 383, 389, 395, 396, 397, 399, 400, 401, 402, 403, 404, 408, 431, 432, 458, 479, 487, 506, 517, 518, 519, 520, 521, 544, 545, 546, 571, 572, 574, 593, 594, 596, 597, 598, 600, 601, 602, 605, 606, 608, 610, 615, 616, 622, 626, 647, 655, 668, 669, 686, 705, 723, 763, 777, 779, 782, 783, 793, 802, 803, 804, 813, 814, 830, 844, 848, 850, 851, 852, 861, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 930, 932, 953, 956, 960, 964, 967, 974, 976, 978, 980, 982, 983, 984, 985, 986, 988, 990, 991, 998, 999, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 43, 44, 67, 81, 105, 124, 147, 158, 163, 217, 221, 227, 247, 251, 262, 281, 303, 309, 312, 315, 322, 328, 345, 347, 351, 356, 365, 367, 370, 372, 375, 381, 383, 384, 386, 392, 395, 397, 398, 399, 400, 402, 403, 404, 405, 425, 426, 429, 433, 434, 435, 436, 437, 440, 445, 446, 455, 479, 486, 487, 491, 494, 496, 497, 504, 513, 518, 524, 527, 546, 593, 594, 595, 599, 600, 601, 672, 679, 692, 696, 807, 829, 834, 861, 873, 874, 877, 889, 890, 891, 892, 895, 917, 918, 935, 938, 961, 963, 964, 967, 969, 970, 974, 977, 980, 984, 985, 993, 998, 999, 1005, 1006, 1008, 1009, 1011, 1015], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 326, 327, 328, 333, 334, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 382, 383, 384, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 918, 920, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 945, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 987, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "laid": [0, 165, 370], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 69, 70, 102, 107, 113, 115, 122, 132, 137, 163, 165, 168, 196, 198, 204, 214, 241, 243, 254, 256, 259, 264, 268, 274, 303, 304, 311, 319, 321, 324, 325, 328, 341, 355, 365, 367, 368, 370, 372, 373, 374, 376, 381, 383, 395, 398, 400, 402, 405, 411, 419, 420, 426, 427, 429, 430, 432, 455, 465, 466, 467, 468, 482, 498, 499, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 571, 572, 574, 587, 590, 591, 617, 622, 623, 624, 625, 634, 638, 649, 651, 656, 658, 659, 671, 672, 675, 684, 709, 723, 724, 779, 781, 782, 783, 784, 786, 787, 788, 789, 793, 807, 816, 817, 818, 819, 820, 825, 830, 833, 837, 838, 839, 847, 851, 858, 870, 873, 874, 896, 926, 928, 933, 954, 958, 959, 963, 964, 965, 967, 972, 974, 985, 986, 987, 988, 994, 997, 999, 1001, 1005, 1007, 1009, 1011, 1013, 1014, 1017, 1018, 1021], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 56, 70, 72, 88, 89, 91, 94, 125, 177, 179, 193, 194, 211, 229, 232, 238, 257, 294, 305, 320, 333, 343, 344, 356, 357, 358, 359, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 378, 381, 383, 384, 386, 389, 392, 394, 395, 400, 403, 406, 428, 430, 431, 432, 433, 436, 440, 447, 471, 472, 482, 484, 494, 504, 506, 519, 527, 547, 571, 572, 573, 574, 577, 587, 614, 622, 626, 641, 642, 649, 651, 656, 657, 658, 659, 679, 680, 686, 688, 694, 700, 719, 740, 741, 751, 760, 761, 762, 773, 775, 779, 782, 783, 793, 803, 805, 808, 811, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 842, 853, 881, 886, 897, 900, 902, 915, 930, 953, 960, 962, 964, 965, 966, 967, 968, 972, 978, 981, 982, 983, 988, 992, 997, 999, 1006, 1007, 1011], "peopl": [0, 6, 69, 166, 233, 259, 341, 342, 357, 358, 365, 367, 369, 370, 374, 384, 401, 476, 477, 624, 818, 984, 995], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 65, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 91, 94, 96, 99, 102, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 141, 142, 144, 145, 148, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 200, 205, 207, 214, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 238, 242, 243, 244, 246, 250, 251, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 281, 282, 286, 289, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 312, 313, 316, 318, 319, 320, 321, 326, 328, 330, 332, 336, 337, 341, 342, 343, 346, 350, 352, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 415, 417, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 471, 472, 476, 478, 479, 481, 483, 484, 485, 486, 487, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 506, 507, 509, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 692, 695, 696, 698, 699, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 722, 723, 725, 727, 728, 730, 732, 733, 735, 736, 738, 739, 743, 744, 745, 747, 749, 750, 751, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 785, 786, 791, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 905, 906, 907, 910, 912, 917, 918, 919, 922, 923, 927, 928, 930, 932, 935, 938, 939, 943, 944, 945, 948, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "current": [0, 8, 46, 84, 94, 153, 166, 214, 298, 308, 357, 358, 365, 368, 370, 371, 372, 375, 379, 381, 383, 384, 391, 392, 394, 395, 399, 402, 403, 404, 405, 424, 433, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 515, 518, 524, 536, 537, 540, 541, 542, 543, 545, 547, 548, 549, 559, 574, 576, 593, 600, 609, 610, 629, 641, 650, 654, 658, 659, 660, 661, 770, 777, 778, 826, 830, 838, 839, 857, 869, 879, 889, 890, 891, 892, 895, 931, 939, 953, 958, 960, 964, 967, 968, 974, 980, 985, 997, 1013, 1017, 1019, 1020, 1021], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 77, 78, 81, 84, 89, 90, 91, 94, 95, 96, 99, 100, 103, 104, 105, 108, 109, 111, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 129, 137, 140, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 163, 166, 167, 169, 172, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 194, 196, 198, 202, 203, 205, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 225, 226, 229, 231, 232, 234, 241, 243, 244, 246, 251, 256, 257, 258, 259, 260, 263, 267, 269, 270, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 295, 297, 298, 301, 304, 306, 308, 310, 311, 312, 313, 317, 318, 325, 326, 327, 328, 329, 332, 333, 334, 335, 338, 341, 342, 343, 347, 348, 349, 350, 352, 356, 357, 358, 359, 363, 364, 365, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 383, 384, 385, 386, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 409, 415, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 442, 443, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 472, 479, 481, 483, 487, 493, 494, 502, 508, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 555, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 668, 670, 671, 672, 673, 674, 675, 676, 683, 684, 685, 691, 694, 699, 703, 717, 723, 724, 740, 741, 761, 762, 777, 778, 779, 781, 782, 783, 788, 793, 797, 798, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 896, 899, 901, 902, 905, 918, 920, 948, 952, 953, 955, 956, 958, 960, 961, 962, 965, 966, 967, 968, 969, 971, 972, 974, 976, 977, 978, 979, 980, 984, 985, 988, 990, 994, 995, 997, 998, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "mainten": [0, 370, 378, 381, 386, 388, 960, 985, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "j\u00e9r\u00e9mie": [0, 1, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "du": [0, 1, 2, 1005, 1006, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "boisberrang": [0, 1, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "jori": [0, 1, 1012, 1013, 1014, 1017, 1018], "van": [0, 1, 364, 397, 452, 457, 517, 610, 675, 679, 954, 961, 964, 970, 988, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021], "den": [0, 1, 1006, 1007, 1012, 1013, 1014, 1017, 1018], "bossch": [0, 1, 1012, 1013, 1014, 1018], "lo\u00efc": [0, 1, 1013, 1016, 1018, 1019, 1020], "est\u00e8v": [0, 1, 1013, 1016, 1018, 1019, 1020], "thoma": [0, 1, 102, 225, 298, 357, 360, 384, 877, 960, 974, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "j": [0, 1, 11, 17, 37, 38, 40, 43, 60, 69, 78, 79, 80, 108, 112, 113, 123, 149, 161, 167, 208, 220, 233, 241, 255, 256, 261, 267, 280, 286, 289, 302, 313, 350, 357, 364, 365, 367, 374, 376, 381, 392, 393, 395, 397, 399, 400, 402, 403, 405, 406, 421, 424, 428, 436, 437, 452, 457, 481, 496, 499, 500, 501, 503, 511, 514, 517, 519, 520, 521, 523, 524, 530, 542, 543, 576, 577, 615, 616, 620, 627, 628, 631, 632, 649, 650, 652, 663, 671, 672, 673, 675, 676, 677, 679, 688, 691, 693, 697, 699, 701, 704, 705, 706, 708, 737, 738, 740, 741, 756, 760, 770, 771, 772, 773, 810, 811, 818, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 852, 861, 889, 890, 953, 954, 958, 960, 961, 962, 964, 965, 966, 967, 968, 970, 971, 972, 974, 976, 978, 979, 980, 982, 999, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "fan": [0, 1, 357, 384, 979, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "olivi": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 341, 342, 343, 384, 877, 977, 983, 985, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "grisel": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 341, 342, 343, 384, 983, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "yaroslav": [0, 1, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014], "halchenko": [0, 1, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014], "tim": [0, 1, 114, 127, 1005, 1010, 1011, 1014, 1015, 1016, 1018, 1020, 1021], "head": [0, 1, 26, 70, 114, 127, 153, 166, 184, 185, 214, 238, 246, 304, 308, 313, 370, 378, 400, 988, 1010, 1011, 1020, 1021], "nicola": [0, 1, 145, 302, 641, 960, 977, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hug": [0, 1, 145, 302, 982, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "adrin": [0, 1, 64, 337, 384, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "jalali": [0, 1, 64, 337, 384, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "julien": [0, 1, 641, 960, 988, 1005, 1008, 1012, 1013, 1017, 1018, 1019, 1020, 1021], "jerphanion": [0, 1, 1017, 1018, 1019, 1020, 1021], "guillaum": [0, 1, 5, 7, 71, 74, 99, 128, 148, 153, 154, 155, 157, 184, 185, 198, 218, 298, 988, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "lemaitr": [0, 1, 5, 7, 71, 74, 99, 128, 148, 153, 154, 155, 157, 184, 185, 198, 218, 298, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "christian": [0, 1, 19, 196, 197, 198, 214, 341, 342, 365, 988, 999, 1005, 1006, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "lorentzen": [0, 1, 196, 197, 198, 214, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "jan": [0, 1, 24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 197, 231, 860, 1005, 1008, 1009, 1010, 1011, 1013, 1014, 1017, 1021], "hendrik": [0, 1, 24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231, 1005, 1008, 1009, 1010, 1011], "metzen": [0, 1, 24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231, 1005, 1008, 1009, 1010, 1011], "andrea": [0, 1, 31, 73, 99, 113, 187, 230, 299, 300, 318, 336, 337, 384, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "mueller": [0, 1, 73, 99, 113, 187, 230, 318, 336, 337, 988, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "vlad": [0, 1, 94, 232, 295, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014], "nicula": [0, 1, 94, 232, 295, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014], "joel": [0, 1, 71, 384, 403, 518, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "nothman": [0, 1, 71, 384, 403, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "hanmin": [0, 1, 299, 1012, 1013, 1014, 1015, 1016], "qin": [0, 1, 299, 367, 403, 1012, 1013, 1014, 1015, 1016], "bertrand": [0, 1, 1005, 1011, 1012, 1017, 1018], "thirion": [0, 1, 1005, 1011, 1012, 1018], "tom": [0, 1, 188, 204, 276, 278, 300, 301, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "dupr\u00e9": [0, 1, 300, 301, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "la": [0, 1, 188, 204, 276, 278, 300, 301, 304, 367, 988, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "tour": [0, 1, 188, 204, 276, 278, 300, 301, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "nell": [0, 1, 39, 220, 228, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1017], "roman": [0, 1, 196, 214, 610, 895, 1007, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "yurchak": [0, 1, 196, 214, 403, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "meekail": [0, 1, 1019, 1020, 1021], "zain": [0, 1, 1019, 1020, 1021], "pleas": [0, 12, 17, 26, 70, 71, 108, 114, 115, 116, 122, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 200, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 286, 295, 304, 308, 309, 310, 311, 312, 313, 318, 350, 357, 364, 365, 368, 370, 371, 372, 374, 378, 381, 382, 383, 386, 389, 391, 394, 395, 402, 403, 433, 479, 550, 551, 614, 615, 616, 633, 634, 637, 638, 639, 647, 648, 782, 783, 804, 858, 870, 883, 886, 889, 890, 891, 892, 953, 964, 968, 974, 978, 979, 984, 985, 987, 990, 997, 999, 1005, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "do": [0, 4, 10, 25, 42, 60, 66, 73, 89, 98, 100, 101, 104, 113, 115, 117, 119, 121, 122, 128, 135, 142, 153, 160, 166, 167, 168, 193, 196, 214, 217, 219, 232, 247, 251, 254, 257, 259, 274, 276, 278, 282, 311, 321, 325, 328, 333, 336, 341, 342, 343, 350, 352, 356, 357, 358, 365, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 383, 384, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 433, 444, 486, 519, 521, 525, 527, 535, 538, 564, 565, 571, 572, 574, 628, 629, 635, 638, 639, 642, 649, 651, 659, 719, 745, 760, 764, 796, 799, 813, 814, 818, 845, 846, 848, 855, 859, 861, 866, 867, 869, 870, 871, 872, 889, 890, 891, 892, 900, 938, 953, 956, 958, 960, 961, 964, 965, 967, 968, 972, 974, 979, 980, 984, 985, 988, 990, 997, 998, 999, 1005, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "email": [0, 341, 370, 381, 403, 816, 966, 988], "directli": [0, 6, 19, 27, 45, 46, 55, 70, 114, 145, 156, 184, 196, 202, 214, 226, 261, 295, 298, 312, 343, 352, 356, 368, 370, 371, 372, 374, 376, 382, 383, 384, 391, 392, 393, 395, 396, 397, 398, 399, 403, 405, 426, 435, 445, 447, 452, 457, 510, 550, 551, 552, 553, 580, 594, 603, 615, 626, 629, 630, 635, 636, 643, 644, 645, 646, 647, 660, 664, 667, 673, 756, 760, 763, 772, 773, 779, 782, 783, 793, 826, 840, 841, 842, 848, 858, 860, 863, 870, 932, 953, 960, 962, 967, 969, 971, 974, 979, 980, 985, 991, 994, 995, 1005, 1013, 1014, 1016, 1017, 1018], "ask": [0, 160, 161, 256, 359, 369, 370, 374, 375, 378, 383, 384, 404, 823, 824, 825, 827, 829, 831, 832, 833, 982, 987, 1021], "assist": [0, 370, 381, 974, 988], "report": [0, 4, 8, 32, 69, 74, 142, 156, 184, 254, 264, 308, 316, 352, 365, 369, 371, 372, 373, 376, 378, 381, 383, 386, 389, 395, 399, 594, 632, 641, 647, 668, 669, 683, 696, 711, 712, 720, 765, 766, 769, 810, 819, 838, 839, 876, 894, 912, 960, 967, 984, 985, 987, 1006, 1009, 1012, 1013, 1015, 1016, 1018, 1020, 1021], "issu": [0, 4, 25, 78, 85, 196, 214, 261, 305, 357, 359, 364, 373, 374, 375, 378, 379, 381, 383, 384, 385, 386, 389, 391, 395, 397, 398, 403, 405, 432, 435, 445, 456, 465, 466, 467, 517, 522, 526, 556, 568, 569, 571, 572, 574, 594, 610, 674, 678, 751, 852, 857, 869, 908, 953, 954, 961, 967, 972, 974, 979, 984, 985, 987, 998, 999, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020], "instead": [0, 4, 5, 6, 34, 48, 53, 55, 56, 70, 99, 112, 116, 125, 142, 145, 148, 196, 198, 211, 214, 221, 247, 252, 253, 257, 258, 274, 281, 298, 308, 309, 310, 311, 312, 328, 330, 341, 343, 352, 356, 357, 364, 365, 368, 369, 370, 371, 372, 374, 375, 378, 379, 381, 382, 383, 389, 391, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 416, 421, 424, 425, 426, 428, 429, 430, 433, 439, 442, 448, 450, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 492, 493, 516, 518, 520, 522, 523, 524, 529, 530, 532, 533, 536, 537, 538, 539, 540, 541, 543, 545, 547, 548, 551, 553, 565, 566, 572, 573, 590, 591, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 613, 615, 618, 621, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 653, 654, 655, 656, 659, 661, 662, 670, 673, 677, 682, 690, 728, 756, 760, 765, 777, 778, 779, 783, 791, 793, 798, 799, 814, 815, 824, 832, 838, 839, 842, 843, 844, 853, 854, 859, 861, 871, 872, 875, 882, 884, 886, 887, 889, 890, 891, 892, 894, 895, 907, 913, 918, 939, 953, 954, 956, 960, 961, 963, 964, 965, 968, 969, 974, 978, 979, 980, 984, 987, 995, 997, 999, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 49, 50, 53, 56, 57, 61, 63, 64, 66, 68, 79, 85, 88, 89, 94, 99, 101, 105, 110, 111, 112, 115, 116, 117, 118, 120, 122, 125, 128, 134, 141, 142, 143, 145, 148, 153, 154, 155, 160, 163, 166, 167, 169, 172, 175, 176, 177, 187, 197, 198, 199, 202, 213, 214, 217, 219, 227, 229, 235, 236, 238, 242, 243, 244, 250, 251, 253, 255, 256, 257, 258, 259, 263, 265, 266, 267, 270, 271, 276, 282, 283, 285, 289, 298, 304, 305, 308, 309, 310, 311, 312, 313, 318, 328, 341, 342, 343, 346, 347, 348, 349, 352, 356, 357, 358, 362, 363, 364, 365, 367, 368, 369, 370, 372, 374, 376, 377, 378, 381, 382, 383, 386, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 417, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 465, 466, 467, 468, 470, 471, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 597, 602, 605, 606, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 684, 689, 691, 694, 696, 725, 745, 756, 760, 761, 762, 763, 770, 772, 773, 777, 778, 779, 781, 782, 783, 784, 785, 790, 791, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 917, 918, 933, 935, 938, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 976, 977, 978, 979, 980, 981, 983, 985, 988, 990, 992, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "what": [0, 4, 9, 12, 40, 45, 52, 53, 85, 95, 99, 117, 165, 166, 185, 202, 204, 212, 227, 238, 294, 341, 343, 346, 352, 357, 365, 370, 371, 372, 374, 376, 378, 382, 383, 384, 385, 395, 401, 402, 403, 486, 519, 571, 572, 574, 629, 635, 679, 866, 867, 869, 870, 871, 872, 889, 890, 891, 892, 963, 964, 965, 967, 980, 985, 987, 990, 1005, 1012], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 60, 69, 70, 71, 72, 77, 84, 94, 98, 102, 103, 104, 112, 118, 119, 120, 121, 122, 128, 131, 145, 148, 149, 154, 160, 166, 175, 180, 184, 185, 192, 210, 211, 212, 217, 220, 225, 230, 231, 234, 243, 247, 250, 254, 255, 256, 257, 260, 263, 264, 267, 268, 270, 271, 274, 280, 285, 299, 304, 310, 311, 328, 331, 336, 341, 342, 343, 349, 356, 357, 359, 364, 367, 369, 370, 373, 376, 382, 383, 386, 392, 393, 395, 399, 400, 402, 403, 404, 405, 416, 427, 430, 432, 434, 435, 436, 442, 445, 448, 455, 465, 466, 467, 521, 528, 529, 535, 537, 539, 540, 541, 542, 543, 545, 547, 548, 549, 551, 553, 576, 577, 580, 585, 593, 594, 618, 620, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 652, 653, 654, 655, 656, 658, 659, 661, 662, 663, 671, 672, 673, 676, 677, 686, 691, 702, 703, 704, 705, 706, 710, 711, 721, 722, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 765, 766, 767, 769, 772, 773, 774, 776, 777, 778, 779, 782, 783, 793, 804, 806, 809, 814, 815, 824, 832, 838, 839, 882, 884, 887, 889, 890, 891, 892, 953, 958, 959, 960, 961, 964, 967, 968, 970, 978, 984, 985, 988, 990, 995, 999, 1005, 1008, 1011, 1013, 1014, 1015, 1018, 1019, 1020], "wai": [0, 4, 17, 27, 50, 59, 70, 73, 114, 120, 124, 126, 145, 155, 166, 168, 169, 197, 201, 211, 227, 228, 231, 235, 251, 256, 263, 265, 298, 299, 311, 313, 352, 356, 357, 358, 364, 366, 368, 369, 372, 373, 378, 379, 383, 384, 386, 389, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 410, 427, 428, 434, 435, 436, 442, 443, 445, 446, 452, 479, 538, 539, 546, 555, 572, 582, 583, 594, 615, 649, 650, 659, 660, 661, 687, 689, 700, 718, 719, 736, 737, 739, 745, 756, 760, 770, 775, 802, 810, 827, 848, 854, 859, 865, 891, 892, 935, 938, 953, 954, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 974, 976, 978, 979, 980, 984, 985, 987, 988, 990, 998, 999, 1005, 1007, 1013, 1018, 1019], "question": [0, 134, 165, 256, 336, 359, 369, 370, 375, 378, 399, 402, 810, 883, 886, 960, 963, 964, 970, 980, 982, 988], "faq": [0, 378, 399, 675, 961, 974], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 56, 59, 68, 69, 70, 73, 77, 79, 85, 100, 104, 109, 110, 113, 116, 117, 118, 119, 121, 122, 126, 128, 142, 153, 155, 163, 166, 167, 168, 169, 172, 177, 185, 186, 192, 197, 198, 199, 200, 203, 204, 210, 214, 221, 222, 227, 230, 233, 234, 235, 237, 247, 251, 252, 254, 256, 257, 258, 263, 265, 266, 268, 269, 270, 276, 278, 280, 282, 283, 294, 303, 305, 309, 310, 311, 325, 326, 328, 331, 336, 341, 342, 346, 350, 356, 357, 358, 359, 365, 368, 369, 371, 372, 373, 375, 378, 382, 383, 384, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 417, 421, 426, 427, 428, 429, 430, 432, 435, 447, 451, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 542, 549, 550, 551, 552, 553, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 605, 606, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 671, 672, 674, 675, 687, 703, 739, 772, 779, 782, 783, 793, 804, 825, 827, 830, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 879, 886, 953, 954, 958, 959, 960, 961, 963, 964, 970, 971, 972, 974, 976, 977, 979, 980, 983, 985, 987, 988, 990, 992, 994, 999, 1001, 1005, 1007, 1010, 1016, 1019, 1020, 1021], "you": [0, 14, 16, 24, 70, 116, 117, 120, 122, 142, 145, 161, 167, 184, 197, 198, 227, 238, 244, 251, 256, 257, 263, 271, 282, 308, 309, 312, 317, 320, 341, 352, 356, 357, 358, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 383, 386, 389, 393, 394, 395, 396, 397, 399, 402, 403, 404, 406, 407, 412, 421, 428, 432, 447, 450, 452, 479, 483, 486, 487, 492, 493, 515, 516, 519, 532, 533, 534, 536, 538, 540, 542, 544, 547, 550, 551, 552, 553, 562, 563, 571, 572, 574, 590, 591, 593, 610, 629, 630, 633, 634, 635, 637, 638, 639, 641, 642, 647, 648, 649, 651, 655, 657, 658, 659, 660, 661, 670, 683, 767, 778, 781, 782, 783, 784, 794, 795, 796, 798, 799, 809, 810, 811, 812, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 829, 831, 838, 840, 841, 845, 846, 853, 854, 855, 866, 867, 869, 870, 871, 872, 874, 876, 877, 881, 883, 886, 889, 890, 891, 892, 918, 930, 953, 954, 959, 960, 964, 965, 968, 970, 971, 974, 975, 978, 979, 980, 983, 984, 987, 988, 990, 991, 994, 997, 999, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 59, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 79, 80, 81, 85, 95, 97, 98, 99, 100, 102, 104, 105, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 142, 144, 145, 148, 153, 154, 155, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 181, 184, 185, 187, 189, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 204, 212, 213, 214, 217, 218, 219, 225, 226, 227, 228, 229, 231, 235, 238, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 263, 265, 267, 268, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 293, 294, 295, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 317, 318, 320, 321, 325, 326, 328, 331, 336, 341, 342, 343, 348, 349, 350, 352, 356, 357, 358, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 383, 384, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 416, 418, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 455, 465, 466, 467, 470, 479, 482, 486, 491, 492, 495, 504, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 577, 580, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 615, 617, 618, 621, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 687, 690, 692, 694, 695, 701, 703, 704, 705, 706, 708, 709, 711, 712, 714, 715, 719, 720, 721, 722, 724, 725, 728, 734, 737, 738, 739, 740, 741, 745, 761, 762, 764, 765, 766, 767, 769, 770, 771, 774, 775, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 838, 839, 840, 841, 844, 845, 846, 848, 849, 850, 854, 855, 856, 859, 860, 861, 866, 873, 874, 879, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 893, 894, 897, 899, 901, 905, 907, 912, 917, 918, 924, 927, 930, 932, 934, 935, 938, 945, 948, 949, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 987, 988, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "contribut": [0, 13, 122, 153, 265, 303, 359, 367, 368, 372, 373, 374, 378, 383, 384, 386, 400, 401, 402, 405, 430, 432, 536, 537, 542, 543, 708, 711, 738, 958, 964, 967, 972, 979, 982, 984, 985, 988, 997, 1005, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "activ": [0, 94, 163, 204, 241, 247, 257, 315, 322, 343, 364, 365, 368, 370, 371, 376, 378, 381, 383, 384, 386, 396, 479, 485, 509, 615, 618, 620, 633, 634, 636, 637, 638, 646, 647, 648, 665, 666, 667, 668, 669, 696, 701, 777, 837, 838, 839, 877, 930, 960, 961, 962, 963, 967, 968, 969, 977], "who": [0, 69, 357, 359, 365, 370, 377, 384, 386, 823, 824, 825, 827, 829, 831, 832, 833, 982, 984, 1007, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 53, 56, 57, 59, 63, 69, 70, 77, 79, 84, 85, 94, 102, 104, 112, 116, 118, 120, 121, 122, 126, 128, 141, 142, 143, 145, 148, 150, 153, 161, 166, 167, 168, 169, 172, 176, 177, 179, 185, 188, 189, 192, 196, 197, 198, 201, 205, 213, 214, 217, 228, 230, 235, 247, 254, 256, 257, 258, 259, 262, 263, 265, 266, 267, 276, 279, 284, 287, 289, 292, 298, 299, 300, 302, 303, 308, 309, 310, 311, 321, 324, 325, 326, 328, 330, 341, 342, 343, 346, 347, 350, 352, 356, 357, 358, 363, 364, 365, 367, 368, 369, 370, 372, 373, 376, 378, 379, 381, 382, 383, 384, 386, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 421, 422, 423, 425, 426, 429, 430, 431, 433, 435, 445, 446, 448, 450, 465, 467, 475, 479, 481, 486, 491, 515, 516, 518, 519, 524, 529, 532, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 590, 591, 592, 593, 594, 605, 615, 616, 618, 626, 627, 628, 629, 630, 633, 635, 636, 637, 639, 643, 644, 645, 646, 655, 659, 661, 664, 667, 670, 674, 677, 678, 682, 693, 696, 705, 711, 712, 720, 725, 745, 761, 762, 765, 766, 769, 777, 778, 779, 782, 783, 793, 796, 799, 803, 804, 805, 806, 807, 808, 810, 820, 823, 824, 825, 827, 828, 829, 831, 832, 833, 837, 838, 839, 841, 843, 844, 849, 850, 854, 858, 861, 866, 870, 883, 886, 889, 890, 891, 892, 901, 920, 928, 932, 953, 954, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 977, 978, 979, 980, 984, 985, 987, 988, 990, 995, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "help": [0, 4, 9, 11, 16, 69, 73, 99, 105, 167, 214, 217, 257, 259, 295, 325, 328, 342, 343, 352, 356, 357, 368, 371, 372, 373, 374, 375, 376, 378, 379, 383, 384, 385, 389, 395, 396, 399, 403, 405, 417, 519, 560, 610, 633, 637, 648, 668, 669, 675, 697, 817, 889, 890, 891, 892, 954, 958, 959, 961, 963, 964, 966, 968, 974, 975, 980, 983, 984, 985, 987, 988, 999, 1011, 1012, 1013, 1016, 1019], "triag": [0, 359, 370, 373, 384], "pr": [0, 130, 357, 370, 373, 378, 403, 723, 964, 1015, 1017], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 69, 70, 71, 72, 73, 74, 78, 80, 84, 85, 87, 88, 89, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 142, 143, 145, 149, 150, 151, 152, 153, 156, 160, 161, 165, 166, 167, 168, 169, 172, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 308, 310, 311, 312, 313, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 356, 357, 359, 362, 363, 365, 367, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 389, 392, 393, 395, 399, 401, 403, 404, 405, 407, 411, 415, 416, 421, 424, 427, 430, 432, 435, 437, 441, 442, 443, 445, 447, 448, 450, 452, 455, 457, 465, 466, 467, 471, 474, 475, 478, 479, 480, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 519, 521, 523, 524, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 597, 598, 601, 602, 603, 605, 606, 610, 611, 612, 613, 615, 616, 617, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 668, 669, 672, 673, 674, 675, 676, 677, 678, 684, 687, 689, 700, 704, 705, 706, 719, 725, 739, 760, 763, 767, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 811, 812, 813, 814, 815, 821, 822, 824, 826, 827, 829, 830, 831, 832, 833, 837, 838, 839, 841, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 869, 870, 871, 872, 873, 874, 881, 882, 883, 884, 886, 887, 890, 892, 893, 894, 895, 912, 913, 917, 918, 921, 922, 929, 933, 935, 938, 953, 954, 956, 958, 959, 961, 963, 964, 965, 967, 969, 970, 971, 972, 976, 977, 979, 980, 982, 984, 986, 987, 988, 990, 993, 997, 998, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021], "arturo": [0, 37, 56, 175, 257, 259, 303, 341, 342, 343, 360, 1019, 1020], "amor": [0, 37, 56, 175, 257, 259, 303, 341, 342, 343, 360, 1019, 1020], "juan": [0, 360, 1005, 1016, 1017, 1018, 1019, 1020], "carlo": [0, 230, 360, 402, 405, 594, 624, 625, 956, 969, 1005, 1016, 1017, 1018, 1019, 1020], "alfaro": [0, 360, 1016, 1017, 1018, 1019, 1020], "jim\u00e9nez": [0, 360, 1013, 1016, 1017, 1018, 1019, 1020], "luci": [0, 262, 360, 1016, 1017, 1018, 1019, 1020], "liu": [0, 262, 360, 546, 708, 738, 964, 970, 1008, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020], "martin": [0, 360, 704, 705, 706, 960, 964, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "loyola": [0, 360, 1018, 1019], "sylvain": [0, 360, 1009, 1014, 1015, 1016, 1017, 1018, 1019], "mari\u00e9": [0, 360, 1014, 1015, 1016, 1017, 1018, 1019], "chiara": [0, 360, 361, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "marmo": [0, 360, 361, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "maxwel": [0, 360, 1015, 1018, 1019, 1020], "norbert": [0, 360, 1007, 1017, 1018, 1019], "prein": [0, 360, 1017, 1018, 1019], "reshama": [0, 354, 360, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "shaikh": [0, 354, 360, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "albert": [0, 225, 360, 1012, 1013, 1014, 1017, 1018], "around": [0, 4, 26, 37, 52, 84, 112, 121, 154, 167, 172, 259, 295, 316, 318, 319, 328, 331, 341, 342, 343, 352, 365, 367, 370, 376, 381, 395, 399, 400, 403, 405, 454, 455, 498, 527, 603, 623, 632, 687, 777, 785, 827, 829, 831, 832, 833, 861, 960, 961, 963, 964, 970, 974, 978, 984, 985, 988, 997, 999, 1009, 1010], "lauren": [0, 353, 675, 679, 961, 1017, 1020], "burk": [0, 353, 1020], "francoisgoupil": [0, 353, 1019], "longer": [0, 4, 53, 94, 112, 167, 181, 294, 311, 370, 372, 399, 402, 403, 405, 432, 519, 959, 963, 964, 966, 969, 979, 988, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "mathieu": [0, 2, 24, 48, 99, 187, 197, 218, 232, 257, 341, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1018], "blondel": [0, 2, 24, 48, 99, 187, 197, 218, 232, 257, 341, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1018], "lar": [0, 2, 14, 94, 97, 145, 163, 174, 185, 215, 341, 342, 343, 367, 454, 455, 461, 484, 514, 520, 522, 525, 526, 528, 529, 531, 634, 635, 636, 637, 638, 639, 646, 647, 648, 661, 665, 666, 667, 668, 669, 986, 997, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018], "buitinck": [0, 2, 14, 341, 342, 343, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "noel": [0, 2, 108, 109, 110, 111, 1005, 1006, 1007, 1008, 1009, 1017], "daw": [0, 2, 108, 109, 110, 111, 1005, 1006, 1007, 1008, 1009], "dubourg": [0, 2, 151, 155, 988, 1005, 1009], "edouard": [0, 2, 1005], "duchesnai": [0, 2, 1005], "alexand": [0, 2, 395, 400, 518, 847, 1007, 1008, 1009, 1011, 1012, 1013, 1017, 1018, 1019], "fabisch": [0, 2, 1007, 1008, 1009, 1011], "virgil": [0, 2, 9, 1005, 1006, 1008], "fritsch": [0, 2, 9, 1005, 1006, 1008], "satrajit": [0, 2, 1005, 1006], "ghosh": [0, 2, 395, 1005, 1006], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1005, 1008, 1013, 1014, 1015, 1016, 1019], "gorgolewski": [0, 2, 1005, 1008], "jaqu": [0, 2, 31, 45, 51, 53, 72, 88, 89, 100, 179, 192, 193, 194, 219, 333, 336, 1005, 1006, 1007, 1008], "grobler": [0, 2, 31, 45, 51, 53, 72, 88, 89, 100, 179, 192, 193, 194, 219, 333, 336, 1005, 1006, 1007, 1008], "brian": [0, 2, 46, 691, 964, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1018, 1019], "holt": [0, 2, 1005], "arnaud": [0, 2, 1006, 1007, 1008, 1009, 1010, 1011], "joli": [0, 2, 1006, 1007, 1008, 1009, 1010, 1011], "thoui": [0, 2, 1005], "rai": [0, 2, 932, 964, 1005, 1015, 1017, 1018], "jone": [0, 2, 365, 1005], "kyle": [0, 2, 98, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017], "kastner": [0, 2, 98, 1007, 1008, 1009, 1016, 1017], "manoj": [0, 2, 42, 145, 178, 1008, 1009, 1010, 1011, 1012], "kumar": [0, 2, 42, 145, 178, 365, 395, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "robert": [0, 2, 48, 71, 145, 184, 367, 400, 511, 518, 611, 639, 704, 705, 706, 717, 847, 954, 960, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1020], "layton": [0, 2, 48, 1005, 1006, 1007, 1008, 1010], "wei": [0, 2, 978, 1005, 1006, 1009, 1010, 1011, 1012, 1014, 1018, 1021], "li": [0, 2, 319, 365, 622, 625, 679, 708, 738, 874, 953, 956, 964, 967, 974, 976, 979, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "paolo": [0, 2, 1005, 1009, 1015], "losi": [0, 2, 1005], "gill": [0, 2, 112, 113, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "loupp": [0, 2, 112, 113, 402, 538, 539, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "jarrod": [0, 2, 1014], "millman": [0, 2, 1014], "passo": [0, 2, 1005, 1006], "peter": [0, 2, 11, 16, 62, 108, 120, 122, 123, 257, 341, 342, 395, 431, 433, 440, 632, 772, 773, 960, 964, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020], "prettenhof": [0, 2, 11, 16, 108, 120, 122, 123, 257, 341, 342, 1005, 1006, 1007, 1008, 1009, 1010], "venkat": [0, 2], "raghav": [0, 2, 119, 260, 298, 1009, 1010, 1011, 1012, 1013, 1017], "rajagopalan": [0, 2, 1013, 1017], "jacob": [0, 2, 1010, 1011, 1012], "schreiber": [0, 2, 1010, 1011, 1012], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1005, 1006], "jake": [0, 2, 11, 155, 197, 217, 244, 281, 289, 983, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019], "vanderpla": [0, 2, 11, 155, 197, 217, 244, 281, 289, 983, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ward": [0, 2, 36, 39, 44, 52, 54, 55, 61, 67, 163, 169, 403, 425, 429, 446, 513, 834, 1005, 1008, 1010], "farlei": [0, 2, 1005], "ron": [0, 2, 243, 1005], "weiss": [0, 2, 243, 395, 674, 1005], "respons": [0, 145, 167, 192, 196, 199, 266, 341, 367, 376, 383, 394, 395, 396, 402, 405, 447, 465, 466, 467, 614, 615, 616, 657, 658, 681, 683, 685, 777, 778, 965, 971, 982, 990], "If": [0, 4, 11, 16, 27, 32, 42, 49, 70, 81, 97, 116, 121, 128, 157, 161, 166, 177, 196, 211, 213, 256, 263, 271, 281, 289, 298, 303, 304, 328, 336, 337, 341, 342, 343, 350, 352, 356, 357, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 383, 384, 386, 389, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 415, 417, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 497, 498, 502, 505, 506, 507, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 694, 695, 696, 697, 699, 700, 701, 708, 709, 710, 711, 712, 713, 714, 718, 720, 723, 724, 727, 728, 730, 732, 733, 735, 736, 737, 738, 739, 740, 741, 743, 745, 746, 748, 749, 750, 751, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 791, 793, 796, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 910, 916, 918, 920, 922, 927, 930, 932, 933, 935, 938, 939, 945, 948, 949, 950, 951, 953, 954, 956, 958, 959, 960, 961, 962, 964, 967, 968, 970, 971, 974, 976, 978, 979, 980, 981, 984, 985, 987, 990, 991, 997, 998, 999, 1005, 1008, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 93, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 134, 135, 136, 137, 141, 142, 144, 145, 148, 149, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 208, 211, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 294, 295, 297, 298, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 316, 317, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 339, 340, 343, 344, 346, 348, 349, 350, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377, 379, 382, 383, 384, 385, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 401, 405, 406, 407, 408, 411, 413, 414, 415, 416, 423, 439, 440, 442, 444, 446, 454, 461, 463, 464, 468, 476, 486, 491, 492, 499, 514, 526, 528, 529, 530, 531, 538, 555, 557, 558, 560, 561, 566, 568, 569, 575, 578, 579, 581, 584, 586, 592, 599, 603, 604, 607, 612, 619, 621, 625, 630, 633, 634, 637, 643, 644, 646, 650, 658, 666, 668, 669, 670, 677, 678, 679, 682, 694, 697, 698, 699, 704, 705, 706, 708, 710, 712, 714, 717, 718, 721, 725, 728, 733, 738, 740, 741, 745, 746, 748, 749, 750, 751, 753, 756, 757, 758, 759, 762, 763, 765, 774, 786, 787, 788, 789, 790, 791, 792, 801, 809, 811, 813, 815, 817, 821, 822, 831, 832, 833, 835, 843, 844, 847, 849, 852, 863, 864, 866, 868, 869, 871, 872, 873, 876, 880, 882, 891, 892, 893, 894, 897, 900, 901, 902, 907, 908, 917, 918, 927, 931, 932, 933, 935, 936, 940, 941, 942, 946, 947, 953, 954, 956, 957, 959, 962, 963, 965, 966, 967, 969, 970, 971, 972, 974, 975, 976, 977, 981, 982, 983, 984, 985, 986, 987, 990, 991, 993, 994, 995, 996, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "scientif": [0, 32, 134, 135, 136, 137, 230, 359, 364, 368, 381, 386, 395, 435, 445, 484, 988, 991], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 61, 63, 64, 65, 69, 70, 71, 72, 74, 77, 79, 80, 81, 85, 88, 89, 91, 94, 95, 96, 97, 99, 102, 103, 105, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 128, 130, 131, 134, 140, 141, 142, 144, 145, 148, 150, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 179, 182, 184, 185, 187, 189, 191, 193, 196, 197, 198, 199, 202, 204, 205, 208, 209, 210, 211, 212, 214, 217, 218, 221, 222, 225, 226, 228, 229, 230, 232, 235, 237, 238, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 281, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 324, 325, 326, 328, 329, 330, 331, 333, 336, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 381, 382, 383, 384, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 433, 452, 453, 454, 455, 456, 457, 458, 459, 484, 506, 514, 515, 517, 520, 532, 544, 545, 546, 552, 553, 565, 566, 572, 594, 600, 610, 615, 616, 621, 623, 634, 638, 641, 642, 649, 651, 656, 657, 658, 659, 660, 675, 694, 701, 703, 708, 728, 738, 746, 763, 802, 823, 824, 825, 827, 829, 830, 831, 832, 833, 844, 853, 854, 855, 861, 866, 867, 869, 870, 871, 872, 874, 877, 881, 885, 928, 930, 953, 954, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 976, 977, 978, 979, 980, 981, 983, 984, 985, 988, 990, 994, 995, 996, 997, 998, 999, 1002, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021], "would": [0, 4, 6, 9, 26, 32, 45, 53, 57, 69, 77, 79, 80, 85, 91, 99, 100, 121, 145, 148, 153, 154, 166, 167, 168, 169, 172, 186, 196, 197, 198, 211, 214, 225, 243, 252, 256, 257, 262, 264, 266, 276, 282, 294, 298, 299, 303, 304, 311, 319, 328, 337, 341, 343, 352, 356, 365, 366, 370, 371, 372, 376, 378, 379, 381, 382, 383, 384, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 416, 448, 451, 465, 466, 467, 472, 515, 517, 519, 524, 527, 535, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 553, 566, 567, 570, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 656, 657, 658, 659, 661, 662, 683, 685, 691, 695, 696, 703, 738, 764, 767, 771, 779, 781, 793, 806, 814, 815, 824, 832, 839, 866, 867, 869, 870, 871, 872, 873, 874, 879, 881, 882, 884, 887, 889, 890, 891, 892, 953, 954, 957, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 974, 979, 984, 985, 988, 990, 995, 997, 999, 1002, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "appreci": [0, 370], "citat": [0, 364, 367, 381], "paper": [0, 145, 172, 256, 367, 376, 381, 395, 397, 426, 432, 461, 487, 517, 524, 546, 624, 641, 649, 650, 654, 659, 662, 675, 770, 818, 827, 830, 873, 874, 960, 964, 967, 970, 979, 999, 1005, 1012, 1013], "machin": [0, 4, 6, 8, 9, 27, 62, 141, 142, 148, 153, 164, 168, 170, 208, 237, 256, 259, 262, 291, 296, 298, 303, 305, 310, 313, 324, 329, 336, 341, 343, 356, 357, 359, 363, 364, 365, 367, 368, 370, 373, 376, 377, 381, 382, 383, 385, 389, 393, 395, 399, 400, 402, 403, 405, 421, 423, 431, 454, 455, 461, 485, 487, 493, 499, 500, 501, 513, 515, 517, 524, 527, 538, 539, 540, 541, 542, 543, 547, 548, 549, 576, 577, 593, 594, 597, 602, 605, 617, 621, 622, 624, 626, 627, 628, 633, 634, 637, 638, 639, 640, 641, 642, 659, 665, 666, 675, 691, 696, 707, 717, 723, 725, 767, 770, 777, 806, 807, 821, 822, 827, 830, 837, 838, 839, 841, 859, 861, 867, 881, 882, 883, 884, 886, 887, 891, 892, 953, 954, 956, 957, 960, 961, 962, 964, 965, 967, 970, 971, 972, 974, 978, 980, 983, 984, 985, 986, 987, 988, 991, 992, 993, 995, 999, 1000, 1001, 1002, 1005, 1007, 1017, 1018, 1019, 1020], "pythonet": [0, 11, 77, 78, 108, 109, 123, 184, 289, 367, 392, 395, 397, 400, 402, 403, 404, 434, 481, 502, 503, 511, 518, 524, 527, 546, 665, 666, 702, 703, 816, 818, 838, 839, 874, 917, 918, 960, 961, 964, 970, 974, 976, 979, 980, 1013], "al": [0, 11, 77, 78, 108, 109, 123, 184, 289, 367, 392, 395, 397, 400, 402, 403, 404, 434, 481, 502, 503, 511, 518, 524, 527, 546, 665, 666, 702, 703, 816, 818, 838, 839, 874, 917, 918, 960, 961, 964, 970, 974, 976, 979, 980, 1013, 1018], "jmlr": [0, 395, 649, 650, 659, 687, 960, 979], "12": [0, 4, 6, 8, 12, 15, 40, 42, 43, 53, 55, 56, 72, 73, 84, 117, 118, 122, 151, 152, 153, 161, 162, 166, 167, 169, 176, 182, 196, 204, 214, 215, 217, 220, 221, 225, 226, 228, 235, 238, 243, 244, 255, 256, 258, 259, 262, 268, 302, 303, 304, 313, 336, 341, 343, 344, 367, 368, 375, 382, 384, 395, 399, 403, 427, 430, 432, 465, 466, 467, 468, 515, 517, 524, 553, 647, 652, 654, 668, 669, 672, 675, 676, 777, 778, 780, 797, 800, 812, 833, 849, 953, 954, 960, 962, 965, 974, 978, 979, 982, 990, 995, 1003, 1006, 1008, 1012, 1013, 1015, 1016], "pp": [0, 62, 255, 367, 395, 397, 403, 406, 407, 428, 431, 435, 445, 494, 516, 517, 524, 573, 618, 626, 647, 668, 669, 703, 708, 712, 722, 738, 751, 765, 816, 818, 820, 837, 857, 869, 957, 964, 966, 967, 977], "2825": 0, "2830": 0, "2011": [0, 47, 167, 218, 376, 400, 403, 518, 521, 523, 524, 530, 573, 610, 621, 641, 712, 954, 968, 978, 983, 1005], "bibtex": 0, "entri": [0, 16, 70, 74, 128, 161, 166, 167, 252, 308, 342, 352, 374, 376, 378, 382, 383, 392, 393, 395, 400, 402, 405, 446, 455, 514, 515, 520, 528, 529, 544, 545, 571, 574, 577, 594, 603, 615, 621, 623, 630, 634, 636, 638, 639, 642, 644, 646, 647, 648, 656, 658, 665, 666, 668, 669, 682, 687, 690, 692, 695, 698, 699, 701, 708, 711, 712, 713, 716, 717, 720, 725, 738, 740, 741, 765, 767, 770, 771, 772, 773, 792, 805, 821, 822, 829, 830, 831, 832, 833, 852, 858, 870, 950, 953, 954, 960, 964, 967, 974, 979, 985, 990, 1012, 1015, 1016, 1018], "articl": [0, 17, 69, 341, 365, 369, 370, 378, 399, 408, 458, 688, 960, 964, 999, 1018], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 77, 78, 80, 81, 84, 85, 90, 94, 95, 96, 97, 98, 102, 103, 104, 110, 111, 112, 116, 117, 118, 121, 122, 124, 127, 130, 131, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 166, 175, 176, 178, 180, 181, 183, 184, 185, 188, 189, 195, 196, 198, 200, 201, 202, 204, 205, 210, 213, 214, 217, 218, 219, 225, 229, 230, 231, 232, 233, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 259, 260, 261, 265, 266, 270, 271, 278, 279, 282, 283, 284, 285, 287, 288, 289, 298, 302, 303, 304, 318, 321, 324, 325, 326, 327, 328, 331, 337, 338, 341, 347, 348, 349, 369, 370, 374, 378, 396, 964, 987, 995], "p": [0, 11, 13, 24, 26, 27, 41, 60, 79, 80, 84, 91, 102, 120, 141, 151, 172, 208, 213, 214, 217, 219, 229, 244, 256, 262, 263, 289, 364, 365, 367, 368, 375, 378, 392, 393, 395, 397, 398, 400, 402, 404, 405, 406, 408, 426, 428, 430, 433, 440, 452, 454, 457, 458, 461, 481, 511, 517, 521, 523, 524, 530, 532, 533, 534, 536, 538, 539, 540, 541, 542, 544, 547, 548, 549, 573, 575, 576, 577, 578, 579, 581, 582, 583, 587, 588, 589, 590, 591, 592, 598, 599, 610, 623, 626, 671, 673, 675, 677, 682, 688, 698, 706, 723, 734, 768, 770, 781, 787, 788, 789, 792, 806, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 837, 841, 842, 857, 869, 875, 891, 892, 893, 957, 958, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 974, 978, 979, 982, 994, 997, 1005, 1006, 1008, 1011, 1013, 1020], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 49, 52, 53, 57, 63, 66, 70, 74, 85, 97, 112, 115, 116, 118, 121, 128, 129, 136, 139, 141, 144, 145, 146, 148, 154, 155, 157, 163, 165, 166, 167, 168, 172, 180, 182, 185, 196, 197, 198, 206, 214, 218, 229, 231, 234, 238, 246, 254, 256, 257, 258, 259, 262, 263, 265, 266, 268, 276, 292, 293, 294, 300, 303, 304, 308, 310, 312, 316, 317, 336, 341, 342, 343, 352, 365, 370, 371, 372, 374, 376, 381, 393, 396, 400, 402, 403, 404, 405, 470, 491, 492, 514, 515, 520, 521, 549, 564, 565, 566, 575, 578, 579, 581, 582, 583, 587, 588, 589, 590, 591, 592, 600, 610, 615, 618, 641, 696, 705, 708, 711, 712, 738, 765, 766, 769, 770, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 805, 838, 839, 843, 852, 855, 856, 860, 861, 896, 901, 902, 956, 959, 968, 971, 972, 974, 978, 1007, 1013, 1014, 1015, 1017, 1019], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 64, 69, 72, 81, 85, 102, 112, 113, 120, 121, 128, 135, 148, 149, 150, 151, 153, 155, 156, 157, 161, 165, 178, 181, 196, 197, 198, 214, 218, 222, 231, 241, 256, 260, 261, 267, 274, 282, 298, 303, 319, 335, 343, 352, 356, 362, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 381, 383, 389, 393, 394, 395, 397, 399, 400, 402, 403, 404, 405, 407, 486, 511, 514, 516, 517, 520, 524, 538, 539, 540, 541, 542, 547, 548, 550, 551, 552, 553, 564, 565, 571, 572, 574, 576, 577, 580, 587, 594, 600, 605, 606, 613, 616, 617, 647, 657, 660, 663, 669, 675, 680, 703, 710, 720, 722, 745, 767, 779, 782, 783, 785, 793, 797, 802, 803, 804, 805, 808, 811, 816, 820, 823, 824, 825, 828, 830, 831, 832, 833, 837, 844, 846, 851, 854, 857, 859, 861, 864, 866, 867, 868, 869, 870, 871, 872, 881, 889, 890, 891, 892, 917, 918, 932, 953, 954, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 974, 978, 979, 980, 985, 987, 988, 999, 1005, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 59, 67, 74, 77, 80, 85, 91, 95, 96, 97, 102, 110, 111, 115, 116, 118, 127, 131, 134, 135, 136, 137, 142, 143, 144, 148, 151, 153, 155, 156, 157, 163, 166, 167, 184, 197, 206, 210, 211, 214, 218, 256, 257, 259, 263, 270, 292, 298, 300, 303, 308, 310, 313, 317, 319, 321, 328, 333, 341, 342, 343, 348, 350, 352, 356, 358, 359, 364, 365, 367, 368, 370, 372, 373, 375, 378, 381, 382, 383, 384, 385, 390, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 416, 421, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 471, 473, 474, 475, 477, 480, 483, 484, 485, 486, 487, 491, 493, 494, 495, 496, 497, 503, 505, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 564, 571, 572, 573, 574, 576, 577, 580, 585, 590, 591, 594, 600, 603, 610, 613, 615, 616, 618, 620, 621, 622, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 656, 658, 659, 660, 661, 662, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 687, 688, 693, 694, 695, 699, 700, 702, 704, 705, 706, 707, 708, 713, 718, 719, 722, 725, 726, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 746, 748, 749, 756, 757, 758, 759, 760, 763, 770, 773, 775, 777, 778, 779, 782, 783, 785, 790, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 848, 852, 857, 861, 862, 865, 866, 867, 869, 870, 871, 872, 877, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 894, 916, 917, 918, 949, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 977, 978, 979, 980, 983, 984, 985, 990, 991, 997, 998, 999, 1001, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 57, 67, 69, 74, 76, 79, 82, 83, 84, 86, 94, 96, 97, 100, 113, 121, 163, 164, 169, 170, 174, 185, 196, 211, 215, 229, 242, 243, 246, 247, 249, 252, 271, 272, 308, 325, 342, 352, 357, 362, 367, 370, 376, 378, 383, 392, 393, 394, 397, 398, 400, 402, 403, 416, 425, 429, 435, 445, 446, 447, 448, 453, 456, 457, 458, 459, 460, 465, 466, 467, 479, 495, 507, 513, 514, 520, 524, 528, 529, 533, 535, 537, 539, 541, 543, 545, 547, 548, 551, 553, 564, 572, 576, 577, 583, 589, 594, 613, 614, 617, 618, 622, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 653, 655, 656, 659, 661, 662, 671, 678, 682, 684, 687, 700, 718, 719, 721, 736, 737, 739, 770, 775, 779, 784, 791, 793, 803, 807, 809, 810, 811, 814, 815, 816, 824, 832, 834, 837, 839, 841, 842, 845, 848, 854, 855, 856, 861, 865, 875, 881, 882, 883, 884, 886, 887, 890, 892, 896, 958, 959, 960, 961, 964, 965, 966, 969, 972, 978, 979, 981, 1001, 1005, 1008, 1009, 1010, 1013, 1015, 1016, 1019, 1020], "b": [0, 8, 9, 10, 24, 26, 58, 64, 79, 100, 102, 109, 111, 112, 117, 121, 122, 131, 134, 135, 149, 150, 151, 156, 161, 178, 181, 196, 197, 202, 214, 232, 234, 255, 259, 261, 266, 270, 274, 311, 319, 352, 365, 367, 370, 374, 375, 376, 392, 393, 395, 398, 399, 400, 403, 421, 465, 483, 524, 529, 549, 571, 572, 573, 574, 590, 591, 593, 594, 611, 629, 630, 631, 632, 641, 652, 655, 657, 659, 663, 670, 671, 688, 702, 712, 713, 772, 773, 790, 791, 828, 854, 855, 856, 857, 860, 861, 869, 896, 918, 919, 927, 954, 956, 960, 961, 962, 964, 967, 969, 974, 978, 979, 994, 1005, 1013, 1016, 1018, 1019, 1020], "o": [0, 17, 19, 27, 30, 38, 49, 59, 60, 62, 63, 81, 84, 90, 96, 125, 156, 184, 189, 194, 196, 211, 231, 241, 256, 258, 265, 298, 299, 303, 309, 312, 320, 346, 356, 365, 367, 370, 386, 395, 397, 400, 402, 406, 408, 428, 430, 431, 433, 456, 458, 517, 587, 610, 649, 650, 675, 809, 837, 852, 893, 932, 933, 956, 958, 960, 961, 964, 965, 967, 968, 978, 979, 980, 1005, 1008, 1011, 1013, 1014, 1017, 1018, 1020], "m": [0, 8, 9, 11, 19, 26, 27, 44, 57, 58, 62, 63, 64, 79, 80, 94, 131, 153, 178, 180, 196, 214, 256, 260, 289, 320, 324, 335, 341, 356, 357, 364, 365, 367, 368, 374, 376, 383, 386, 392, 393, 395, 397, 400, 402, 404, 406, 428, 429, 433, 440, 456, 457, 483, 496, 511, 515, 517, 519, 524, 622, 628, 632, 647, 654, 668, 669, 672, 676, 691, 699, 708, 723, 738, 740, 741, 777, 778, 827, 852, 918, 943, 944, 954, 956, 958, 960, 961, 962, 964, 965, 966, 967, 968, 972, 974, 978, 980, 988, 1013, 1014, 1015, 1016, 1019, 1020, 1021], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 64, 74, 77, 78, 79, 80, 85, 94, 102, 105, 109, 112, 113, 117, 121, 122, 123, 131, 141, 149, 150, 151, 155, 156, 157, 160, 161, 166, 178, 180, 181, 185, 196, 203, 206, 214, 222, 228, 231, 241, 244, 247, 255, 256, 259, 261, 262, 263, 266, 269, 271, 274, 278, 283, 287, 289, 304, 312, 330, 343, 352, 365, 367, 371, 374, 381, 383, 392, 393, 395, 397, 398, 399, 400, 402, 403, 412, 416, 421, 434, 436, 448, 452, 457, 461, 465, 466, 467, 481, 487, 496, 503, 517, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 571, 572, 573, 574, 589, 592, 593, 594, 610, 618, 622, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 668, 669, 675, 679, 699, 704, 705, 706, 710, 712, 763, 767, 770, 779, 793, 796, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 830, 831, 832, 838, 839, 852, 857, 869, 876, 877, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 894, 930, 954, 956, 958, 960, 961, 964, 965, 966, 967, 968, 971, 972, 974, 978, 979, 980, 984, 999, 1005, 1009, 1012, 1015, 1016, 1017, 1018, 1020], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 59, 60, 62, 69, 70, 81, 88, 91, 94, 97, 102, 104, 119, 148, 156, 196, 204, 210, 212, 214, 222, 226, 228, 229, 230, 231, 244, 255, 256, 264, 274, 282, 283, 289, 294, 316, 317, 320, 327, 328, 333, 343, 364, 365, 367, 372, 376, 381, 393, 395, 397, 398, 400, 402, 403, 405, 406, 428, 430, 435, 443, 446, 471, 476, 486, 509, 517, 519, 540, 541, 548, 549, 564, 565, 573, 597, 598, 602, 605, 606, 627, 628, 631, 652, 653, 654, 663, 671, 672, 675, 676, 680, 682, 688, 691, 704, 705, 706, 708, 738, 746, 750, 760, 763, 770, 791, 816, 818, 820, 821, 822, 837, 848, 852, 854, 855, 857, 869, 874, 891, 892, 896, 956, 958, 960, 961, 962, 963, 964, 966, 972, 974, 976, 979, 980, 987, 995, 996, 997, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019], "perrot": [0, 1005], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 56, 60, 69, 77, 79, 80, 81, 84, 85, 97, 99, 100, 112, 118, 120, 121, 124, 134, 141, 144, 145, 156, 165, 166, 167, 172, 176, 185, 186, 196, 197, 198, 214, 217, 218, 231, 252, 256, 257, 259, 261, 262, 270, 271, 282, 289, 300, 303, 308, 310, 336, 343, 348, 349, 350, 352, 356, 357, 358, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 381, 382, 383, 386, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 421, 423, 425, 428, 429, 430, 433, 437, 446, 452, 453, 454, 455, 456, 458, 459, 479, 481, 483, 484, 485, 486, 507, 516, 518, 519, 521, 523, 524, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 560, 564, 565, 571, 572, 573, 574, 576, 577, 580, 586, 587, 589, 590, 591, 592, 593, 594, 600, 605, 606, 613, 616, 617, 618, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 667, 670, 671, 673, 675, 677, 680, 682, 684, 687, 688, 691, 692, 710, 711, 712, 713, 720, 723, 724, 737, 745, 749, 767, 770, 777, 778, 779, 782, 783, 785, 792, 793, 797, 802, 803, 804, 805, 806, 808, 820, 821, 822, 823, 824, 825, 827, 831, 832, 833, 837, 838, 839, 844, 846, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 881, 882, 888, 889, 890, 891, 892, 896, 912, 917, 918, 920, 923, 924, 932, 939, 950, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 974, 975, 978, 979, 980, 985, 987, 988, 997, 998, 999, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "journal": [0, 80, 167, 256, 262, 364, 365, 367, 393, 395, 397, 402, 435, 445, 456, 517, 524, 610, 618, 628, 672, 675, 676, 688, 698, 713, 716, 717, 740, 741, 768, 806, 811, 857, 869, 953, 954, 958, 960, 961, 962, 965, 971, 976, 978, 979], "research": [0, 165, 256, 262, 365, 367, 381, 395, 484, 496, 618, 628, 675, 717, 806, 811, 953, 961, 965, 967, 979, 984, 985, 988], "volum": [0, 65, 78, 153, 365, 367, 395, 397, 405, 456, 517, 751, 960, 979, 988], "page": [0, 12, 17, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 217, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350, 356, 365, 367, 370, 372, 374, 376, 378, 384, 394, 395, 397, 456, 499, 500, 501, 611, 627, 811, 876, 918, 954, 964, 965, 990, 999, 1003, 1005, 1009, 1010], "want": [0, 4, 12, 24, 25, 26, 63, 70, 145, 161, 166, 196, 197, 198, 247, 256, 270, 294, 321, 325, 341, 352, 356, 357, 358, 368, 369, 371, 372, 374, 375, 376, 381, 382, 383, 384, 386, 389, 393, 394, 395, 396, 397, 402, 403, 404, 483, 486, 487, 493, 518, 532, 637, 638, 639, 641, 642, 649, 651, 657, 658, 659, 746, 827, 830, 846, 853, 874, 881, 953, 960, 963, 964, 965, 968, 970, 974, 975, 979, 984, 985, 990, 998, 1005, 1019], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 64, 65, 77, 79, 81, 85, 90, 91, 99, 117, 121, 134, 145, 148, 153, 155, 166, 167, 169, 172, 175, 185, 209, 213, 214, 219, 225, 233, 236, 238, 241, 246, 247, 255, 259, 261, 263, 265, 276, 278, 282, 283, 300, 305, 311, 319, 325, 338, 341, 342, 346, 350, 352, 357, 358, 363, 364, 365, 366, 370, 371, 372, 374, 375, 378, 381, 382, 383, 384, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 411, 424, 425, 426, 428, 429, 433, 437, 439, 443, 446, 447, 448, 450, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 480, 486, 506, 514, 516, 517, 520, 521, 523, 524, 525, 527, 533, 538, 539, 540, 541, 542, 543, 547, 548, 549, 566, 568, 569, 570, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 627, 628, 654, 655, 657, 668, 669, 670, 671, 675, 679, 691, 707, 711, 712, 718, 719, 723, 760, 763, 765, 777, 778, 779, 802, 809, 810, 823, 824, 825, 827, 828, 829, 831, 832, 833, 840, 841, 845, 850, 853, 854, 856, 873, 874, 877, 881, 882, 889, 891, 901, 902, 907, 913, 932, 934, 953, 959, 960, 961, 963, 964, 965, 966, 967, 970, 971, 972, 977, 978, 979, 980, 984, 988, 990, 992, 994, 997, 998, 999, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "api": [0, 12, 50, 163, 224, 226, 235, 239, 276, 342, 343, 358, 359, 363, 364, 370, 371, 373, 374, 379, 380, 381, 382, 384, 386, 389, 400, 402, 403, 413, 414, 417, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 479, 487, 491, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 546, 547, 549, 550, 551, 552, 553, 562, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 594, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 641, 660, 671, 672, 673, 674, 675, 685, 777, 778, 782, 783, 807, 825, 827, 829, 830, 833, 837, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 879, 885, 886, 930, 932, 953, 962, 963, 964, 967, 974, 978, 984, 985, 988, 990, 994, 996, 1001, 1002, 1003, 1004, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "design": [0, 13, 79, 128, 151, 165, 166, 177, 246, 298, 304, 350, 358, 364, 370, 375, 381, 382, 383, 384, 385, 395, 402, 404, 405, 498, 511, 615, 616, 631, 648, 652, 659, 663, 668, 779, 797, 798, 816, 818, 954, 960, 961, 964, 965, 974, 984, 985, 988, 992, 1007, 1014], "mai": [0, 8, 19, 25, 39, 44, 46, 55, 70, 85, 94, 108, 118, 145, 152, 154, 156, 166, 172, 176, 185, 202, 222, 259, 261, 263, 264, 292, 303, 317, 328, 341, 342, 343, 352, 356, 357, 358, 362, 364, 365, 366, 367, 369, 370, 372, 374, 375, 378, 381, 383, 384, 389, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 416, 423, 424, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 442, 445, 448, 452, 455, 465, 466, 467, 470, 471, 472, 479, 491, 492, 498, 517, 518, 521, 523, 527, 530, 531, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 557, 564, 577, 580, 585, 593, 594, 600, 603, 617, 618, 620, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 656, 657, 659, 660, 661, 662, 664, 667, 669, 671, 672, 674, 675, 676, 678, 680, 688, 695, 698, 699, 701, 702, 704, 705, 706, 708, 720, 738, 745, 767, 768, 779, 781, 782, 783, 784, 793, 794, 795, 796, 798, 799, 802, 806, 809, 814, 815, 816, 817, 818, 820, 823, 824, 825, 827, 829, 831, 832, 833, 839, 840, 841, 844, 846, 856, 858, 859, 860, 861, 862, 864, 870, 873, 874, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 899, 921, 922, 932, 953, 954, 956, 958, 960, 961, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 985, 990, 996, 997, 1005, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "consid": [0, 4, 12, 13, 25, 39, 65, 70, 80, 94, 98, 118, 119, 121, 140, 144, 145, 161, 167, 196, 198, 256, 259, 263, 267, 276, 282, 283, 298, 310, 325, 333, 336, 341, 352, 356, 357, 358, 362, 369, 370, 372, 376, 378, 381, 383, 391, 395, 400, 401, 402, 403, 404, 405, 406, 407, 422, 428, 433, 440, 457, 491, 492, 504, 516, 532, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 568, 569, 571, 572, 574, 576, 590, 591, 603, 615, 616, 629, 635, 641, 642, 643, 645, 654, 662, 671, 672, 673, 675, 676, 677, 679, 683, 685, 688, 690, 692, 698, 708, 712, 716, 738, 768, 770, 774, 823, 824, 825, 827, 829, 831, 832, 833, 836, 838, 839, 844, 854, 855, 862, 876, 877, 886, 887, 889, 890, 891, 892, 948, 953, 959, 960, 961, 962, 964, 965, 967, 970, 971, 972, 974, 978, 979, 980, 985, 990, 997, 1008, 1009, 1013, 1017, 1018, 1020], "softwar": [0, 356, 367, 370, 378, 381, 383, 403, 610, 618, 641, 954, 988], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 358, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 487, 489, 490, 491, 492, 493, 495, 498, 502, 504, 506, 507, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 670, 671, 672, 673, 674, 675, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 700, 701, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 745, 746, 750, 751, 753, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 908, 909, 910, 911, 912, 913, 916, 918, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 933, 935, 938, 952, 953, 954, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 983, 984, 985, 988, 991, 993, 994, 995, 996, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "2013": [0, 172, 367, 399, 400, 519, 708, 738, 956, 964, 983, 1006, 1007], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 65, 66, 80, 112, 168, 188, 191, 205, 206, 261, 262, 263, 293, 302, 336, 367, 368, 376, 378, 392, 393, 395, 399, 400, 402, 405, 457, 499, 500, 501, 521, 523, 530, 538, 539, 540, 541, 548, 549, 573, 590, 591, 593, 594, 598, 602, 605, 606, 617, 631, 632, 641, 652, 655, 657, 663, 670, 672, 675, 676, 688, 698, 707, 708, 713, 738, 768, 818, 852, 889, 890, 891, 892, 953, 958, 960, 961, 964, 966, 967, 968, 972, 976, 978, 980, 998, 1008, 1013, 1017, 1018, 1019, 1020], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 403, 816, 966, 983], "languag": [0, 343, 375, 389, 400, 403, 978, 984, 985, 988, 991], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 58, 59, 61, 64, 67, 68, 70, 71, 73, 75, 78, 80, 89, 91, 93, 94, 97, 98, 103, 105, 106, 111, 112, 114, 117, 118, 119, 120, 121, 125, 126, 127, 129, 131, 134, 135, 136, 137, 142, 147, 148, 149, 150, 152, 155, 157, 158, 160, 163, 166, 167, 174, 175, 178, 179, 181, 185, 186, 188, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 225, 228, 229, 230, 233, 235, 238, 241, 242, 243, 244, 245, 247, 250, 254, 256, 258, 259, 260, 261, 264, 270, 274, 276, 279, 280, 282, 284, 285, 286, 287, 289, 293, 294, 297, 299, 300, 301, 305, 306, 308, 310, 312, 313, 317, 318, 320, 321, 324, 325, 327, 332, 333, 336, 341, 347, 348, 349, 350, 355, 357, 359, 362, 363, 364, 366, 367, 370, 372, 373, 376, 377, 378, 379, 382, 386, 389, 391, 392, 393, 394, 397, 400, 401, 402, 403, 406, 407, 408, 410, 412, 413, 414, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 503, 504, 505, 506, 507, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 598, 600, 601, 605, 606, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 693, 694, 696, 700, 701, 703, 707, 709, 710, 711, 712, 713, 716, 718, 719, 720, 722, 723, 724, 736, 737, 739, 743, 745, 746, 751, 765, 766, 767, 769, 770, 771, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 905, 906, 907, 917, 918, 927, 930, 935, 936, 938, 939, 940, 941, 942, 945, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 975, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 991, 992, 994, 995, 997, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "mine": [0, 256, 342, 365, 395, 406, 428, 494, 546, 703, 716, 722, 765, 960, 964, 970, 976], "108": [0, 1006], "122": [0, 8, 57, 67, 111, 153, 161, 167, 200, 230, 376, 965], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 56, 61, 64, 69, 73, 79, 80, 96, 97, 112, 114, 115, 116, 121, 122, 124, 126, 136, 137, 145, 148, 154, 161, 165, 167, 168, 169, 191, 197, 198, 210, 217, 218, 219, 225, 229, 241, 247, 254, 258, 262, 263, 271, 282, 283, 292, 294, 300, 302, 303, 304, 305, 319, 325, 327, 328, 341, 342, 348, 349, 356, 365, 367, 370, 375, 378, 379, 381, 382, 392, 393, 394, 395, 399, 401, 402, 403, 404, 405, 428, 430, 432, 433, 435, 452, 465, 466, 467, 536, 537, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 627, 653, 654, 662, 672, 675, 676, 708, 713, 724, 728, 738, 771, 772, 787, 789, 821, 822, 826, 855, 856, 860, 862, 883, 885, 886, 889, 890, 891, 892, 933, 953, 958, 959, 960, 961, 963, 964, 967, 968, 970, 972, 974, 976, 979, 980, 981, 984, 985, 990, 991, 993, 999, 1005, 1006, 1008, 1009, 1013, 1016, 1017, 1018, 1019, 1020], "qualiti": [0, 6, 24, 37, 46, 48, 49, 57, 97, 117, 166, 202, 250, 254, 263, 264, 265, 370, 378, 381, 383, 389, 390, 394, 395, 397, 400, 435, 445, 452, 457, 540, 541, 542, 543, 547, 548, 725, 793, 873, 874, 889, 890, 891, 892, 918, 959, 961, 969, 976, 980, 984, 985, 988, 994, 995, 1001], "png": [0, 32, 893], "svg": 0, "logo": [0, 399, 786], "avail": [0, 5, 11, 12, 13, 41, 55, 56, 97, 116, 119, 120, 145, 148, 153, 157, 165, 166, 167, 185, 196, 204, 214, 218, 234, 253, 254, 259, 260, 263, 281, 282, 283, 289, 303, 308, 309, 310, 311, 313, 319, 321, 352, 356, 364, 365, 367, 368, 369, 370, 371, 375, 379, 382, 383, 386, 389, 392, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 430, 433, 434, 435, 436, 452, 453, 454, 455, 456, 457, 458, 459, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 491, 518, 532, 538, 539, 540, 541, 542, 543, 547, 548, 571, 574, 576, 577, 593, 594, 615, 616, 640, 648, 653, 655, 656, 657, 659, 672, 679, 682, 714, 715, 779, 782, 783, 793, 803, 804, 809, 810, 812, 813, 814, 815, 827, 838, 839, 848, 857, 865, 869, 874, 925, 932, 954, 958, 961, 963, 964, 965, 966, 967, 970, 974, 977, 978, 979, 980, 983, 984, 985, 988, 990, 994, 999, 1001, 1005, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021], "doc": [0, 4, 8, 19, 341, 343, 357, 368, 370, 374, 375, 378, 383, 386, 388, 389, 403, 571, 572, 574, 760, 763, 772, 773, 804, 999, 1005, 1009, 1019], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 364, 367, 369, 370, 371, 373, 374, 376, 378, 379, 381, 382, 386, 389, 392, 396, 400, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 961, 974, 980, 984, 988, 998, 999, 1015, 1019], "directori": [0, 8, 278, 364, 368, 370, 372, 376, 378, 383, 386, 396, 425, 429, 433, 469, 482, 841, 842, 1019], "driven": [0, 984, 988], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 59, 71, 74, 77, 81, 84, 99, 102, 112, 114, 118, 121, 122, 128, 142, 145, 148, 153, 154, 167, 168, 177, 185, 196, 218, 221, 222, 225, 231, 256, 263, 270, 274, 276, 281, 293, 298, 310, 336, 341, 342, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 372, 376, 378, 381, 383, 389, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 424, 427, 430, 432, 434, 437, 442, 479, 491, 515, 534, 550, 564, 565, 566, 572, 589, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 613, 615, 616, 621, 626, 638, 639, 655, 670, 675, 678, 683, 745, 747, 779, 782, 783, 793, 804, 808, 809, 820, 838, 839, 844, 853, 854, 859, 883, 884, 886, 897, 933, 953, 954, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 974, 978, 979, 980, 990, 994, 997, 1014, 1015, 1017, 1018], "institut": [0, 367, 967], "privat": [0, 374, 383, 384, 897, 988, 1005, 1013, 1015, 1016, 1018, 1019], "grant": [0, 370], "assur": [0, 383, 777, 778, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "sustain": 0, "like": [0, 4, 12, 19, 52, 57, 59, 69, 88, 91, 97, 102, 104, 111, 115, 121, 124, 148, 154, 166, 176, 196, 247, 256, 259, 260, 263, 264, 270, 285, 295, 298, 303, 304, 308, 319, 328, 341, 342, 352, 356, 358, 362, 364, 365, 368, 369, 370, 372, 374, 377, 378, 379, 381, 382, 383, 389, 391, 393, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 498, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 562, 564, 565, 566, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 754, 755, 757, 758, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 897, 899, 906, 907, 915, 920, 927, 928, 932, 935, 936, 937, 949, 951, 953, 956, 958, 959, 960, 961, 964, 966, 967, 968, 970, 971, 974, 979, 980, 984, 985, 987, 988, 990, 997, 999, 1002, 1005, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1019, 1020], "thank": [0, 4, 17, 25, 85, 168, 172, 196, 265, 341, 342, 369, 378, 988, 1005, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "funder": 0, "member": [0, 341, 342, 365, 370, 373, 384, 395, 410, 426, 431, 434, 436, 475, 538, 539, 546, 564, 641, 642, 649, 651, 659, 660, 661, 687, 688, 698, 700, 713, 718, 719, 739, 768, 775, 779, 881, 960, 967, 990, 1005, 1017, 1020], "consortium": [0, 988], "foundat": [0, 128, 370, 393, 967], "face": [0, 3, 15, 36, 53, 67, 93, 97, 106, 116, 163, 224, 239, 363, 370, 374, 395, 400, 402, 404, 432, 455, 476, 477, 478, 504, 515, 516, 520, 522, 523, 524, 541, 567, 640, 656, 680, 696, 793, 807, 824, 861, 886, 904, 967, 980, 981, 982, 993, 998, 1001, 1005, 1013], "2022": [0, 357, 402, 688, 974, 1019, 1020], "microsoft": [0, 12, 368, 371, 386], "m\u00fcller": [0, 31, 299, 300, 384, 400, 518, 847, 968, 974, 978, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019], "2020": [0, 365, 1015, 1016, 1017, 1018], "quansight": 0, "lab": [0, 365, 451, 519, 879, 988, 1016], "2021": [0, 368, 370, 386, 654, 1017, 1018], "columbia": 0, "univers": [0, 156, 341, 365, 367, 373, 395, 400, 403, 573, 770, 816, 820, 876, 960, 962, 964, 966], "2016": [0, 222, 364, 395, 953, 1010, 1011], "sydnei": 0, "2017": [0, 256, 364, 393, 395, 406, 428, 964, 1011, 1012], "receiv": [0, 19, 134, 163, 249, 253, 272, 343, 352, 370, 372, 378, 383, 399, 402, 487, 641, 685, 689, 691, 709, 764, 770, 771, 798, 807, 809, 810, 848, 886, 965, 968, 969, 978, 1015, 1016], "improv": [0, 4, 24, 25, 33, 77, 78, 81, 99, 105, 109, 110, 117, 119, 120, 121, 123, 128, 141, 161, 166, 172, 182, 196, 204, 214, 257, 259, 276, 295, 303, 331, 342, 352, 357, 368, 373, 375, 376, 378, 379, 381, 383, 384, 389, 394, 400, 402, 404, 432, 433, 514, 515, 517, 520, 521, 522, 524, 525, 526, 529, 537, 540, 541, 542, 543, 544, 545, 547, 548, 593, 594, 626, 635, 647, 649, 650, 651, 655, 656, 657, 658, 659, 661, 668, 670, 675, 711, 712, 766, 769, 770, 830, 838, 839, 855, 857, 869, 889, 890, 892, 918, 958, 960, 961, 964, 967, 968, 978, 979, 980, 983, 984, 985, 988, 997, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 66, 105, 125, 130, 165, 166, 181, 191, 196, 197, 198, 214, 220, 229, 234, 253, 256, 259, 263, 265, 266, 298, 309, 310, 341, 350, 356, 365, 369, 370, 372, 377, 379, 383, 384, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 407, 422, 423, 426, 430, 432, 447, 450, 477, 481, 483, 487, 491, 492, 493, 508, 510, 512, 513, 514, 516, 518, 519, 520, 525, 528, 529, 531, 532, 533, 544, 545, 546, 575, 576, 577, 578, 579, 581, 582, 583, 589, 593, 594, 603, 615, 626, 629, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 652, 655, 656, 657, 658, 660, 663, 664, 665, 666, 667, 670, 673, 681, 683, 685, 690, 692, 695, 696, 698, 701, 703, 706, 709, 711, 712, 713, 717, 718, 720, 721, 722, 723, 724, 725, 726, 734, 736, 740, 748, 764, 765, 766, 769, 770, 771, 777, 778, 782, 783, 804, 821, 822, 827, 844, 845, 848, 854, 857, 860, 865, 869, 873, 874, 876, 877, 881, 882, 885, 886, 887, 898, 916, 918, 929, 931, 955, 956, 960, 962, 964, 965, 967, 968, 969, 971, 974, 979, 980, 995, 997, 999, 1006, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 53, 57, 71, 77, 79, 81, 94, 97, 98, 104, 112, 114, 117, 121, 128, 145, 153, 154, 155, 160, 161, 166, 167, 168, 176, 184, 185, 193, 196, 210, 213, 214, 217, 218, 225, 230, 251, 252, 254, 256, 257, 259, 262, 263, 276, 279, 282, 283, 284, 286, 287, 289, 298, 302, 303, 305, 308, 324, 328, 336, 341, 342, 343, 350, 352, 356, 357, 358, 363, 365, 367, 368, 370, 372, 374, 375, 376, 378, 379, 381, 382, 383, 386, 389, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 435, 442, 445, 450, 452, 457, 461, 468, 470, 479, 491, 498, 507, 516, 518, 519, 521, 523, 524, 532, 533, 536, 537, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 572, 579, 585, 589, 590, 591, 594, 597, 598, 602, 603, 605, 606, 610, 613, 614, 615, 616, 624, 625, 626, 629, 630, 633, 635, 636, 637, 638, 641, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 657, 659, 660, 661, 664, 665, 666, 667, 670, 672, 674, 675, 676, 678, 679, 680, 681, 683, 685, 687, 691, 692, 693, 699, 705, 716, 724, 725, 729, 740, 741, 744, 747, 763, 765, 779, 781, 782, 783, 785, 791, 792, 793, 805, 808, 817, 818, 823, 824, 825, 827, 830, 831, 832, 833, 837, 838, 839, 843, 844, 845, 849, 850, 851, 855, 858, 860, 870, 873, 874, 878, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 905, 918, 932, 935, 938, 940, 941, 942, 943, 944, 945, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 977, 978, 979, 980, 984, 988, 990, 996, 997, 998, 999, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 59, 80, 94, 111, 115, 116, 126, 128, 148, 154, 166, 167, 175, 182, 184, 185, 188, 197, 205, 218, 222, 226, 227, 246, 256, 257, 258, 262, 286, 289, 294, 298, 302, 308, 309, 311, 313, 326, 333, 341, 342, 346, 347, 352, 356, 358, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 376, 378, 379, 381, 382, 383, 385, 386, 389, 391, 392, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 415, 421, 424, 426, 427, 428, 430, 432, 433, 435, 442, 443, 476, 477, 479, 481, 484, 515, 516, 517, 521, 523, 530, 534, 535, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 571, 574, 576, 577, 584, 588, 594, 610, 615, 616, 617, 626, 629, 630, 635, 639, 640, 641, 642, 643, 644, 645, 646, 649, 651, 654, 656, 659, 660, 661, 664, 677, 682, 694, 717, 723, 746, 756, 760, 770, 772, 774, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 798, 799, 800, 810, 812, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 829, 831, 832, 833, 851, 852, 856, 858, 877, 881, 882, 885, 886, 889, 890, 891, 892, 896, 907, 912, 940, 941, 942, 953, 954, 956, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 977, 978, 979, 980, 981, 984, 985, 988, 990, 994, 997, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "2012": [0, 80, 393, 402, 538, 539, 546, 622, 725, 953, 957, 964, 983, 1005], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 381, 383, 384, 386, 391, 392, 393, 394, 395, 397, 398, 400, 402, 403, 405, 406, 421, 425, 427, 428, 429, 430, 433, 435, 438, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 455, 479, 482, 484, 502, 506, 517, 519, 521, 523, 530, 545, 550, 551, 552, 553, 573, 593, 602, 610, 611, 612, 613, 617, 622, 623, 626, 629, 633, 635, 637, 643, 645, 647, 649, 650, 656, 659, 660, 661, 668, 669, 673, 675, 677, 684, 774, 777, 778, 779, 781, 782, 783, 784, 786, 788, 793, 794, 795, 798, 800, 802, 803, 804, 805, 806, 809, 811, 816, 817, 818, 819, 820, 821, 822, 829, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 845, 846, 848, 851, 854, 855, 856, 860, 865, 873, 874, 878, 879, 883, 886, 887, 895, 920, 930, 953, 954, 956, 957, 960, 961, 963, 964, 965, 966, 967, 968, 969, 971, 972, 974, 976, 977, 978, 979, 980, 984, 988, 990, 995, 997, 998, 999, 1005, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "host": [0, 341, 365, 370, 374, 378, 379, 874, 932, 999, 1021], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 56, 65, 68, 71, 84, 85, 96, 97, 99, 102, 112, 114, 117, 118, 122, 124, 130, 140, 160, 161, 163, 165, 166, 167, 168, 172, 175, 189, 196, 214, 217, 218, 219, 221, 225, 226, 227, 229, 231, 235, 238, 243, 246, 251, 253, 256, 257, 258, 265, 266, 281, 282, 283, 297, 298, 302, 303, 305, 306, 308, 309, 311, 316, 328, 335, 338, 341, 342, 346, 350, 352, 356, 362, 363, 365, 366, 367, 370, 372, 374, 375, 376, 378, 379, 382, 383, 384, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 428, 431, 433, 435, 440, 447, 452, 471, 479, 480, 486, 517, 518, 524, 532, 534, 535, 543, 544, 545, 550, 551, 564, 571, 572, 574, 580, 585, 593, 594, 595, 596, 603, 610, 611, 613, 622, 626, 635, 641, 642, 654, 655, 656, 657, 658, 659, 662, 670, 675, 679, 682, 687, 701, 745, 756, 760, 767, 772, 779, 782, 783, 784, 785, 786, 788, 793, 796, 798, 801, 802, 803, 804, 805, 806, 808, 810, 828, 836, 841, 842, 853, 854, 855, 857, 861, 862, 869, 881, 882, 883, 884, 885, 886, 887, 912, 953, 954, 956, 957, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 977, 978, 979, 982, 985, 987, 988, 990, 994, 997, 998, 1001, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021], "event": [0, 4, 16, 196, 214, 259, 393, 395, 571, 572, 619, 816, 906, 960, 965, 966, 984, 988, 1011], "pari": [0, 367, 396, 449, 746, 849, 975, 1019], "saclai": 0, "center": [0, 4, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 58, 59, 60, 62, 63, 80, 90, 99, 101, 104, 119, 120, 121, 122, 145, 161, 167, 177, 188, 190, 196, 197, 207, 208, 220, 221, 225, 226, 241, 244, 245, 251, 257, 267, 281, 284, 286, 293, 298, 300, 301, 312, 318, 326, 328, 329, 330, 335, 342, 343, 365, 366, 367, 375, 394, 395, 397, 398, 400, 401, 402, 408, 424, 426, 427, 430, 431, 432, 435, 437, 442, 443, 444, 445, 446, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 484, 495, 507, 517, 518, 524, 527, 533, 589, 592, 593, 594, 615, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 661, 673, 677, 777, 846, 847, 850, 859, 861, 871, 872, 881, 882, 958, 960, 961, 963, 971, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019], "scienc": [0, 38, 79, 156, 364, 367, 381, 395, 424, 437, 521, 523, 530, 671, 672, 676, 828, 954, 956, 960, 961, 964, 967, 976, 985, 988, 993, 1013], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 56, 57, 59, 60, 63, 65, 70, 80, 88, 90, 94, 97, 99, 100, 104, 109, 114, 121, 124, 128, 131, 144, 145, 148, 155, 156, 160, 165, 166, 167, 168, 169, 172, 175, 176, 185, 186, 188, 189, 190, 192, 196, 198, 200, 205, 206, 211, 214, 219, 225, 232, 243, 246, 252, 253, 254, 256, 257, 259, 260, 263, 264, 265, 266, 274, 276, 281, 295, 299, 300, 303, 304, 308, 310, 311, 312, 319, 327, 328, 337, 341, 342, 343, 346, 350, 352, 356, 357, 358, 364, 365, 366, 367, 369, 370, 372, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 389, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 425, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 443, 445, 447, 452, 457, 470, 471, 473, 474, 475, 476, 477, 478, 479, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 497, 517, 522, 523, 526, 530, 534, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 552, 564, 566, 567, 571, 572, 573, 574, 593, 594, 598, 599, 603, 610, 613, 615, 616, 617, 618, 626, 630, 631, 632, 633, 637, 640, 641, 642, 644, 649, 651, 652, 654, 656, 657, 658, 659, 661, 663, 671, 675, 678, 682, 686, 692, 703, 716, 732, 733, 736, 745, 753, 756, 760, 761, 762, 763, 765, 770, 772, 773, 776, 777, 778, 779, 782, 783, 785, 786, 787, 789, 791, 793, 797, 798, 802, 804, 805, 807, 808, 809, 810, 811, 813, 814, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 837, 841, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 860, 861, 862, 865, 867, 881, 883, 884, 885, 886, 887, 889, 890, 891, 892, 897, 907, 910, 920, 935, 953, 954, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 978, 979, 980, 981, 983, 984, 988, 990, 994, 996, 997, 998, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "2014": [0, 52, 364, 400, 402, 405, 513, 590, 591, 605, 606, 641, 675, 838, 839, 917, 918, 961, 968, 988, 1008], "2015": [0, 167, 364, 405, 691, 704, 705, 706, 838, 839, 964, 971, 988, 1009, 1010], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 58, 59, 64, 65, 69, 70, 84, 91, 94, 97, 104, 112, 121, 126, 127, 149, 151, 152, 153, 154, 165, 166, 167, 176, 180, 191, 196, 199, 203, 204, 208, 210, 212, 214, 217, 221, 222, 228, 229, 231, 238, 251, 256, 258, 259, 269, 276, 298, 302, 310, 312, 317, 319, 321, 326, 335, 336, 342, 365, 367, 370, 375, 399, 402, 403, 404, 407, 426, 456, 483, 487, 506, 516, 522, 527, 536, 537, 552, 576, 577, 598, 600, 641, 642, 649, 651, 653, 659, 660, 661, 675, 696, 779, 793, 810, 830, 881, 890, 959, 960, 964, 965, 967, 970, 974, 1005], "2018": [0, 196, 214, 403, 433, 953, 964, 982, 988, 1012, 1013], "nyu": [0, 119, 178, 830], "moor": [0, 717, 964, 988], "environ": [0, 12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350, 356, 365, 367, 368, 370, 376, 378, 381, 386, 389, 396, 482, 984, 985, 988, 1012, 1013], "student": [0, 96, 256, 961, 985, 988], "t\u00e9l\u00e9com": [0, 982], "paristech": [0, 24, 25, 42, 225, 982], "rv": [0, 119, 260, 298, 783, 791, 793, 953, 1005, 1006, 1009, 1010, 1011, 1012, 1013], "thierri": [0, 241, 243, 988, 1011, 1012, 1019], "guillemot": [0, 241, 243, 1011, 1012], "labex": 0, "digicosm": 0, "goix": [0, 1009, 1011, 1012, 1013, 1014], "mathurin": [0, 1016, 1018, 1019], "massia": [0, 1016, 1018, 1019], "2019": [0, 167, 368, 395, 435, 445, 675, 961, 971, 974, 1013, 1014, 1015], "dure": [0, 4, 5, 12, 50, 57, 71, 74, 85, 99, 113, 118, 125, 142, 148, 153, 166, 167, 169, 185, 197, 204, 254, 258, 276, 310, 311, 356, 358, 368, 370, 372, 375, 383, 384, 395, 396, 400, 402, 403, 405, 406, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 442, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 596, 597, 598, 600, 602, 603, 605, 606, 608, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 771, 777, 778, 779, 782, 783, 793, 802, 803, 804, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 869, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 953, 954, 956, 960, 961, 967, 974, 976, 994, 999, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "phd": [0, 395, 402, 985, 988], "chan": [0, 819, 861], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 56, 57, 59, 63, 67, 80, 122, 129, 130, 131, 149, 154, 163, 166, 176, 189, 211, 217, 218, 222, 240, 242, 243, 248, 256, 276, 310, 318, 328, 342, 352, 357, 365, 370, 372, 378, 379, 381, 383, 395, 400, 402, 404, 405, 407, 426, 427, 430, 431, 432, 433, 434, 435, 436, 442, 443, 444, 445, 461, 495, 498, 514, 515, 516, 520, 521, 523, 526, 528, 529, 530, 531, 536, 537, 542, 543, 576, 590, 591, 593, 594, 602, 603, 610, 623, 628, 629, 630, 631, 635, 636, 641, 643, 644, 645, 646, 649, 650, 651, 652, 654, 659, 660, 661, 663, 664, 667, 673, 674, 675, 677, 678, 777, 778, 811, 830, 837, 838, 839, 877, 904, 917, 918, 933, 938, 939, 956, 960, 961, 968, 969, 970, 978, 980, 984, 996, 998, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "were": [0, 4, 32, 69, 70, 73, 79, 80, 118, 121, 142, 145, 153, 161, 196, 197, 226, 265, 267, 294, 295, 303, 309, 310, 312, 313, 319, 341, 343, 350, 352, 364, 365, 367, 370, 371, 374, 381, 383, 392, 396, 402, 403, 447, 450, 451, 479, 544, 545, 571, 574, 585, 782, 783, 798, 805, 878, 879, 915, 953, 964, 965, 980, 987, 998, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "through": [0, 7, 114, 118, 156, 166, 217, 230, 251, 256, 259, 281, 302, 303, 326, 333, 343, 350, 367, 368, 370, 372, 377, 379, 383, 384, 386, 395, 398, 400, 402, 404, 405, 447, 450, 455, 518, 540, 541, 544, 547, 548, 549, 564, 576, 577, 580, 630, 634, 636, 638, 641, 642, 644, 646, 648, 651, 659, 660, 671, 674, 703, 785, 857, 869, 873, 874, 889, 890, 891, 892, 924, 953, 954, 961, 964, 966, 967, 968, 970, 972, 974, 978, 979, 980, 988, 990, 997, 999, 1005, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020], "program": [0, 50, 342, 352, 357, 358, 367, 368, 370, 376, 381, 491, 618, 653, 871, 872, 960, 979, 980, 984, 985, 1005, 1007], "immanuel": [0, 1005, 1006, 1010], "bayer": [0, 1005, 1006, 1010], "kemal": [0, 20, 21, 1007, 1008], "eren": [0, 20, 21, 1007, 1008], "tr\u00e9segni": [0, 1007], "hamzeh": [0, 1008, 1009], "alsalhi": [0, 1008, 1009], "issam": [0, 292, 1011], "laradji": [0, 292, 1011], "maheshakya": [0, 1008, 1009, 1010], "wijewardena": [0, 1008, 1009, 1010], "xue": [0, 1009, 1010, 1011, 1013, 1014, 1017], "nelson": [0, 1011, 1012, 1017], "yenchen": [0, 1011], "lin": [0, 517, 641, 979, 1010, 1011, 1012, 1013], "neurodebian": 0, "debian": [0, 356, 368, 376], "packag": [0, 27, 46, 53, 84, 94, 152, 154, 156, 157, 160, 175, 242, 276, 357, 363, 364, 367, 368, 370, 371, 372, 374, 376, 379, 381, 383, 386, 397, 402, 403, 435, 461, 629, 630, 932, 954, 960, 963, 967, 974, 980, 988, 993, 1005, 1011, 1013, 1014, 1015], "dr": [0, 367, 395, 1019], "jame": [0, 367, 399, 811, 965, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "haxbi": 0, "dartmouth": 0, "colleg": [0, 165], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 57, 61, 66, 70, 73, 77, 79, 80, 85, 89, 94, 110, 111, 121, 124, 125, 128, 129, 141, 148, 150, 153, 154, 155, 156, 157, 160, 161, 163, 166, 167, 168, 169, 172, 175, 177, 179, 184, 185, 186, 190, 191, 196, 197, 204, 205, 210, 213, 214, 217, 219, 225, 229, 234, 242, 243, 244, 250, 251, 256, 257, 258, 259, 262, 264, 279, 282, 287, 293, 294, 298, 303, 309, 310, 311, 312, 313, 324, 325, 327, 328, 336, 338, 341, 342, 343, 350, 352, 356, 357, 358, 363, 364, 365, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 416, 427, 430, 432, 434, 436, 442, 446, 448, 465, 466, 467, 482, 491, 492, 498, 506, 507, 517, 519, 524, 531, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 553, 555, 557, 571, 589, 592, 594, 615, 616, 618, 622, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 665, 666, 672, 675, 676, 680, 681, 683, 684, 685, 690, 691, 698, 703, 708, 709, 720, 721, 722, 728, 736, 738, 739, 745, 764, 766, 769, 770, 771, 774, 777, 797, 798, 814, 815, 816, 817, 818, 819, 820, 824, 832, 839, 841, 848, 882, 884, 887, 889, 890, 891, 892, 901, 902, 932, 953, 954, 956, 959, 960, 961, 963, 964, 965, 966, 967, 968, 970, 971, 974, 977, 978, 979, 980, 983, 984, 985, 987, 988, 990, 995, 997, 998, 999, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "particip": [0, 369, 370, 384, 988], "could": [0, 4, 9, 13, 27, 37, 42, 53, 70, 71, 94, 97, 110, 111, 118, 121, 142, 148, 153, 161, 165, 166, 167, 196, 197, 205, 214, 221, 230, 231, 250, 256, 279, 284, 287, 311, 324, 325, 341, 346, 358, 370, 376, 378, 383, 386, 389, 393, 399, 402, 403, 407, 457, 516, 521, 590, 591, 612, 654, 781, 786, 788, 953, 954, 960, 961, 971, 972, 974, 979, 985, 998, 1002, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "attend": 0, "psf": [0, 370], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 70, 77, 94, 112, 125, 148, 166, 167, 168, 196, 200, 213, 214, 230, 256, 257, 258, 259, 261, 262, 263, 265, 266, 274, 308, 328, 336, 341, 342, 352, 356, 357, 358, 363, 364, 365, 368, 370, 371, 372, 373, 374, 376, 378, 381, 382, 383, 386, 389, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 405, 407, 409, 416, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 479, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 675, 692, 704, 705, 706, 710, 738, 760, 765, 767, 770, 777, 778, 779, 781, 782, 783, 785, 791, 792, 793, 797, 798, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 899, 901, 902, 905, 910, 932, 935, 938, 953, 956, 959, 960, 961, 963, 964, 965, 966, 967, 972, 974, 979, 980, 985, 988, 990, 997, 998, 999, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021], "tinyclu": 0, "french": [0, 214, 304], "associ": [0, 11, 24, 25, 79, 148, 165, 166, 244, 304, 316, 318, 341, 378, 395, 397, 399, 400, 402, 403, 432, 452, 453, 454, 455, 456, 457, 458, 459, 476, 477, 478, 507, 540, 544, 547, 588, 589, 613, 628, 641, 642, 649, 651, 657, 658, 659, 672, 678, 682, 713, 721, 804, 824, 832, 846, 858, 870, 878, 887, 889, 891, 907, 963, 964, 967, 974, 977, 980, 988, 998, 1005, 1017], "fond": [0, 988], "de": [0, 12, 24, 25, 26, 27, 73, 113, 128, 148, 149, 151, 152, 153, 154, 155, 157, 187, 230, 231, 304, 318, 336, 367, 618, 671, 746, 960, 961, 985, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 61, 65, 71, 116, 121, 128, 142, 145, 153, 160, 167, 168, 185, 196, 197, 198, 214, 218, 230, 250, 253, 256, 257, 259, 265, 328, 336, 342, 350, 356, 365, 367, 370, 375, 376, 378, 381, 384, 395, 397, 400, 403, 405, 476, 477, 483, 487, 493, 629, 630, 881, 954, 960, 961, 964, 969, 970, 971, 985, 988, 995, 997, 998, 1005], "our": [0, 4, 5, 7, 11, 12, 42, 53, 55, 69, 70, 79, 80, 85, 94, 95, 108, 110, 115, 118, 121, 122, 140, 145, 148, 153, 155, 165, 166, 167, 168, 169, 196, 214, 219, 221, 250, 256, 259, 262, 263, 294, 298, 304, 309, 311, 321, 325, 331, 332, 333, 336, 341, 342, 343, 352, 357, 369, 374, 375, 378, 381, 382, 383, 384, 395, 399, 402, 403, 406, 428, 433, 546, 627, 675, 691, 703, 708, 720, 738, 823, 824, 825, 827, 829, 831, 832, 833, 953, 954, 960, 961, 964, 970, 974, 977, 978, 979, 985, 988, 990, 997, 998, 999, 1012, 1013, 1015, 1016, 1019, 1020], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 362, 367, 368, 371, 372, 374, 378, 381, 382, 383, 384, 386, 389, 392, 393, 395, 396, 398, 399, 400, 404, 405, 421, 484, 518, 522, 524, 526, 529, 542, 543, 594, 599, 604, 607, 621, 622, 623, 624, 639, 649, 651, 656, 659, 670, 672, 675, 676, 682, 692, 779, 801, 809, 810, 811, 813, 819, 827, 838, 842, 861, 953, 958, 960, 961, 963, 964, 965, 971, 972, 978, 979, 980, 985, 988, 990, 1001, 1005, 1009, 1010, 1013, 1017, 1018, 1019, 1020, 1021], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 43, 48, 52, 53, 54, 59, 63, 74, 81, 90, 94, 96, 97, 109, 114, 116, 117, 121, 130, 131, 145, 153, 154, 156, 163, 165, 166, 167, 175, 182, 188, 189, 190, 196, 197, 198, 199, 205, 207, 211, 213, 214, 217, 218, 225, 231, 235, 238, 242, 244, 246, 254, 257, 258, 259, 260, 262, 263, 264, 266, 268, 274, 276, 281, 294, 298, 299, 303, 308, 309, 310, 311, 313, 316, 318, 319, 320, 325, 328, 333, 337, 341, 342, 343, 347, 350, 352, 356, 357, 358, 363, 365, 366, 367, 368, 370, 372, 374, 375, 376, 378, 379, 381, 382, 383, 384, 391, 392, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 416, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 491, 492, 498, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 683, 684, 685, 688, 692, 696, 697, 698, 699, 700, 701, 703, 704, 705, 708, 710, 711, 712, 714, 715, 717, 718, 719, 720, 727, 728, 730, 732, 733, 735, 738, 743, 751, 756, 760, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 788, 789, 791, 793, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 907, 909, 910, 911, 912, 923, 927, 932, 939, 948, 953, 954, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 969, 971, 974, 977, 978, 979, 980, 984, 985, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "handl": [0, 4, 70, 118, 124, 128, 172, 231, 258, 263, 265, 276, 283, 304, 308, 341, 343, 356, 362, 364, 368, 370, 371, 372, 379, 381, 383, 403, 479, 527, 560, 564, 565, 568, 569, 571, 572, 574, 593, 618, 629, 630, 635, 641, 642, 643, 644, 645, 651, 658, 659, 661, 664, 703, 770, 845, 854, 855, 881, 886, 893, 919, 961, 964, 965, 966, 967, 970, 972, 979, 980, 984, 985, 988, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 56, 61, 70, 74, 79, 81, 95, 96, 97, 99, 108, 111, 118, 125, 126, 128, 141, 142, 144, 152, 154, 161, 163, 166, 167, 168, 174, 175, 182, 189, 190, 195, 197, 198, 200, 202, 211, 212, 214, 215, 220, 221, 226, 227, 228, 229, 231, 241, 243, 247, 249, 250, 256, 265, 272, 276, 280, 295, 298, 300, 302, 303, 305, 309, 310, 311, 312, 320, 323, 325, 330, 331, 336, 337, 339, 341, 342, 343, 350, 352, 356, 357, 362, 365, 366, 370, 371, 372, 375, 376, 378, 379, 381, 383, 384, 393, 394, 395, 396, 399, 401, 402, 403, 404, 405, 407, 421, 425, 429, 433, 435, 439, 445, 446, 447, 448, 450, 451, 471, 479, 480, 486, 487, 491, 509, 515, 518, 519, 521, 523, 527, 530, 532, 534, 535, 536, 540, 541, 542, 543, 544, 545, 547, 548, 549, 555, 571, 572, 574, 575, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 618, 621, 626, 633, 635, 640, 641, 642, 643, 647, 648, 649, 651, 652, 655, 659, 660, 661, 668, 669, 670, 671, 672, 673, 674, 675, 677, 681, 682, 685, 689, 690, 695, 698, 700, 702, 703, 708, 709, 710, 717, 719, 721, 722, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 740, 741, 764, 767, 770, 771, 774, 777, 778, 779, 780, 784, 786, 787, 788, 789, 791, 797, 803, 807, 810, 829, 831, 832, 833, 836, 841, 842, 844, 845, 846, 849, 853, 854, 855, 856, 857, 858, 860, 861, 868, 869, 870, 871, 872, 874, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 901, 902, 916, 918, 922, 924, 927, 953, 954, 955, 956, 957, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 975, 976, 977, 978, 979, 980, 985, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "profit": 0, "organ": [0, 11, 69, 79, 341, 364, 369, 370, 384, 829, 984], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 43, 44, 46, 49, 53, 55, 56, 57, 64, 66, 69, 70, 71, 74, 77, 79, 80, 85, 91, 96, 98, 99, 100, 105, 112, 113, 114, 118, 119, 120, 121, 124, 126, 127, 128, 129, 130, 131, 134, 140, 142, 144, 145, 148, 149, 153, 154, 155, 160, 161, 165, 166, 167, 169, 172, 175, 176, 185, 189, 196, 197, 198, 202, 204, 210, 212, 213, 214, 217, 218, 219, 221, 225, 226, 229, 230, 231, 232, 234, 235, 241, 242, 246, 247, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 274, 276, 281, 282, 283, 293, 298, 300, 301, 302, 303, 304, 305, 308, 310, 311, 312, 313, 316, 318, 319, 320, 328, 338, 341, 342, 343, 346, 350, 352, 356, 357, 358, 362, 364, 365, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 443, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 506, 514, 515, 516, 517, 520, 521, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 562, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 593, 594, 595, 596, 597, 598, 600, 602, 605, 610, 611, 612, 613, 615, 616, 617, 623, 625, 626, 627, 630, 631, 632, 635, 637, 638, 639, 641, 642, 644, 649, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 663, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 692, 699, 700, 702, 703, 705, 707, 708, 716, 717, 718, 719, 725, 728, 738, 740, 760, 761, 762, 763, 764, 765, 771, 777, 778, 779, 782, 783, 784, 785, 787, 789, 793, 797, 798, 799, 800, 801, 802, 803, 805, 806, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 838, 841, 845, 848, 852, 854, 855, 856, 859, 860, 861, 862, 863, 865, 873, 874, 876, 877, 878, 881, 883, 886, 887, 889, 890, 891, 892, 893, 897, 910, 913, 917, 918, 920, 932, 933, 936, 939, 945, 948, 953, 954, 955, 956, 957, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 983, 984, 985, 988, 990, 992, 994, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "manag": [0, 85, 238, 355, 364, 368, 371, 372, 374, 378, 381, 383, 384, 402, 433, 451, 609, 879, 958, 980, 985, 988, 999, 1001, 1018], "board": 0, "scipi": [0, 6, 13, 17, 19, 34, 41, 46, 47, 53, 54, 77, 78, 81, 95, 97, 100, 102, 120, 148, 166, 169, 182, 186, 198, 242, 246, 247, 253, 256, 264, 268, 276, 281, 286, 295, 309, 310, 316, 317, 356, 364, 365, 368, 370, 372, 376, 379, 381, 382, 383, 386, 388, 395, 400, 403, 433, 434, 435, 436, 440, 445, 446, 479, 486, 491, 515, 517, 518, 524, 527, 564, 565, 568, 569, 571, 572, 593, 594, 631, 632, 636, 640, 641, 642, 646, 649, 651, 652, 653, 655, 657, 659, 660, 661, 663, 667, 670, 674, 675, 678, 682, 742, 745, 760, 761, 762, 763, 772, 773, 783, 791, 793, 807, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 844, 853, 859, 860, 861, 864, 868, 871, 872, 881, 883, 884, 886, 887, 920, 935, 938, 953, 954, 960, 962, 965, 967, 968, 974, 978, 979, 983, 985, 993, 995, 998, 999, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "mission": [0, 342, 988], "foster": [0, 1013], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 56, 57, 59, 60, 69, 71, 78, 79, 80, 81, 95, 104, 108, 112, 115, 116, 120, 121, 122, 123, 144, 148, 153, 155, 156, 160, 166, 167, 168, 169, 172, 176, 177, 181, 182, 183, 184, 185, 196, 198, 204, 210, 213, 214, 218, 221, 226, 228, 229, 231, 234, 235, 237, 252, 254, 256, 257, 258, 259, 263, 265, 267, 276, 278, 280, 282, 283, 285, 286, 289, 298, 308, 312, 313, 317, 319, 328, 336, 341, 342, 343, 350, 357, 358, 359, 364, 365, 367, 370, 375, 376, 377, 379, 381, 382, 383, 385, 386, 389, 390, 392, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 440, 442, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 499, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 565, 568, 569, 572, 573, 574, 576, 577, 586, 587, 588, 589, 592, 593, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 707, 708, 709, 711, 712, 713, 716, 718, 720, 721, 722, 724, 725, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 846, 847, 850, 851, 856, 857, 858, 859, 860, 861, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 915, 916, 917, 918, 929, 930, 937, 939, 945, 953, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 974, 976, 977, 978, 979, 980, 984, 985, 988, 994, 995, 998, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "particular": [0, 4, 11, 13, 37, 39, 40, 59, 70, 77, 91, 99, 103, 118, 121, 124, 152, 160, 166, 167, 196, 198, 204, 230, 234, 253, 257, 259, 265, 276, 285, 289, 298, 308, 309, 312, 342, 343, 352, 356, 364, 365, 368, 369, 370, 372, 374, 375, 376, 378, 379, 382, 383, 386, 395, 399, 400, 402, 403, 404, 405, 452, 456, 479, 527, 546, 592, 636, 641, 646, 655, 657, 667, 670, 695, 710, 767, 813, 828, 900, 902, 954, 956, 958, 960, 964, 967, 968, 969, 970, 972, 974, 980, 985, 988, 998, 1005, 1008, 1012, 1013, 1014, 1016, 1018, 1019, 1020], "As": [0, 4, 7, 25, 27, 30, 40, 43, 53, 56, 57, 65, 81, 85, 99, 109, 110, 115, 118, 120, 122, 127, 140, 148, 153, 161, 166, 168, 172, 175, 178, 185, 187, 196, 200, 204, 214, 222, 244, 251, 253, 254, 256, 257, 259, 269, 274, 281, 299, 311, 319, 328, 342, 343, 346, 348, 349, 352, 356, 357, 365, 368, 369, 370, 372, 374, 375, 382, 383, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 476, 537, 545, 549, 602, 615, 638, 639, 655, 657, 670, 717, 740, 746, 823, 824, 825, 827, 829, 860, 953, 958, 960, 961, 963, 964, 965, 967, 971, 974, 978, 979, 980, 985, 988, 990, 994, 997, 998, 999, 1005, 1011, 1016, 1021], "fiscal": 0, "home": [0, 8, 12, 34, 50, 111, 128, 188, 205, 313, 333, 347, 365, 368, 378, 386, 394, 469, 482, 662, 988], "ensur": [0, 41, 56, 81, 91, 115, 169, 196, 218, 251, 259, 294, 350, 352, 356, 357, 370, 372, 374, 375, 376, 384, 386, 393, 395, 396, 399, 407, 452, 516, 517, 524, 594, 610, 679, 688, 764, 771, 802, 874, 901, 902, 918, 924, 930, 960, 961, 964, 974, 980, 994, 1007, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "monei": [0, 214, 988], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 55, 59, 66, 69, 70, 71, 77, 79, 80, 85, 94, 97, 98, 99, 102, 112, 117, 118, 119, 121, 124, 128, 129, 130, 142, 148, 160, 165, 166, 167, 168, 169, 175, 176, 185, 187, 189, 193, 196, 198, 201, 212, 225, 226, 227, 231, 238, 242, 244, 252, 255, 256, 257, 258, 259, 263, 265, 266, 276, 278, 282, 283, 284, 298, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 318, 319, 321, 328, 331, 332, 336, 341, 342, 343, 346, 352, 356, 357, 358, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 389, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 411, 416, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 467, 468, 472, 473, 474, 475, 479, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 498, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 561, 564, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 684, 685, 687, 688, 690, 691, 695, 696, 699, 709, 710, 711, 712, 714, 716, 717, 720, 724, 728, 730, 733, 736, 737, 739, 743, 745, 749, 750, 751, 753, 756, 760, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 777, 778, 779, 782, 783, 784, 785, 793, 797, 798, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 868, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 900, 901, 902, 908, 912, 916, 917, 918, 919, 921, 922, 925, 932, 933, 953, 954, 956, 958, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 985, 988, 990, 996, 997, 998, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "need": [0, 4, 9, 12, 32, 46, 48, 53, 56, 81, 96, 118, 120, 121, 122, 128, 145, 148, 153, 160, 161, 166, 184, 198, 213, 214, 218, 225, 228, 230, 235, 241, 242, 246, 247, 254, 256, 258, 259, 261, 276, 278, 303, 308, 319, 328, 336, 341, 342, 352, 356, 357, 358, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 389, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 411, 421, 425, 429, 432, 448, 486, 524, 534, 555, 565, 566, 571, 572, 573, 574, 610, 618, 621, 622, 623, 625, 632, 649, 651, 654, 659, 662, 675, 703, 704, 705, 706, 763, 767, 777, 778, 779, 782, 783, 793, 794, 795, 802, 810, 813, 821, 822, 838, 841, 844, 848, 853, 854, 858, 876, 883, 886, 953, 954, 956, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 975, 977, 978, 979, 980, 985, 988, 996, 997, 998, 999, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "keep": [0, 6, 42, 74, 97, 99, 144, 160, 165, 166, 167, 168, 169, 196, 197, 198, 204, 214, 246, 251, 254, 302, 303, 311, 317, 328, 341, 342, 346, 352, 356, 357, 362, 370, 374, 382, 383, 393, 395, 396, 397, 398, 399, 400, 416, 433, 448, 465, 466, 467, 468, 476, 477, 517, 523, 524, 527, 530, 537, 539, 541, 543, 545, 548, 551, 553, 578, 581, 583, 585, 586, 594, 617, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 659, 660, 661, 662, 691, 797, 814, 815, 824, 832, 838, 839, 877, 882, 884, 887, 890, 892, 960, 965, 969, 972, 974, 985, 988, 990, 995, 997, 999, 1001, 1005, 1010, 1013, 1014, 1018, 1019, 1021], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 61, 65, 69, 72, 74, 91, 98, 99, 109, 112, 115, 125, 128, 145, 149, 154, 156, 157, 160, 165, 166, 167, 168, 172, 175, 177, 185, 190, 196, 198, 212, 225, 228, 229, 232, 242, 243, 247, 250, 251, 255, 256, 257, 259, 263, 264, 265, 266, 267, 269, 278, 298, 299, 300, 303, 304, 305, 308, 311, 325, 328, 341, 343, 350, 352, 357, 362, 363, 364, 365, 366, 369, 370, 372, 374, 375, 376, 378, 379, 381, 383, 384, 389, 393, 394, 395, 398, 399, 400, 402, 403, 404, 405, 406, 407, 428, 447, 450, 451, 466, 468, 479, 504, 515, 535, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 558, 565, 571, 572, 573, 574, 577, 580, 585, 589, 617, 626, 629, 630, 632, 639, 640, 641, 642, 659, 660, 661, 662, 691, 711, 712, 720, 736, 756, 760, 765, 766, 769, 770, 774, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 802, 803, 804, 805, 806, 808, 816, 827, 829, 831, 832, 833, 840, 841, 842, 843, 844, 857, 869, 874, 879, 881, 882, 889, 890, 891, 892, 897, 922, 953, 954, 957, 958, 960, 961, 963, 964, 965, 966, 967, 970, 971, 974, 976, 979, 980, 984, 985, 990, 996, 997, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 69, 196, 214, 303, 378, 381, 383, 400, 402, 403, 504, 761, 762, 979, 984, 988, 1013, 1014, 1015], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 365, 370, 372, 375, 379, 384, 386, 396, 400, 402, 404, 427, 544, 545, 568, 569, 703, 921, 922, 974, 984, 985, 990, 999, 1016], "toward": [0, 26, 27, 62, 81, 115, 121, 127, 148, 168, 175, 200, 201, 222, 370, 383, 395, 431, 435, 445, 659, 661, 678, 855, 963, 978, 980, 983, 985], "cover": [0, 52, 172, 196, 214, 352, 362, 365, 370, 382, 618, 703, 774, 964, 965, 983], "travel": 0, "expens": [0, 55, 128, 148, 165, 167, 226, 253, 265, 328, 341, 342, 343, 358, 376, 383, 395, 396, 399, 402, 403, 432, 451, 491, 779, 782, 783, 793, 804, 879, 881, 961, 963, 974, 979, 984, 988, 999, 1009], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 53, 56, 57, 61, 69, 77, 85, 94, 110, 112, 119, 121, 126, 128, 145, 153, 155, 165, 166, 167, 168, 172, 184, 194, 196, 197, 198, 200, 204, 217, 218, 219, 222, 225, 229, 234, 243, 256, 263, 265, 267, 271, 276, 281, 282, 283, 305, 309, 310, 311, 312, 313, 336, 341, 342, 343, 352, 365, 367, 369, 370, 374, 376, 378, 379, 381, 382, 383, 384, 393, 395, 397, 399, 400, 402, 405, 406, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 442, 443, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 683, 704, 705, 706, 767, 770, 772, 775, 777, 778, 779, 782, 783, 793, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 916, 917, 953, 954, 956, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 974, 977, 978, 980, 981, 984, 985, 988, 998, 999, 1005, 1006, 1009, 1011, 1012, 1013, 1016], "budget": [0, 118, 816, 817, 818, 819, 820, 953], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 383, 384, 386, 387, 388, 389, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 476, 478, 479, 480, 483, 484, 487, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 745, 746, 748, 750, 751, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 902, 907, 912, 915, 916, 918, 920, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 935, 938, 939, 945, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 982, 984, 985, 987, 988, 990, 991, 994, 995, 996, 997, 998, 1003, 1007], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 53, 65, 70, 71, 79, 81, 84, 85, 91, 97, 112, 113, 117, 121, 122, 125, 145, 148, 155, 160, 165, 166, 167, 168, 172, 184, 185, 189, 196, 197, 198, 200, 204, 210, 212, 214, 217, 218, 219, 221, 225, 226, 228, 230, 231, 232, 242, 251, 252, 256, 259, 262, 263, 264, 274, 276, 278, 282, 283, 293, 298, 299, 302, 308, 309, 310, 311, 312, 313, 317, 319, 321, 328, 341, 350, 356, 357, 364, 367, 368, 370, 371, 372, 374, 376, 377, 381, 382, 383, 386, 390, 393, 394, 395, 397, 398, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 447, 448, 451, 452, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 470, 473, 479, 481, 487, 492, 498, 502, 510, 513, 517, 521, 522, 523, 524, 526, 527, 530, 532, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 568, 569, 571, 572, 573, 574, 576, 577, 580, 582, 583, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 612, 613, 615, 616, 618, 619, 621, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 678, 679, 682, 683, 686, 690, 691, 696, 698, 703, 704, 705, 706, 710, 711, 712, 714, 716, 720, 723, 724, 728, 736, 737, 740, 745, 746, 750, 752, 756, 760, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 806, 808, 810, 813, 814, 815, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 897, 907, 908, 917, 918, 927, 932, 939, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 967, 968, 970, 971, 972, 974, 977, 978, 979, 980, 981, 983, 984, 985, 987, 990, 997, 998, 999, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "regard": [0, 5, 7, 11, 53, 70, 99, 136, 148, 153, 167, 168, 185, 193, 198, 219, 231, 258, 265, 266, 336, 342, 366, 370, 371, 375, 381, 383, 389, 394, 395, 400, 402, 403, 405, 427, 430, 435, 442, 445, 484, 597, 602, 639, 641, 684, 725, 778, 785, 805, 823, 824, 957, 960, 964, 966, 967, 969, 971, 978, 979, 980, 992, 999, 1012, 1015], "might": [0, 4, 5, 31, 42, 44, 59, 61, 69, 109, 117, 126, 142, 154, 161, 166, 167, 168, 172, 196, 214, 225, 256, 258, 293, 310, 338, 352, 356, 357, 364, 368, 370, 371, 372, 374, 375, 376, 378, 381, 383, 384, 386, 389, 393, 396, 399, 400, 401, 402, 403, 405, 418, 427, 471, 479, 484, 486, 491, 498, 506, 519, 538, 539, 540, 547, 562, 563, 565, 593, 594, 610, 633, 637, 638, 639, 641, 642, 659, 661, 675, 739, 774, 782, 783, 805, 830, 846, 861, 874, 893, 895, 897, 901, 902, 918, 933, 953, 954, 956, 958, 960, 961, 963, 964, 966, 967, 971, 972, 974, 979, 980, 999, 1006, 1008, 1013, 1014, 1016, 1019, 1020], "pai": [0, 214, 370, 960], "dn": [0, 967], "continu": [0, 17, 19, 42, 118, 119, 148, 163, 167, 197, 204, 214, 218, 221, 237, 242, 246, 247, 294, 297, 303, 304, 306, 310, 311, 350, 365, 368, 372, 373, 374, 375, 378, 381, 383, 384, 386, 395, 400, 402, 475, 575, 578, 579, 582, 583, 590, 591, 592, 615, 629, 630, 635, 636, 640, 643, 644, 645, 646, 708, 724, 738, 791, 793, 844, 846, 848, 850, 851, 860, 861, 862, 878, 890, 927, 953, 960, 961, 964, 965, 967, 968, 974, 980, 985, 987, 988, 990, 997, 1002, 1005, 1007, 1008, 1013, 1018, 1019, 1020], "integr": [0, 42, 70, 142, 156, 185, 294, 310, 368, 372, 373, 374, 376, 378, 383, 386, 400, 405, 698, 737, 768, 939, 963, 971, 988, 993, 1006, 1008, 1009, 1017, 1018], "servic": [0, 4, 226, 370, 374, 988, 1013], "azur": [0, 370], "cirru": [0, 370], "cl": [0, 8, 12, 16, 377, 383, 891], "circlecl": 0, "free": [0, 5, 153, 154, 161, 195, 246, 298, 364, 369, 370, 371, 378, 381, 386, 403, 405, 435, 592, 654, 837, 887, 953, 956, 960, 964, 985, 1013], "cpu": [0, 60, 257, 276, 313, 356, 357, 368, 376, 383, 386, 403, 479, 615, 630, 634, 636, 638, 641, 642, 644, 646, 648, 649, 651, 659, 662, 779, 793, 802, 803, 804, 825, 833, 874, 932, 964, 990, 994, 999, 1010, 1019, 1020], "server": [0, 356, 367, 368, 479, 1013], "anaconda": [0, 357, 368, 374], "inc": [0, 69, 255, 954, 976, 988], "storag": [0, 343, 383, 641, 642, 649, 651, 659, 660, 661, 881, 967, 979, 1008, 1013], "thei": [0, 4, 26, 27, 37, 50, 56, 81, 96, 110, 115, 116, 118, 120, 122, 124, 141, 144, 148, 149, 153, 166, 167, 182, 185, 191, 196, 197, 214, 218, 221, 225, 231, 250, 253, 256, 257, 259, 265, 276, 278, 293, 298, 303, 310, 312, 341, 342, 348, 349, 352, 356, 357, 358, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 378, 379, 381, 382, 383, 384, 392, 394, 395, 396, 397, 398, 400, 402, 404, 405, 407, 424, 426, 430, 436, 437, 442, 450, 479, 491, 492, 516, 518, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 571, 574, 593, 602, 612, 626, 629, 630, 635, 641, 642, 643, 644, 645, 653, 655, 659, 661, 664, 670, 744, 745, 747, 750, 756, 771, 779, 793, 810, 816, 817, 818, 819, 820, 838, 841, 843, 849, 860, 861, 883, 886, 889, 890, 891, 892, 896, 953, 954, 956, 958, 960, 963, 964, 965, 966, 967, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 988, 990, 994, 996, 997, 999, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "stage": [0, 7, 26, 71, 114, 119, 122, 368, 374, 391, 395, 402, 431, 536, 537, 542, 543, 544, 545, 571, 572, 574, 585, 961, 974, 983, 1013, 1017], "nightli": [0, 357, 373, 374], "build": [0, 4, 7, 17, 32, 43, 66, 73, 98, 117, 119, 125, 131, 142, 144, 159, 160, 162, 163, 166, 204, 261, 264, 276, 294, 295, 299, 304, 305, 343, 352, 356, 357, 358, 366, 372, 373, 374, 375, 376, 383, 386, 388, 394, 395, 396, 399, 402, 403, 426, 473, 484, 486, 507, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 568, 569, 571, 572, 574, 610, 611, 613, 674, 696, 697, 780, 784, 788, 797, 801, 803, 842, 859, 861, 889, 890, 891, 892, 894, 914, 953, 954, 961, 964, 968, 970, 974, 979, 980, 984, 985, 988, 991, 993, 997, 998, 1005, 1008, 1010, 1011, 1012, 1014, 1017], "applic": [3, 5, 19, 49, 79, 163, 172, 196, 213, 219, 250, 259, 298, 356, 358, 365, 367, 370, 372, 376, 378, 379, 381, 383, 393, 395, 399, 400, 401, 402, 405, 407, 428, 435, 479, 481, 515, 516, 517, 536, 537, 612, 671, 672, 673, 677, 695, 711, 712, 720, 765, 766, 769, 807, 953, 960, 961, 962, 963, 964, 968, 970, 976, 980, 984, 985, 988, 997, 999, 1005, 1006, 1011, 1013, 1016], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 56, 65, 94, 109, 112, 116, 121, 122, 148, 163, 168, 172, 175, 182, 185, 189, 190, 196, 198, 213, 214, 219, 225, 226, 232, 237, 254, 256, 261, 265, 266, 270, 276, 281, 288, 302, 311, 325, 328, 336, 337, 341, 342, 352, 356, 365, 366, 367, 368, 369, 371, 372, 375, 376, 379, 381, 383, 393, 394, 395, 397, 399, 401, 402, 403, 404, 405, 406, 407, 428, 430, 432, 433, 435, 440, 445, 448, 461, 486, 491, 492, 498, 499, 500, 501, 506, 507, 511, 514, 516, 520, 522, 525, 526, 527, 528, 529, 530, 531, 534, 535, 540, 544, 547, 550, 554, 556, 572, 593, 614, 626, 631, 633, 635, 637, 638, 639, 640, 641, 642, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 662, 663, 668, 669, 670, 671, 672, 674, 676, 678, 691, 699, 711, 712, 717, 721, 766, 769, 770, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 801, 809, 810, 811, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 847, 848, 854, 862, 865, 871, 872, 881, 882, 889, 891, 907, 918, 954, 955, 959, 960, 961, 963, 964, 965, 966, 967, 968, 972, 974, 978, 981, 985, 986, 988, 991, 992, 993, 999, 1000, 1001, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "medium": [3, 163, 231, 271, 305, 328, 395, 400, 405, 626, 855, 957, 960], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 56, 57, 59, 60, 61, 65, 66, 72, 77, 78, 79, 80, 81, 84, 85, 91, 94, 95, 96, 97, 98, 100, 102, 104, 112, 120, 121, 124, 125, 141, 148, 150, 151, 154, 155, 163, 165, 167, 168, 175, 176, 177, 178, 180, 182, 186, 191, 194, 197, 198, 199, 202, 209, 210, 217, 222, 225, 228, 229, 230, 231, 233, 234, 243, 250, 252, 254, 256, 258, 259, 261, 262, 282, 283, 284, 292, 295, 299, 300, 301, 302, 305, 309, 312, 317, 321, 324, 326, 327, 328, 338, 341, 342, 343, 346, 356, 357, 358, 365, 366, 370, 375, 379, 381, 382, 383, 386, 392, 393, 394, 397, 399, 400, 403, 405, 406, 428, 429, 431, 432, 433, 440, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 476, 477, 478, 498, 510, 517, 519, 521, 523, 530, 540, 541, 542, 543, 544, 545, 547, 548, 566, 570, 571, 574, 577, 615, 616, 626, 640, 649, 650, 662, 666, 675, 678, 688, 702, 720, 722, 725, 763, 773, 781, 784, 785, 789, 796, 799, 800, 802, 805, 807, 816, 817, 818, 820, 823, 824, 825, 826, 827, 829, 831, 832, 833, 838, 839, 856, 858, 870, 875, 879, 883, 884, 885, 886, 887, 889, 890, 891, 892, 895, 917, 921, 922, 927, 928, 930, 933, 939, 954, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 971, 974, 976, 978, 979, 980, 988, 993, 995, 997, 998, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1020, 1021], "interact": [3, 89, 122, 163, 196, 222, 227, 257, 309, 369, 371, 372, 374, 376, 381, 383, 384, 396, 542, 543, 544, 545, 615, 616, 856, 860, 953, 956, 960, 961, 962, 969, 971, 974, 983, 985, 1007, 1012, 1019, 1020], "user": [3, 25, 68, 94, 157, 163, 166, 184, 217, 246, 253, 263, 265, 276, 282, 283, 286, 304, 308, 309, 310, 311, 312, 313, 352, 356, 357, 359, 364, 368, 369, 370, 372, 374, 376, 377, 378, 381, 382, 383, 386, 389, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 406, 407, 408, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 914, 918, 953, 954, 960, 961, 963, 964, 965, 967, 974, 978, 982, 985, 988, 992, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "interfac": [3, 108, 163, 363, 364, 371, 372, 379, 381, 383, 399, 405, 406, 425, 429, 433, 479, 682, 779, 782, 783, 793, 841, 842, 867, 949, 953, 967, 979, 984, 985, 988, 1005, 1007, 1010, 1011, 1013, 1014, 1019], "compress": [3, 11, 15, 48, 163, 298, 365, 395, 400, 403, 635, 655, 675, 811, 935, 938, 960, 974, 998, 1005, 1014], "sens": [3, 4, 15, 25, 154, 163, 166, 172, 229, 298, 304, 317, 328, 341, 352, 356, 371, 383, 395, 397, 399, 445, 452, 453, 454, 455, 456, 457, 458, 459, 635, 638, 639, 655, 780, 790, 878, 958, 960, 967, 968, 970, 974, 977], "tomographi": [3, 15, 163, 635, 655, 960], "reconstruct": [3, 15, 94, 95, 99, 163, 195, 220, 221, 312, 400, 403, 465, 466, 467, 514, 516, 518, 520, 521, 522, 523, 525, 526, 531, 566, 570, 635, 655, 671, 672, 676, 873, 874, 960, 961, 1019], "l1": [3, 7, 15, 30, 40, 81, 84, 163, 174, 181, 185, 207, 211, 215, 227, 257, 276, 311, 379, 381, 394, 395, 397, 400, 425, 429, 433, 440, 447, 452, 453, 454, 455, 456, 457, 458, 459, 461, 479, 485, 487, 514, 520, 521, 522, 523, 525, 526, 530, 531, 541, 548, 572, 573, 574, 580, 629, 630, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 651, 653, 655, 659, 660, 661, 662, 664, 671, 717, 744, 750, 755, 760, 761, 762, 793, 807, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 853, 861, 868, 881, 882, 888, 890, 892, 904, 946, 960, 962, 964, 967, 974, 978, 979, 980, 997, 1010, 1012, 1018, 1021], "prior": [3, 15, 46, 47, 56, 66, 147, 148, 158, 163, 168, 175, 177, 240, 242, 246, 247, 248, 256, 370, 372, 374, 383, 386, 395, 398, 400, 402, 405, 448, 506, 519, 531, 532, 533, 534, 542, 568, 569, 594, 596, 597, 598, 602, 605, 606, 613, 627, 628, 629, 630, 634, 635, 637, 638, 639, 643, 644, 645, 655, 661, 664, 699, 777, 816, 817, 818, 819, 820, 841, 842, 856, 883, 886, 931, 953, 956, 958, 960, 963, 964, 966, 972, 980, 981, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1021], "lasso": [3, 15, 104, 128, 134, 163, 166, 174, 215, 311, 356, 381, 397, 398, 400, 402, 403, 404, 454, 455, 461, 484, 507, 514, 520, 522, 525, 526, 528, 529, 531, 580, 629, 630, 632, 633, 634, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 661, 664, 665, 666, 667, 668, 669, 704, 705, 706, 767, 802, 803, 804, 842, 861, 953, 964, 978, 986, 994, 997, 1001, 1005, 1009, 1010, 1011, 1013, 1014, 1016, 1018, 1019], "recognit": [3, 9, 15, 163, 295, 303, 363, 375, 400, 402, 404, 477, 485, 515, 517, 524, 680, 691, 696, 723, 751, 770, 771, 777, 793, 807, 861, 886, 956, 960, 964, 965, 969, 979, 981, 990, 993, 1001, 1005], "eigenfac": [3, 15, 163, 365, 400, 477, 524, 680, 696, 793, 807, 861, 886, 981, 993, 1005], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 69, 71, 73, 129, 133, 135, 138, 139, 143, 146, 163, 174, 189, 215, 225, 231, 232, 236, 237, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 271, 300, 308, 310, 315, 319, 322, 323, 326, 335, 336, 339, 341, 356, 359, 365, 372, 376, 383, 389, 396, 399, 400, 402, 404, 421, 477, 487, 495, 498, 524, 538, 539, 546, 550, 551, 560, 576, 577, 582, 583, 588, 614, 622, 626, 651, 659, 660, 661, 672, 680, 681, 683, 685, 696, 717, 724, 779, 793, 799, 803, 804, 807, 809, 810, 827, 841, 842, 854, 861, 877, 878, 952, 953, 956, 959, 961, 962, 964, 965, 969, 977, 979, 981, 986, 990, 993, 994, 995, 999, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "imag": [3, 6, 13, 15, 32, 36, 46, 48, 51, 54, 57, 67, 69, 88, 93, 94, 106, 116, 143, 152, 163, 187, 218, 227, 230, 233, 254, 285, 294, 295, 309, 316, 317, 341, 342, 362, 363, 365, 367, 370, 375, 378, 381, 383, 386, 388, 395, 400, 425, 429, 435, 445, 476, 477, 478, 479, 485, 486, 489, 490, 517, 518, 520, 524, 590, 591, 674, 680, 720, 807, 851, 960, 964, 965, 967, 969, 976, 980, 984, 988, 990, 995, 996, 998, 999, 1001, 1005, 1008, 1013, 1014, 1018, 1020, 1021], "denois": [3, 15, 93, 106, 163, 400, 479, 518, 520, 524, 567, 570, 807, 851], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 73, 93, 104, 106, 129, 135, 137, 143, 147, 149, 150, 151, 152, 155, 158, 160, 173, 197, 210, 224, 225, 232, 236, 239, 250, 254, 256, 258, 261, 262, 266, 271, 277, 290, 311, 318, 321, 323, 325, 328, 329, 330, 333, 334, 337, 339, 352, 356, 359, 362, 372, 381, 383, 393, 395, 396, 399, 402, 403, 416, 424, 431, 435, 444, 445, 448, 465, 466, 467, 474, 479, 481, 485, 487, 497, 516, 517, 518, 524, 527, 537, 539, 541, 543, 545, 548, 551, 553, 576, 577, 593, 594, 614, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 659, 660, 661, 662, 671, 673, 674, 675, 678, 717, 740, 741, 743, 748, 749, 756, 757, 758, 759, 779, 785, 790, 793, 807, 809, 814, 815, 821, 822, 824, 826, 832, 839, 841, 842, 847, 851, 853, 854, 861, 876, 877, 881, 882, 883, 884, 885, 886, 887, 890, 892, 953, 959, 960, 961, 964, 965, 967, 970, 977, 978, 984, 986, 990, 994, 995, 1000, 1001, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "pca": [3, 6, 15, 68, 71, 73, 75, 85, 89, 93, 96, 105, 106, 163, 218, 220, 230, 232, 236, 255, 276, 280, 285, 311, 352, 362, 372, 383, 394, 395, 396, 401, 411, 456, 459, 479, 485, 487, 497, 515, 516, 517, 518, 522, 523, 526, 527, 532, 626, 641, 671, 673, 675, 779, 803, 807, 830, 837, 840, 841, 843, 851, 859, 861, 956, 958, 961, 967, 974, 978, 980, 995, 1000, 1001, 1005, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1018, 1019, 1020], "libsvm": [3, 15, 163, 172, 326, 363, 376, 470, 491, 546, 881, 882, 883, 884, 885, 886, 887, 979, 984, 1001, 1005, 1007, 1013, 1016, 1019], "gui": [3, 15, 163, 470, 885, 886, 997, 1005, 1006, 1016], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 57, 60, 68, 70, 75, 77, 81, 85, 93, 94, 106, 109, 112, 114, 117, 119, 120, 121, 123, 125, 127, 128, 131, 134, 135, 137, 139, 141, 146, 151, 152, 154, 155, 156, 157, 161, 164, 165, 169, 170, 176, 178, 180, 182, 186, 187, 189, 191, 192, 193, 197, 198, 200, 202, 204, 208, 209, 211, 212, 213, 215, 225, 228, 232, 241, 243, 244, 245, 248, 250, 251, 252, 254, 257, 259, 261, 262, 264, 265, 269, 270, 272, 274, 276, 278, 280, 282, 285, 289, 299, 302, 304, 305, 308, 310, 312, 313, 316, 317, 325, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 342, 343, 347, 348, 349, 352, 359, 362, 364, 365, 373, 376, 383, 385, 391, 392, 393, 395, 396, 398, 400, 401, 402, 403, 404, 405, 414, 416, 418, 421, 426, 432, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 471, 472, 479, 481, 484, 485, 486, 492, 505, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 571, 572, 574, 576, 577, 580, 585, 589, 592, 593, 594, 598, 610, 617, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 684, 689, 694, 704, 705, 706, 716, 717, 723, 724, 732, 735, 767, 770, 771, 772, 777, 778, 779, 782, 783, 785, 793, 794, 795, 796, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 824, 826, 827, 828, 830, 832, 837, 838, 839, 841, 842, 844, 846, 848, 853, 854, 856, 857, 858, 860, 861, 862, 866, 867, 869, 870, 871, 872, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 954, 956, 957, 958, 961, 962, 965, 967, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 984, 985, 986, 988, 991, 993, 995, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010], "complex": [3, 9, 14, 15, 16, 148, 153, 160, 163, 210, 213, 224, 231, 239, 249, 265, 272, 299, 308, 311, 312, 315, 322, 328, 343, 345, 351, 366, 370, 375, 381, 396, 400, 402, 405, 406, 424, 428, 430, 431, 433, 450, 472, 483, 484, 485, 497, 517, 524, 534, 540, 541, 542, 543, 545, 547, 548, 587, 613, 621, 639, 641, 659, 660, 716, 732, 779, 807, 809, 837, 841, 842, 846, 854, 861, 877, 881, 884, 887, 889, 890, 891, 892, 953, 954, 956, 957, 959, 963, 965, 970, 974, 977, 985, 986, 988, 1001, 1006, 1008, 1014, 1015, 1018], "influenc": [3, 9, 15, 79, 80, 163, 166, 178, 241, 264, 298, 305, 328, 336, 352, 358, 397, 400, 402, 416, 424, 437, 448, 465, 466, 467, 472, 484, 537, 539, 541, 543, 545, 548, 551, 553, 594, 611, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 659, 661, 662, 716, 732, 807, 814, 815, 823, 824, 831, 832, 839, 858, 859, 870, 882, 884, 887, 890, 892, 901, 953, 958, 959, 967, 970, 974, 978, 979, 988, 1008, 1013, 1014], "core": [3, 15, 49, 64, 70, 116, 117, 163, 166, 167, 313, 355, 357, 359, 368, 370, 373, 378, 383, 386, 395, 400, 402, 406, 428, 432, 433, 438, 440, 482, 521, 572, 577, 641, 642, 649, 651, 659, 816, 817, 818, 819, 820, 825, 833, 960, 967, 970, 979, 982, 985, 986, 988, 997, 999, 1001, 1007, 1009, 1010, 1012, 1015, 1019, 1020, 1021], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 34, 35, 45, 70, 71, 72, 87, 92, 97, 108, 109, 111, 113, 115, 116, 117, 119, 122, 126, 133, 138, 141, 142, 143, 144, 147, 158, 166, 167, 172, 174, 188, 189, 196, 204, 215, 224, 226, 230, 234, 237, 239, 244, 249, 253, 254, 255, 256, 257, 265, 271, 272, 277, 278, 284, 286, 289, 290, 291, 296, 300, 316, 322, 324, 328, 331, 334, 336, 337, 340, 342, 343, 344, 352, 356, 358, 359, 363, 364, 365, 367, 372, 375, 379, 382, 383, 390, 393, 395, 396, 399, 400, 403, 404, 412, 421, 452, 458, 465, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 487, 493, 495, 497, 498, 502, 503, 505, 506, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 552, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 589, 592, 593, 594, 596, 597, 605, 614, 615, 616, 626, 641, 642, 649, 651, 657, 658, 659, 680, 686, 688, 690, 691, 695, 696, 698, 699, 701, 708, 709, 711, 712, 716, 720, 723, 724, 725, 736, 738, 740, 741, 764, 765, 766, 768, 769, 770, 771, 774, 776, 779, 780, 782, 783, 784, 785, 793, 797, 798, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 823, 828, 830, 831, 837, 838, 839, 841, 845, 848, 853, 854, 855, 861, 862, 865, 867, 876, 877, 878, 881, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 904, 907, 915, 953, 954, 956, 957, 958, 961, 962, 966, 969, 971, 972, 974, 975, 977, 983, 984, 986, 987, 988, 990, 991, 995, 996, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 56, 59, 61, 63, 69, 79, 80, 119, 176, 190, 191, 225, 229, 235, 236, 241, 243, 249, 262, 263, 267, 272, 281, 284, 286, 292, 300, 311, 315, 317, 322, 335, 344, 346, 356, 358, 359, 362, 363, 364, 370, 375, 381, 383, 393, 395, 396, 398, 399, 400, 402, 405, 430, 432, 451, 470, 471, 472, 482, 486, 491, 504, 519, 527, 547, 598, 608, 635, 641, 649, 651, 657, 659, 680, 686, 688, 690, 696, 700, 711, 719, 773, 775, 779, 793, 807, 816, 818, 820, 823, 828, 841, 842, 844, 845, 853, 877, 878, 879, 881, 893, 894, 895, 915, 953, 956, 960, 962, 964, 965, 966, 968, 971, 974, 976, 978, 979, 983, 985, 988, 991, 1001, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "outlier": [3, 15, 44, 79, 80, 121, 124, 163, 174, 198, 199, 202, 215, 224, 239, 277, 290, 297, 306, 338, 365, 383, 395, 397, 402, 452, 453, 456, 457, 458, 459, 473, 474, 475, 479, 493, 495, 505, 507, 546, 622, 632, 653, 654, 655, 659, 660, 661, 662, 675, 685, 827, 831, 842, 848, 850, 851, 853, 857, 858, 859, 861, 867, 870, 884, 885, 887, 964, 978, 979, 984, 986, 1000, 1001, 1005, 1010, 1011, 1013], "detect": [3, 8, 10, 15, 62, 64, 79, 81, 115, 124, 163, 177, 224, 239, 249, 256, 259, 272, 277, 290, 304, 327, 365, 368, 370, 374, 381, 383, 393, 394, 395, 397, 399, 403, 432, 452, 453, 456, 457, 458, 459, 471, 472, 474, 475, 479, 493, 495, 498, 505, 520, 521, 522, 529, 546, 547, 571, 574, 579, 622, 660, 681, 685, 709, 771, 807, 827, 831, 842, 848, 861, 881, 885, 956, 960, 985, 986, 988, 994, 999, 1000, 1001, 1005, 1008, 1011, 1012, 1013, 1015, 1017, 1018, 1020, 1021], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 56, 57, 59, 61, 63, 64, 65, 69, 70, 72, 79, 80, 81, 85, 89, 93, 94, 99, 106, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 130, 134, 141, 142, 145, 148, 154, 155, 156, 163, 165, 166, 167, 168, 169, 175, 180, 181, 184, 185, 187, 189, 191, 192, 195, 196, 197, 198, 200, 201, 204, 209, 210, 214, 217, 218, 219, 225, 226, 227, 228, 230, 231, 238, 241, 243, 245, 246, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 274, 278, 282, 283, 284, 285, 286, 289, 293, 294, 295, 298, 300, 302, 303, 304, 305, 308, 310, 311, 316, 317, 320, 321, 325, 327, 330, 336, 341, 342, 343, 348, 349, 352, 356, 357, 358, 362, 363, 365, 367, 368, 370, 372, 374, 375, 377, 378, 382, 383, 384, 386, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 417, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 471, 472, 476, 478, 479, 480, 482, 485, 486, 487, 491, 492, 493, 498, 506, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 680, 681, 683, 684, 685, 686, 696, 697, 702, 704, 705, 708, 709, 710, 711, 712, 713, 716, 720, 722, 723, 727, 728, 730, 732, 733, 735, 738, 761, 762, 764, 765, 766, 767, 769, 771, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 901, 902, 912, 913, 918, 922, 932, 933, 934, 935, 938, 939, 945, 948, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 991, 993, 994, 995, 998, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 55, 57, 61, 69, 70, 71, 72, 74, 84, 105, 107, 108, 109, 111, 112, 113, 116, 117, 118, 119, 122, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 142, 145, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 166, 167, 168, 172, 175, 178, 179, 180, 188, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 205, 210, 211, 213, 214, 225, 226, 228, 230, 233, 242, 243, 244, 245, 246, 247, 249, 250, 254, 256, 258, 259, 262, 265, 266, 270, 272, 274, 279, 282, 283, 284, 287, 288, 295, 298, 299, 303, 304, 308, 309, 310, 311, 312, 317, 319, 320, 321, 324, 325, 327, 328, 334, 335, 336, 337, 341, 342, 347, 348, 349, 350, 352, 355, 357, 359, 362, 365, 367, 370, 372, 377, 379, 383, 385, 389, 390, 391, 393, 394, 395, 396, 400, 402, 403, 404, 412, 416, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 448, 452, 465, 466, 467, 470, 484, 491, 507, 517, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 565, 576, 577, 585, 589, 593, 594, 596, 597, 598, 599, 605, 608, 610, 611, 613, 614, 615, 616, 617, 618, 620, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 680, 681, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 697, 698, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 720, 723, 724, 725, 728, 730, 732, 734, 738, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 778, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 832, 838, 839, 841, 848, 861, 862, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 938, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 965, 966, 967, 968, 970, 971, 972, 974, 977, 978, 979, 980, 983, 984, 985, 987, 988, 991, 993, 994, 995, 999, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "latenc": [3, 7, 15, 119, 163, 355, 507, 548, 655, 661, 807, 861, 887, 929, 938, 984, 1001, 1008], "speci": [3, 15, 163, 277, 290, 341, 365, 401, 481, 689, 771, 826, 885, 896, 964, 970, 1005], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 53, 56, 61, 74, 78, 79, 80, 91, 109, 111, 121, 124, 140, 148, 157, 163, 165, 166, 172, 175, 196, 198, 200, 219, 221, 225, 229, 241, 246, 247, 252, 256, 262, 264, 277, 281, 290, 297, 298, 300, 303, 306, 316, 317, 333, 336, 341, 356, 357, 365, 366, 367, 368, 370, 371, 374, 375, 376, 383, 389, 393, 394, 395, 397, 399, 400, 401, 405, 407, 430, 432, 452, 453, 454, 455, 456, 457, 458, 459, 471, 481, 486, 498, 499, 500, 501, 502, 506, 515, 516, 519, 533, 534, 535, 546, 594, 608, 623, 625, 627, 628, 631, 641, 642, 652, 662, 663, 671, 672, 673, 675, 689, 691, 706, 734, 771, 777, 778, 783, 784, 791, 793, 797, 798, 807, 817, 820, 826, 830, 837, 844, 857, 858, 859, 860, 861, 869, 870, 871, 876, 877, 885, 896, 920, 932, 953, 958, 960, 962, 963, 964, 966, 967, 969, 970, 976, 977, 980, 982, 984, 985, 990, 994, 998, 1000, 1001, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021], "relat": [3, 7, 12, 15, 17, 44, 61, 95, 97, 99, 163, 164, 166, 191, 234, 249, 263, 313, 341, 350, 359, 365, 366, 369, 373, 374, 375, 377, 378, 379, 381, 383, 384, 385, 389, 394, 395, 396, 397, 398, 399, 400, 402, 405, 433, 447, 452, 479, 532, 533, 545, 546, 622, 656, 660, 675, 684, 705, 725, 800, 804, 839, 840, 842, 845, 846, 851, 854, 855, 856, 857, 860, 869, 885, 953, 958, 964, 965, 967, 968, 971, 974, 979, 980, 981, 982, 985, 1001, 1005, 1009, 1010, 1011, 1013, 1014, 1017, 1018], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 57, 59, 62, 67, 68, 69, 70, 71, 75, 79, 80, 85, 88, 89, 90, 91, 94, 96, 98, 102, 103, 105, 107, 108, 117, 123, 127, 128, 129, 131, 132, 140, 142, 146, 148, 149, 150, 153, 154, 156, 160, 161, 164, 165, 166, 167, 170, 174, 179, 182, 183, 185, 192, 196, 197, 198, 200, 201, 205, 211, 212, 213, 215, 224, 227, 229, 237, 238, 239, 249, 253, 256, 262, 263, 265, 266, 270, 272, 274, 279, 284, 285, 287, 291, 294, 296, 297, 298, 301, 305, 306, 307, 309, 312, 313, 323, 324, 325, 328, 336, 339, 340, 343, 344, 347, 349, 350, 352, 359, 362, 363, 364, 365, 366, 367, 368, 372, 373, 375, 377, 378, 379, 381, 382, 383, 384, 385, 386, 389, 393, 395, 397, 398, 399, 400, 401, 405, 406, 407, 408, 411, 415, 416, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 562, 563, 564, 565, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 601, 602, 603, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 671, 672, 673, 674, 675, 680, 684, 685, 686, 696, 704, 705, 706, 723, 740, 741, 745, 746, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 763, 767, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 901, 902, 915, 929, 939, 940, 941, 945, 953, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 988, 990, 991, 995, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "engin": [3, 15, 40, 114, 153, 163, 356, 364, 367, 395, 401, 403, 405, 447, 479, 545, 622, 656, 684, 800, 804, 839, 840, 842, 845, 846, 851, 854, 855, 856, 860, 954, 964, 974, 982, 1011], "topic": [3, 7, 8, 15, 69, 163, 341, 342, 343, 365, 366, 399, 400, 403, 471, 480, 519, 521, 523, 530, 571, 574, 960, 965, 984, 985, 999, 1010, 1012], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 68, 69, 70, 75, 84, 94, 163, 200, 211, 249, 272, 295, 341, 343, 352, 359, 362, 365, 367, 372, 376, 379, 381, 395, 396, 399, 400, 433, 435, 438, 439, 445, 447, 471, 472, 476, 477, 486, 487, 514, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 566, 567, 571, 572, 574, 576, 577, 580, 582, 614, 701, 770, 779, 793, 818, 840, 841, 886, 918, 928, 953, 961, 965, 969, 974, 978, 984, 988, 991, 995, 996, 1001, 1005, 1006, 1014, 1017], "neg": [3, 4, 15, 16, 24, 59, 74, 77, 85, 120, 121, 125, 163, 166, 174, 196, 214, 215, 245, 246, 253, 256, 259, 263, 265, 266, 276, 298, 302, 312, 341, 376, 383, 384, 395, 399, 402, 403, 404, 406, 407, 416, 424, 428, 435, 448, 452, 465, 466, 467, 471, 514, 516, 518, 519, 520, 521, 523, 525, 527, 530, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 571, 574, 575, 578, 579, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 594, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 652, 653, 655, 656, 660, 661, 662, 663, 670, 681, 682, 687, 688, 695, 696, 698, 701, 702, 704, 705, 706, 709, 711, 712, 713, 717, 720, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 764, 765, 766, 767, 769, 773, 777, 778, 802, 807, 814, 815, 824, 827, 832, 839, 848, 857, 859, 860, 865, 869, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 916, 918, 932, 962, 964, 965, 967, 968, 969, 970, 978, 979, 980, 999, 1000, 1001, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 61, 69, 78, 79, 80, 81, 84, 94, 95, 96, 105, 155, 163, 169, 174, 182, 197, 201, 215, 226, 229, 230, 246, 249, 263, 272, 294, 312, 316, 317, 341, 342, 343, 350, 356, 359, 365, 366, 367, 370, 372, 376, 379, 381, 382, 383, 392, 396, 397, 398, 403, 404, 405, 406, 407, 416, 422, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 437, 440, 442, 443, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 475, 479, 480, 483, 484, 485, 486, 487, 488, 491, 492, 493, 502, 504, 506, 507, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 568, 569, 571, 572, 573, 574, 576, 577, 586, 587, 588, 589, 590, 591, 592, 594, 603, 612, 613, 614, 616, 618, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 695, 696, 697, 698, 699, 701, 711, 712, 713, 716, 720, 721, 722, 723, 736, 737, 740, 741, 742, 743, 745, 746, 748, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 769, 770, 772, 773, 776, 777, 778, 779, 782, 783, 793, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 850, 852, 853, 854, 856, 858, 859, 860, 861, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 899, 900, 901, 902, 907, 916, 917, 918, 919, 922, 923, 924, 927, 928, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 950, 954, 956, 958, 960, 961, 965, 966, 967, 968, 974, 975, 976, 977, 978, 980, 981, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "factor": [3, 15, 26, 31, 44, 46, 53, 61, 93, 99, 104, 106, 126, 163, 166, 222, 225, 234, 267, 268, 276, 277, 290, 292, 293, 298, 300, 310, 312, 356, 357, 376, 379, 383, 392, 394, 395, 402, 403, 405, 424, 426, 437, 452, 454, 455, 456, 457, 459, 461, 471, 487, 497, 498, 510, 515, 518, 519, 521, 523, 524, 527, 528, 529, 530, 532, 533, 544, 545, 546, 571, 574, 580, 596, 632, 633, 634, 637, 638, 639, 665, 666, 675, 702, 765, 779, 782, 783, 803, 827, 861, 875, 877, 885, 917, 918, 953, 960, 961, 967, 974, 977, 981, 984, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1019, 1021], "latent": [3, 15, 17, 105, 163, 295, 342, 398, 403, 405, 471, 515, 519, 521, 522, 523, 526, 527, 571, 574, 837, 963, 984, 999, 1000, 1001, 1007, 1010], "dirichlet": [3, 15, 163, 241, 242, 247, 251, 403, 471, 519, 521, 523, 571, 574, 777, 984, 1000, 1001, 1005, 1010, 1011], "alloc": [3, 15, 25, 60, 163, 268, 310, 366, 370, 371, 395, 403, 427, 430, 442, 471, 519, 521, 523, 567, 571, 574, 629, 635, 643, 645, 782, 783, 785, 805, 808, 953, 974, 984, 1000, 1001, 1009, 1010, 1015, 1016], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 49, 52, 56, 59, 60, 79, 90, 93, 96, 98, 104, 106, 122, 124, 126, 130, 131, 156, 161, 163, 167, 169, 180, 187, 196, 198, 214, 222, 224, 227, 230, 235, 236, 239, 246, 249, 250, 252, 253, 257, 266, 272, 281, 285, 286, 291, 293, 296, 298, 302, 303, 308, 310, 317, 359, 362, 366, 368, 376, 377, 392, 397, 399, 400, 401, 402, 422, 425, 429, 437, 455, 479, 485, 487, 490, 493, 497, 505, 515, 517, 524, 547, 549, 554, 614, 616, 641, 672, 675, 680, 681, 683, 684, 685, 701, 709, 764, 771, 780, 781, 784, 785, 796, 797, 798, 799, 800, 807, 838, 842, 861, 886, 895, 914, 959, 961, 962, 967, 968, 970, 971, 974, 980, 984, 990, 1001, 1008, 1015, 1016, 1017, 1019], "stock": [3, 15, 163, 395, 397, 437, 455, 672, 993], "market": [3, 15, 163, 395, 397, 437, 455, 672, 988, 993], "wikipedia": [3, 15, 24, 163, 378, 394, 395, 578, 590, 591, 619, 639, 651, 654, 665, 666, 678, 687, 688, 690, 692, 695, 699, 701, 708, 711, 712, 713, 716, 717, 720, 725, 738, 765, 767, 768, 770, 771, 772, 773, 823, 824, 829, 830, 831, 832, 859, 875, 889, 890, 956, 960, 964, 967, 976, 980, 999, 1005, 1012], "princip": [3, 15, 83, 86, 93, 96, 98, 99, 101, 103, 106, 126, 163, 217, 230, 232, 285, 303, 310, 362, 395, 398, 407, 467, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 533, 640, 671, 672, 673, 675, 676, 807, 830, 842, 861, 917, 918, 961, 967, 1000, 1001, 1005], "eigenvector": [3, 15, 46, 85, 89, 163, 241, 395, 435, 445, 517, 518, 524, 533, 671, 672, 674, 678, 961, 1005, 1009, 1019], "enddownload": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 363, 365, 367, 368, 374, 375, 378, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 493, 980, 995, 997, 999, 1001, 1009, 1010, 1013, 1017, 1018, 1019], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 356, 357, 359, 367, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 382, 383, 386, 388, 389, 394, 406, 407, 411, 423, 439, 444, 454, 468, 490, 491, 514, 526, 530, 538, 555, 556, 560, 566, 575, 578, 579, 581, 584, 586, 595, 599, 603, 604, 607, 612, 621, 625, 630, 633, 634, 637, 643, 644, 646, 650, 658, 682, 691, 698, 704, 705, 706, 708, 710, 712, 713, 717, 721, 725, 726, 728, 729, 733, 736, 738, 745, 746, 750, 751, 753, 755, 763, 765, 774, 786, 787, 788, 789, 790, 791, 792, 809, 811, 813, 815, 817, 821, 822, 831, 832, 833, 835, 843, 844, 847, 849, 852, 863, 866, 868, 869, 871, 872, 873, 876, 882, 891, 892, 893, 894, 907, 916, 918, 920, 921, 923, 926, 927, 928, 935, 952, 954, 962, 985, 986, 988, 991, 994, 995, 999, 1001, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1018, 1020, 1021], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 368, 370, 371, 372, 374, 375, 376, 377, 378, 381, 383, 384, 386, 391, 395, 397, 399, 402, 405, 406, 407, 421, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 445, 447, 450, 454, 455, 514, 515, 516, 517, 518, 520, 522, 524, 525, 526, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 565, 575, 577, 578, 579, 581, 582, 583, 585, 593, 594, 617, 623, 629, 630, 632, 634, 635, 636, 638, 639, 643, 644, 645, 646, 665, 666, 671, 672, 673, 674, 675, 676, 677, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 813, 814, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 838, 839, 840, 843, 876, 877, 881, 882, 883, 884, 885, 886, 887, 889, 890, 912, 913, 932, 935, 938, 953, 963, 965, 968, 977, 979, 980, 984, 985, 988, 990, 997, 999, 1005, 1008, 1010, 1012, 1013, 1014, 1015, 1019, 1020], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 364, 368, 369, 370, 371, 373, 374, 376, 378, 379, 381, 382, 383, 386, 389, 394, 395, 396, 397, 403, 406, 407, 428, 486, 516, 544, 545, 585, 617, 629, 670, 779, 782, 783, 785, 793, 804, 806, 912, 961, 968, 974, 977, 978, 979, 980, 981, 983, 984, 987, 988, 992, 999, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 370, 378, 974], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 371, 376, 396, 451, 879, 980, 983, 984, 985, 1016, 1019], "introduc": [4, 77, 79, 80, 99, 144, 163, 168, 175, 224, 229, 239, 263, 313, 343, 363, 366, 368, 370, 372, 374, 375, 378, 381, 383, 386, 393, 395, 397, 399, 400, 402, 403, 417, 425, 426, 427, 429, 430, 432, 442, 447, 451, 465, 466, 467, 468, 479, 487, 498, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 538, 539, 549, 550, 551, 552, 553, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 641, 647, 668, 669, 671, 672, 675, 807, 825, 830, 833, 837, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 875, 879, 958, 960, 963, 966, 967, 970, 974, 976, 978, 979, 990, 997, 1005, 1006, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 79, 84, 85, 89, 90, 91, 94, 96, 97, 99, 102, 103, 104, 108, 112, 114, 117, 118, 121, 123, 128, 129, 130, 131, 134, 137, 140, 145, 147, 148, 149, 150, 153, 154, 155, 158, 160, 161, 163, 165, 166, 168, 172, 175, 176, 182, 183, 184, 185, 187, 193, 196, 197, 198, 200, 201, 202, 203, 204, 214, 217, 218, 219, 222, 225, 227, 230, 231, 234, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 270, 271, 276, 282, 283, 285, 292, 293, 297, 302, 303, 306, 308, 323, 327, 328, 332, 336, 337, 339, 341, 342, 343, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 373, 375, 377, 379, 382, 383, 386, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 418, 421, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 441, 442, 445, 447, 458, 461, 473, 476, 477, 479, 486, 487, 491, 492, 495, 497, 505, 520, 521, 522, 523, 529, 530, 532, 533, 538, 539, 546, 571, 572, 573, 574, 577, 594, 596, 597, 598, 602, 605, 606, 610, 614, 615, 616, 617, 621, 626, 627, 630, 632, 634, 636, 638, 641, 644, 649, 650, 651, 655, 657, 659, 660, 661, 663, 673, 675, 677, 681, 682, 683, 684, 687, 688, 689, 690, 692, 698, 700, 701, 709, 710, 711, 712, 713, 716, 719, 725, 739, 740, 741, 750, 760, 764, 765, 766, 768, 769, 771, 772, 773, 775, 778, 779, 781, 782, 783, 784, 785, 788, 793, 794, 795, 796, 797, 798, 799, 802, 804, 805, 808, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 834, 837, 841, 846, 850, 851, 853, 857, 858, 859, 861, 866, 867, 868, 869, 870, 871, 872, 881, 883, 886, 889, 890, 891, 892, 928, 953, 954, 956, 957, 959, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 977, 978, 979, 980, 981, 984, 985, 988, 990, 992, 993, 994, 998, 999, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "strategi": [4, 52, 54, 57, 60, 70, 118, 123, 128, 144, 160, 161, 163, 168, 185, 196, 204, 214, 227, 236, 249, 257, 259, 261, 265, 266, 272, 291, 296, 297, 304, 305, 306, 308, 309, 312, 343, 355, 372, 376, 382, 383, 399, 402, 403, 404, 407, 421, 422, 423, 435, 445, 455, 485, 487, 495, 497, 505, 516, 521, 534, 535, 544, 545, 550, 551, 554, 571, 572, 574, 575, 577, 585, 610, 611, 613, 617, 628, 630, 634, 636, 638, 644, 646, 648, 656, 658, 674, 678, 687, 696, 737, 739, 775, 779, 782, 783, 785, 793, 796, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 838, 846, 851, 862, 876, 881, 883, 886, 889, 890, 891, 892, 935, 953, 954, 963, 965, 966, 967, 968, 970, 972, 974, 978, 979, 980, 984, 994, 999, 1001, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "leverag": [4, 8, 37, 49, 85, 214, 341, 342, 356, 357, 368, 399, 402, 856, 953, 960, 990, 1008, 1020], "task": [4, 7, 97, 108, 115, 116, 122, 143, 144, 156, 163, 174, 196, 212, 215, 217, 253, 343, 356, 358, 365, 367, 368, 369, 370, 374, 375, 376, 379, 381, 382, 383, 400, 402, 403, 404, 405, 431, 444, 476, 488, 498, 575, 578, 579, 581, 582, 583, 587, 588, 589, 592, 615, 616, 629, 630, 635, 636, 643, 644, 645, 646, 657, 664, 667, 690, 709, 711, 712, 736, 764, 766, 769, 771, 780, 784, 797, 801, 930, 931, 961, 964, 965, 966, 967, 975, 977, 979, 980, 982, 983, 985, 986, 987, 988, 990, 997, 998, 999, 1001, 1005, 1010, 1014, 1020], "highli": [4, 9, 71, 79, 80, 96, 105, 124, 191, 201, 256, 259, 265, 293, 342, 356, 357, 370, 372, 376, 393, 395, 399, 402, 403, 435, 445, 479, 546, 654, 675, 791, 793, 837, 960, 964, 967, 968, 970, 978, 979, 983], "depend": [4, 5, 7, 37, 53, 74, 98, 118, 121, 122, 125, 128, 140, 144, 154, 160, 163, 164, 166, 170, 172, 176, 200, 214, 218, 224, 225, 231, 239, 246, 256, 257, 261, 262, 263, 276, 293, 298, 303, 310, 313, 325, 336, 342, 343, 352, 356, 357, 358, 363, 370, 372, 373, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 394, 395, 397, 399, 400, 402, 403, 404, 405, 406, 422, 423, 424, 428, 430, 432, 433, 435, 437, 440, 442, 443, 445, 447, 452, 467, 472, 473, 474, 476, 479, 483, 484, 485, 487, 488, 493, 517, 518, 524, 527, 534, 542, 543, 545, 571, 572, 573, 574, 585, 587, 590, 591, 594, 610, 615, 616, 621, 623, 631, 641, 642, 652, 654, 656, 659, 660, 661, 663, 670, 673, 674, 677, 678, 711, 723, 760, 763, 772, 773, 777, 778, 798, 806, 823, 824, 825, 827, 829, 830, 831, 832, 833, 839, 840, 842, 854, 855, 858, 861, 875, 882, 883, 886, 890, 899, 953, 954, 956, 957, 958, 960, 961, 963, 964, 966, 967, 968, 969, 972, 976, 978, 979, 980, 990, 997, 999, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1020, 1021], "busi": [4, 196, 256, 378, 381, 770, 960, 964, 988], "dai": [4, 12, 153, 167, 197, 357, 367, 370, 860, 988, 1011, 1012, 1019, 1020], "week": [4, 369, 370, 384, 988, 1019], "yearli": 4, "season": [4, 153, 167, 197, 369, 405], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 56, 57, 61, 63, 65, 66, 67, 69, 70, 73, 77, 85, 97, 104, 108, 109, 116, 118, 120, 122, 123, 127, 128, 134, 144, 145, 149, 160, 161, 163, 166, 167, 168, 169, 172, 185, 196, 198, 202, 203, 204, 213, 214, 218, 219, 221, 225, 230, 232, 234, 243, 246, 249, 251, 252, 253, 254, 256, 257, 258, 261, 262, 264, 265, 267, 269, 271, 272, 274, 276, 289, 295, 298, 300, 302, 304, 305, 308, 315, 322, 328, 331, 334, 341, 343, 352, 355, 357, 358, 365, 367, 372, 373, 374, 376, 378, 379, 381, 382, 383, 385, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 407, 413, 424, 426, 427, 428, 430, 431, 433, 435, 437, 438, 442, 444, 451, 452, 465, 466, 467, 468, 477, 485, 495, 498, 514, 515, 516, 518, 520, 522, 525, 526, 527, 528, 529, 531, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 584, 585, 586, 593, 594, 610, 613, 614, 621, 623, 628, 634, 637, 638, 639, 641, 647, 648, 649, 650, 651, 653, 656, 658, 659, 660, 661, 665, 666, 668, 670, 672, 673, 676, 677, 680, 686, 687, 688, 690, 691, 695, 696, 708, 711, 712, 720, 722, 724, 737, 738, 739, 760, 765, 766, 768, 769, 770, 774, 775, 776, 777, 778, 779, 782, 783, 790, 791, 793, 797, 802, 803, 804, 806, 807, 810, 813, 814, 816, 817, 818, 819, 820, 821, 822, 828, 830, 836, 837, 838, 839, 841, 842, 844, 847, 848, 850, 851, 853, 854, 855, 857, 858, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 876, 877, 879, 883, 884, 885, 886, 887, 889, 890, 891, 892, 901, 902, 937, 948, 953, 954, 956, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 977, 978, 979, 980, 984, 985, 988, 990, 991, 994, 997, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 356, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 381, 382, 383, 385, 386, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 984, 985, 990, 994, 995, 996, 997, 998, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "preprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 57, 61, 69, 70, 71, 72, 74, 85, 94, 105, 114, 118, 141, 153, 157, 168, 172, 175, 177, 184, 185, 187, 196, 197, 202, 212, 214, 218, 226, 227, 235, 238, 253, 263, 265, 270, 284, 285, 292, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 320, 328, 331, 342, 358, 359, 362, 364, 367, 370, 375, 382, 383, 392, 395, 396, 399, 403, 404, 447, 448, 449, 450, 472, 550, 564, 565, 571, 572, 573, 574, 613, 641, 642, 655, 657, 659, 661, 670, 723, 810, 841, 842, 881, 882, 883, 884, 886, 887, 954, 960, 965, 968, 975, 978, 979, 981, 984, 987, 988, 990, 995, 996, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "splinetransform": [4, 197, 311, 856, 974, 1018, 1020, 1021], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 57, 70, 71, 90, 91, 99, 103, 107, 108, 116, 124, 129, 132, 148, 149, 152, 156, 157, 160, 163, 166, 167, 172, 174, 186, 187, 188, 204, 208, 211, 212, 215, 218, 225, 232, 234, 241, 242, 243, 249, 250, 251, 256, 258, 262, 266, 267, 272, 274, 276, 279, 281, 284, 285, 286, 287, 303, 308, 312, 316, 318, 319, 323, 324, 328, 329, 337, 339, 341, 342, 343, 358, 359, 362, 364, 365, 366, 367, 370, 371, 372, 374, 375, 376, 377, 379, 381, 382, 386, 391, 393, 395, 396, 398, 400, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 444, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 485, 486, 487, 491, 492, 493, 495, 497, 498, 502, 505, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 703, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 736, 737, 739, 764, 765, 766, 768, 769, 770, 771, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 906, 907, 908, 909, 910, 912, 913, 925, 930, 932, 934, 935, 948, 953, 954, 955, 956, 958, 959, 960, 961, 965, 966, 968, 971, 972, 974, 975, 977, 980, 985, 986, 988, 990, 994, 997, 999, 1001, 1002, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "extrapol": [4, 148, 175, 197, 228, 259, 860, 964, 974, 980, 1018, 1020], "option": [4, 30, 46, 52, 102, 122, 154, 161, 177, 197, 259, 265, 309, 341, 346, 352, 358, 364, 365, 366, 368, 370, 371, 373, 375, 376, 378, 379, 381, 383, 384, 386, 389, 395, 396, 398, 399, 400, 402, 403, 406, 417, 425, 426, 428, 429, 430, 431, 432, 435, 442, 444, 445, 446, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 530, 532, 545, 550, 551, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 611, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 629, 635, 640, 641, 642, 653, 656, 658, 659, 660, 661, 663, 665, 666, 670, 671, 672, 675, 677, 678, 694, 696, 700, 711, 712, 717, 718, 719, 739, 740, 741, 746, 748, 749, 753, 756, 757, 758, 759, 760, 763, 765, 766, 769, 772, 773, 775, 782, 783, 785, 805, 807, 808, 812, 813, 814, 815, 821, 822, 825, 830, 833, 837, 840, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 873, 874, 881, 893, 895, 908, 950, 953, 954, 960, 963, 964, 967, 974, 977, 979, 980, 985, 987, 997, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 70, 71, 88, 94, 105, 108, 114, 115, 117, 124, 125, 128, 129, 131, 142, 143, 153, 166, 167, 172, 177, 192, 193, 196, 204, 212, 227, 228, 233, 234, 235, 236, 238, 246, 252, 254, 256, 261, 263, 268, 274, 276, 280, 285, 293, 294, 295, 309, 310, 312, 313, 318, 319, 320, 347, 350, 356, 359, 362, 365, 367, 373, 376, 382, 389, 394, 398, 399, 400, 402, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 515, 517, 526, 821, 822, 918, 974, 985, 991, 993, 995, 1001, 1005, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "openml": [4, 70, 128, 153, 166, 196, 204, 212, 214, 226, 274, 294, 363, 386, 479, 1001, 1013, 1015, 1018], "repositori": [4, 8, 172, 363, 365, 367, 368, 370, 372, 374, 378, 384, 386, 487, 984, 987, 1001], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 167, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 364, 365, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 389, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 467, 468, 471, 478, 479, 483, 485, 486, 487, 489, 490, 491, 493, 495, 498, 504, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 562, 563, 564, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 698, 700, 701, 704, 705, 706, 708, 709, 710, 711, 712, 713, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 745, 746, 750, 751, 753, 755, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 869, 870, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 908, 913, 916, 918, 920, 921, 922, 923, 925, 926, 927, 928, 932, 935, 938, 952, 953, 954, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 976, 977, 978, 979, 980, 985, 988, 990, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "fetch_openml": [4, 5, 70, 74, 118, 128, 153, 166, 167, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 304, 308, 312, 364, 374, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "bike_shar": 4, "bike_sharing_demand": [4, 167], "version": [4, 46, 53, 70, 84, 94, 99, 150, 161, 167, 168, 172, 175, 194, 197, 198, 204, 210, 212, 234, 238, 274, 294, 303, 308, 309, 310, 311, 313, 328, 341, 356, 359, 365, 369, 370, 371, 372, 373, 376, 378, 379, 381, 383, 384, 386, 388, 389, 394, 395, 398, 400, 402, 403, 405, 406, 407, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 483, 484, 485, 487, 488, 491, 492, 493, 495, 497, 505, 506, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 691, 696, 697, 701, 704, 705, 706, 707, 709, 710, 711, 712, 713, 716, 721, 722, 723, 725, 728, 735, 736, 738, 739, 740, 741, 743, 748, 749, 750, 751, 760, 764, 765, 766, 767, 769, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 899, 901, 902, 912, 913, 915, 917, 918, 927, 930, 931, 932, 934, 939, 945, 950, 951, 953, 956, 958, 961, 964, 966, 968, 970, 972, 977, 978, 980, 982, 985, 987, 998, 1003], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 134, 137, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 357, 358, 364, 365, 367, 368, 370, 372, 374, 375, 376, 377, 379, 381, 382, 383, 386, 387, 388, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 416, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 442, 443, 445, 446, 447, 448, 451, 452, 454, 455, 456, 457, 458, 461, 465, 466, 467, 468, 476, 479, 483, 484, 487, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 564, 565, 567, 568, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 586, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 686, 687, 688, 689, 691, 696, 698, 699, 700, 701, 704, 705, 706, 707, 708, 710, 711, 712, 713, 716, 717, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 745, 746, 750, 751, 753, 755, 758, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 865, 869, 874, 875, 877, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 901, 902, 907, 915, 916, 917, 918, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 932, 935, 937, 938, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 982, 990, 991, 994, 995, 996, 997, 998, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1021], "as_fram": [4, 5, 70, 74, 118, 128, 153, 166, 167, 168, 184, 185, 196, 204, 212, 214, 234, 238, 276, 294, 303, 304, 308, 310, 312, 313, 364, 365, 472, 473, 474, 475, 479, 483, 484, 485, 487, 488, 493, 1015, 1016, 1017, 1018], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 56, 57, 59, 62, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 91, 94, 95, 96, 97, 99, 105, 108, 113, 118, 119, 120, 121, 123, 124, 125, 128, 129, 131, 134, 135, 136, 141, 144, 148, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 172, 180, 181, 183, 184, 185, 187, 189, 191, 192, 193, 196, 198, 199, 200, 203, 204, 210, 211, 212, 214, 217, 220, 221, 225, 226, 229, 231, 232, 233, 234, 237, 238, 241, 244, 246, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 281, 282, 285, 289, 292, 293, 294, 295, 299, 303, 304, 305, 308, 310, 312, 313, 317, 319, 320, 321, 331, 335, 336, 337, 341, 342, 343, 346, 347, 350, 352, 356, 357, 363, 365, 366, 370, 371, 372, 375, 376, 377, 379, 382, 383, 385, 389, 391, 392, 393, 395, 396, 397, 399, 400, 402, 403, 404, 405, 407, 408, 409, 412, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 502, 505, 506, 507, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 690, 691, 692, 695, 696, 697, 698, 701, 703, 706, 708, 709, 710, 711, 712, 713, 716, 717, 720, 721, 722, 723, 724, 725, 732, 733, 734, 736, 738, 743, 749, 750, 751, 760, 764, 765, 766, 767, 768, 769, 770, 771, 774, 776, 777, 778, 779, 782, 783, 784, 785, 790, 791, 793, 797, 798, 801, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 899, 900, 901, 902, 912, 918, 919, 925, 926, 929, 930, 934, 935, 937, 945, 950, 952, 953, 954, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 976, 977, 978, 979, 980, 984, 990, 994, 995, 997, 998, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "parser": [4, 5, 8, 70, 74, 118, 128, 153, 166, 167, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 304, 308, 312, 479, 1020], "panda": [4, 5, 12, 25, 69, 70, 71, 72, 74, 115, 118, 121, 125, 128, 153, 160, 165, 166, 167, 168, 175, 185, 196, 204, 212, 214, 226, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 274, 276, 294, 303, 304, 305, 308, 311, 312, 336, 341, 342, 364, 365, 368, 369, 370, 372, 373, 383, 386, 388, 396, 417, 426, 427, 429, 430, 432, 447, 449, 451, 465, 466, 467, 468, 472, 473, 474, 475, 479, 483, 484, 485, 487, 488, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 615, 616, 618, 621, 622, 623, 624, 625, 671, 672, 675, 779, 782, 783, 793, 807, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 879, 897, 953, 954, 974, 984, 985, 999, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "df": [4, 25, 27, 128, 165, 167, 175, 196, 214, 246, 256, 302, 304, 342, 375, 403, 573, 574, 953, 954], "frame": [4, 16, 70, 153, 166, 167, 196, 304, 365, 370, 381, 384, 472, 473, 474, 475, 479, 483, 484, 485, 487, 488, 493, 984, 995, 1017], "To": [4, 8, 16, 26, 27, 32, 46, 56, 77, 79, 81, 85, 89, 99, 118, 121, 122, 130, 134, 145, 153, 154, 157, 160, 161, 165, 166, 172, 177, 184, 196, 197, 198, 204, 214, 229, 230, 236, 238, 246, 251, 253, 254, 256, 258, 259, 261, 263, 274, 294, 298, 303, 304, 305, 308, 309, 310, 311, 312, 313, 338, 342, 346, 352, 356, 357, 363, 364, 368, 370, 371, 372, 374, 375, 376, 378, 381, 383, 384, 389, 392, 395, 396, 397, 398, 399, 400, 402, 403, 431, 432, 433, 444, 447, 450, 475, 479, 485, 486, 490, 491, 514, 520, 521, 522, 524, 526, 527, 528, 529, 540, 541, 542, 543, 547, 548, 552, 580, 585, 610, 615, 629, 630, 635, 636, 639, 641, 642, 643, 644, 645, 646, 667, 683, 695, 710, 745, 767, 773, 782, 783, 803, 810, 852, 871, 872, 881, 882, 889, 890, 891, 892, 908, 918, 932, 951, 953, 954, 959, 960, 961, 962, 964, 965, 966, 967, 970, 971, 974, 978, 979, 980, 987, 988, 990, 994, 996, 997, 999, 1005, 1008, 1010, 1011, 1012, 1014, 1016], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 55, 95, 99, 121, 130, 142, 145, 148, 153, 154, 160, 166, 167, 168, 169, 189, 198, 211, 214, 217, 232, 254, 257, 258, 260, 264, 267, 274, 276, 281, 289, 299, 308, 317, 320, 325, 328, 330, 333, 338, 341, 343, 346, 357, 359, 363, 364, 365, 368, 370, 371, 372, 375, 376, 377, 378, 383, 386, 389, 391, 393, 395, 396, 397, 399, 400, 402, 403, 404, 405, 409, 410, 411, 415, 416, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 678, 682, 704, 705, 706, 708, 714, 715, 724, 738, 745, 746, 751, 767, 770, 777, 778, 779, 782, 783, 793, 802, 803, 804, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 896, 909, 910, 911, 917, 918, 953, 959, 960, 961, 963, 964, 974, 977, 978, 979, 980, 985, 987, 994, 997, 998, 999, 1002, 1005, 1008, 1011, 1013, 1016, 1018, 1019], "quick": [4, 99, 237, 370, 372, 376, 386, 589, 807, 964, 965, 974, 988, 997, 1002], "understand": [4, 9, 89, 153, 163, 167, 251, 254, 310, 311, 325, 341, 345, 351, 352, 369, 370, 371, 376, 381, 385, 395, 402, 403, 487, 807, 838, 839, 862, 889, 890, 891, 892, 895, 953, 954, 961, 963, 980, 983, 984, 988, 1005, 1019], "pattern": [4, 16, 62, 81, 93, 106, 148, 160, 163, 167, 311, 341, 342, 343, 352, 367, 370, 372, 384, 392, 395, 396, 400, 402, 403, 431, 447, 449, 487, 515, 517, 524, 538, 539, 621, 691, 707, 723, 751, 770, 771, 777, 861, 956, 958, 960, 964, 965, 971, 979, 981, 985, 988, 1017], "let": [4, 5, 53, 63, 70, 74, 94, 99, 108, 115, 118, 121, 122, 125, 148, 154, 155, 161, 166, 167, 168, 177, 185, 196, 198, 214, 217, 221, 251, 256, 259, 263, 341, 343, 350, 352, 365, 370, 372, 376, 381, 392, 395, 399, 402, 403, 483, 487, 493, 517, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 664, 667, 847, 854, 855, 960, 961, 962, 963, 964, 971, 972, 974, 979, 980, 988, 997, 999, 1015], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 55, 94, 102, 118, 119, 148, 157, 165, 166, 167, 193, 197, 204, 214, 218, 221, 229, 237, 238, 242, 243, 247, 251, 256, 259, 263, 302, 304, 341, 350, 357, 359, 365, 370, 374, 376, 378, 381, 386, 392, 395, 398, 400, 402, 403, 416, 446, 448, 465, 466, 467, 514, 520, 528, 529, 533, 535, 537, 539, 541, 543, 545, 548, 551, 553, 571, 572, 574, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 664, 667, 672, 676, 687, 703, 722, 737, 814, 815, 824, 832, 839, 861, 875, 882, 884, 887, 890, 892, 918, 958, 963, 964, 971, 974, 982, 988, 999, 1002, 1015], "look": [4, 5, 53, 94, 97, 99, 121, 122, 148, 153, 154, 161, 166, 167, 198, 217, 221, 225, 247, 251, 256, 258, 294, 341, 342, 352, 357, 358, 364, 365, 368, 370, 372, 374, 376, 378, 381, 382, 395, 398, 400, 401, 402, 403, 431, 471, 472, 540, 541, 542, 543, 547, 548, 585, 586, 614, 642, 675, 861, 889, 890, 891, 892, 960, 961, 974, 978, 979, 981, 999, 1005, 1013, 1015], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 59, 61, 112, 113, 117, 121, 124, 129, 130, 131, 145, 153, 167, 177, 185, 196, 203, 214, 234, 259, 261, 264, 266, 274, 298, 308, 320, 341, 352, 356, 365, 367, 372, 392, 393, 397, 399, 403, 405, 406, 407, 421, 422, 425, 428, 429, 430, 432, 473, 476, 477, 506, 514, 515, 516, 520, 521, 523, 524, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 553, 570, 615, 616, 631, 641, 642, 649, 650, 652, 655, 657, 659, 660, 661, 663, 670, 683, 686, 687, 689, 690, 691, 696, 703, 704, 705, 707, 708, 710, 711, 712, 716, 717, 718, 720, 721, 722, 725, 727, 728, 730, 732, 733, 735, 738, 746, 763, 764, 765, 766, 767, 769, 770, 775, 776, 777, 778, 805, 827, 847, 862, 950, 954, 959, 960, 965, 968, 970, 971, 978, 979, 980, 997, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021], "per": [4, 10, 48, 53, 63, 90, 114, 118, 153, 155, 166, 167, 196, 211, 214, 238, 242, 252, 263, 265, 298, 304, 310, 336, 341, 343, 356, 365, 366, 370, 375, 376, 379, 381, 383, 393, 395, 399, 400, 401, 402, 403, 405, 431, 433, 440, 444, 447, 451, 470, 483, 485, 486, 487, 491, 493, 495, 498, 506, 515, 517, 518, 519, 522, 524, 526, 532, 533, 544, 545, 552, 566, 571, 574, 593, 594, 615, 616, 624, 625, 641, 642, 649, 651, 654, 656, 657, 658, 659, 661, 675, 679, 696, 699, 703, 723, 736, 740, 741, 763, 765, 777, 778, 802, 809, 810, 811, 813, 814, 817, 819, 837, 840, 846, 848, 850, 851, 854, 855, 861, 862, 879, 881, 882, 883, 884, 885, 886, 887, 906, 907, 918, 939, 953, 956, 960, 963, 964, 965, 968, 971, 978, 979, 980, 984, 985, 997, 999, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1021], "hour": [4, 166, 167, 370, 376, 961, 983], "sundai": 4, "weekend": 4, "clearli": [4, 59, 97, 167, 230, 369, 370, 381, 383, 400, 402, 965, 971], "distinguish": [4, 40, 79, 91, 99, 198, 253, 365, 372, 383, 384, 402, 405, 953, 964, 967, 970], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 74, 85, 97, 121, 154, 166, 167, 168, 185, 196, 197, 204, 214, 221, 222, 231, 242, 262, 298, 300, 302, 303, 321, 341, 342, 343, 352, 358, 365, 369, 370, 371, 372, 374, 375, 378, 381, 383, 393, 394, 395, 396, 397, 399, 400, 402, 403, 405, 425, 427, 429, 430, 431, 432, 442, 444, 515, 518, 540, 541, 542, 543, 547, 548, 565, 572, 577, 610, 611, 613, 622, 641, 642, 678, 688, 695, 725, 743, 749, 756, 760, 763, 768, 770, 804, 841, 842, 873, 874, 889, 890, 891, 892, 918, 933, 953, 954, 956, 958, 960, 963, 964, 967, 969, 970, 972, 974, 976, 978, 979, 980, 988, 999, 1012, 1013, 1014, 1017, 1019], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 43, 44, 46, 49, 52, 53, 56, 59, 66, 74, 79, 88, 89, 91, 94, 97, 101, 102, 110, 112, 115, 116, 118, 120, 121, 122, 123, 124, 128, 145, 148, 154, 157, 161, 166, 167, 172, 175, 176, 182, 185, 187, 190, 194, 196, 197, 198, 211, 212, 213, 214, 217, 221, 225, 230, 231, 232, 236, 241, 243, 244, 246, 247, 250, 254, 256, 257, 258, 259, 263, 265, 276, 278, 286, 292, 293, 295, 298, 299, 300, 303, 304, 305, 308, 309, 310, 312, 313, 317, 325, 328, 333, 336, 338, 341, 342, 343, 346, 347, 352, 356, 357, 358, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 382, 383, 384, 386, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 914, 916, 918, 920, 927, 930, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 984, 985, 986, 987, 988, 990, 994, 995, 996, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "spread": [4, 40, 219, 257, 298, 316, 317, 318, 321, 356, 370, 395, 435, 445, 498, 858, 870, 878, 964], "peak": [4, 27, 167, 393, 399, 1019], "middl": [4, 24, 59, 99, 109, 337, 367, 971, 974], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 316, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 364, 373, 377, 386, 388, 422, 485, 614, 615, 680, 681, 683, 684, 685, 785, 895, 984, 993, 995, 996, 997, 1002, 1014, 1017, 1018, 1019, 1020], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 316, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 370, 377, 422, 485, 614, 615, 680, 681, 683, 684, 685, 785, 995, 996, 997, 1002, 1019], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 312, 313, 316, 317, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 377, 422, 485, 614, 615, 680, 681, 683, 684, 685, 785, 895, 971, 995, 996, 997, 1002], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 56, 59, 63, 65, 72, 77, 79, 85, 89, 94, 99, 100, 101, 105, 108, 114, 115, 118, 121, 122, 125, 126, 128, 130, 151, 157, 160, 167, 169, 172, 176, 184, 187, 190, 191, 193, 194, 196, 197, 204, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 228, 234, 235, 246, 251, 252, 253, 256, 257, 258, 259, 262, 265, 266, 267, 274, 276, 278, 280, 281, 289, 293, 294, 298, 299, 300, 302, 303, 304, 308, 312, 313, 325, 335, 336, 337, 338, 341, 342, 343, 346, 377, 995], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 63, 65, 71, 72, 74, 79, 81, 85, 89, 91, 94, 100, 101, 105, 108, 111, 114, 115, 118, 125, 126, 128, 129, 130, 151, 152, 157, 160, 165, 166, 167, 168, 169, 172, 175, 176, 179, 185, 187, 188, 191, 193, 194, 196, 197, 198, 200, 201, 204, 205, 207, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 231, 234, 235, 237, 241, 243, 246, 251, 252, 253, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 280, 281, 284, 286, 287, 292, 293, 294, 298, 300, 301, 302, 303, 304, 308, 309, 312, 313, 324, 325, 326, 329, 330, 335, 336, 337, 338, 341, 342, 343, 346, 347, 372, 373, 400, 405, 422, 517, 524, 533, 614, 615, 680, 681, 683, 684, 685, 701, 785, 895, 964, 967, 971, 1002, 1015], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 59, 61, 64, 65, 72, 74, 78, 79, 80, 81, 84, 85, 90, 91, 94, 95, 96, 97, 99, 104, 105, 109, 111, 112, 114, 115, 117, 118, 122, 125, 126, 128, 129, 130, 140, 150, 152, 157, 160, 161, 166, 167, 169, 172, 176, 179, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 204, 209, 212, 214, 217, 218, 221, 222, 225, 226, 228, 230, 231, 232, 233, 234, 235, 241, 242, 243, 244, 246, 247, 251, 252, 253, 256, 258, 259, 261, 262, 263, 265, 266, 267, 269, 270, 274, 276, 278, 279, 280, 281, 284, 285, 287, 288, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 308, 312, 313, 319, 321, 325, 326, 328, 335, 336, 337, 338, 341, 342, 343, 346, 347, 377, 995], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 65, 72, 74, 79, 81, 84, 85, 88, 89, 90, 91, 94, 97, 98, 99, 100, 101, 104, 105, 109, 111, 112, 118, 119, 120, 121, 122, 126, 128, 129, 140, 150, 152, 156, 157, 160, 161, 166, 167, 169, 172, 175, 176, 179, 186, 190, 193, 194, 195, 196, 197, 198, 200, 202, 204, 207, 210, 212, 214, 217, 218, 219, 221, 222, 225, 226, 228, 230, 232, 233, 234, 235, 241, 243, 244, 247, 251, 252, 253, 258, 259, 260, 263, 265, 266, 270, 274, 276, 278, 292, 293, 295, 298, 299, 300, 301, 302, 303, 304, 312, 313, 316, 318, 326, 328, 332, 333, 335, 336, 337, 338, 341, 342, 343, 895, 995], "4": [4, 5, 6, 7, 8, 9, 10, 12, 14, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 70, 71, 72, 73, 78, 80, 81, 84, 85, 90, 91, 95, 96, 97, 98, 99, 100, 101, 103, 104, 108, 110, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 134, 141, 143, 150, 151, 153, 154, 156, 157, 160, 161, 166, 167, 172, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 202, 203, 204, 206, 209, 210, 214, 217, 225, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 267, 270, 274, 276, 278, 280, 281, 282, 283, 286, 289, 292, 294, 295, 298, 299, 301, 302, 304, 308, 309, 311, 313, 316, 317, 318, 319, 320, 325, 327, 331, 332, 333, 336, 337, 338, 341, 342, 343, 350, 352, 357, 364, 365, 367, 368, 370, 375, 376, 379, 381, 382, 383, 386, 387, 388, 393, 395, 396, 397, 399, 400, 402, 403, 404, 405, 407, 421, 423, 424, 425, 427, 429, 430, 431, 432, 434, 435, 436, 442, 443, 445, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 479, 487, 495, 496, 499, 500, 501, 511, 515, 516, 517, 518, 520, 521, 522, 523, 527, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 553, 560, 564, 565, 572, 573, 574, 576, 577, 586, 590, 591, 597, 600, 602, 605, 610, 611, 612, 613, 616, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 660, 662, 663, 667, 670, 672, 673, 675, 676, 681, 682, 685, 689, 690, 698, 699, 708, 709, 716, 725, 726, 728, 729, 730, 731, 733, 734, 738, 750, 751, 763, 764, 770, 771, 774, 776, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 805, 807, 810, 811, 812, 815, 816, 817, 818, 820, 829, 838, 839, 840, 846, 847, 848, 853, 854, 855, 856, 857, 859, 862, 865, 869, 875, 881, 882, 884, 885, 887, 889, 890, 891, 907, 915, 917, 918, 920, 922, 923, 928, 932, 935, 953, 954, 957, 958, 959, 960, 962, 964, 965, 966, 967, 974, 975, 978, 979, 982, 990, 994, 995, 996, 997, 999, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1018, 1019, 1020], "average_week_demand": 4, "groupbi": [4, 72, 167, 204, 214], "weekdai": [4, 167], "count": [4, 14, 25, 27, 41, 49, 53, 69, 70, 91, 129, 130, 166, 167, 196, 198, 229, 238, 265, 276, 309, 310, 342, 343, 365, 367, 374, 379, 383, 384, 393, 394, 395, 400, 402, 403, 432, 472, 519, 527, 564, 571, 572, 573, 574, 577, 587, 600, 623, 680, 688, 698, 701, 711, 712, 720, 736, 765, 766, 768, 769, 816, 820, 821, 822, 830, 833, 844, 893, 895, 920, 929, 953, 956, 960, 964, 966, 967, 974, 980, 988, 999, 1005, 1008, 1010, 1013, 1014, 1016, 1017], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 67, 70, 78, 79, 80, 81, 85, 91, 94, 97, 98, 99, 101, 102, 111, 112, 117, 118, 121, 122, 128, 129, 130, 135, 144, 145, 148, 153, 155, 157, 160, 163, 166, 167, 176, 178, 185, 187, 189, 192, 196, 198, 200, 202, 203, 205, 211, 212, 213, 214, 220, 222, 225, 228, 229, 230, 231, 232, 234, 235, 236, 238, 241, 242, 243, 244, 246, 247, 252, 253, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 287, 298, 301, 303, 304, 305, 308, 311, 319, 328, 331, 336, 338, 340, 341, 343, 344, 352, 356, 362, 364, 365, 367, 370, 371, 372, 374, 375, 376, 378, 379, 381, 382, 383, 392, 393, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 416, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 471, 484, 485, 487, 489, 495, 502, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 571, 572, 573, 574, 577, 580, 585, 589, 590, 591, 592, 593, 594, 596, 605, 610, 611, 613, 615, 617, 618, 622, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 667, 671, 672, 673, 674, 675, 676, 677, 678, 687, 688, 690, 692, 695, 696, 699, 700, 706, 708, 711, 712, 713, 718, 719, 720, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 756, 760, 761, 763, 765, 766, 767, 769, 770, 772, 773, 775, 777, 778, 779, 782, 783, 785, 793, 797, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 829, 831, 832, 834, 835, 837, 838, 839, 840, 842, 843, 845, 846, 850, 851, 853, 857, 859, 861, 862, 867, 869, 870, 872, 874, 876, 877, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 897, 901, 902, 904, 938, 939, 945, 949, 953, 954, 955, 958, 960, 961, 963, 966, 967, 968, 969, 971, 972, 977, 978, 979, 980, 984, 988, 994, 997, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 57, 58, 59, 60, 61, 64, 67, 71, 72, 74, 78, 79, 80, 85, 87, 89, 92, 94, 97, 102, 103, 104, 105, 107, 109, 111, 112, 113, 114, 115, 120, 121, 123, 125, 126, 127, 132, 135, 137, 140, 141, 143, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 163, 164, 165, 166, 168, 169, 170, 172, 174, 178, 179, 181, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 220, 221, 222, 224, 225, 228, 229, 231, 232, 233, 238, 239, 241, 242, 243, 245, 247, 249, 250, 251, 256, 257, 259, 261, 262, 266, 267, 268, 270, 272, 274, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 294, 298, 299, 300, 301, 302, 303, 305, 309, 312, 313, 317, 318, 321, 323, 324, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 345, 346, 348, 349, 350, 351, 359, 370, 373, 379, 381, 385, 386, 390, 393, 395, 397, 399, 401, 402, 422, 425, 433, 439, 447, 454, 479, 484, 485, 487, 495, 498, 502, 506, 507, 536, 540, 543, 545, 547, 548, 552, 553, 593, 605, 614, 615, 616, 640, 641, 655, 659, 680, 681, 683, 684, 685, 686, 701, 709, 732, 764, 766, 769, 770, 771, 785, 796, 802, 803, 804, 805, 808, 819, 823, 839, 842, 854, 855, 858, 861, 881, 886, 889, 890, 895, 957, 958, 960, 961, 963, 964, 967, 968, 970, 978, 979, 980, 984, 985, 994, 995, 997, 1001, 1006, 1008, 1009, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 53, 57, 62, 66, 69, 81, 91, 94, 99, 100, 102, 104, 112, 113, 114, 140, 148, 153, 154, 155, 165, 166, 167, 172, 175, 179, 180, 181, 183, 184, 185, 188, 193, 194, 196, 198, 209, 213, 218, 221, 226, 231, 238, 251, 256, 258, 259, 260, 262, 263, 265, 279, 284, 287, 295, 300, 303, 304, 305, 309, 312, 313, 317, 318, 336, 341, 343, 347, 372, 376, 383, 400, 402, 403, 515, 516, 517, 518, 519, 521, 522, 523, 526, 530, 549, 580, 635, 636, 646, 667, 671, 672, 673, 674, 679, 681, 683, 746, 779, 793, 825, 833, 854, 855, 954, 960, 961, 964, 966, 967, 968, 971, 972, 974, 979, 980, 997, 1012], "hourli": [4, 166], "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 97, 118, 119, 120, 150, 151, 152, 156, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 255, 256, 270, 280, 289, 295, 304, 316, 328, 331, 332, 333, 334, 680, 995], "24": [4, 5, 65, 163, 167, 196, 215, 222, 276, 295, 307, 308, 314, 316, 317, 374, 386, 395, 402, 403, 421, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 443, 445, 447, 452, 453, 454, 455, 456, 457, 458, 459, 472, 473, 474, 475, 479, 487, 498, 499, 500, 501, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 526, 527, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 564, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 596, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 681, 683, 685, 691, 697, 709, 728, 735, 777, 778, 779, 782, 783, 793, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 842, 844, 845, 846, 847, 850, 851, 853, 855, 856, 857, 858, 859, 861, 871, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 912, 913, 939, 945, 953, 971, 974, 982, 1003, 1005, 1013, 1014, 1015, 1016, 1018], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 59, 60, 62, 63, 64, 77, 78, 80, 81, 109, 111, 112, 113, 115, 121, 127, 140, 144, 149, 166, 167, 172, 185, 186, 190, 194, 196, 197, 203, 204, 212, 214, 218, 220, 228, 229, 233, 241, 243, 246, 247, 251, 255, 256, 257, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 274, 280, 286, 289, 295, 298, 303, 304, 308, 312, 313, 317, 328, 341, 342, 347, 350, 357, 364, 365, 367, 370, 372, 376, 379, 383, 389, 395, 399, 402, 405, 424, 444, 452, 454, 455, 456, 457, 458, 459, 461, 464, 474, 477, 478, 497, 510, 524, 536, 537, 542, 543, 546, 571, 572, 574, 612, 615, 621, 623, 631, 632, 652, 654, 659, 663, 675, 695, 713, 728, 770, 807, 813, 827, 829, 831, 832, 837, 851, 858, 859, 860, 866, 867, 870, 871, 874, 875, 917, 918, 932, 953, 960, 964, 968, 978, 985, 988, 993, 994, 995, 997, 1010, 1011, 1012, 1013, 1015, 1018], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 59, 63, 64, 66, 70, 71, 73, 79, 81, 97, 108, 112, 121, 124, 128, 129, 135, 153, 157, 165, 166, 167, 169, 172, 177, 178, 180, 195, 196, 197, 198, 210, 214, 217, 225, 230, 231, 236, 238, 241, 242, 245, 246, 251, 255, 256, 260, 262, 263, 267, 269, 274, 276, 278, 281, 282, 284, 294, 295, 298, 302, 308, 311, 312, 313, 316, 317, 319, 320, 325, 327, 332, 336, 337, 341, 342, 343, 352, 365, 367, 368, 370, 374, 375, 376, 386, 387, 388, 393, 399, 400, 402, 403, 404, 405, 423, 428, 431, 433, 434, 435, 436, 445, 454, 455, 474, 515, 516, 517, 518, 519, 521, 527, 544, 545, 571, 574, 583, 610, 611, 613, 630, 632, 641, 644, 675, 704, 705, 706, 708, 710, 726, 727, 728, 732, 733, 735, 767, 774, 777, 780, 781, 786, 789, 796, 797, 800, 804, 807, 811, 821, 822, 830, 839, 840, 853, 854, 876, 877, 918, 921, 922, 928, 953, 954, 959, 960, 962, 964, 965, 967, 968, 970, 974, 978, 979, 982, 990, 994, 997, 1003, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1018], "xticklabel": [4, 10, 118, 167, 304], "sun": [4, 167, 1013, 1018, 1019], "mon": [4, 167], "tue": [4, 167, 1011], "wed": [4, 167], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 59, 77, 81, 97, 99, 112, 114, 116, 118, 141, 148, 153, 154, 167, 184, 185, 196, 198, 214, 225, 231, 235, 243, 254, 256, 261, 262, 263, 305, 308, 311, 346, 352, 356, 357, 365, 372, 376, 381, 383, 393, 395, 399, 400, 402, 403, 405, 406, 421, 423, 446, 498, 510, 536, 537, 538, 539, 540, 541, 546, 547, 548, 586, 589, 593, 605, 610, 615, 616, 626, 628, 641, 660, 688, 701, 707, 770, 775, 781, 786, 788, 800, 812, 815, 850, 881, 955, 956, 957, 958, 959, 960, 961, 964, 965, 970, 971, 972, 974, 976, 977, 978, 979, 985, 987, 988, 1005, 1007, 1011, 1013, 1014, 1015, 1017, 1021], "fri": [4, 167, 365], "sat": [4, 167, 403], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 60, 77, 78, 80, 81, 84, 85, 89, 96, 102, 109, 110, 111, 113, 118, 119, 120, 121, 122, 123, 127, 131, 134, 135, 140, 141, 144, 148, 149, 150, 151, 153, 154, 155, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 210, 214, 229, 231, 232, 251, 255, 256, 260, 261, 265, 266, 269, 270, 271, 278, 279, 282, 283, 304, 325, 327, 328, 331, 341, 347, 348, 349, 614], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 60, 77, 78, 80, 81, 84, 85, 89, 96, 102, 109, 110, 111, 113, 119, 120, 121, 122, 123, 127, 131, 134, 135, 140, 141, 144, 148, 149, 150, 151, 153, 154, 155, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 214, 229, 231, 232, 251, 255, 256, 259, 260, 261, 265, 266, 269, 270, 271, 279, 325, 328, 331, 341, 347, 348, 349, 614], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 60, 61, 62, 66, 67, 69, 70, 71, 72, 74, 81, 84, 85, 90, 91, 94, 96, 98, 99, 102, 108, 109, 110, 112, 116, 117, 119, 120, 121, 122, 124, 128, 130, 141, 142, 145, 156, 157, 161, 163, 166, 167, 172, 185, 195, 196, 197, 198, 203, 204, 210, 211, 212, 213, 214, 217, 225, 229, 232, 235, 241, 242, 244, 246, 247, 250, 251, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 276, 278, 282, 283, 298, 300, 301, 304, 308, 309, 310, 311, 312, 313, 320, 328, 332, 333, 336, 342, 343, 346, 350, 352, 357, 358, 362, 364, 365, 366, 367, 368, 370, 373, 374, 376, 377, 378, 379, 381, 382, 383, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 564, 565, 566, 567, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 686, 687, 688, 690, 695, 696, 697, 699, 701, 703, 706, 710, 711, 712, 713, 716, 717, 720, 722, 734, 737, 756, 760, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 870, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 901, 902, 905, 917, 918, 921, 922, 932, 933, 935, 938, 939, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 978, 979, 980, 981, 984, 985, 987, 990, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "rental": [4, 167, 971], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 68, 73, 75, 85, 89, 98, 101, 103, 108, 110, 116, 117, 118, 121, 122, 125, 127, 128, 129, 131, 137, 140, 143, 145, 148, 150, 153, 154, 161, 163, 165, 166, 167, 168, 169, 175, 179, 189, 192, 196, 198, 201, 204, 205, 218, 226, 228, 229, 230, 231, 233, 234, 235, 243, 250, 254, 257, 259, 261, 262, 265, 266, 276, 279, 284, 287, 288, 293, 297, 298, 306, 309, 310, 312, 316, 317, 320, 321, 324, 325, 328, 332, 334, 335, 341, 342, 347, 348, 349, 350, 352, 356, 358, 359, 362, 363, 364, 365, 366, 367, 372, 374, 375, 378, 379, 382, 385, 395, 399, 402, 405, 417, 421, 422, 423, 426, 429, 447, 448, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 491, 493, 503, 507, 514, 515, 517, 519, 520, 522, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 556, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 680, 681, 683, 684, 685, 690, 691, 692, 695, 696, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 717, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 764, 765, 766, 767, 769, 770, 771, 774, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 828, 830, 831, 832, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 862, 865, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 901, 926, 927, 928, 955, 956, 957, 960, 961, 964, 968, 971, 972, 978, 979, 980, 985, 987, 988, 990, 995, 997, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "absolut": [4, 74, 98, 118, 145, 166, 196, 198, 202, 214, 372, 395, 397, 399, 400, 402, 403, 404, 405, 406, 428, 433, 439, 440, 514, 520, 525, 528, 529, 531, 532, 533, 541, 543, 544, 545, 548, 571, 573, 574, 576, 580, 585, 602, 610, 615, 629, 632, 633, 635, 637, 639, 654, 655, 657, 659, 661, 665, 666, 682, 687, 700, 704, 718, 719, 727, 728, 730, 735, 737, 739, 750, 775, 781, 785, 796, 799, 805, 807, 819, 821, 822, 826, 845, 850, 853, 866, 890, 892, 950, 960, 961, 974, 978, 980, 997, 998, 1006, 1011, 1016, 1017, 1018, 1019], "basi": [4, 6, 13, 99, 148, 153, 155, 197, 294, 311, 328, 362, 368, 371, 395, 400, 402, 435, 517, 605, 615, 622, 674, 860, 962, 974, 979, 986, 994, 995, 998, 1001, 1013, 1015, 1018], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 57, 61, 66, 71, 76, 81, 82, 89, 94, 97, 105, 109, 111, 117, 126, 134, 136, 137, 140, 141, 150, 152, 153, 161, 163, 166, 178, 183, 184, 185, 189, 191, 198, 199, 202, 210, 212, 214, 220, 229, 232, 254, 255, 256, 267, 269, 274, 276, 278, 282, 283, 289, 292, 294, 298, 300, 301, 303, 311, 319, 321, 327, 334, 337, 356, 395, 397, 400, 452, 453, 454, 455, 456, 457, 458, 459, 460, 495, 519, 538, 539, 540, 541, 542, 543, 546, 547, 548, 589, 610, 614, 615, 631, 632, 652, 655, 657, 663, 674, 675, 679, 682, 687, 688, 723, 739, 771, 772, 773, 779, 838, 839, 850, 851, 853, 860, 867, 868, 889, 890, 891, 892, 932, 960, 962, 967, 974, 978, 979, 997, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "977": [4, 399], "rescal": [4, 46, 47, 99, 177, 184, 220, 298, 338, 397, 407, 452, 453, 454, 455, 456, 457, 458, 459, 516, 521, 629, 632, 635, 853, 859, 883, 884, 885, 886, 887, 964, 974, 998, 1009, 1010], "variabl": [4, 9, 11, 12, 16, 37, 69, 112, 115, 118, 121, 122, 136, 137, 140, 145, 155, 156, 160, 161, 167, 168, 172, 185, 196, 200, 201, 214, 219, 247, 256, 259, 266, 303, 304, 305, 352, 356, 358, 365, 367, 368, 370, 372, 374, 375, 378, 383, 395, 396, 397, 398, 400, 402, 403, 404, 433, 465, 466, 467, 470, 482, 484, 491, 498, 515, 517, 519, 524, 527, 536, 542, 543, 587, 589, 590, 591, 623, 633, 634, 637, 638, 644, 665, 666, 678, 692, 729, 780, 781, 784, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 809, 813, 814, 844, 855, 858, 862, 870, 882, 953, 954, 956, 960, 963, 964, 965, 966, 967, 969, 971, 972, 974, 978, 980, 984, 985, 987, 990, 991, 993, 995, 1005, 1010, 1013, 1015, 1018, 1020], "rel": [4, 6, 8, 17, 27, 60, 99, 115, 153, 172, 176, 196, 214, 244, 282, 283, 299, 305, 309, 312, 328, 341, 342, 365, 369, 372, 378, 383, 393, 395, 399, 402, 403, 405, 424, 427, 430, 432, 442, 504, 507, 514, 517, 520, 524, 540, 541, 542, 543, 547, 548, 549, 587, 632, 641, 642, 654, 655, 657, 673, 677, 711, 729, 779, 782, 783, 785, 793, 805, 808, 821, 822, 826, 838, 839, 850, 851, 861, 877, 881, 882, 883, 886, 888, 889, 890, 891, 892, 960, 961, 964, 966, 967, 968, 970, 980, 987, 995], "so": [4, 9, 12, 16, 17, 42, 48, 55, 60, 64, 80, 117, 120, 127, 148, 153, 166, 168, 172, 176, 196, 197, 225, 256, 276, 282, 283, 286, 293, 294, 299, 304, 305, 309, 319, 328, 336, 341, 343, 350, 352, 356, 357, 358, 364, 365, 369, 370, 372, 374, 375, 376, 378, 379, 383, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 479, 491, 492, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 678, 688, 691, 699, 708, 723, 738, 770, 777, 778, 779, 782, 783, 785, 786, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 871, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 918, 930, 939, 953, 954, 956, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 970, 974, 976, 977, 978, 979, 985, 988, 997, 998, 999, 1005, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1021], "error": [4, 5, 7, 13, 17, 27, 74, 77, 78, 80, 98, 104, 107, 108, 109, 112, 115, 118, 122, 132, 148, 160, 163, 166, 185, 192, 196, 198, 200, 202, 203, 210, 214, 228, 231, 247, 249, 252, 256, 257, 261, 270, 272, 282, 283, 312, 327, 336, 341, 342, 367, 368, 370, 372, 373, 374, 375, 379, 381, 383, 389, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 427, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 479, 486, 498, 507, 514, 520, 525, 526, 528, 531, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 550, 558, 575, 578, 579, 581, 582, 583, 589, 612, 615, 626, 629, 630, 631, 634, 636, 638, 644, 646, 648, 652, 654, 656, 658, 660, 661, 663, 668, 671, 672, 675, 676, 679, 681, 684, 685, 692, 695, 703, 704, 705, 709, 722, 725, 726, 727, 728, 729, 730, 732, 733, 735, 738, 746, 760, 764, 770, 771, 779, 782, 783, 785, 793, 803, 804, 805, 807, 808, 809, 810, 811, 816, 817, 818, 820, 821, 822, 828, 829, 831, 832, 833, 836, 839, 842, 854, 855, 860, 861, 879, 881, 883, 884, 885, 890, 892, 899, 900, 901, 902, 905, 927, 948, 951, 953, 954, 955, 957, 958, 959, 961, 965, 968, 972, 974, 978, 979, 980, 986, 997, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "easili": [4, 9, 31, 142, 169, 199, 212, 230, 235, 238, 256, 258, 265, 281, 300, 370, 372, 383, 384, 396, 402, 403, 405, 432, 958, 960, 961, 974, 978, 979, 980, 991, 994, 999, 1011], "interpret": [4, 27, 145, 155, 163, 164, 165, 167, 170, 196, 197, 212, 214, 250, 256, 258, 259, 295, 299, 302, 310, 341, 343, 356, 368, 370, 371, 376, 378, 379, 383, 385, 393, 395, 396, 401, 403, 435, 447, 448, 450, 479, 524, 555, 594, 622, 626, 636, 655, 656, 674, 675, 678, 684, 711, 735, 740, 741, 765, 772, 773, 785, 794, 804, 805, 807, 810, 842, 854, 861, 932, 958, 960, 964, 965, 971, 974, 980, 984, 990, 998, 1005, 1006, 1010, 1013, 1018, 1020], "fraction": [4, 25, 27, 119, 121, 196, 204, 214, 336, 342, 393, 399, 402, 422, 423, 432, 433, 439, 440, 498, 510, 540, 541, 542, 543, 547, 548, 549, 573, 576, 585, 649, 650, 651, 654, 659, 660, 661, 686, 704, 705, 706, 716, 774, 776, 781, 785, 805, 806, 820, 848, 883, 884, 885, 889, 890, 891, 892, 930, 960, 964, 967, 971, 972, 974, 979, 980, 985, 1006, 1007, 1008, 1019], "maximum": [4, 8, 11, 27, 33, 37, 56, 77, 78, 79, 80, 81, 96, 114, 117, 119, 149, 155, 163, 174, 184, 215, 266, 278, 282, 283, 289, 298, 323, 339, 342, 346, 348, 349, 356, 375, 376, 382, 383, 392, 393, 395, 397, 398, 400, 402, 403, 405, 406, 407, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 440, 442, 444, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 481, 492, 494, 495, 496, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 566, 567, 580, 593, 610, 614, 615, 618, 620, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 657, 659, 660, 661, 662, 665, 666, 668, 669, 670, 671, 672, 673, 675, 676, 677, 699, 726, 763, 777, 779, 782, 783, 785, 793, 800, 805, 830, 837, 838, 839, 845, 846, 850, 851, 853, 856, 857, 858, 860, 869, 870, 875, 876, 877, 878, 881, 882, 886, 889, 890, 891, 892, 893, 895, 898, 905, 953, 959, 960, 961, 963, 964, 966, 967, 968, 970, 974, 978, 979, 980, 998, 1012, 1013, 1015, 1016, 1019, 1020], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 57, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 137, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 163, 165, 166, 167, 168, 169, 172, 174, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 220, 225, 226, 228, 230, 231, 232, 233, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 341, 342, 346, 347, 348, 349, 350, 356, 358, 359, 362, 365, 367, 370, 373, 375, 376, 379, 381, 383, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 411, 416, 417, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 484, 492, 493, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 560, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 677, 680, 681, 683, 684, 685, 694, 705, 717, 732, 770, 777, 778, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 910, 948, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 984, 985, 986, 988, 994, 995, 996, 997, 998, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 55, 56, 57, 60, 64, 67, 68, 75, 78, 79, 83, 86, 94, 97, 99, 103, 104, 105, 114, 115, 116, 122, 128, 140, 145, 160, 172, 183, 185, 197, 204, 213, 216, 218, 223, 225, 231, 238, 240, 248, 258, 263, 265, 276, 282, 283, 285, 298, 302, 305, 308, 310, 311, 341, 342, 343, 350, 352, 356, 357, 358, 359, 362, 367, 368, 370, 371, 372, 376, 377, 379, 381, 382, 385, 389, 391, 392, 393, 396, 397, 398, 399, 400, 401, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 442, 445, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 487, 495, 497, 505, 508, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 693, 694, 713, 714, 717, 718, 723, 724, 745, 750, 751, 756, 760, 765, 770, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 869, 870, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 904, 918, 925, 930, 933, 948, 949, 952, 953, 954, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 972, 974, 976, 977, 978, 979, 980, 981, 984, 986, 988, 990, 994, 996, 997, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "minim": [4, 12, 56, 65, 77, 78, 121, 148, 156, 175, 192, 194, 196, 198, 204, 214, 217, 228, 229, 241, 246, 257, 265, 266, 298, 308, 311, 325, 336, 346, 359, 369, 370, 373, 378, 381, 383, 393, 395, 397, 400, 402, 424, 425, 429, 433, 446, 521, 523, 530, 540, 541, 542, 543, 547, 548, 592, 593, 594, 624, 629, 632, 640, 641, 650, 654, 655, 657, 661, 662, 670, 675, 677, 678, 730, 762, 828, 830, 839, 857, 869, 875, 889, 890, 891, 892, 955, 960, 961, 964, 967, 968, 974, 976, 977, 978, 979, 984, 986, 997, 998, 1001, 1009, 1014, 1015], "squar": [4, 5, 60, 70, 78, 79, 80, 83, 86, 95, 105, 112, 122, 124, 145, 148, 153, 163, 166, 174, 175, 177, 185, 192, 196, 198, 200, 201, 206, 213, 214, 215, 228, 229, 231, 244, 265, 266, 270, 302, 310, 311, 313, 325, 341, 362, 367, 370, 376, 379, 383, 395, 397, 398, 400, 401, 402, 406, 407, 416, 424, 426, 427, 428, 430, 432, 433, 440, 442, 443, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 484, 514, 520, 522, 524, 526, 530, 532, 535, 537, 539, 541, 542, 543, 545, 548, 551, 553, 573, 574, 575, 578, 579, 581, 582, 583, 587, 588, 589, 592, 594, 598, 605, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 665, 666, 669, 670, 671, 673, 675, 677, 679, 682, 692, 704, 705, 706, 732, 733, 740, 741, 745, 751, 752, 767, 807, 814, 815, 823, 824, 827, 829, 831, 832, 839, 842, 861, 881, 882, 884, 886, 887, 888, 890, 892, 916, 937, 950, 955, 957, 958, 967, 968, 972, 978, 980, 986, 997, 998, 1001, 1005, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 60, 62, 70, 71, 73, 82, 84, 85, 94, 95, 96, 102, 104, 107, 108, 109, 114, 115, 117, 119, 121, 125, 128, 129, 130, 131, 132, 134, 135, 143, 144, 145, 147, 148, 153, 155, 158, 159, 160, 162, 165, 166, 174, 177, 180, 184, 185, 191, 196, 198, 200, 201, 203, 204, 213, 214, 215, 224, 225, 226, 231, 236, 238, 239, 240, 241, 243, 244, 246, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 272, 276, 277, 283, 290, 298, 300, 311, 312, 331, 336, 342, 343, 347, 356, 357, 358, 359, 362, 368, 370, 373, 374, 377, 378, 379, 380, 386, 389, 390, 393, 395, 398, 400, 403, 404, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 444, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 475, 478, 479, 481, 484, 485, 507, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 562, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 670, 671, 672, 673, 674, 675, 680, 681, 683, 684, 685, 690, 691, 694, 695, 696, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 764, 765, 766, 767, 769, 770, 771, 774, 777, 778, 779, 782, 783, 784, 785, 790, 791, 793, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 866, 867, 869, 870, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 900, 901, 902, 904, 906, 907, 910, 912, 913, 914, 948, 952, 959, 961, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 985, 986, 988, 990, 991, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1021], "condit": [4, 12, 25, 27, 81, 116, 121, 163, 164, 166, 170, 185, 198, 201, 214, 259, 311, 350, 376, 381, 385, 392, 393, 395, 397, 400, 402, 404, 434, 447, 454, 455, 456, 461, 479, 496, 506, 507, 519, 522, 523, 524, 526, 528, 530, 532, 533, 545, 610, 615, 616, 626, 633, 634, 635, 637, 638, 639, 653, 655, 656, 657, 658, 665, 666, 670, 680, 695, 700, 701, 718, 719, 775, 816, 817, 818, 819, 820, 839, 842, 845, 854, 855, 858, 862, 918, 958, 960, 961, 962, 964, 966, 967, 969, 974, 980, 984, 997, 1001, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1019, 1020, 1021], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 65, 67, 69, 70, 71, 72, 74, 77, 78, 79, 80, 88, 94, 95, 96, 97, 98, 99, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 131, 135, 136, 137, 141, 145, 148, 149, 150, 153, 154, 155, 157, 159, 160, 162, 163, 165, 166, 167, 168, 172, 174, 175, 176, 179, 180, 184, 191, 196, 197, 198, 201, 203, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 228, 229, 230, 231, 232, 238, 241, 242, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 271, 274, 276, 279, 282, 283, 284, 287, 289, 298, 303, 304, 305, 309, 310, 311, 313, 317, 321, 324, 325, 327, 328, 330, 331, 341, 342, 343, 346, 349, 350, 352, 356, 357, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 415, 417, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 484, 486, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 558, 559, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 593, 594, 595, 602, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 687, 688, 689, 692, 694, 695, 701, 703, 704, 709, 711, 712, 716, 717, 719, 724, 725, 727, 728, 730, 732, 733, 735, 738, 740, 741, 745, 746, 748, 749, 750, 751, 752, 755, 757, 758, 759, 760, 763, 764, 765, 766, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 898, 899, 901, 902, 904, 905, 908, 912, 913, 914, 916, 917, 918, 920, 922, 925, 927, 928, 929, 932, 934, 935, 938, 939, 945, 948, 950, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 988, 991, 993, 994, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "median": [4, 37, 70, 74, 79, 80, 121, 160, 161, 166, 198, 202, 213, 227, 298, 309, 311, 312, 365, 397, 402, 404, 424, 437, 441, 444, 457, 535, 537, 541, 548, 580, 610, 613, 618, 653, 654, 662, 704, 735, 828, 859, 871, 890, 892, 954, 974, 980, 1008, 1009], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 57, 59, 60, 95, 112, 113, 121, 124, 131, 145, 148, 153, 163, 165, 166, 167, 172, 185, 190, 195, 196, 202, 214, 249, 254, 256, 262, 263, 269, 272, 303, 341, 342, 356, 365, 367, 372, 376, 383, 392, 394, 397, 399, 400, 401, 402, 403, 432, 435, 445, 481, 498, 521, 523, 530, 534, 540, 541, 542, 543, 546, 547, 548, 587, 590, 591, 594, 610, 614, 641, 673, 675, 681, 682, 685, 687, 688, 690, 692, 695, 696, 699, 700, 703, 707, 708, 709, 711, 713, 718, 719, 721, 722, 725, 729, 737, 738, 739, 764, 765, 766, 768, 769, 771, 772, 775, 802, 804, 807, 827, 858, 870, 889, 890, 891, 892, 954, 960, 962, 967, 969, 970, 972, 978, 994, 997, 1005, 1008, 1010, 1011, 1013, 1015], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 69, 70, 84, 99, 108, 109, 112, 114, 115, 116, 119, 120, 121, 122, 123, 134, 137, 139, 141, 144, 146, 148, 149, 163, 165, 166, 167, 168, 169, 172, 180, 185, 191, 192, 196, 197, 198, 203, 204, 211, 212, 214, 221, 226, 231, 233, 243, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 263, 264, 266, 267, 268, 272, 274, 284, 285, 292, 294, 300, 303, 304, 305, 320, 328, 336, 343, 352, 356, 357, 364, 365, 367, 373, 374, 375, 376, 381, 382, 383, 385, 386, 388, 390, 393, 396, 397, 400, 402, 403, 404, 405, 412, 414, 416, 419, 420, 421, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 471, 472, 476, 480, 481, 485, 487, 507, 514, 520, 522, 526, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 575, 577, 578, 579, 581, 582, 583, 585, 587, 588, 589, 591, 592, 593, 594, 610, 611, 613, 618, 619, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 682, 695, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 828, 831, 832, 838, 839, 841, 866, 867, 869, 870, 871, 872, 876, 877, 879, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 910, 912, 913, 959, 960, 963, 964, 967, 968, 972, 974, 978, 979, 980, 984, 985, 987, 988, 991, 994, 995, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "discuss": [4, 53, 57, 166, 185, 217, 222, 259, 341, 352, 358, 365, 367, 370, 375, 376, 378, 381, 383, 384, 395, 397, 401, 402, 405, 481, 665, 666, 823, 824, 829, 831, 832, 954, 958, 960, 961, 964, 967, 974, 981, 985, 1008], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 59, 61, 65, 77, 100, 101, 117, 128, 134, 135, 145, 166, 169, 189, 232, 234, 251, 261, 268, 346, 352, 356, 357, 358, 359, 372, 375, 378, 383, 395, 397, 399, 402, 403, 405, 406, 427, 428, 430, 432, 442, 506, 515, 521, 542, 543, 565, 585, 641, 642, 655, 657, 662, 670, 671, 672, 676, 708, 738, 779, 782, 783, 793, 848, 889, 890, 891, 892, 954, 955, 959, 960, 961, 962, 963, 967, 974, 977, 978, 979, 991, 993, 997, 998, 1007, 1008, 1012, 1014, 1016], "focu": [4, 9, 27, 94, 148, 247, 286, 356, 375, 393, 402, 536, 537, 542, 544, 545, 661, 961, 967, 974, 984, 985], "intuit": [4, 31, 44, 52, 61, 99, 112, 118, 140, 148, 166, 167, 197, 198, 219, 225, 257, 281, 300, 303, 325, 328, 342, 370, 383, 393, 395, 397, 399, 401, 764, 765, 766, 769, 852, 956, 960, 961, 964, 965, 971, 974, 975, 979, 988, 997, 999, 1005], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 71, 74, 79, 81, 85, 91, 94, 97, 99, 102, 108, 109, 111, 112, 114, 115, 117, 118, 121, 145, 148, 154, 160, 166, 167, 168, 172, 175, 182, 185, 196, 198, 202, 212, 213, 214, 221, 225, 231, 232, 242, 253, 254, 256, 257, 258, 259, 262, 265, 274, 276, 282, 283, 295, 298, 302, 303, 304, 310, 312, 317, 341, 342, 343, 352, 356, 357, 358, 364, 365, 366, 369, 370, 372, 375, 376, 378, 383, 384, 389, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 437, 440, 443, 446, 447, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 476, 477, 479, 492, 497, 498, 506, 514, 517, 518, 519, 520, 521, 523, 524, 525, 527, 530, 531, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 556, 564, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 610, 611, 613, 617, 623, 625, 626, 627, 628, 629, 630, 635, 636, 638, 641, 642, 643, 644, 645, 646, 649, 650, 651, 654, 655, 657, 659, 660, 661, 662, 665, 670, 675, 677, 679, 687, 688, 695, 703, 704, 705, 706, 717, 718, 721, 746, 761, 762, 763, 765, 767, 775, 777, 778, 779, 782, 783, 789, 793, 798, 800, 802, 803, 804, 805, 806, 809, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 835, 838, 839, 844, 854, 855, 856, 858, 859, 861, 864, 870, 871, 875, 878, 881, 882, 883, 886, 887, 889, 890, 891, 892, 893, 907, 918, 920, 921, 927, 933, 935, 938, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 978, 979, 980, 984, 985, 990, 994, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "root": [4, 16, 79, 145, 177, 350, 367, 370, 378, 395, 426, 484, 524, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 622, 733, 889, 890, 891, 892, 893, 895, 970, 980, 1007, 1013, 1014, 1015, 1016, 1019, 1020], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 57, 59, 63, 67, 69, 74, 81, 108, 109, 114, 120, 122, 123, 128, 142, 149, 160, 163, 165, 166, 168, 180, 185, 191, 192, 196, 198, 200, 202, 214, 220, 226, 229, 230, 234, 237, 249, 250, 252, 253, 254, 256, 257, 259, 263, 265, 266, 272, 274, 276, 278, 286, 289, 295, 298, 303, 308, 309, 311, 312, 313, 316, 317, 319, 320, 341, 342, 352, 356, 359, 362, 365, 370, 372, 381, 382, 383, 385, 390, 393, 400, 401, 402, 405, 406, 412, 421, 425, 428, 429, 433, 440, 452, 503, 518, 532, 533, 534, 536, 538, 540, 541, 542, 544, 545, 547, 548, 550, 552, 561, 585, 593, 603, 611, 617, 621, 622, 623, 624, 625, 626, 641, 642, 646, 649, 651, 657, 658, 659, 671, 673, 675, 677, 679, 779, 782, 783, 785, 793, 802, 803, 804, 806, 809, 810, 811, 812, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 847, 853, 876, 877, 881, 883, 886, 889, 891, 954, 956, 959, 965, 970, 972, 984, 985, 994, 995, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "studi": [4, 59, 121, 196, 214, 259, 262, 263, 341, 365, 367, 399, 404, 679, 691, 740, 741, 806, 962, 964, 978, 990], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 55, 56, 59, 60, 61, 64, 65, 70, 71, 72, 73, 74, 80, 84, 85, 89, 90, 91, 96, 98, 99, 100, 101, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 217, 218, 219, 222, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 346, 347, 348, 349, 350, 352, 362, 363, 364, 365, 368, 370, 372, 375, 377, 379, 382, 383, 389, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 408, 412, 413, 414, 416, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 481, 483, 485, 488, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 681, 682, 683, 684, 685, 689, 694, 708, 717, 723, 724, 738, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 770, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 901, 906, 907, 926, 927, 928, 935, 938, 951, 953, 954, 955, 956, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 971, 974, 978, 979, 980, 985, 990, 994, 995, 997, 1001, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "hist": [4, 25, 27, 53, 74, 111, 196, 198, 229, 262, 281, 298, 302, 304, 312], "bin": [4, 24, 25, 27, 53, 74, 111, 196, 229, 262, 281, 298, 299, 300, 301, 302, 304, 305, 368, 378, 386, 393, 401, 402, 422, 423, 431, 444, 544, 545, 844, 846, 860, 920, 998, 1013, 1014, 1015, 1019], "30": [4, 6, 8, 10, 14, 15, 19, 34, 39, 40, 54, 59, 70, 72, 77, 91, 100, 102, 117, 121, 127, 134, 148, 149, 152, 154, 158, 167, 172, 175, 190, 194, 196, 214, 217, 218, 222, 230, 233, 245, 256, 261, 270, 276, 285, 286, 302, 303, 304, 313, 316, 317, 321, 326, 329, 331, 334, 356, 365, 367, 375, 376, 399, 403, 406, 428, 433, 440, 483, 518, 521, 522, 524, 526, 553, 575, 578, 579, 581, 631, 675, 717, 765, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 862, 877, 890, 953, 958, 964, 965, 967, 972, 995, 1005, 1006, 1012, 1013, 1014], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 72, 94, 98, 108, 117, 121, 122, 154, 155, 156, 166, 172, 175, 196, 199, 200, 204, 211, 214, 228, 229, 231, 238, 251, 280, 281, 294, 299, 300, 301, 302, 308, 311, 313, 328, 334, 337, 343, 364, 367, 370, 373, 375, 379, 380, 381, 382, 383, 392, 393, 396, 399, 400, 401, 402, 403, 404, 405, 407, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 429, 431, 432, 433, 437, 440, 441, 444, 447, 448, 450, 451, 452, 454, 455, 465, 466, 467, 472, 486, 492, 499, 500, 501, 503, 507, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 594, 603, 605, 610, 611, 612, 613, 614, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 668, 669, 670, 671, 672, 673, 675, 676, 679, 680, 681, 682, 683, 684, 685, 704, 705, 706, 710, 727, 728, 730, 732, 733, 735, 736, 743, 749, 750, 753, 754, 756, 760, 761, 762, 763, 767, 777, 778, 779, 782, 783, 785, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 898, 899, 900, 901, 902, 903, 907, 912, 917, 928, 937, 939, 945, 950, 951, 954, 956, 958, 960, 961, 962, 963, 964, 966, 967, 968, 969, 971, 972, 976, 977, 978, 979, 980, 984, 985, 988, 990, 994, 995, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "annot": [4, 9, 26, 130, 172, 218, 260, 263, 341, 370, 371, 372, 395, 699, 895, 964, 980, 1014], "log": [4, 20, 25, 26, 27, 77, 94, 121, 128, 141, 145, 149, 150, 152, 153, 154, 157, 181, 184, 185, 189, 196, 200, 201, 206, 214, 229, 231, 245, 286, 303, 341, 365, 367, 368, 370, 374, 378, 379, 383, 392, 393, 395, 396, 397, 400, 402, 403, 405, 431, 434, 443, 448, 453, 454, 455, 456, 457, 458, 459, 515, 519, 524, 532, 533, 534, 536, 538, 540, 542, 545, 547, 573, 574, 576, 577, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 625, 628, 631, 641, 642, 652, 654, 659, 663, 723, 733, 737, 777, 778, 779, 782, 783, 793, 816, 817, 818, 819, 820, 821, 822, 826, 837, 838, 845, 846, 875, 878, 883, 886, 888, 889, 891, 916, 953, 956, 958, 960, 961, 966, 967, 969, 972, 974, 978, 980, 984, 985, 997, 1007, 1008, 1009, 1014, 1015, 1016, 1019], "describ": [4, 55, 128, 166, 214, 230, 256, 265, 352, 356, 357, 363, 365, 367, 369, 370, 372, 375, 378, 383, 384, 392, 395, 397, 398, 399, 400, 402, 403, 445, 452, 456, 457, 474, 476, 478, 479, 480, 483, 484, 485, 486, 487, 488, 493, 499, 500, 501, 511, 590, 591, 628, 642, 697, 777, 778, 816, 818, 856, 918, 953, 956, 959, 960, 963, 964, 966, 970, 978, 979, 980, 987, 990, 996, 997, 1013, 1015], "weather": [4, 153, 167, 405, 960, 964], "includ": [4, 32, 79, 118, 120, 165, 166, 168, 196, 214, 257, 276, 293, 298, 311, 312, 328, 333, 341, 343, 352, 356, 357, 364, 366, 368, 370, 371, 372, 374, 375, 376, 378, 379, 383, 384, 386, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 428, 433, 439, 449, 452, 453, 454, 455, 456, 457, 458, 459, 472, 473, 474, 479, 483, 484, 485, 487, 488, 493, 517, 524, 540, 547, 557, 615, 621, 629, 630, 635, 643, 644, 645, 648, 664, 671, 672, 680, 696, 711, 712, 717, 719, 720, 753, 765, 766, 769, 775, 779, 781, 782, 783, 792, 793, 796, 799, 804, 807, 829, 831, 832, 833, 854, 855, 856, 860, 878, 889, 891, 893, 895, 901, 902, 905, 907, 910, 953, 960, 963, 964, 965, 967, 968, 974, 978, 979, 980, 984, 985, 987, 988, 997, 999, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 63, 70, 77, 79, 84, 85, 99, 102, 108, 112, 115, 118, 127, 128, 131, 140, 141, 145, 148, 155, 157, 165, 166, 167, 168, 175, 182, 184, 185, 196, 197, 198, 201, 202, 204, 214, 221, 231, 232, 241, 242, 243, 244, 245, 246, 256, 257, 258, 259, 263, 265, 267, 271, 276, 288, 298, 302, 303, 308, 310, 318, 319, 325, 330, 336, 341, 342, 343, 350, 352, 356, 357, 358, 363, 364, 365, 366, 368, 370, 372, 376, 377, 379, 381, 382, 383, 384, 386, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 405, 408, 421, 430, 435, 442, 445, 451, 458, 465, 466, 467, 468, 471, 472, 479, 480, 483, 485, 488, 490, 491, 492, 517, 521, 523, 530, 534, 538, 539, 540, 546, 547, 548, 549, 550, 560, 571, 572, 574, 580, 590, 591, 610, 615, 616, 626, 640, 641, 642, 655, 657, 659, 661, 670, 682, 687, 695, 699, 713, 718, 739, 743, 749, 756, 760, 765, 770, 771, 775, 782, 783, 785, 810, 838, 839, 853, 855, 857, 869, 874, 879, 881, 882, 889, 891, 905, 919, 927, 939, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 977, 978, 979, 980, 984, 985, 987, 988, 994, 997, 998, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "numer": [4, 19, 65, 70, 74, 116, 118, 128, 145, 153, 156, 167, 168, 185, 196, 214, 236, 238, 286, 304, 311, 343, 364, 365, 367, 373, 375, 376, 381, 382, 383, 395, 397, 402, 403, 404, 405, 407, 408, 424, 427, 430, 442, 454, 455, 458, 461, 472, 473, 474, 479, 483, 484, 485, 487, 488, 493, 514, 516, 518, 523, 530, 550, 564, 573, 594, 600, 603, 610, 613, 615, 616, 629, 635, 637, 655, 670, 673, 677, 697, 770, 774, 779, 782, 783, 785, 793, 803, 804, 805, 808, 816, 817, 818, 819, 820, 838, 839, 844, 849, 854, 855, 862, 893, 894, 895, 901, 902, 917, 918, 953, 954, 960, 961, 965, 972, 974, 975, 980, 987, 988, 990, 999, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "categor": [4, 70, 107, 114, 128, 132, 163, 166, 167, 168, 196, 214, 236, 238, 305, 311, 313, 358, 362, 364, 365, 372, 375, 383, 396, 403, 449, 450, 472, 473, 479, 488, 544, 545, 564, 565, 590, 591, 615, 616, 631, 641, 642, 652, 663, 692, 804, 816, 817, 818, 819, 820, 842, 844, 848, 849, 852, 854, 855, 862, 876, 877, 954, 960, 971, 972, 980, 984, 985, 986, 987, 988, 999, 1001, 1005, 1006, 1009, 1010, 1013, 1015, 1017, 1020, 1021], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 57, 65, 66, 69, 70, 85, 88, 89, 90, 101, 115, 116, 139, 141, 142, 144, 145, 146, 148, 153, 163, 166, 167, 169, 172, 174, 175, 176, 197, 211, 213, 214, 215, 235, 243, 244, 246, 251, 253, 256, 257, 258, 261, 263, 265, 282, 283, 286, 305, 311, 331, 336, 341, 342, 343, 347, 350, 352, 356, 359, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 378, 381, 382, 383, 384, 389, 392, 399, 400, 402, 403, 404, 405, 435, 445, 475, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 493, 498, 507, 511, 517, 518, 521, 522, 524, 526, 540, 544, 545, 547, 570, 572, 573, 575, 576, 577, 578, 579, 582, 583, 589, 590, 591, 592, 622, 623, 639, 641, 670, 674, 678, 680, 684, 687, 688, 698, 708, 712, 725, 737, 738, 739, 768, 770, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 793, 797, 804, 816, 820, 821, 822, 826, 830, 842, 853, 858, 861, 866, 867, 869, 870, 871, 872, 877, 880, 883, 886, 889, 891, 893, 895, 954, 956, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 978, 980, 985, 988, 996, 997, 998, 999, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "alreadi": [4, 6, 10, 16, 57, 99, 128, 145, 166, 226, 232, 237, 257, 263, 276, 311, 370, 371, 375, 381, 383, 393, 397, 399, 401, 402, 407, 421, 482, 506, 516, 550, 551, 617, 629, 632, 647, 648, 649, 650, 651, 657, 659, 660, 661, 668, 669, 682, 750, 816, 836, 844, 850, 851, 853, 858, 864, 866, 867, 868, 870, 871, 872, 878, 881, 882, 904, 953, 970, 974, 975, 985, 990, 995, 999, 1002, 1006, 1010, 1013, 1017, 1018, 1019, 1020], "expand": [4, 16, 49, 64, 227, 304, 309, 352, 362, 402, 428, 433, 482, 540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 964, 980, 1006, 1013, 1014], "complementari": [4, 403], "column": [4, 20, 21, 59, 68, 71, 74, 75, 89, 115, 117, 118, 121, 125, 128, 145, 153, 160, 163, 165, 166, 167, 168, 185, 196, 197, 204, 214, 233, 235, 246, 256, 257, 267, 268, 294, 303, 305, 310, 311, 312, 313, 341, 342, 343, 356, 364, 365, 367, 370, 372, 376, 379, 381, 382, 383, 392, 395, 396, 398, 400, 402, 403, 404, 407, 410, 434, 436, 447, 449, 450, 454, 455, 461, 470, 471, 472, 473, 474, 475, 477, 479, 483, 484, 485, 487, 488, 491, 492, 493, 494, 496, 498, 509, 514, 517, 520, 525, 527, 531, 538, 540, 541, 547, 548, 549, 550, 564, 565, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 593, 610, 613, 615, 616, 617, 629, 631, 635, 641, 643, 645, 647, 648, 652, 663, 668, 669, 680, 696, 701, 702, 711, 712, 720, 736, 745, 750, 751, 752, 755, 765, 766, 769, 770, 779, 782, 783, 793, 802, 807, 812, 815, 816, 817, 818, 819, 820, 821, 822, 841, 845, 846, 847, 848, 854, 855, 856, 860, 861, 862, 863, 865, 881, 883, 886, 889, 891, 897, 901, 902, 907, 918, 927, 940, 941, 943, 951, 953, 954, 960, 962, 964, 965, 972, 974, 979, 985, 1005, 1007, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 217, 218, 219, 222, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 363, 364, 365, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 389, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 470, 476, 477, 478, 481, 483, 484, 485, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 689, 693, 694, 707, 717, 724, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 770, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 905, 917, 918, 920, 925, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 953, 954, 955, 956, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 974, 976, 977, 978, 979, 980, 985, 990, 994, 995, 997, 998, 999, 1002, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "drop": [4, 5, 70, 74, 85, 153, 165, 166, 167, 169, 196, 214, 238, 266, 304, 310, 313, 342, 374, 378, 396, 400, 402, 447, 450, 550, 551, 552, 553, 678, 683, 685, 764, 771, 840, 854, 860, 954, 960, 964, 972, 974, 984, 1005, 1006, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 60, 70, 71, 74, 81, 85, 90, 91, 94, 95, 96, 97, 98, 104, 109, 111, 112, 115, 117, 124, 127, 131, 137, 141, 152, 153, 157, 160, 165, 166, 177, 181, 183, 185, 188, 189, 190, 196, 200, 201, 205, 208, 210, 211, 213, 214, 218, 219, 222, 225, 229, 230, 233, 234, 241, 243, 245, 246, 252, 253, 257, 258, 263, 265, 266, 271, 274, 276, 281, 282, 283, 286, 287, 288, 295, 298, 302, 305, 317, 319, 321, 324, 327, 328, 331, 332, 333, 334, 335, 336, 338, 341, 342, 347, 348, 349, 350, 372, 379, 383, 393, 395, 403, 407, 422, 429, 447, 450, 514, 516, 519, 520, 522, 524, 526, 533, 568, 595, 614, 615, 668, 669, 684, 745, 761, 762, 763, 764, 785, 809, 850, 851, 858, 859, 861, 864, 866, 867, 868, 870, 871, 872, 895, 897, 901, 902, 920, 939, 945, 954, 964, 971, 974, 979, 996, 998, 1013, 1015, 1017], "holidai": [4, 167], "workingdai": [4, 167], "temp": [4, 167], "feel_temp": [4, 167], "humid": [4, 167, 971], "windspe": [4, 167], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 356, 357, 364, 365, 367, 368, 370, 371, 372, 374, 375, 376, 377, 379, 381, 382, 383, 386, 387, 388, 389, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 755, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 901, 902, 907, 912, 913, 915, 917, 918, 920, 921, 922, 923, 925, 926, 927, 929, 930, 932, 933, 934, 935, 938, 939, 945, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 982, 985, 986, 990, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003], "spring": [4, 167], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 63, 66, 69, 70, 71, 72, 78, 80, 91, 98, 100, 103, 104, 108, 115, 118, 121, 122, 131, 134, 148, 153, 154, 155, 156, 166, 167, 168, 169, 175, 176, 182, 196, 197, 201, 202, 204, 212, 214, 217, 220, 232, 234, 238, 241, 253, 254, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 276, 280, 286, 289, 293, 294, 298, 299, 304, 305, 308, 310, 311, 312, 313, 318, 328, 330, 336, 337, 341, 342, 364, 370, 371, 372, 375, 383, 393, 395, 396, 397, 399, 400, 402, 403, 404, 405, 407, 408, 418, 419, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 437, 442, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 498, 506, 507, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 620, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 677, 678, 680, 681, 682, 683, 684, 685, 686, 691, 692, 694, 695, 696, 697, 698, 701, 708, 709, 710, 711, 712, 713, 720, 724, 725, 732, 733, 736, 738, 743, 745, 749, 750, 751, 756, 760, 764, 765, 766, 767, 769, 771, 774, 776, 777, 778, 779, 782, 783, 784, 785, 790, 793, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 887, 893, 894, 895, 899, 900, 901, 902, 912, 919, 925, 926, 929, 930, 934, 935, 938, 945, 950, 951, 953, 954, 960, 964, 967, 974, 978, 979, 998, 999, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "6": [4, 9, 10, 11, 12, 16, 19, 26, 31, 32, 40, 42, 44, 46, 49, 50, 52, 55, 56, 59, 60, 61, 62, 63, 64, 66, 69, 72, 73, 74, 77, 78, 79, 81, 84, 89, 94, 96, 104, 110, 121, 122, 125, 127, 134, 137, 140, 145, 148, 151, 153, 155, 156, 160, 161, 166, 167, 172, 175, 176, 177, 185, 189, 194, 196, 197, 198, 200, 210, 214, 217, 218, 221, 225, 228, 229, 232, 235, 236, 241, 242, 243, 244, 246, 247, 250, 251, 255, 256, 257, 258, 259, 265, 266, 267, 268, 271, 274, 278, 280, 281, 289, 292, 293, 294, 295, 298, 300, 302, 303, 305, 308, 311, 312, 313, 316, 317, 320, 321, 328, 329, 331, 333, 336, 338, 342, 343, 349, 352, 364, 365, 367, 368, 375, 376, 382, 386, 387, 388, 393, 395, 396, 399, 400, 402, 403, 404, 431, 432, 433, 434, 435, 436, 445, 465, 466, 467, 468, 488, 507, 513, 521, 523, 524, 530, 546, 552, 553, 576, 577, 594, 597, 598, 608, 610, 611, 613, 627, 628, 653, 672, 676, 704, 710, 720, 727, 728, 732, 733, 735, 751, 767, 770, 777, 778, 780, 781, 786, 788, 789, 791, 796, 797, 800, 805, 807, 816, 817, 818, 820, 821, 822, 829, 831, 832, 833, 848, 849, 851, 854, 856, 859, 860, 865, 896, 918, 921, 923, 927, 953, 954, 958, 960, 961, 964, 974, 975, 978, 979, 982, 990, 994, 995, 997, 1003, 1006, 1007, 1008, 1013, 1018], "clear": [4, 16, 59, 71, 166, 167, 303, 365, 369, 370, 372, 381, 382, 383, 393, 396, 401, 895, 896, 953, 958, 1016, 1017, 1018], "9": [4, 7, 9, 12, 24, 26, 27, 30, 31, 32, 42, 44, 50, 57, 61, 63, 73, 81, 84, 90, 94, 108, 117, 118, 119, 120, 121, 126, 128, 136, 137, 151, 152, 154, 155, 156, 157, 161, 165, 166, 167, 175, 177, 178, 187, 196, 203, 209, 210, 213, 214, 217, 219, 220, 229, 230, 234, 238, 241, 242, 243, 244, 250, 259, 263, 265, 274, 278, 280, 281, 284, 285, 286, 292, 293, 294, 295, 298, 300, 301, 302, 304, 305, 313, 316, 317, 319, 320, 321, 328, 332, 338, 343, 352, 367, 368, 376, 382, 386, 387, 388, 393, 396, 397, 399, 402, 403, 423, 427, 433, 440, 465, 466, 467, 468, 473, 503, 510, 517, 521, 522, 523, 530, 543, 550, 553, 566, 574, 590, 591, 610, 613, 617, 622, 630, 641, 644, 675, 692, 705, 708, 723, 730, 751, 760, 761, 762, 777, 780, 782, 783, 797, 800, 805, 807, 810, 818, 819, 823, 824, 829, 832, 838, 839, 847, 853, 856, 918, 922, 953, 960, 964, 968, 974, 978, 979, 982, 990, 994, 999, 1003, 1006, 1007, 1008, 1010, 1019], "84": [4, 6, 69, 142, 187, 214, 295, 300, 316, 352, 367, 402, 403, 770, 793, 959, 964, 974, 995], "14": [4, 8, 11, 33, 35, 38, 49, 59, 61, 62, 65, 73, 80, 97, 99, 120, 132, 140, 167, 172, 173, 185, 187, 214, 217, 219, 223, 225, 230, 248, 255, 261, 262, 270, 274, 276, 301, 302, 313, 335, 338, 357, 365, 367, 382, 395, 399, 481, 493, 536, 537, 568, 569, 618, 626, 675, 793, 797, 847, 957, 960, 964, 974, 979, 982, 990, 1003, 1005, 1006, 1008, 1009, 1013, 1018], "395": [4, 35], "81": [4, 50, 238, 316, 317, 395, 770, 779, 793, 964, 965, 967, 974], "0000": [4, 313], "02": [4, 12, 15, 28, 44, 50, 52, 57, 61, 63, 67, 75, 81, 84, 94, 97, 111, 117, 132, 150, 155, 158, 165, 166, 177, 214, 215, 225, 229, 232, 239, 248, 251, 257, 263, 272, 281, 290, 292, 295, 298, 300, 306, 314, 321, 324, 339, 347, 351, 364, 367, 375, 399, 425, 429, 580, 641, 659, 779, 793, 860, 876, 890, 960], "13": [4, 6, 8, 10, 11, 44, 73, 99, 104, 117, 119, 120, 122, 157, 160, 166, 172, 182, 205, 221, 223, 250, 257, 260, 262, 298, 302, 306, 328, 365, 367, 370, 376, 382, 399, 407, 493, 496, 515, 516, 534, 535, 565, 618, 622, 716, 797, 825, 840, 847, 873, 874, 960, 964, 965, 970, 971, 974, 979, 982, 990, 1003, 1005, 1007, 1008, 1011, 1012, 1013, 1014, 1017], "635": [4, 37, 67, 599], "80": [4, 6, 11, 16, 27, 66, 80, 100, 128, 137, 142, 167, 175, 232, 295, 300, 304, 316, 331, 332, 333, 341, 348, 352, 365, 367, 370, 393, 399, 404, 428, 493, 524, 696, 779, 793, 862, 875, 894, 953, 959, 960, 964, 971, 977, 980, 999], "75": [4, 6, 7, 10, 33, 44, 81, 112, 142, 155, 156, 161, 166, 172, 175, 178, 187, 203, 214, 219, 238, 243, 244, 256, 265, 269, 281, 295, 298, 311, 338, 341, 352, 432, 534, 641, 689, 695, 716, 721, 727, 735, 738, 774, 779, 859, 871, 878, 894, 964, 966, 974, 980, 983, 995, 1007], "17374": 4, "19": [4, 5, 7, 9, 11, 15, 108, 132, 153, 166, 218, 222, 223, 246, 295, 302, 303, 317, 367, 374, 383, 395, 396, 403, 406, 428, 475, 499, 500, 501, 519, 523, 524, 530, 532, 533, 540, 541, 542, 543, 547, 548, 549, 565, 572, 631, 641, 642, 649, 650, 651, 654, 655, 657, 659, 661, 670, 690, 763, 767, 779, 793, 804, 809, 810, 812, 813, 827, 828, 847, 858, 879, 883, 886, 889, 890, 891, 892, 953, 964, 974, 982, 1003, 1005, 1006, 1007, 1008, 1010, 1013], "misti": [4, 167], "10": [4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 20, 25, 26, 27, 30, 31, 32, 34, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 70, 71, 73, 77, 78, 79, 80, 81, 84, 85, 91, 96, 97, 98, 99, 100, 104, 105, 108, 109, 111, 112, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 129, 131, 132, 135, 137, 142, 145, 149, 150, 152, 154, 155, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 180, 186, 187, 189, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 212, 213, 214, 218, 219, 225, 228, 229, 230, 231, 233, 234, 235, 237, 241, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 267, 269, 270, 272, 274, 281, 292, 293, 294, 295, 298, 299, 301, 302, 303, 308, 309, 310, 311, 312, 316, 317, 318, 320, 322, 326, 328, 330, 331, 332, 333, 335, 336, 338, 339, 341, 342, 344, 352, 356, 364, 365, 366, 367, 368, 370, 372, 375, 376, 381, 382, 383, 386, 387, 388, 392, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 408, 422, 427, 430, 432, 434, 435, 436, 442, 443, 445, 458, 475, 476, 483, 484, 485, 487, 493, 494, 495, 496, 499, 503, 504, 507, 511, 514, 518, 519, 520, 521, 522, 524, 525, 527, 529, 531, 535, 538, 539, 540, 541, 544, 545, 547, 548, 549, 550, 551, 553, 565, 566, 576, 577, 582, 583, 594, 600, 602, 610, 613, 615, 617, 618, 623, 625, 626, 627, 632, 642, 647, 648, 649, 650, 652, 653, 655, 656, 658, 659, 660, 661, 668, 669, 674, 675, 688, 698, 708, 724, 738, 751, 777, 778, 779, 780, 781, 782, 783, 790, 793, 794, 795, 796, 797, 799, 800, 805, 807, 809, 810, 816, 817, 818, 820, 821, 822, 828, 837, 838, 839, 847, 851, 854, 855, 858, 870, 878, 884, 887, 889, 890, 894, 918, 922, 928, 932, 934, 950, 953, 954, 960, 961, 962, 964, 965, 967, 968, 970, 971, 974, 978, 979, 982, 990, 994, 995, 997, 998, 999, 1002, 1003, 1006, 1007, 1008, 1013, 1015, 1016, 1017, 1019, 1020], "66": [4, 221, 304, 367, 395, 515, 615, 695, 765, 766, 775, 860, 964, 976], "880": 4, "60": [4, 6, 8, 16, 58, 72, 81, 97, 196, 208, 214, 217, 218, 238, 244, 264, 269, 295, 317, 331, 341, 364, 395, 399, 433, 440, 696, 779, 964, 974, 995, 1005, 1008], "11": [4, 9, 11, 15, 19, 46, 73, 80, 82, 96, 145, 151, 166, 167, 196, 197, 198, 201, 229, 231, 239, 253, 261, 262, 268, 280, 282, 302, 310, 313, 327, 331, 342, 364, 367, 368, 376, 382, 395, 398, 399, 402, 433, 440, 465, 466, 467, 468, 484, 500, 501, 595, 633, 639, 653, 698, 704, 705, 706, 760, 761, 762, 780, 783, 797, 800, 806, 833, 890, 928, 960, 962, 974, 978, 979, 982, 990, 997, 999, 1003, 1007, 1011, 1013, 1014, 1016, 1019, 1020], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 19, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 60, 66, 75, 77, 81, 91, 94, 97, 100, 102, 104, 106, 109, 111, 117, 118, 121, 124, 128, 129, 131, 137, 140, 141, 142, 154, 165, 166, 167, 168, 170, 178, 185, 186, 188, 192, 193, 195, 196, 197, 200, 205, 208, 209, 210, 211, 213, 220, 229, 234, 243, 245, 246, 256, 257, 259, 260, 262, 267, 268, 270, 276, 280, 281, 282, 283, 284, 287, 295, 302, 303, 304, 309, 310, 311, 312, 316, 317, 320, 322, 325, 327, 331, 333, 338, 342, 343, 348, 349, 363, 367, 370, 372, 374, 375, 376, 386, 395, 402, 403, 425, 430, 432, 447, 448, 452, 454, 455, 461, 471, 472, 473, 474, 475, 477, 479, 480, 483, 485, 487, 488, 495, 498, 499, 506, 514, 519, 520, 525, 528, 529, 531, 535, 538, 539, 542, 543, 544, 545, 546, 552, 553, 565, 572, 575, 577, 580, 582, 612, 613, 628, 632, 641, 649, 650, 651, 659, 661, 679, 687, 691, 696, 699, 707, 708, 721, 738, 739, 749, 772, 773, 777, 778, 779, 793, 803, 804, 805, 808, 810, 813, 814, 815, 818, 819, 826, 827, 838, 839, 840, 841, 843, 845, 846, 854, 855, 856, 857, 862, 876, 877, 879, 880, 885, 893, 899, 901, 902, 953, 960, 964, 967, 970, 971, 974, 977, 982, 987, 988, 991, 997, 1001, 1003, 1005, 1011, 1014, 1017, 1019, 1020], "17376": 4, "21": [4, 35, 166, 185, 197, 214, 222, 246, 276, 295, 300, 302, 320, 367, 368, 372, 374, 386, 392, 402, 403, 425, 429, 457, 515, 544, 545, 546, 552, 553, 571, 572, 574, 610, 652, 670, 736, 779, 781, 793, 804, 847, 854, 856, 862, 879, 895, 960, 965, 974, 982, 1003, 1005, 1006, 1008, 1012, 1013, 1015], "17377": 4, "22": [4, 42, 91, 163, 166, 167, 213, 219, 222, 246, 295, 298, 302, 307, 314, 317, 342, 343, 370, 374, 375, 386, 392, 421, 431, 455, 471, 472, 478, 479, 487, 498, 507, 514, 520, 525, 528, 529, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 577, 610, 611, 615, 617, 628, 630, 634, 636, 638, 641, 642, 644, 646, 648, 652, 671, 675, 685, 687, 696, 739, 751, 760, 765, 766, 770, 779, 780, 784, 793, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 825, 827, 829, 831, 832, 833, 838, 839, 840, 842, 845, 861, 881, 883, 884, 885, 886, 887, 889, 890, 891, 892, 912, 913, 964, 974, 982, 1003, 1005, 1008, 1013, 1016, 1018], "56": [4, 214, 229, 376, 696, 717, 964, 974, 1005], "8": [4, 5, 6, 7, 8, 9, 12, 13, 19, 25, 26, 27, 31, 32, 34, 37, 43, 44, 45, 48, 50, 53, 59, 61, 63, 64, 69, 71, 73, 74, 80, 84, 89, 90, 91, 94, 95, 98, 99, 103, 105, 109, 112, 114, 117, 118, 120, 121, 123, 126, 129, 130, 134, 144, 145, 149, 151, 153, 154, 156, 157, 161, 165, 166, 167, 168, 169, 172, 175, 176, 181, 182, 187, 190, 196, 197, 204, 206, 212, 214, 217, 218, 219, 221, 222, 226, 230, 231, 232, 234, 236, 237, 238, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 266, 267, 268, 274, 278, 280, 284, 288, 292, 294, 295, 298, 300, 301, 302, 303, 304, 308, 313, 316, 317, 318, 320, 321, 325, 328, 332, 333, 335, 337, 341, 342, 343, 349, 352, 357, 364, 365, 367, 368, 370, 375, 376, 386, 387, 388, 393, 395, 399, 400, 402, 403, 404, 405, 423, 427, 428, 430, 432, 433, 435, 445, 452, 453, 454, 455, 456, 457, 458, 459, 466, 467, 468, 470, 473, 485, 486, 497, 514, 517, 521, 523, 526, 528, 530, 532, 533, 538, 539, 548, 553, 565, 571, 572, 573, 574, 611, 612, 631, 641, 653, 659, 672, 675, 676, 677, 678, 682, 685, 689, 690, 692, 698, 704, 709, 710, 711, 723, 727, 728, 732, 733, 735, 764, 765, 767, 770, 771, 775, 777, 780, 781, 786, 789, 796, 797, 800, 807, 810, 819, 821, 822, 828, 838, 839, 840, 846, 853, 862, 883, 886, 916, 918, 922, 953, 954, 960, 961, 962, 964, 967, 972, 974, 978, 982, 988, 990, 994, 995, 996, 997, 998, 1002, 1003, 1006, 1007, 1008, 1012, 1013, 1018, 1019, 1021], "9981": 4, "17378": 4, "23": [4, 15, 19, 26, 34, 50, 97, 163, 222, 238, 246, 295, 302, 307, 310, 311, 314, 317, 367, 368, 370, 376, 386, 387, 388, 402, 408, 416, 424, 430, 435, 437, 445, 448, 450, 451, 458, 465, 466, 467, 473, 475, 483, 484, 485, 487, 488, 493, 495, 497, 505, 507, 521, 522, 523, 526, 530, 537, 539, 541, 543, 544, 545, 548, 551, 552, 553, 590, 591, 594, 610, 613, 615, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 652, 653, 655, 656, 658, 661, 662, 663, 700, 712, 760, 807, 813, 814, 815, 824, 832, 839, 842, 854, 861, 869, 870, 879, 882, 884, 887, 890, 892, 899, 901, 902, 912, 913, 918, 964, 982, 1003, 1005, 1006, 1012, 1013, 1014, 1017], "65": [4, 33, 167, 196, 265, 304, 395, 423, 485, 580, 723, 772, 773, 971, 995, 1005, 1006, 1007], "17379": [4, 1017], "row": [4, 19, 20, 21, 25, 27, 44, 59, 74, 89, 91, 117, 126, 129, 160, 196, 197, 198, 226, 229, 234, 235, 300, 350, 356, 365, 372, 379, 382, 383, 392, 395, 398, 403, 410, 426, 427, 430, 432, 433, 434, 436, 439, 440, 442, 447, 451, 471, 473, 474, 475, 476, 477, 478, 483, 484, 485, 487, 488, 493, 494, 496, 517, 525, 531, 534, 573, 574, 603, 615, 626, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 675, 679, 680, 693, 701, 702, 707, 740, 741, 745, 748, 750, 751, 752, 753, 755, 756, 758, 760, 761, 762, 763, 777, 778, 810, 816, 817, 818, 819, 820, 826, 829, 830, 831, 832, 833, 836, 847, 851, 853, 856, 868, 871, 872, 875, 879, 897, 901, 902, 918, 935, 938, 942, 944, 946, 947, 951, 953, 954, 958, 960, 962, 964, 965, 967, 974, 975, 978, 979, 985, 1012, 1013, 1014, 1015, 1020], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 57, 65, 69, 70, 71, 73, 74, 80, 89, 97, 98, 105, 109, 111, 115, 116, 117, 118, 120, 127, 128, 140, 141, 142, 145, 148, 150, 153, 155, 157, 161, 163, 165, 166, 167, 172, 174, 179, 185, 192, 196, 197, 199, 202, 204, 205, 214, 215, 217, 218, 225, 227, 229, 231, 235, 238, 241, 242, 243, 246, 247, 252, 254, 256, 258, 259, 262, 263, 264, 265, 267, 268, 276, 279, 282, 284, 287, 289, 294, 298, 299, 303, 304, 310, 311, 316, 317, 319, 324, 325, 328, 333, 336, 337, 341, 342, 343, 346, 347, 350, 352, 356, 357, 358, 363, 364, 365, 367, 368, 370, 372, 374, 375, 376, 377, 378, 379, 381, 383, 384, 386, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 472, 473, 474, 475, 477, 479, 480, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 499, 502, 506, 507, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 690, 692, 696, 708, 711, 712, 716, 718, 719, 720, 723, 724, 725, 738, 740, 742, 756, 760, 761, 762, 763, 765, 766, 769, 770, 772, 773, 774, 777, 778, 779, 781, 782, 783, 785, 793, 797, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 897, 899, 901, 902, 905, 907, 910, 918, 920, 923, 925, 930, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 984, 985, 988, 997, 998, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021], "present": [4, 5, 43, 49, 91, 94, 102, 114, 121, 124, 144, 154, 157, 175, 178, 185, 196, 225, 228, 246, 254, 259, 262, 265, 266, 276, 298, 301, 303, 342, 367, 368, 372, 375, 381, 383, 395, 397, 400, 402, 403, 413, 414, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 472, 473, 474, 475, 479, 483, 484, 485, 486, 487, 488, 493, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 532, 533, 546, 549, 552, 553, 564, 565, 566, 571, 572, 574, 600, 610, 611, 612, 613, 633, 637, 660, 671, 672, 673, 674, 695, 711, 712, 720, 724, 751, 765, 766, 769, 777, 778, 779, 782, 783, 791, 793, 805, 823, 824, 825, 827, 829, 831, 832, 833, 840, 845, 853, 854, 855, 856, 857, 859, 873, 874, 885, 893, 895, 896, 918, 948, 963, 964, 965, 966, 971, 974, 983, 985, 1008, 1013, 1015, 1016, 1017, 1019, 1020], "date": [4, 69, 153, 167, 365, 367, 370, 374, 384, 396, 985], "datetim": [4, 17, 153, 167], "http": [4, 6, 7, 8, 12, 17, 24, 50, 70, 122, 128, 145, 157, 161, 172, 196, 204, 212, 214, 222, 226, 234, 274, 276, 294, 364, 365, 367, 368, 370, 374, 375, 376, 378, 381, 383, 384, 386, 395, 399, 404, 426, 432, 435, 445, 470, 475, 479, 483, 485, 491, 492, 493, 513, 514, 517, 519, 520, 524, 578, 619, 624, 627, 632, 641, 647, 649, 650, 651, 654, 659, 662, 665, 666, 668, 669, 674, 675, 678, 688, 704, 705, 706, 740, 741, 751, 816, 818, 819, 820, 823, 824, 829, 830, 831, 832, 837, 859, 874, 875, 876, 889, 890, 960, 962, 964, 967, 977, 980, 987, 988, 995, 1010, 1015], "pydata": [4, 983, 988], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 60, 65, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 157, 166, 167, 168, 172, 177, 187, 188, 196, 204, 212, 214, 218, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 259, 263, 268, 274, 294, 295, 304, 309, 310, 312, 313, 316, 317, 318, 321, 341, 342, 343, 350, 357, 363, 368, 370, 373, 376, 378, 384, 386, 399, 578, 619, 651, 654, 659, 678, 688, 751, 823, 824, 829, 830, 831, 832, 859, 875, 889, 890, 960, 964, 980, 982, 1001, 1013, 1017], "stabl": [4, 157, 166, 190, 194, 198, 276, 309, 342, 368, 370, 374, 376, 379, 383, 386, 399, 403, 407, 454, 455, 461, 516, 638, 655, 657, 670, 675, 706, 734, 917, 918, 960, 966, 967, 974, 985, 1005, 1006, 1011, 1016, 1018], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 145, 153, 157, 166, 167, 168, 172, 177, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350, 365, 367, 370, 371, 374, 378, 384, 396, 399, 403, 470, 491, 492, 641, 816, 820, 914, 962, 984, 985, 1016, 1017, 1018, 1019, 1020], "compon": [4, 5, 17, 44, 57, 61, 69, 72, 83, 84, 86, 93, 95, 96, 98, 99, 101, 102, 103, 105, 106, 126, 153, 163, 165, 217, 229, 230, 232, 241, 242, 245, 246, 247, 255, 257, 277, 290, 295, 303, 310, 356, 362, 365, 370, 372, 376, 379, 381, 394, 395, 396, 398, 403, 405, 407, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 446, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 485, 487, 498, 504, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 556, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 678, 711, 712, 720, 765, 766, 769, 777, 778, 779, 782, 783, 793, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 917, 918, 956, 961, 974, 976, 979, 984, 985, 986, 988, 993, 999, 1000, 1001, 1005, 1007, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "now": [4, 5, 7, 17, 53, 56, 70, 85, 99, 108, 110, 114, 115, 117, 118, 121, 122, 128, 131, 145, 148, 153, 154, 155, 161, 165, 166, 167, 168, 172, 175, 177, 182, 184, 185, 197, 198, 221, 230, 252, 256, 259, 267, 268, 303, 309, 310, 312, 313, 318, 328, 336, 341, 342, 343, 352, 356, 358, 365, 370, 371, 372, 376, 381, 382, 383, 392, 399, 400, 402, 403, 407, 476, 491, 492, 495, 519, 532, 562, 563, 565, 610, 613, 632, 636, 641, 646, 667, 708, 738, 777, 778, 782, 783, 813, 828, 939, 953, 954, 960, 964, 970, 973, 974, 979, 980, 983, 985, 990, 997, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "introspect": [4, 6, 70, 376, 542, 543, 571, 572, 574, 974, 995], "value_count": [4, 167], "11413": 4, "4544": 4, "rain": [4, 167, 960], "1419": 4, "heavy_rain": [4, 167], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 34, 37, 44, 45, 57, 61, 70, 72, 74, 81, 95, 101, 112, 113, 114, 118, 119, 121, 128, 166, 167, 168, 185, 194, 196, 198, 202, 203, 211, 213, 214, 217, 218, 225, 231, 233, 234, 238, 243, 251, 253, 254, 257, 259, 260, 263, 265, 266, 276, 284, 285, 292, 293, 300, 302, 304, 312, 313, 320, 333, 341, 342, 343, 357, 358, 364, 365, 368, 370, 372, 374, 375, 377, 378, 383, 386, 389, 392, 395, 396, 399, 402, 403, 405, 409, 411, 415, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 559, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 685, 691, 692, 696, 714, 715, 761, 762, 777, 778, 779, 782, 783, 785, 791, 793, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 900, 901, 902, 905, 909, 910, 911, 913, 927, 934, 948, 952, 953, 958, 960, 964, 965, 971, 972, 974, 980, 985, 994, 995, 997, 999, 1005, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 64, 69, 70, 120, 122, 123, 124, 149, 150, 151, 161, 166, 167, 198, 214, 234, 238, 241, 254, 260, 264, 283, 289, 304, 311, 312, 317, 350, 364, 365, 370, 372, 381, 383, 391, 396, 399, 410, 413, 426, 427, 430, 431, 432, 433, 434, 436, 447, 449, 450, 452, 455, 457, 471, 472, 473, 474, 479, 480, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 497, 505, 525, 540, 541, 542, 543, 546, 547, 548, 549, 564, 565, 568, 569, 571, 572, 574, 576, 577, 585, 589, 610, 611, 612, 613, 615, 616, 623, 624, 627, 628, 629, 635, 639, 640, 643, 644, 645, 646, 647, 648, 654, 656, 658, 680, 688, 697, 698, 713, 720, 723, 737, 768, 785, 802, 804, 805, 817, 821, 822, 824, 832, 846, 852, 854, 855, 861, 862, 875, 883, 884, 885, 886, 887, 889, 890, 891, 892, 898, 899, 901, 902, 929, 939, 940, 941, 942, 945, 951, 954, 974, 977, 979, 990, 1006, 1008, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "int64": [4, 13, 54, 70, 166, 167, 304, 350, 383, 403, 413, 426, 431, 433, 571, 623, 697, 698, 817, 1013, 1016, 1018, 1020], "cannot": [4, 40, 55, 74, 81, 94, 99, 116, 166, 167, 196, 214, 298, 328, 358, 369, 371, 376, 383, 384, 395, 396, 397, 399, 400, 402, 403, 405, 448, 504, 521, 522, 523, 526, 530, 593, 596, 597, 598, 600, 602, 603, 605, 606, 608, 634, 638, 665, 675, 694, 700, 760, 782, 783, 828, 829, 831, 832, 833, 841, 842, 851, 852, 863, 899, 901, 902, 953, 954, 958, 960, 961, 965, 970, 974, 979, 980, 985, 988, 994, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 55, 57, 63, 69, 70, 74, 84, 85, 89, 94, 97, 99, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 129, 130, 134, 142, 148, 149, 150, 153, 154, 155, 156, 157, 163, 165, 166, 167, 168, 169, 172, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 196, 197, 198, 200, 203, 204, 205, 208, 210, 211, 214, 225, 228, 230, 233, 234, 243, 245, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 276, 279, 282, 283, 284, 285, 287, 289, 292, 293, 294, 298, 300, 302, 303, 308, 311, 315, 316, 317, 320, 321, 322, 324, 327, 335, 336, 343, 345, 348, 349, 351, 352, 356, 357, 358, 362, 367, 372, 375, 381, 382, 383, 389, 391, 393, 395, 396, 397, 398, 400, 402, 403, 404, 405, 407, 421, 424, 425, 427, 428, 430, 432, 434, 435, 436, 437, 442, 448, 452, 453, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 471, 472, 476, 480, 481, 483, 487, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 610, 611, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 670, 671, 672, 674, 675, 679, 686, 723, 770, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 841, 846, 847, 850, 851, 854, 855, 859, 860, 861, 862, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 938, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 974, 978, 979, 980, 984, 985, 986, 988, 991, 994, 995, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 55, 66, 67, 69, 74, 80, 81, 84, 93, 99, 104, 106, 108, 111, 112, 113, 114, 116, 117, 123, 125, 126, 127, 128, 134, 135, 136, 137, 142, 145, 148, 151, 153, 157, 160, 161, 164, 168, 170, 171, 173, 182, 184, 185, 188, 205, 210, 214, 221, 223, 224, 225, 230, 232, 237, 238, 249, 253, 255, 256, 259, 261, 262, 264, 270, 272, 276, 280, 281, 282, 283, 284, 289, 291, 294, 295, 296, 298, 299, 303, 305, 307, 314, 315, 319, 321, 322, 327, 333, 334, 336, 341, 342, 343, 346, 347, 348, 349, 352, 357, 359, 362, 363, 364, 365, 367, 369, 373, 376, 377, 378, 379, 382, 383, 385, 389, 390, 391, 392, 393, 395, 396, 397, 399, 401, 403, 404, 405, 409, 410, 412, 413, 414, 416, 417, 421, 422, 423, 426, 427, 430, 432, 433, 440, 442, 447, 448, 450, 451, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 491, 492, 493, 495, 497, 498, 499, 500, 501, 503, 505, 507, 508, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 554, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 582, 585, 586, 593, 594, 597, 602, 605, 609, 611, 613, 615, 617, 621, 623, 624, 626, 627, 628, 629, 631, 635, 640, 641, 651, 652, 659, 660, 661, 663, 671, 672, 673, 674, 675, 679, 683, 684, 685, 691, 696, 700, 701, 704, 705, 706, 708, 717, 723, 725, 730, 738, 760, 761, 762, 767, 770, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 823, 825, 830, 837, 838, 839, 840, 842, 844, 846, 848, 851, 853, 854, 855, 856, 859, 860, 861, 865, 873, 874, 876, 877, 878, 879, 881, 882, 883, 886, 889, 890, 891, 892, 904, 912, 913, 930, 931, 953, 954, 956, 957, 958, 960, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 975, 978, 979, 981, 983, 987, 992, 994, 995, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "simplifi": [4, 70, 184, 328, 369, 371, 375, 398, 498, 545, 840, 841, 964, 966, 974, 980], "represent": [4, 12, 17, 20, 26, 53, 70, 71, 94, 97, 108, 114, 115, 116, 124, 125, 126, 128, 131, 142, 153, 166, 168, 172, 177, 217, 218, 219, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 286, 295, 304, 310, 312, 313, 318, 342, 343, 350, 352, 362, 364, 372, 383, 389, 395, 396, 400, 401, 402, 446, 514, 518, 520, 523, 525, 531, 549, 571, 573, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 613, 626, 629, 635, 641, 642, 643, 645, 649, 651, 659, 660, 661, 751, 777, 778, 785, 837, 850, 854, 855, 859, 861, 874, 881, 893, 895, 898, 914, 930, 956, 961, 963, 965, 967, 968, 969, 971, 974, 979, 985, 990, 991, 993, 997, 999, 1005, 1006, 1009, 1016, 1017, 1018, 1019, 1020, 1021], "collaps": [4, 167, 298, 328, 381], "those": [4, 7, 12, 17, 19, 59, 70, 110, 121, 145, 165, 167, 168, 169, 196, 198, 214, 222, 229, 233, 234, 247, 250, 256, 259, 262, 293, 298, 303, 325, 328, 341, 342, 343, 356, 357, 364, 370, 372, 374, 375, 376, 377, 381, 383, 384, 386, 392, 393, 395, 399, 400, 402, 403, 405, 431, 433, 444, 447, 451, 477, 478, 479, 486, 540, 541, 547, 548, 552, 553, 564, 675, 680, 695, 701, 718, 779, 782, 783, 791, 793, 800, 823, 824, 825, 827, 829, 830, 831, 832, 833, 883, 886, 889, 890, 891, 892, 953, 956, 960, 963, 964, 966, 967, 968, 971, 974, 980, 983, 984, 988, 990, 999, 1005, 1008, 1011, 1012, 1013, 1018, 1019, 1020, 1021], "replac": [4, 25, 79, 98, 148, 155, 160, 167, 182, 197, 234, 259, 276, 300, 305, 310, 330, 368, 370, 372, 374, 376, 379, 383, 389, 396, 399, 402, 403, 425, 429, 486, 498, 538, 539, 546, 565, 571, 572, 573, 574, 590, 591, 610, 613, 617, 622, 624, 710, 767, 791, 793, 840, 841, 844, 864, 877, 884, 933, 935, 938, 953, 954, 960, 964, 974, 979, 980, 984, 985, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020], "to_replac": [4, 167], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 59, 60, 61, 65, 70, 72, 74, 77, 79, 81, 94, 97, 105, 111, 113, 114, 115, 116, 118, 121, 122, 124, 125, 127, 128, 140, 141, 144, 145, 148, 151, 152, 154, 156, 162, 165, 166, 167, 168, 169, 172, 175, 176, 178, 182, 184, 185, 186, 187, 189, 194, 196, 197, 198, 200, 202, 211, 214, 216, 220, 223, 225, 226, 227, 228, 229, 230, 231, 234, 237, 238, 241, 247, 250, 252, 254, 256, 257, 259, 261, 262, 263, 265, 267, 268, 269, 271, 276, 289, 292, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 310, 319, 328, 333, 336, 341, 342, 343, 346, 350, 352, 356, 357, 358, 359, 362, 363, 364, 365, 367, 371, 372, 373, 375, 376, 377, 379, 381, 382, 383, 385, 386, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 470, 473, 474, 476, 479, 480, 481, 484, 491, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 687, 688, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 751, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 790, 791, 793, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 902, 905, 906, 907, 908, 910, 918, 920, 925, 926, 927, 928, 932, 940, 941, 942, 953, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 971, 975, 977, 978, 979, 980, 988, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "inplac": [4, 167, 214, 268, 437, 465, 466, 467, 468, 836, 844, 847, 850, 851, 853, 857, 858, 859, 861, 864, 866, 867, 868, 869, 870, 871, 872, 937, 940, 941, 942, 946, 947, 1014], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 85, 91, 99, 112, 114, 115, 118, 121, 142, 148, 154, 163, 164, 168, 170, 182, 187, 196, 197, 198, 204, 214, 229, 235, 242, 243, 246, 247, 263, 276, 303, 341, 342, 352, 356, 357, 370, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 391, 393, 395, 396, 397, 399, 402, 403, 404, 416, 447, 448, 450, 451, 452, 465, 466, 467, 479, 506, 515, 519, 521, 524, 535, 537, 538, 539, 541, 543, 545, 546, 548, 550, 551, 553, 555, 568, 569, 571, 572, 574, 578, 580, 589, 594, 610, 615, 616, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 657, 658, 661, 662, 678, 687, 688, 699, 717, 770, 774, 814, 815, 816, 817, 818, 819, 820, 824, 827, 832, 839, 842, 847, 854, 855, 858, 861, 862, 871, 872, 879, 881, 882, 883, 884, 885, 886, 887, 890, 892, 927, 953, 960, 964, 966, 970, 974, 978, 979, 980, 987, 995, 998, 999, 1001, 1005, 1006, 1007, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "balanc": [4, 6, 53, 65, 163, 201, 249, 259, 272, 298, 358, 381, 383, 393, 399, 400, 402, 485, 498, 517, 523, 524, 530, 540, 544, 547, 623, 641, 642, 649, 651, 657, 658, 659, 686, 691, 711, 725, 764, 769, 779, 780, 797, 841, 881, 883, 886, 889, 891, 906, 907, 953, 979, 980, 995, 1005, 1007, 1010, 1011, 1014, 1015, 1019], "fall": [4, 121, 155, 255, 256, 370, 372, 394, 395, 403, 418, 430, 491, 492, 709, 710, 774, 858, 870, 963, 964, 974, 990, 998, 1014], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 63, 64, 71, 77, 88, 104, 116, 117, 118, 122, 137, 153, 165, 166, 169, 172, 185, 189, 192, 196, 197, 202, 210, 214, 219, 229, 243, 251, 254, 256, 263, 274, 295, 298, 303, 304, 305, 310, 311, 336, 341, 343, 352, 356, 357, 365, 370, 372, 375, 376, 379, 383, 386, 389, 395, 396, 397, 399, 400, 401, 402, 403, 405, 407, 424, 427, 430, 432, 433, 438, 439, 440, 442, 447, 471, 472, 473, 478, 480, 498, 517, 518, 522, 523, 524, 526, 530, 534, 536, 538, 539, 540, 542, 546, 547, 550, 564, 571, 574, 576, 577, 580, 589, 590, 591, 593, 605, 610, 614, 623, 641, 642, 648, 659, 668, 669, 671, 672, 676, 680, 682, 683, 685, 687, 695, 696, 701, 708, 711, 712, 720, 722, 723, 736, 738, 760, 764, 765, 766, 769, 770, 771, 774, 779, 780, 782, 783, 784, 786, 790, 793, 797, 798, 802, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 831, 838, 841, 852, 854, 855, 856, 860, 861, 862, 865, 866, 867, 869, 870, 871, 872, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 901, 902, 907, 918, 928, 933, 954, 960, 961, 964, 965, 967, 968, 974, 977, 978, 979, 980, 985, 994, 996, 997, 999, 1005, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "sensit": [4, 44, 79, 80, 112, 121, 167, 198, 199, 225, 298, 328, 357, 358, 384, 397, 402, 435, 445, 675, 695, 696, 770, 959, 960, 961, 963, 964, 968, 970, 978, 979, 990, 998, 1009], "splitter": [4, 383, 399, 421, 455, 550, 551, 577, 585, 630, 634, 636, 638, 644, 646, 648, 656, 658, 779, 781, 782, 783, 784, 785, 793, 794, 795, 796, 798, 799, 801, 802, 803, 804, 805, 806, 808, 812, 815, 889, 890, 891, 892, 985, 1011, 1012, 1013, 1014], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 67, 70, 71, 97, 108, 115, 116, 118, 119, 121, 141, 151, 163, 169, 172, 176, 185, 198, 203, 214, 224, 239, 249, 250, 253, 254, 256, 259, 261, 262, 263, 265, 267, 268, 270, 272, 274, 285, 289, 303, 305, 310, 328, 341, 352, 359, 363, 365, 372, 376, 383, 385, 394, 396, 403, 404, 405, 430, 432, 471, 474, 475, 476, 479, 492, 503, 519, 534, 544, 545, 546, 550, 551, 574, 577, 585, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 614, 615, 616, 617, 630, 636, 642, 656, 658, 680, 682, 684, 685, 686, 687, 688, 694, 696, 697, 698, 700, 701, 708, 709, 718, 719, 724, 736, 737, 738, 739, 768, 775, 777, 778, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 812, 818, 821, 822, 827, 839, 841, 848, 866, 867, 869, 870, 871, 872, 883, 886, 889, 904, 912, 938, 956, 960, 962, 966, 967, 970, 971, 972, 975, 978, 980, 984, 988, 990, 991, 994, 995, 997, 1000, 1001, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018], "forecast": [4, 256, 393, 964, 984], "realist": [4, 8, 258, 265, 266, 325, 964], "gap": [4, 341, 365, 399, 454, 455, 461, 571, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 800, 889, 890, 891, 892, 960, 961, 1013, 1017, 1019], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 53, 59, 60, 65, 84, 97, 99, 103, 108, 112, 118, 121, 140, 148, 153, 154, 156, 163, 165, 166, 167, 168, 175, 182, 187, 191, 192, 196, 197, 198, 200, 201, 204, 214, 217, 225, 230, 234, 249, 252, 255, 256, 257, 258, 259, 261, 262, 263, 265, 272, 278, 282, 283, 285, 286, 298, 303, 305, 311, 319, 328, 336, 341, 342, 343, 350, 352, 356, 357, 365, 370, 372, 379, 381, 382, 383, 384, 389, 392, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 415, 424, 425, 428, 429, 433, 435, 436, 437, 439, 440, 441, 446, 452, 453, 454, 455, 456, 457, 458, 459, 474, 476, 477, 478, 479, 480, 481, 485, 497, 498, 504, 507, 510, 517, 519, 520, 521, 522, 523, 524, 529, 530, 532, 536, 537, 542, 543, 545, 546, 567, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 603, 610, 615, 616, 617, 622, 625, 628, 629, 630, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 659, 661, 662, 664, 667, 671, 673, 675, 677, 678, 679, 682, 684, 686, 687, 688, 690, 692, 693, 697, 698, 699, 700, 702, 706, 707, 708, 711, 712, 713, 716, 718, 719, 725, 734, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 768, 769, 772, 773, 775, 776, 777, 778, 779, 781, 782, 788, 796, 797, 799, 806, 807, 809, 811, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 845, 848, 849, 851, 852, 854, 855, 858, 859, 860, 862, 867, 870, 871, 875, 886, 889, 890, 891, 892, 894, 915, 933, 953, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 981, 985, 997, 998, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "side": [4, 16, 27, 58, 121, 189, 214, 219, 228, 298, 341, 352, 365, 381, 393, 396, 399, 400, 403, 498, 960, 961, 964, 966, 979, 1014], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 69, 99, 108, 114, 115, 117, 120, 121, 122, 123, 124, 134, 141, 165, 166, 180, 191, 192, 196, 199, 204, 214, 226, 242, 243, 250, 251, 254, 256, 261, 263, 266, 285, 292, 294, 299, 300, 305, 312, 319, 328, 341, 343, 350, 365, 377, 382, 383, 386, 393, 395, 400, 402, 403, 421, 426, 427, 455, 456, 462, 463, 480, 514, 520, 522, 525, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 571, 572, 574, 577, 585, 630, 634, 636, 638, 644, 646, 648, 656, 658, 678, 687, 688, 700, 713, 719, 739, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 815, 821, 822, 838, 839, 862, 866, 867, 869, 870, 871, 872, 889, 890, 891, 892, 935, 953, 960, 961, 967, 970, 971, 972, 974, 978, 980, 985, 990, 994, 995, 997, 998, 999, 1001, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "limit": [4, 8, 17, 37, 42, 56, 65, 81, 115, 116, 122, 128, 160, 166, 167, 168, 175, 196, 197, 213, 229, 263, 300, 304, 311, 343, 352, 357, 371, 372, 375, 381, 383, 384, 393, 395, 398, 400, 404, 446, 451, 542, 543, 544, 545, 615, 633, 641, 642, 662, 665, 666, 671, 760, 800, 829, 831, 832, 833, 854, 855, 879, 883, 884, 885, 886, 887, 932, 953, 960, 961, 963, 964, 971, 972, 974, 985, 990, 1001, 1013, 1015, 1018, 1019], "cv": [4, 12, 24, 25, 26, 54, 70, 71, 72, 73, 77, 102, 118, 120, 134, 135, 144, 160, 161, 166, 185, 195, 198, 252, 254, 255, 256, 257, 258, 259, 261, 262, 266, 270, 304, 305, 313, 328, 336, 382, 383, 393, 399, 402, 421, 455, 550, 551, 577, 585, 630, 634, 636, 638, 642, 644, 646, 648, 656, 658, 779, 781, 782, 783, 784, 785, 793, 794, 795, 796, 798, 799, 801, 802, 803, 804, 805, 806, 808, 812, 815, 862, 889, 890, 953, 956, 959, 960, 964, 974, 985, 994, 995, 999, 1007, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1021], "fold": [4, 66, 73, 77, 117, 120, 134, 144, 166, 185, 243, 251, 252, 254, 256, 257, 259, 266, 319, 336, 352, 365, 373, 374, 382, 383, 395, 404, 421, 455, 476, 519, 550, 551, 577, 585, 630, 634, 636, 638, 642, 644, 646, 648, 656, 658, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 812, 815, 862, 883, 886, 953, 960, 964, 974, 979, 994, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1016, 1017], "1000": [4, 7, 8, 14, 26, 31, 37, 50, 71, 74, 84, 104, 112, 114, 115, 120, 121, 125, 130, 136, 140, 154, 172, 182, 188, 199, 219, 228, 229, 231, 241, 245, 254, 256, 262, 265, 267, 281, 283, 299, 302, 309, 310, 312, 329, 330, 337, 341, 342, 375, 376, 382, 393, 403, 421, 456, 462, 463, 514, 515, 520, 525, 526, 528, 529, 531, 536, 547, 615, 629, 630, 634, 635, 636, 638, 643, 644, 645, 646, 649, 650, 651, 655, 659, 660, 661, 670, 675, 681, 684, 746, 858, 870, 876, 881, 882, 953, 957, 979, 994, 997, 1012, 1014], "datapoint": [4, 42, 52, 55, 152, 155, 179, 230, 231, 251, 256, 274, 334, 405, 485, 540, 541, 542, 543, 547, 548, 549, 594, 889, 890, 891, 892, 957], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 112, 118, 121, 145, 160, 166, 172, 175, 176, 196, 198, 214, 225, 230, 231, 256, 259, 262, 263, 265, 276, 299, 300, 305, 318, 328, 336, 342, 352, 356, 357, 358, 365, 368, 369, 370, 372, 374, 375, 377, 378, 379, 382, 383, 386, 389, 393, 395, 397, 399, 400, 402, 403, 404, 405, 406, 407, 409, 424, 426, 427, 428, 429, 430, 432, 433, 435, 437, 440, 441, 442, 445, 446, 447, 450, 457, 465, 466, 467, 468, 470, 479, 486, 491, 492, 499, 504, 506, 507, 510, 515, 516, 519, 532, 540, 541, 544, 545, 546, 547, 548, 550, 564, 565, 568, 569, 571, 572, 574, 576, 577, 580, 585, 590, 591, 603, 610, 611, 612, 614, 615, 616, 618, 621, 622, 623, 626, 628, 629, 630, 631, 632, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 667, 670, 672, 673, 674, 675, 676, 677, 678, 679, 684, 692, 709, 710, 748, 753, 756, 760, 761, 762, 763, 764, 767, 770, 771, 772, 781, 787, 789, 796, 797, 798, 799, 803, 807, 809, 810, 821, 822, 823, 824, 825, 826, 827, 829, 831, 838, 839, 844, 845, 848, 849, 850, 852, 853, 854, 855, 862, 864, 868, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 901, 905, 907, 910, 918, 925, 930, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 953, 954, 958, 959, 960, 961, 964, 965, 967, 969, 970, 971, 974, 977, 978, 979, 980, 985, 987, 988, 995, 999, 1002, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "enough": [4, 37, 44, 61, 117, 148, 160, 167, 168, 185, 196, 230, 232, 302, 341, 343, 352, 368, 370, 374, 384, 393, 394, 395, 397, 399, 402, 550, 551, 572, 779, 782, 783, 785, 793, 805, 918, 953, 958, 961, 963, 970, 974, 979, 984, 988, 1011], "quantifi": [4, 37, 49, 77, 153, 214, 263, 372, 383, 390, 394, 556, 844, 959, 972, 974, 1001], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 49, 50, 53, 90, 94, 96, 103, 104, 115, 116, 124, 166, 175, 183, 188, 198, 200, 201, 205, 219, 221, 230, 234, 244, 250, 253, 256, 259, 263, 281, 300, 341, 343, 350, 358, 362, 365, 367, 372, 381, 382, 383, 384, 389, 393, 395, 399, 400, 401, 402, 403, 404, 422, 426, 435, 446, 453, 454, 455, 456, 457, 458, 459, 471, 473, 474, 475, 477, 479, 481, 483, 484, 485, 487, 488, 493, 517, 519, 521, 523, 524, 530, 538, 546, 564, 571, 574, 612, 615, 617, 623, 659, 661, 680, 684, 725, 771, 779, 781, 792, 793, 796, 799, 804, 806, 807, 810, 811, 817, 823, 824, 825, 827, 828, 829, 831, 832, 833, 838, 839, 848, 854, 855, 878, 901, 902, 922, 954, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 972, 974, 975, 977, 978, 980, 990, 995, 996, 998, 1011, 1013, 1016, 1017, 1020], "bit": [4, 48, 53, 77, 97, 194, 198, 298, 328, 342, 352, 356, 365, 368, 402, 403, 565, 572, 641, 811, 901, 902, 961, 965, 980, 983, 992, 999, 1005, 1008, 1011, 1013, 1014, 1017, 1018, 1019], "less": [4, 5, 8, 52, 53, 59, 91, 94, 97, 105, 115, 121, 122, 148, 155, 166, 178, 196, 198, 200, 231, 242, 244, 256, 257, 265, 267, 270, 299, 302, 303, 304, 310, 312, 341, 342, 352, 356, 358, 365, 370, 372, 381, 383, 395, 399, 400, 402, 403, 407, 423, 425, 427, 429, 431, 433, 435, 440, 443, 445, 446, 465, 466, 467, 479, 498, 514, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 573, 579, 602, 610, 617, 630, 644, 659, 661, 675, 684, 704, 705, 706, 707, 718, 734, 746, 761, 762, 767, 775, 777, 778, 781, 782, 783, 789, 805, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 844, 856, 858, 859, 861, 864, 870, 871, 881, 882, 889, 890, 891, 892, 907, 921, 953, 954, 956, 957, 958, 961, 963, 964, 967, 969, 974, 978, 979, 980, 984, 997, 999, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020], "half": [4, 24, 97, 230, 233, 254, 256, 268, 365, 366, 400, 446, 505, 545, 576, 580, 585, 752, 840, 848, 964, 967, 980], "contigu": [4, 21, 372, 381, 392, 399, 403, 427, 430, 432, 442, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 763, 798, 821, 822, 881, 883, 884, 885, 886, 887, 979, 1008, 1015, 1019], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 70, 71, 72, 73, 74, 77, 85, 99, 102, 108, 114, 115, 118, 119, 120, 121, 122, 123, 124, 127, 128, 134, 135, 141, 142, 144, 148, 160, 161, 163, 165, 166, 168, 169, 172, 191, 196, 198, 203, 204, 211, 212, 214, 226, 231, 236, 237, 238, 243, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 278, 280, 284, 285, 292, 294, 295, 300, 302, 303, 304, 305, 308, 309, 310, 313, 319, 320, 328, 331, 336, 346, 350, 352, 359, 370, 372, 375, 382, 383, 396, 399, 402, 421, 422, 541, 543, 550, 551, 562, 642, 680, 681, 683, 685, 724, 809, 812, 830, 838, 839, 841, 889, 890, 891, 892, 953, 954, 959, 964, 966, 967, 972, 974, 979, 985, 994, 995, 999, 1002, 1011, 1012], "timeseriessplit": [4, 251, 399, 1011, 1012, 1017], "ts_cv": 4, "n_split": [4, 109, 120, 160, 161, 166, 243, 251, 256, 258, 261, 266, 319, 328, 336, 352, 399, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 804, 994, 1011, 1013], "5": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 100, 101, 102, 104, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 134, 137, 140, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 269, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 300, 301, 302, 303, 305, 308, 309, 310, 311, 312, 313, 316, 317, 319, 320, 321, 326, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 341, 342, 346, 347, 348, 349, 350, 352, 365, 367, 368, 370, 372, 375, 376, 381, 382, 383, 386, 387, 388, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 421, 422, 423, 424, 426, 428, 430, 431, 432, 433, 434, 435, 436, 437, 441, 445, 447, 449, 452, 455, 461, 465, 466, 467, 468, 473, 476, 477, 487, 499, 500, 504, 506, 507, 509, 511, 514, 516, 517, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 535, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 565, 575, 576, 577, 580, 585, 593, 596, 597, 598, 599, 602, 603, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 621, 624, 626, 627, 628, 629, 630, 634, 635, 636, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 655, 659, 660, 661, 663, 664, 667, 671, 672, 674, 675, 678, 679, 682, 686, 688, 692, 695, 696, 704, 705, 706, 708, 709, 710, 712, 717, 720, 721, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 751, 763, 764, 766, 767, 769, 770, 771, 774, 776, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 838, 839, 840, 841, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 869, 870, 875, 881, 882, 883, 884, 885, 886, 887, 889, 891, 907, 916, 917, 918, 920, 922, 923, 927, 928, 932, 935, 953, 954, 956, 959, 960, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 976, 978, 979, 982, 986, 990, 994, 995, 997, 998, 999, 1001, 1003, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1019, 1020, 1021], "48": [4, 45, 84, 101, 153, 238, 304, 367, 376, 395, 493, 580, 728, 805, 816, 953, 966, 974], "max_train_s": [4, 399, 800, 1012], "10000": [4, 11, 30, 43, 62, 71, 72, 122, 134, 182, 189, 196, 204, 212, 229, 231, 269, 310, 325, 352, 358, 402, 403, 544, 545, 627, 662, 858, 887, 976, 995, 999], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 70, 108, 114, 119, 120, 122, 123, 127, 165, 172, 191, 196, 203, 204, 211, 212, 253, 254, 258, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 310, 328, 336, 352, 375, 399, 681, 781, 796, 799, 800, 807, 809, 830, 954, 966, 967, 994, 995, 1005, 1006, 1011, 1012, 1017], "manual": [4, 46, 166, 167, 169, 180, 197, 207, 258, 276, 319, 326, 341, 343, 356, 357, 365, 370, 374, 375, 382, 386, 395, 399, 400, 401, 421, 432, 550, 831, 854, 860, 953, 958, 960, 963, 964, 967, 974, 985, 990, 991, 999, 1013, 1015, 1021], "inspect": [4, 31, 55, 60, 111, 115, 122, 124, 125, 129, 142, 148, 153, 154, 166, 167, 168, 169, 179, 188, 205, 235, 256, 259, 268, 279, 284, 287, 303, 308, 309, 310, 311, 313, 324, 325, 326, 329, 330, 341, 347, 357, 359, 372, 383, 395, 396, 402, 403, 447, 536, 537, 540, 541, 542, 543, 547, 548, 549, 810, 841, 842, 889, 890, 891, 892, 952, 964, 965, 968, 971, 972, 979, 984, 999, 1001, 1008], "variou": [4, 12, 36, 37, 57, 59, 60, 67, 80, 84, 97, 163, 166, 174, 206, 215, 216, 217, 218, 223, 229, 302, 309, 341, 343, 350, 352, 356, 364, 365, 366, 367, 370, 372, 375, 382, 384, 393, 394, 395, 397, 421, 425, 455, 485, 497, 498, 508, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 577, 585, 630, 634, 636, 638, 641, 644, 646, 648, 649, 651, 656, 658, 659, 674, 675, 682, 779, 782, 783, 785, 793, 801, 802, 803, 804, 805, 806, 807, 808, 841, 881, 882, 953, 954, 961, 964, 967, 971, 974, 978, 980, 984, 988, 998, 999, 1005, 1008, 1009], "check": [4, 5, 8, 17, 46, 53, 55, 98, 128, 148, 163, 165, 167, 168, 182, 184, 185, 196, 218, 242, 249, 265, 272, 311, 318, 336, 350, 356, 357, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 383, 386, 389, 396, 427, 434, 435, 448, 485, 491, 492, 514, 519, 520, 531, 544, 545, 629, 630, 635, 636, 643, 644, 645, 646, 659, 661, 664, 670, 672, 675, 676, 785, 796, 805, 819, 837, 845, 886, 889, 890, 891, 892, 901, 902, 903, 912, 913, 924, 925, 926, 948, 949, 950, 952, 959, 960, 961, 964, 979, 985, 988, 1005, 1006, 1008, 1012, 1016, 1017, 1018, 1019, 1020], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 32, 40, 44, 49, 61, 69, 104, 105, 113, 120, 128, 135, 169, 235, 251, 254, 256, 257, 259, 260, 265, 269, 285, 300, 304, 308, 309, 310, 311, 312, 313, 320, 331, 342, 343, 358, 364, 365, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 393, 394, 395, 396, 399, 401, 402, 403, 416, 418, 421, 433, 439, 440, 447, 448, 449, 454, 455, 461, 465, 466, 467, 471, 472, 473, 474, 475, 479, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 506, 515, 533, 534, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 571, 572, 574, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 615, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 664, 667, 675, 679, 680, 682, 693, 695, 696, 699, 701, 707, 715, 728, 736, 760, 763, 765, 770, 774, 777, 778, 779, 782, 783, 785, 790, 791, 793, 802, 803, 804, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 849, 852, 854, 855, 860, 862, 878, 882, 884, 887, 889, 890, 891, 892, 893, 894, 895, 897, 901, 902, 903, 907, 909, 910, 911, 913, 921, 922, 924, 935, 938, 948, 953, 954, 960, 964, 966, 967, 968, 971, 972, 975, 980, 982, 984, 985, 988, 990, 994, 996, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "train_0": 4, "test_0": 4, "iloc": [4, 128, 166, 167, 214, 256], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 79, 84, 90, 100, 102, 104, 109, 113, 121, 141, 142, 149, 160, 166, 176, 186, 222, 225, 243, 256, 289, 292, 295, 298, 300, 313, 316, 317, 339, 341, 349, 352, 356, 376, 399, 402, 403, 428, 460, 484, 487, 553, 580, 661, 716, 776, 796, 807, 833, 851, 856, 858, 859, 862, 870, 871, 873, 874, 959, 960, 964, 965, 967, 974, 995, 1005, 1007, 1013, 1016], "760": [4, 258, 272], "68": [4, 187, 295, 316, 395, 518, 524, 573, 1005], "27": [4, 6, 19, 31, 47, 54, 222, 296, 316, 317, 337, 367, 395, 403, 405, 507, 696, 770, 771, 862, 882, 964, 974, 998, 1005, 1007], "9993": [4, 636, 638, 1013], "12380": 4, "32": [4, 5, 51, 91, 165, 168, 233, 258, 272, 312, 317, 364, 368, 375, 383, 392, 402, 403, 429, 547, 548, 565, 572, 617, 659, 860, 862, 901, 902, 929, 972, 974, 998, 1005, 1008, 1011, 1013, 1014, 1017, 1018, 1019], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 73, 149, 168, 172, 229, 254, 256, 258, 276, 290, 303, 311, 341, 342, 352, 365, 376, 402, 403, 473, 544, 545, 627, 660, 978, 999, 1016], "77": [4, 6, 19, 44, 172, 265, 295, 317, 364, 367, 517], "0028": 4, "12381": 4, "72": [4, 6, 7, 8, 151, 375, 805], "9995": 4, "12382": 4, "240": [4, 44, 63, 67, 286, 290, 972, 1005], "82": [4, 30, 53, 57, 142, 199, 287, 295, 316, 770, 779, 793, 964, 967, 995, 1005], "9980": [4, 1013], "12383": 4, "13374": 4, "34": [4, 121, 128, 132, 148, 281, 316, 317, 367, 399, 405, 503, 553, 580, 632, 650, 699, 746, 995, 1005], "44": [4, 153, 166, 167, 280, 405, 763, 862, 882, 885, 964, 971, 1005], "40": [4, 14, 54, 65, 77, 89, 94, 100, 124, 130, 148, 187, 188, 190, 213, 219, 221, 232, 245, 257, 282, 288, 294, 300, 316, 317, 326, 327, 329, 331, 333, 335, 350, 357, 365, 399, 478, 500, 501, 821, 822, 826, 838, 839, 953, 965, 974, 1005, 1006], "150": [4, 6, 89, 91, 113, 121, 134, 218, 222, 225, 269, 367, 399, 404, 487, 585, 802, 803, 804, 964, 994, 995, 996], "53": [4, 15, 53, 306, 395, 402, 518, 524, 772, 773], "15": [4, 6, 7, 8, 12, 13, 14, 30, 31, 34, 40, 44, 53, 54, 60, 61, 65, 72, 73, 79, 81, 91, 104, 109, 113, 117, 118, 121, 138, 140, 142, 144, 148, 152, 160, 165, 166, 167, 185, 193, 198, 210, 214, 219, 222, 225, 243, 244, 251, 259, 261, 262, 264, 267, 268, 270, 272, 279, 280, 284, 292, 293, 298, 300, 302, 317, 320, 326, 328, 331, 335, 338, 347, 364, 365, 370, 382, 399, 402, 403, 424, 437, 473, 480, 514, 520, 538, 539, 581, 627, 635, 644, 646, 651, 659, 661, 675, 723, 797, 810, 833, 862, 953, 959, 960, 961, 964, 967, 968, 974, 979, 982, 990, 995, 1003, 1007, 1017, 1019, 1020], "0013": 4, "13375": 4, "39": [4, 234, 238, 365, 367, 368, 374, 395, 403, 478, 890], "49": [4, 364, 365, 367, 375, 395, 433, 440, 696, 708, 738, 746, 777, 779, 862, 959, 964, 974, 1008], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 96, 154, 166, 211, 214, 331, 367, 376, 402, 403, 538, 539, 553, 717, 964, 999, 1005], "08": [4, 15, 19, 28, 44, 50, 66, 67, 75, 97, 132, 166, 167, 170, 215, 272, 295, 314, 367, 514, 526, 528, 546, 624, 641, 779, 838, 839, 860, 970], "910": [4, 8], "42": [4, 5, 6, 24, 25, 26, 27, 31, 46, 55, 77, 84, 96, 102, 115, 116, 118, 121, 122, 124, 128, 141, 142, 161, 166, 168, 169, 172, 175, 180, 185, 188, 190, 191, 198, 202, 203, 204, 210, 211, 213, 218, 225, 231, 234, 237, 255, 257, 260, 276, 282, 283, 284, 292, 299, 300, 301, 303, 305, 308, 310, 312, 314, 319, 326, 328, 341, 342, 352, 357, 372, 375, 376, 383, 395, 399, 402, 403, 406, 421, 428, 471, 475, 507, 514, 520, 527, 540, 541, 548, 549, 550, 551, 553, 660, 777, 781, 805, 807, 821, 822, 826, 830, 833, 873, 874, 876, 877, 878, 891, 892, 967, 974, 995, 999, 1002, 1005], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 70, 111, 130, 166, 167, 175, 184, 225, 257, 303, 316, 317, 527, 631, 632, 639, 685, 689, 690, 709, 723, 738, 764, 771, 814, 953, 960, 964, 970, 971, 974, 995, 999, 1005, 1007], "26": [4, 46, 54, 79, 96, 153, 166, 219, 233, 269, 304, 306, 317, 376, 553, 631, 711, 765, 857, 869, 918, 964, 974, 1005, 1008, 1009, 1017], "47": [4, 192, 215, 272, 365, 476, 477, 518, 524, 959], "16": [4, 5, 8, 14, 15, 19, 22, 27, 43, 50, 51, 54, 65, 73, 79, 84, 94, 97, 106, 140, 152, 154, 156, 157, 167, 175, 189, 195, 196, 197, 211, 214, 217, 218, 219, 222, 229, 230, 233, 239, 242, 258, 259, 260, 280, 295, 298, 302, 308, 342, 348, 365, 367, 368, 376, 382, 386, 387, 388, 399, 400, 403, 426, 454, 455, 461, 480, 485, 517, 518, 553, 572, 578, 579, 590, 591, 622, 633, 634, 637, 638, 639, 640, 665, 666, 792, 797, 807, 856, 882, 890, 953, 960, 964, 974, 979, 982, 990, 999, 1003, 1005, 1006, 1010, 1011, 1013, 1014], "9979": 4, "2331": 4, "31": [4, 69, 78, 97, 132, 214, 281, 311, 316, 317, 392, 403, 483, 544, 545, 580, 632, 654, 662, 929, 965, 1005], "060": [4, 733], "0032": 4, "2332": 4, "2333": 4, "78": [4, 53, 91, 172, 214, 295, 300, 317, 476, 477, 636, 638, 647, 648, 779, 785, 805, 964, 985, 995], "275": [4, 317, 1008], "2334": 4, "96": [4, 32, 48, 61, 155, 225, 254, 295, 300, 303, 304, 316, 317, 367, 399, 953, 959, 964, 974, 1005], "515": 4, "64": [4, 32, 48, 53, 57, 88, 94, 153, 166, 218, 229, 230, 233, 254, 265, 280, 285, 347, 356, 357, 367, 368, 376, 400, 478, 485, 582, 583, 629, 641, 671, 672, 673, 674, 882, 967, 996, 1005, 1007, 1013, 1014, 1017, 1018, 1019], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1014], "12329": 4, "46": [4, 53, 91, 188, 196, 264, 352, 376, 576, 577, 699, 885, 890, 959, 974], "12330": [4, 1013], "52": [4, 153, 175, 196, 616, 777, 959, 1005], "last": [4, 44, 57, 88, 119, 121, 166, 175, 196, 197, 204, 209, 225, 247, 259, 267, 268, 303, 310, 312, 319, 346, 356, 365, 368, 372, 374, 375, 378, 383, 386, 395, 396, 403, 407, 422, 426, 430, 442, 447, 451, 498, 516, 542, 543, 544, 545, 566, 567, 570, 576, 577, 580, 593, 665, 666, 668, 669, 680, 681, 683, 684, 685, 690, 764, 777, 778, 782, 783, 798, 821, 822, 826, 841, 842, 846, 854, 860, 896, 921, 939, 953, 959, 960, 961, 963, 965, 968, 978, 985, 990, 997, 1005, 1012, 1013, 1014, 1019], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 54, 96, 117, 195, 232, 269, 295, 300, 316, 317, 402, 646, 770, 959, 964, 965, 974, 999, 1005], "665": 4, "16380": 4, "71": [4, 8, 91, 214, 320, 367, 493, 712, 964, 997, 1007], "16381": 4, "76": [4, 172, 196, 295, 317, 341, 352, 367, 376, 763, 997], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 22, 40, 44, 49, 53, 59, 61, 73, 102, 109, 121, 157, 162, 166, 207, 225, 230, 256, 290, 302, 304, 317, 341, 342, 343, 370, 376, 396, 399, 400, 403, 430, 442, 475, 483, 484, 485, 487, 488, 493, 518, 519, 521, 523, 524, 540, 541, 542, 543, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 560, 561, 572, 577, 582, 583, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 629, 632, 641, 642, 654, 697, 701, 713, 716, 717, 723, 725, 777, 778, 800, 814, 837, 838, 839, 845, 851, 859, 860, 871, 881, 882, 889, 890, 891, 892, 893, 917, 918, 953, 962, 964, 974, 982, 1003, 1005, 1006, 1009, 1010, 1012, 1013, 1015, 1016], "940": 4, "6331": 4, "28": [4, 65, 97, 121, 166, 167, 170, 212, 265, 294, 310, 314, 316, 317, 367, 376, 395, 399, 433, 440, 974, 995, 1005, 1008, 1011], "790": [4, 69], "89": [4, 8, 32, 153, 187, 295, 316, 317, 964, 974, 999, 1005, 1008, 1016], "6332": 4, "6333": 4, "88": [4, 6, 32, 187, 255, 295, 316, 317, 346, 365, 367, 397, 456, 841, 995, 1005], "820": [4, 821, 822], "79": [4, 6, 30, 32, 79, 80, 97, 172, 295, 317, 367, 375, 397, 457, 507, 580, 819, 1005, 1007], "6334": 4, "6335": 4, "70": [4, 6, 8, 11, 65, 70, 72, 167, 241, 256, 317, 365, 367, 399, 476, 477, 696, 708, 738, 779, 793, 953, 974, 995], "33": [4, 79, 196, 313, 317, 341, 365, 367, 368, 374, 375, 376, 386, 387, 388, 403, 515, 631, 695, 696, 711, 712, 720, 725, 765, 766, 769, 785, 805, 807, 809, 892, 960, 964, 974, 995, 1005, 1013], "335": 4, "74": [4, 111, 212, 316, 317, 367, 573, 779, 793, 860], "16326": [4, 1017], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 153, 197, 365, 374, 378], "tree": [4, 7, 26, 27, 31, 41, 44, 61, 107, 108, 111, 112, 113, 118, 119, 120, 121, 122, 124, 128, 129, 132, 156, 160, 167, 169, 218, 233, 235, 260, 276, 281, 289, 298, 299, 303, 310, 351, 352, 356, 359, 365, 367, 376, 382, 383, 385, 393, 395, 401, 406, 421, 425, 426, 427, 428, 429, 431, 433, 440, 446, 478, 483, 487, 497, 498, 502, 527, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 614, 615, 616, 617, 641, 671, 675, 685, 686, 770, 785, 805, 807, 816, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 842, 845, 854, 913, 954, 961, 964, 965, 970, 971, 984, 985, 986, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "often": [4, 19, 24, 25, 33, 69, 73, 126, 152, 160, 166, 167, 197, 214, 218, 243, 258, 261, 298, 303, 328, 338, 341, 342, 343, 356, 357, 364, 365, 367, 370, 372, 375, 378, 381, 382, 383, 385, 389, 393, 395, 396, 397, 399, 400, 402, 403, 405, 407, 451, 504, 507, 516, 519, 615, 629, 630, 635, 636, 643, 644, 645, 646, 655, 657, 670, 710, 851, 859, 867, 879, 953, 954, 956, 959, 960, 961, 962, 963, 964, 966, 967, 969, 970, 971, 974, 977, 978, 980, 990, 992, 997, 998, 999, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "flexibl": [4, 25, 118, 160, 196, 299, 325, 343, 372, 377, 399, 405, 657, 881, 882, 953, 958, 960, 964, 968, 974, 985, 988, 1014, 1018], "effici": [4, 5, 12, 13, 42, 46, 53, 94, 126, 172, 185, 189, 198, 204, 281, 341, 356, 362, 364, 370, 372, 373, 375, 376, 381, 383, 389, 392, 394, 395, 400, 401, 402, 405, 407, 426, 427, 430, 432, 433, 435, 437, 440, 442, 444, 445, 479, 516, 517, 518, 521, 523, 524, 527, 546, 549, 557, 571, 574, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 621, 623, 638, 641, 642, 647, 649, 651, 656, 658, 659, 660, 661, 662, 668, 669, 671, 682, 708, 738, 745, 761, 762, 777, 778, 779, 793, 810, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 846, 858, 870, 874, 881, 890, 892, 918, 932, 953, 956, 958, 960, 961, 963, 964, 965, 967, 968, 969, 970, 972, 974, 975, 976, 977, 978, 979, 984, 988, 990, 994, 997, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "heteorogen": 4, "tabular": [4, 167, 372, 972], "mix": [4, 61, 68, 75, 95, 96, 163, 196, 298, 364, 372, 381, 383, 396, 400, 407, 447, 449, 450, 479, 516, 521, 523, 530, 583, 587, 613, 629, 630, 635, 641, 642, 643, 644, 645, 646, 651, 659, 661, 664, 779, 793, 807, 841, 854, 855, 861, 862, 928, 935, 938, 960, 969, 998, 1017, 1019, 1020], "long": [4, 11, 12, 44, 61, 109, 121, 153, 161, 166, 168, 196, 232, 259, 289, 298, 309, 341, 342, 352, 357, 370, 378, 381, 383, 384, 389, 394, 395, 405, 436, 481, 521, 659, 660, 661, 782, 783, 816, 817, 818, 819, 820, 838, 839, 849, 964, 970, 974, 975, 977, 978, 983, 987, 1007, 1011, 1017, 1019], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 59, 64, 79, 80, 81, 85, 89, 91, 94, 98, 99, 103, 104, 109, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 124, 129, 130, 131, 142, 144, 148, 153, 154, 155, 157, 160, 163, 166, 167, 172, 174, 182, 184, 185, 196, 198, 200, 204, 210, 212, 213, 214, 215, 217, 225, 229, 230, 232, 234, 241, 242, 244, 245, 246, 247, 249, 251, 256, 258, 259, 260, 262, 264, 268, 270, 272, 274, 276, 279, 280, 281, 282, 283, 285, 286, 287, 298, 300, 301, 302, 303, 305, 308, 310, 311, 313, 316, 318, 319, 320, 321, 323, 324, 326, 328, 330, 336, 339, 341, 342, 347, 350, 356, 359, 363, 365, 366, 369, 370, 372, 373, 381, 382, 392, 393, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 412, 414, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 439, 440, 441, 444, 445, 446, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 593, 594, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 670, 671, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 745, 746, 750, 751, 752, 753, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 901, 902, 906, 907, 918, 922, 933, 935, 938, 939, 942, 945, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 984, 985, 987, 990, 996, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "larg": [4, 12, 13, 21, 26, 37, 39, 43, 47, 49, 50, 52, 53, 72, 74, 94, 98, 112, 114, 121, 124, 126, 141, 153, 154, 168, 175, 176, 185, 187, 196, 198, 201, 202, 214, 230, 253, 259, 262, 265, 278, 285, 294, 298, 300, 311, 312, 328, 333, 342, 343, 356, 365, 370, 376, 379, 381, 382, 383, 386, 389, 394, 397, 399, 400, 401, 402, 404, 405, 406, 408, 426, 428, 430, 433, 434, 435, 436, 441, 445, 456, 458, 482, 497, 517, 519, 521, 523, 527, 530, 532, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 565, 571, 572, 574, 617, 624, 626, 633, 637, 640, 641, 642, 647, 654, 655, 657, 660, 662, 668, 670, 672, 674, 675, 676, 678, 728, 761, 762, 779, 787, 789, 793, 797, 806, 816, 817, 818, 819, 820, 821, 822, 827, 838, 839, 846, 850, 851, 859, 861, 873, 874, 881, 882, 886, 887, 889, 890, 891, 892, 917, 918, 953, 956, 958, 960, 961, 963, 966, 967, 968, 972, 974, 977, 978, 979, 980, 984, 985, 988, 995, 997, 998, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "here": [4, 8, 9, 12, 13, 17, 24, 56, 57, 65, 77, 81, 88, 89, 91, 96, 97, 99, 101, 102, 103, 105, 109, 112, 118, 122, 128, 142, 145, 148, 156, 157, 166, 167, 168, 172, 175, 185, 189, 196, 202, 211, 212, 214, 217, 219, 225, 230, 235, 242, 243, 244, 250, 253, 254, 256, 258, 259, 261, 265, 266, 268, 276, 278, 285, 293, 294, 295, 300, 303, 310, 312, 316, 318, 328, 336, 338, 343, 346, 352, 356, 357, 358, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 378, 381, 382, 389, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 406, 408, 421, 424, 425, 426, 427, 428, 429, 430, 432, 435, 447, 455, 458, 519, 521, 522, 526, 527, 550, 551, 552, 553, 564, 565, 567, 571, 574, 577, 585, 611, 613, 630, 634, 636, 638, 644, 646, 648, 656, 658, 672, 674, 678, 682, 695, 708, 728, 738, 774, 779, 782, 783, 785, 793, 801, 802, 803, 804, 805, 806, 808, 817, 821, 822, 845, 853, 856, 859, 873, 874, 884, 930, 953, 956, 960, 961, 962, 963, 964, 967, 970, 974, 976, 977, 978, 979, 984, 985, 987, 988, 990, 991, 997, 1005, 1013, 1018], "ordin": [4, 53, 70, 128, 301, 304, 305, 310, 313, 364, 383, 402, 479, 550, 692, 846, 849, 854, 855, 862, 960, 961, 974, 985, 1013, 1019], "encod": [4, 8, 11, 48, 70, 94, 114, 128, 163, 166, 167, 168, 195, 196, 265, 297, 299, 300, 301, 306, 310, 312, 313, 328, 341, 343, 362, 364, 366, 372, 375, 381, 383, 396, 399, 400, 402, 403, 405, 447, 470, 479, 486, 509, 514, 520, 522, 523, 525, 527, 528, 529, 531, 534, 545, 549, 550, 552, 564, 571, 572, 574, 613, 631, 641, 642, 652, 655, 663, 717, 781, 786, 788, 804, 807, 841, 842, 844, 846, 848, 849, 852, 854, 855, 862, 865, 879, 953, 954, 960, 961, 964, 966, 967, 969, 978, 980, 984, 985, 1001, 1006, 1007, 1013, 1017, 1019, 1020, 1021], "know": [4, 53, 65, 118, 142, 145, 148, 157, 166, 214, 232, 256, 274, 312, 316, 336, 342, 356, 370, 381, 389, 395, 398, 399, 400, 403, 483, 487, 493, 629, 635, 641, 642, 708, 738, 779, 793, 866, 867, 869, 870, 871, 872, 889, 890, 891, 892, 953, 963, 964, 965, 967, 976, 1011, 1012, 1015, 1017], "treat": [4, 6, 70, 118, 128, 160, 166, 196, 265, 304, 310, 319, 352, 370, 381, 383, 392, 402, 403, 426, 544, 545, 571, 572, 574, 590, 591, 615, 621, 628, 654, 657, 736, 770, 850, 851, 857, 858, 861, 862, 866, 869, 870, 872, 954, 956, 960, 964, 965, 971, 974, 978, 980, 995, 1009, 1017, 1021], "dedic": [4, 254, 338, 368, 374, 376, 381, 384, 386, 391, 395, 567, 655, 657, 670, 953, 984, 990, 1013], "rule": [4, 172, 347, 350, 352, 356, 367, 370, 371, 372, 381, 383, 384, 390, 393, 394, 395, 399, 400, 402, 404, 519, 532, 533, 534, 535, 536, 544, 545, 552, 553, 585, 617, 628, 641, 642, 649, 651, 659, 660, 661, 689, 690, 779, 782, 783, 785, 793, 804, 806, 830, 881, 894, 953, 958, 966, 967, 978, 980, 985, 990, 997, 1001, 1007, 1010, 1017], "pass": [4, 7, 8, 20, 21, 38, 118, 125, 142, 177, 197, 226, 228, 229, 235, 237, 246, 254, 257, 305, 308, 311, 333, 343, 352, 356, 357, 358, 365, 370, 371, 372, 375, 376, 377, 378, 379, 381, 383, 389, 391, 395, 396, 399, 400, 402, 403, 405, 406, 407, 421, 422, 424, 427, 428, 430, 432, 433, 435, 437, 440, 442, 443, 445, 447, 448, 450, 452, 455, 457, 471, 474, 475, 478, 480, 486, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 564, 565, 571, 572, 574, 576, 577, 580, 590, 591, 593, 594, 600, 603, 609, 614, 615, 617, 622, 623, 624, 625, 626, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 659, 660, 661, 662, 664, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 714, 715, 724, 745, 756, 760, 761, 762, 763, 770, 772, 773, 777, 778, 779, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 845, 846, 848, 852, 854, 855, 856, 858, 861, 862, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 901, 902, 908, 912, 913, 917, 918, 920, 922, 924, 925, 932, 934, 935, 938, 953, 954, 960, 962, 964, 965, 966, 967, 968, 971, 974, 977, 978, 979, 985, 988, 990, 994, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "explicitli": [4, 46, 115, 148, 155, 160, 161, 197, 228, 343, 352, 357, 364, 366, 370, 371, 372, 374, 381, 383, 391, 399, 403, 405, 532, 533, 562, 563, 580, 610, 631, 641, 642, 652, 663, 692, 709, 764, 770, 771, 782, 783, 812, 815, 821, 822, 847, 871, 872, 932, 953, 954, 956, 958, 960, 961, 964, 966, 967, 974, 988, 999, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019], "logic": [4, 357, 371, 372, 377, 391, 402, 980, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "integ": [4, 17, 48, 53, 70, 166, 196, 214, 309, 310, 352, 356, 364, 365, 367, 372, 375, 379, 382, 383, 395, 396, 399, 400, 402, 403, 418, 421, 445, 447, 450, 455, 470, 479, 481, 484, 485, 486, 488, 491, 492, 495, 497, 498, 502, 505, 533, 542, 543, 544, 545, 546, 550, 551, 555, 565, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 615, 616, 627, 634, 638, 642, 648, 656, 658, 659, 682, 697, 717, 779, 781, 782, 783, 784, 786, 788, 793, 794, 795, 796, 798, 799, 801, 804, 812, 815, 817, 820, 821, 822, 846, 854, 855, 860, 861, 862, 865, 875, 877, 889, 890, 891, 892, 897, 927, 928, 929, 933, 954, 960, 965, 967, 974, 977, 979, 980, 990, 997, 999, 1005, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "lexicograph": [4, 383, 550, 770, 774, 823, 831], "ad": [4, 13, 74, 102, 104, 108, 119, 141, 148, 154, 155, 175, 198, 221, 231, 256, 257, 258, 298, 309, 310, 311, 312, 313, 320, 342, 369, 370, 374, 376, 381, 383, 384, 400, 402, 403, 404, 405, 425, 426, 427, 429, 430, 432, 435, 442, 445, 447, 497, 505, 515, 518, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 565, 572, 573, 574, 576, 585, 590, 591, 594, 596, 610, 612, 624, 625, 631, 633, 637, 641, 642, 652, 659, 661, 663, 678, 696, 697, 711, 712, 757, 759, 765, 766, 769, 777, 778, 779, 793, 802, 809, 819, 838, 839, 840, 854, 860, 863, 878, 889, 890, 891, 892, 908, 953, 957, 959, 960, 961, 965, 967, 968, 970, 985, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "benefit": [4, 55, 73, 74, 166, 210, 221, 228, 230, 278, 312, 356, 370, 379, 383, 393, 395, 431, 444, 451, 491, 550, 551, 641, 642, 649, 651, 659, 660, 661, 879, 881, 953, 959, 967, 972, 974, 985, 988, 1005, 1008, 1009, 1010, 1017, 1018, 1019, 1020], "prevent": [4, 109, 121, 142, 165, 197, 298, 304, 305, 328, 341, 346, 352, 370, 372, 374, 381, 382, 395, 400, 403, 426, 432, 471, 472, 573, 574, 594, 710, 767, 838, 839, 866, 867, 869, 870, 871, 872, 964, 966, 969, 970, 974, 980, 997, 1007, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 56, 66, 125, 140, 145, 153, 154, 155, 165, 166, 167, 168, 185, 196, 214, 225, 228, 229, 242, 246, 247, 256, 257, 259, 262, 265, 289, 298, 299, 302, 305, 308, 310, 311, 313, 328, 343, 352, 356, 357, 358, 364, 365, 367, 368, 370, 372, 374, 375, 376, 378, 382, 383, 384, 386, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 418, 424, 431, 432, 433, 435, 437, 439, 440, 444, 447, 450, 471, 472, 491, 492, 506, 517, 520, 522, 529, 534, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 553, 562, 563, 565, 571, 572, 574, 576, 586, 593, 594, 603, 610, 615, 616, 628, 631, 641, 642, 649, 651, 652, 659, 660, 661, 662, 663, 675, 679, 682, 683, 687, 699, 700, 702, 706, 718, 719, 734, 737, 739, 756, 760, 761, 762, 763, 772, 773, 775, 779, 782, 783, 791, 792, 810, 813, 821, 822, 827, 831, 840, 841, 845, 846, 850, 852, 854, 855, 862, 871, 872, 875, 878, 881, 889, 890, 891, 892, 893, 895, 897, 901, 902, 934, 948, 953, 954, 956, 959, 960, 961, 964, 965, 966, 967, 970, 971, 972, 974, 976, 977, 978, 979, 980, 984, 990, 992, 996, 997, 999, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "unknown": [4, 16, 55, 166, 256, 316, 318, 358, 365, 383, 389, 392, 403, 848, 854, 855, 927, 963, 974, 990, 1009, 1013, 1017, 1018], "sake": [4, 121, 161, 166, 196, 303, 341, 343, 378, 381, 653, 682], "simplic": [4, 13, 31, 341, 343, 383, 401, 967, 968, 969, 979], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 70, 71, 97, 108, 114, 115, 116, 117, 124, 125, 128, 131, 142, 148, 153, 161, 165, 166, 167, 168, 172, 175, 177, 185, 226, 227, 228, 235, 236, 237, 238, 242, 243, 246, 254, 256, 257, 263, 268, 276, 289, 295, 304, 309, 310, 312, 313, 318, 330, 341, 342, 350, 365, 368, 369, 370, 372, 375, 376, 378, 381, 383, 389, 395, 398, 399, 403, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 486, 550, 560, 572, 641, 656, 658, 672, 676, 779, 782, 783, 791, 793, 802, 803, 804, 806, 859, 861, 881, 953, 960, 961, 970, 979, 980, 985, 987, 988, 990, 992, 995, 997, 998, 999, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 58, 94, 141, 148, 160, 167, 175, 176, 185, 196, 197, 214, 227, 229, 236, 238, 244, 251, 259, 265, 274, 276, 298, 302, 305, 308, 309, 313, 337, 341, 342, 343, 346, 352, 356, 357, 364, 365, 368, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 386, 389, 393, 395, 396, 399, 400, 402, 403, 404, 406, 407, 408, 409, 411, 412, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 690, 691, 692, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 905, 907, 908, 910, 912, 917, 918, 919, 920, 921, 922, 923, 927, 929, 932, 933, 934, 935, 937, 938, 939, 945, 948, 950, 951, 953, 954, 956, 958, 960, 963, 964, 965, 967, 968, 970, 971, 974, 976, 978, 979, 990, 994, 997, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "hyper": [4, 70, 250, 256, 261, 295, 328, 352, 372, 381, 382, 383, 390, 399, 402, 404, 627, 628, 783, 791, 793, 837, 959, 960, 964, 967, 978, 979, 990, 1001, 1005, 1019], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 57, 59, 60, 61, 70, 71, 72, 78, 80, 81, 91, 94, 111, 113, 117, 122, 123, 134, 135, 142, 145, 148, 152, 153, 154, 155, 156, 157, 160, 161, 163, 166, 167, 175, 176, 177, 178, 181, 183, 184, 185, 187, 188, 196, 198, 200, 201, 204, 205, 213, 214, 221, 222, 225, 227, 230, 231, 234, 241, 242, 243, 244, 246, 247, 250, 255, 256, 257, 260, 261, 264, 267, 268, 269, 271, 276, 278, 282, 283, 289, 292, 293, 295, 298, 299, 300, 308, 309, 311, 312, 313, 320, 323, 325, 330, 333, 337, 338, 339, 341, 342, 343, 346, 347, 348, 349, 352, 356, 357, 358, 359, 362, 363, 365, 373, 375, 376, 377, 378, 379, 381, 390, 393, 395, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 961, 963, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 980, 984, 985, 991, 993, 995, 996, 997, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "pipelin": [4, 31, 54, 57, 70, 73, 75, 85, 114, 118, 139, 141, 146, 160, 161, 167, 168, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 224, 225, 226, 230, 235, 238, 239, 249, 253, 255, 263, 270, 272, 276, 278, 284, 285, 292, 295, 300, 303, 305, 308, 309, 310, 311, 312, 313, 320, 341, 342, 352, 356, 359, 362, 364, 365, 370, 373, 383, 399, 403, 405, 409, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 471, 485, 498, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 588, 590, 593, 594, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 680, 681, 683, 684, 685, 696, 777, 778, 779, 782, 783, 793, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 953, 954, 960, 967, 968, 973, 974, 978, 979, 984, 985, 986, 988, 991, 993, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "make_pipelin": [4, 31, 57, 85, 114, 118, 128, 141, 142, 160, 161, 166, 167, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 225, 226, 227, 235, 236, 238, 253, 263, 276, 285, 292, 300, 303, 304, 305, 308, 309, 310, 311, 312, 313, 342, 352, 382, 396, 399, 550, 659, 661, 833, 841, 866, 867, 869, 870, 871, 872, 881, 882, 883, 884, 886, 887, 954, 967, 974, 978, 979, 1008, 1015, 1018], "ordinalencod": [4, 118, 128, 167, 168, 196, 304, 313, 364, 383, 402, 564, 817, 849, 854, 862, 966, 974, 1013, 1014, 1017, 1018, 1019, 1020, 1021], "compos": [4, 5, 25, 68, 69, 70, 74, 85, 111, 118, 128, 163, 166, 167, 168, 196, 198, 214, 227, 236, 238, 304, 309, 311, 312, 313, 359, 382, 395, 396, 399, 405, 498, 595, 963, 1005], "columntransform": [4, 69, 70, 128, 166, 167, 168, 196, 214, 227, 236, 238, 304, 309, 311, 312, 313, 362, 364, 381, 382, 449, 450, 612, 846, 953, 954, 985, 1001, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "ensembl": [4, 7, 10, 26, 27, 31, 55, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 160, 161, 167, 168, 169, 196, 218, 225, 233, 234, 236, 237, 253, 268, 274, 300, 304, 308, 309, 310, 311, 313, 341, 352, 356, 359, 374, 375, 382, 383, 393, 395, 399, 404, 421, 487, 498, 615, 616, 618, 641, 685, 782, 783, 807, 811, 842, 845, 854, 885, 889, 891, 892, 953, 964, 965, 970, 971, 980, 984, 985, 986, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "histgradientboostingregressor": [4, 7, 118, 121, 122, 125, 128, 160, 167, 196, 304, 308, 309, 310, 311, 313, 374, 402, 543, 615, 616, 618, 954, 971, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "cross_valid": [4, 118, 128, 166, 198, 252, 259, 304, 370, 382, 558, 802, 803, 964, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1021], "categorical_column": [4, 118, 166, 168, 450], "ordinal_encod": [4, 118], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 56, 61, 68, 73, 75, 85, 88, 96, 97, 99, 101, 103, 104, 107, 118, 128, 132, 142, 154, 161, 163, 166, 167, 168, 172, 188, 196, 197, 204, 210, 212, 214, 218, 221, 225, 227, 230, 232, 238, 243, 253, 254, 257, 265, 276, 278, 284, 285, 286, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 313, 328, 331, 341, 343, 352, 359, 364, 365, 366, 367, 370, 372, 375, 379, 383, 391, 393, 394, 395, 397, 400, 402, 403, 404, 405, 411, 415, 417, 421, 425, 426, 427, 429, 430, 432, 435, 447, 448, 449, 450, 451, 465, 466, 467, 468, 471, 472, 479, 486, 491, 492, 497, 498, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 540, 542, 544, 547, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 619, 621, 622, 623, 624, 625, 636, 641, 646, 656, 659, 667, 671, 672, 673, 674, 675, 677, 684, 685, 696, 735, 736, 767, 779, 782, 783, 793, 807, 810, 816, 825, 830, 833, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 879, 881, 883, 886, 887, 910, 912, 953, 954, 956, 958, 960, 961, 964, 965, 968, 978, 979, 981, 984, 985, 986, 990, 995, 996, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "remaind": [4, 118, 166, 185, 196, 198, 214, 313, 336, 346, 396, 447, 450, 1005, 1012, 1013, 1014, 1017, 1018], "passthrough": [4, 71, 118, 166, 167, 196, 214, 304, 313, 396, 447, 450, 550, 551, 840, 841, 974, 1014, 1016, 1019, 1020], "short": [4, 5, 118, 124, 187, 254, 294, 341, 370, 378, 399, 403, 407, 960, 961, 967, 1010, 1015, 1016, 1017, 1018, 1019, 1020], "easier": [4, 44, 61, 65, 81, 118, 175, 181, 227, 253, 254, 298, 328, 341, 352, 365, 370, 372, 375, 378, 381, 386, 397, 399, 451, 498, 879, 912, 959, 964, 971, 980, 985, 988, 999, 1014, 1019], "specifi": [4, 94, 118, 119, 149, 152, 154, 155, 156, 185, 197, 204, 241, 264, 356, 357, 364, 368, 370, 372, 379, 382, 383, 389, 395, 396, 399, 400, 402, 404, 405, 407, 409, 421, 425, 429, 433, 435, 446, 447, 450, 452, 453, 455, 456, 457, 458, 459, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 498, 514, 516, 520, 521, 523, 524, 529, 530, 535, 540, 542, 543, 544, 545, 547, 550, 551, 566, 567, 576, 577, 580, 585, 593, 594, 603, 614, 615, 616, 621, 626, 629, 630, 631, 634, 635, 636, 638, 639, 641, 642, 643, 644, 645, 646, 648, 651, 652, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 670, 674, 681, 682, 683, 685, 692, 694, 711, 712, 720, 736, 753, 761, 762, 765, 766, 769, 779, 781, 782, 783, 785, 786, 788, 792, 793, 796, 801, 802, 803, 804, 805, 806, 808, 812, 815, 816, 817, 819, 820, 821, 822, 826, 854, 855, 856, 859, 860, 877, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 913, 920, 948, 954, 960, 961, 963, 964, 967, 971, 972, 974, 977, 978, 979, 994, 998, 1005, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021], "next": [4, 7, 25, 59, 79, 117, 118, 122, 131, 155, 165, 169, 189, 193, 196, 226, 233, 237, 238, 243, 251, 262, 274, 303, 304, 305, 310, 317, 341, 346, 350, 352, 359, 368, 370, 372, 374, 392, 395, 396, 399, 402, 491, 492, 593, 617, 675, 681, 683, 685, 763, 777, 778, 807, 930, 953, 957, 963, 964, 974, 988, 1002, 1005, 1018, 1019], "verbose_feature_names_out": [4, 118, 166, 167, 168, 238, 304, 311, 312, 313, 396, 447, 450, 1018], "categorical_featur": [4, 70, 118, 167, 304, 310, 311, 312, 313, 375, 402, 544, 545, 615, 616, 971, 1013, 1017, 1020], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 69, 70, 74, 81, 85, 91, 94, 96, 99, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 134, 141, 142, 144, 148, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 177, 178, 182, 188, 195, 196, 199, 200, 202, 203, 204, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 230, 232, 233, 234, 235, 237, 238, 241, 243, 244, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 274, 276, 280, 284, 285, 286, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 319, 326, 328, 329, 330, 336, 337, 341, 342, 346, 350, 352, 372, 375, 379, 382, 383, 391, 395, 396, 399, 400, 402, 403, 407, 418, 421, 422, 424, 427, 430, 432, 434, 435, 436, 437, 441, 442, 443, 445, 452, 457, 471, 474, 475, 478, 480, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 567, 576, 577, 590, 591, 593, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 610, 615, 616, 617, 618, 621, 622, 623, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 657, 659, 660, 661, 662, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 717, 770, 773, 777, 778, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 805, 806, 807, 809, 811, 812, 813, 814, 815, 826, 830, 837, 838, 839, 841, 846, 858, 862, 870, 873, 874, 881, 882, 883, 886, 889, 890, 891, 892, 894, 895, 917, 918, 933, 935, 938, 953, 954, 956, 959, 964, 965, 966, 967, 968, 971, 972, 974, 979, 980, 990, 994, 995, 999, 1002, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "set_output": [4, 118, 163, 167, 224, 239, 303, 304, 373, 417, 426, 427, 429, 430, 432, 447, 451, 465, 466, 467, 468, 479, 487, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 641, 671, 672, 675, 807, 825, 830, 833, 837, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 879, 1020], "across": [4, 60, 66, 84, 134, 166, 185, 190, 218, 251, 253, 256, 276, 298, 303, 371, 372, 379, 383, 389, 394, 395, 399, 403, 407, 421, 424, 433, 435, 437, 440, 443, 445, 452, 455, 457, 471, 474, 475, 478, 480, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 550, 551, 571, 574, 577, 585, 590, 591, 593, 594, 615, 616, 617, 622, 623, 624, 625, 629, 630, 633, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 659, 661, 662, 668, 669, 672, 673, 674, 675, 676, 677, 678, 687, 688, 700, 713, 739, 770, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 826, 830, 837, 838, 839, 846, 850, 851, 858, 859, 861, 862, 870, 873, 874, 876, 877, 881, 882, 883, 886, 889, 890, 917, 918, 935, 938, 953, 960, 962, 964, 974, 978, 980, 985, 988, 999, 1005, 1008, 1011, 1012, 1013, 1014, 1015], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 57, 60, 69, 74, 91, 94, 96, 97, 100, 102, 104, 112, 114, 118, 119, 120, 121, 128, 151, 154, 156, 157, 161, 176, 184, 185, 188, 193, 196, 197, 204, 205, 206, 214, 217, 218, 232, 234, 241, 242, 243, 244, 246, 247, 251, 254, 255, 256, 257, 259, 264, 267, 270, 276, 281, 283, 286, 289, 293, 295, 298, 300, 303, 304, 308, 320, 324, 328, 338, 341, 342, 343, 356, 365, 370, 372, 376, 377, 381, 396, 399, 403, 407, 491, 516, 580, 593, 594, 763, 854, 908, 913, 925, 964, 971, 979, 995], "cv_result": [4, 70, 254, 255, 257, 259, 793, 804, 964], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 57, 59, 69, 70, 71, 72, 73, 74, 77, 81, 85, 102, 108, 111, 117, 118, 120, 121, 124, 127, 128, 135, 136, 141, 142, 145, 160, 163, 165, 166, 167, 168, 169, 172, 187, 188, 191, 196, 198, 202, 204, 212, 214, 225, 230, 231, 234, 238, 245, 249, 254, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 274, 283, 284, 285, 292, 293, 294, 295, 300, 303, 304, 305, 308, 309, 310, 311, 316, 317, 319, 320, 328, 336, 341, 342, 346, 352, 365, 370, 372, 375, 382, 383, 389, 390, 392, 393, 394, 396, 398, 400, 402, 404, 412, 414, 416, 421, 427, 430, 432, 435, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 485, 487, 515, 519, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 575, 576, 577, 578, 579, 581, 582, 583, 585, 586, 587, 589, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 724, 737, 738, 739, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 782, 783, 785, 793, 798, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 826, 827, 828, 830, 831, 832, 837, 838, 839, 841, 861, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 920, 953, 956, 960, 962, 967, 970, 972, 974, 978, 985, 993, 995, 997, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "neg_mean_absolute_error": [4, 128, 198, 964], "neg_root_mean_squared_error": [4, 304, 964], "mae": [4, 128, 196, 198, 541, 548, 727, 890, 892, 964, 980, 1012, 1013, 1017, 1018], "test_neg_mean_absolute_error": [4, 198], "rmse": [4, 80, 304, 732, 1016], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 57, 59, 60, 62, 66, 69, 70, 72, 73, 74, 79, 84, 85, 91, 94, 97, 102, 103, 105, 112, 115, 116, 117, 118, 120, 122, 134, 136, 141, 142, 144, 145, 148, 149, 151, 153, 157, 165, 167, 168, 169, 172, 180, 181, 182, 183, 187, 188, 191, 192, 196, 198, 199, 203, 204, 211, 212, 214, 218, 219, 222, 227, 229, 231, 234, 238, 244, 250, 254, 255, 256, 257, 259, 261, 264, 265, 269, 276, 280, 287, 289, 293, 294, 295, 300, 303, 305, 308, 309, 310, 312, 316, 317, 320, 328, 341, 342, 343, 346, 350, 352, 356, 364, 365, 368, 371, 372, 378, 383, 389, 396, 399, 402, 403, 405, 447, 450, 451, 455, 461, 485, 495, 524, 527, 532, 533, 542, 543, 544, 545, 547, 548, 552, 553, 560, 566, 567, 571, 572, 574, 595, 600, 613, 629, 630, 632, 633, 635, 636, 637, 639, 643, 644, 645, 646, 649, 650, 659, 660, 667, 696, 700, 719, 775, 777, 778, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 838, 839, 840, 841, 842, 843, 851, 857, 861, 869, 879, 880, 881, 882, 883, 886, 894, 905, 925, 932, 954, 964, 965, 966, 967, 972, 980, 990, 994, 995, 997, 998, 999, 1005, 1007, 1013, 1014, 1016, 1020], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 57, 70, 72, 74, 85, 115, 116, 141, 145, 148, 149, 150, 152, 157, 165, 167, 168, 176, 180, 182, 188, 196, 198, 202, 211, 212, 214, 218, 229, 231, 254, 256, 257, 259, 262, 264, 267, 276, 292, 320, 341, 342, 343, 972, 995], "std": [4, 11, 12, 37, 46, 50, 54, 60, 65, 78, 80, 81, 95, 96, 97, 115, 117, 118, 128, 135, 157, 160, 161, 166, 176, 181, 205, 229, 254, 255, 256, 258, 259, 261, 264, 266, 270, 271, 304, 319, 331, 342, 352, 383, 395, 399, 402, 498, 589, 592, 861, 872, 974, 998, 1013, 1017], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 57, 69, 74, 79, 84, 91, 94, 97, 99, 102, 104, 105, 111, 112, 115, 119, 130, 140, 145, 148, 152, 157, 167, 176, 192, 196, 197, 211, 213, 214, 217, 228, 229, 230, 232, 241, 243, 244, 254, 256, 259, 261, 262, 263, 265, 266, 276, 281, 295, 300, 302, 303, 310, 313, 317, 336, 350, 356, 364, 367, 368, 370, 374, 376, 379, 383, 386, 392, 393, 395, 398, 399, 400, 401, 402, 403, 405, 406, 428, 429, 430, 431, 433, 452, 454, 457, 461, 472, 498, 499, 500, 501, 506, 511, 521, 523, 524, 530, 540, 541, 542, 543, 546, 547, 548, 549, 571, 572, 573, 574, 590, 591, 597, 610, 632, 654, 662, 675, 679, 682, 689, 690, 737, 784, 787, 789, 794, 795, 798, 817, 821, 822, 826, 846, 873, 875, 889, 890, 891, 892, 916, 921, 922, 939, 943, 944, 953, 956, 958, 960, 961, 964, 965, 966, 967, 968, 970, 971, 974, 976, 978, 979, 980, 990, 997, 999, 1005, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "044": [4, 254, 733, 964], "003": 4, "068": [4, 86, 256], "005": [4, 256, 260, 264, 281, 298, 342, 376], "quit": [4, 53, 56, 85, 112, 134, 145, 166, 167, 194, 214, 264, 311, 341, 356, 375, 382, 395, 403, 959, 961, 966, 988, 1013], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 53, 57, 73, 80, 85, 104, 117, 120, 121, 149, 153, 160, 166, 185, 196, 197, 202, 211, 222, 225, 229, 234, 242, 244, 250, 256, 262, 271, 295, 303, 304, 310, 316, 321, 328, 341, 342, 352, 356, 357, 358, 369, 371, 372, 373, 376, 381, 383, 389, 392, 393, 395, 397, 399, 400, 402, 403, 404, 405, 421, 423, 428, 517, 542, 544, 545, 573, 613, 623, 630, 631, 639, 641, 642, 644, 652, 663, 673, 677, 705, 713, 724, 746, 806, 875, 918, 953, 959, 960, 961, 964, 965, 967, 968, 969, 971, 972, 974, 978, 979, 980, 985, 988, 990, 994, 997, 999, 1011], "trial": [4, 261, 430, 432, 443, 654, 777, 778, 960, 1011], "without": [4, 5, 13, 24, 36, 42, 55, 66, 67, 74, 99, 120, 123, 125, 128, 141, 145, 155, 163, 165, 166, 167, 185, 204, 225, 229, 232, 235, 237, 250, 257, 261, 263, 277, 290, 298, 299, 303, 305, 308, 336, 342, 358, 365, 366, 368, 370, 371, 372, 374, 375, 376, 379, 381, 382, 383, 389, 395, 396, 400, 402, 403, 404, 405, 418, 423, 425, 441, 452, 457, 479, 487, 498, 515, 517, 538, 539, 546, 562, 563, 594, 610, 614, 617, 622, 642, 675, 683, 763, 782, 783, 784, 791, 793, 806, 807, 823, 830, 834, 840, 841, 844, 847, 850, 851, 853, 857, 858, 859, 861, 866, 881, 897, 932, 933, 953, 954, 958, 960, 961, 964, 967, 970, 974, 978, 979, 980, 984, 985, 990, 991, 999, 1002, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020], "tune": [4, 44, 70, 99, 144, 148, 160, 167, 185, 201, 213, 221, 250, 261, 278, 299, 328, 341, 352, 356, 357, 358, 382, 383, 390, 394, 395, 399, 402, 404, 405, 435, 445, 542, 543, 577, 596, 597, 598, 600, 602, 603, 605, 606, 608, 626, 642, 673, 677, 837, 958, 959, 960, 961, 963, 964, 967, 968, 970, 978, 991, 1001, 1005, 1019], "just": [4, 31, 69, 85, 94, 118, 145, 186, 193, 218, 230, 256, 263, 267, 276, 292, 328, 341, 342, 352, 365, 369, 370, 371, 372, 374, 375, 378, 381, 382, 383, 392, 395, 396, 399, 402, 404, 405, 407, 451, 516, 525, 529, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 562, 567, 593, 594, 629, 635, 640, 641, 643, 645, 649, 650, 651, 659, 660, 661, 830, 838, 839, 953, 960, 963, 964, 965, 968, 972, 974, 978, 985, 997, 1005, 1009, 1011, 1013, 1017], "had": [4, 9, 47, 121, 153, 298, 304, 311, 352, 370, 371, 403, 406, 428, 954, 964, 988, 990, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1020], "explicit": [4, 163, 167, 172, 224, 239, 356, 357, 358, 369, 371, 381, 383, 384, 396, 403, 409, 455, 482, 484, 485, 524, 534, 535, 621, 622, 624, 659, 779, 780, 787, 825, 833, 841, 881, 886, 928, 932, 956, 958, 960, 964, 974, 980, 984, 1005, 1009, 1014, 1015, 1018], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 59, 64, 65, 69, 70, 85, 94, 96, 99, 108, 109, 110, 124, 140, 145, 148, 160, 161, 166, 167, 168, 172, 175, 191, 197, 198, 214, 229, 235, 254, 256, 257, 259, 265, 278, 298, 303, 305, 311, 320, 328, 343, 350, 356, 358, 365, 368, 370, 371, 372, 373, 374, 378, 381, 383, 384, 385, 389, 393, 394, 395, 396, 399, 400, 402, 403, 405, 428, 430, 432, 433, 440, 447, 450, 476, 477, 491, 529, 550, 551, 552, 553, 590, 591, 599, 603, 604, 607, 615, 622, 647, 675, 750, 753, 756, 760, 761, 762, 763, 771, 779, 793, 800, 806, 845, 855, 859, 861, 862, 871, 872, 878, 889, 890, 930, 953, 954, 960, 963, 964, 965, 967, 968, 969, 974, 979, 980, 983, 984, 987, 988, 990, 997, 998, 999, 1005, 1006, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "But": [4, 9, 53, 165, 197, 198, 256, 276, 298, 370, 381, 395, 398, 401, 402, 445, 728, 889, 890, 953, 964, 979, 985], "much": [4, 6, 7, 9, 19, 25, 39, 40, 79, 81, 91, 97, 104, 114, 121, 122, 128, 129, 130, 148, 160, 161, 166, 167, 168, 169, 172, 193, 194, 198, 229, 256, 258, 259, 262, 267, 294, 299, 303, 304, 310, 311, 313, 328, 333, 341, 342, 352, 356, 358, 365, 370, 371, 372, 375, 378, 381, 382, 386, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 430, 431, 479, 517, 518, 519, 521, 542, 543, 544, 545, 641, 642, 649, 651, 659, 660, 661, 675, 761, 762, 782, 783, 797, 856, 874, 881, 953, 956, 959, 960, 961, 963, 964, 965, 967, 968, 970, 972, 976, 977, 979, 980, 985, 988, 994, 995, 997, 998, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "monoton": [4, 25, 107, 132, 163, 167, 214, 228, 309, 393, 544, 545, 615, 618, 619, 677, 689, 857, 869, 883, 886, 961, 965, 974, 979, 1012, 1016, 1020], "relationship": [4, 110, 154, 165, 166, 175, 196, 198, 199, 263, 299, 305, 383, 395, 397, 399, 405, 445, 619, 697, 961, 964, 966, 967, 971, 972, 997, 1010], "case": [4, 7, 8, 25, 27, 37, 49, 52, 56, 60, 65, 70, 71, 80, 85, 99, 102, 112, 114, 121, 122, 128, 142, 144, 145, 148, 155, 166, 167, 182, 185, 187, 196, 197, 198, 201, 204, 210, 212, 213, 214, 225, 229, 230, 231, 235, 246, 250, 253, 255, 256, 257, 259, 262, 263, 265, 276, 283, 294, 298, 300, 303, 305, 308, 311, 341, 342, 343, 350, 352, 356, 357, 358, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 379, 381, 382, 383, 384, 386, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 421, 424, 427, 428, 430, 434, 436, 446, 447, 450, 457, 479, 491, 492, 498, 522, 524, 525, 526, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 565, 571, 574, 576, 577, 580, 585, 589, 592, 593, 594, 608, 610, 611, 613, 615, 630, 631, 636, 639, 640, 641, 642, 644, 646, 649, 651, 652, 655, 657, 658, 659, 663, 665, 666, 667, 668, 669, 670, 682, 686, 691, 692, 695, 701, 703, 704, 705, 708, 710, 711, 716, 717, 720, 724, 725, 727, 728, 730, 732, 735, 736, 738, 745, 760, 763, 765, 767, 770, 774, 776, 778, 779, 782, 783, 785, 793, 797, 801, 802, 803, 804, 805, 806, 808, 810, 818, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 841, 848, 850, 851, 854, 855, 856, 859, 860, 861, 862, 865, 871, 872, 873, 874, 881, 883, 886, 889, 890, 896, 897, 907, 918, 919, 932, 953, 954, 956, 958, 959, 961, 962, 963, 965, 966, 967, 968, 970, 971, 974, 978, 979, 980, 984, 985, 987, 988, 990, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "usual": [4, 40, 77, 78, 80, 120, 121, 123, 128, 165, 167, 182, 196, 197, 250, 253, 256, 265, 266, 299, 311, 328, 352, 356, 357, 368, 370, 372, 378, 381, 382, 383, 392, 395, 396, 399, 400, 402, 403, 404, 433, 439, 521, 523, 525, 530, 542, 543, 590, 591, 613, 623, 641, 642, 649, 651, 659, 660, 661, 675, 708, 740, 785, 805, 809, 881, 918, 953, 954, 956, 959, 960, 961, 963, 964, 965, 968, 969, 970, 971, 974, 978, 979, 980, 990, 996, 997, 1020], "hot": [4, 70, 114, 116, 128, 166, 196, 265, 299, 300, 304, 310, 328, 383, 402, 403, 534, 549, 564, 631, 641, 642, 652, 663, 844, 846, 848, 849, 852, 854, 855, 862, 960, 974, 1013, 1019, 1020], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 56, 57, 59, 66, 72, 79, 85, 90, 95, 112, 114, 116, 121, 122, 124, 126, 141, 142, 145, 148, 150, 155, 160, 161, 166, 167, 184, 185, 196, 197, 200, 201, 204, 213, 214, 217, 219, 222, 225, 226, 228, 229, 230, 238, 246, 253, 256, 257, 263, 271, 274, 276, 286, 292, 294, 295, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 319, 321, 328, 330, 336, 341, 342, 343, 346, 347, 350, 352, 356, 358, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 389, 391, 392, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 411, 416, 421, 424, 426, 427, 428, 429, 430, 432, 433, 434, 437, 439, 440, 441, 443, 444, 445, 447, 448, 449, 451, 455, 457, 465, 466, 467, 468, 472, 479, 481, 486, 497, 498, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 564, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 580, 585, 590, 591, 592, 593, 594, 597, 602, 605, 606, 610, 611, 612, 613, 614, 615, 616, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 670, 671, 672, 675, 676, 678, 682, 684, 687, 689, 690, 711, 712, 720, 723, 724, 745, 751, 760, 765, 766, 769, 770, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 793, 801, 802, 803, 804, 805, 806, 808, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 847, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 901, 907, 927, 948, 953, 954, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 978, 979, 980, 983, 987, 988, 990, 997, 998, 999, 1005, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "consist": [4, 7, 26, 32, 37, 55, 56, 69, 79, 84, 89, 91, 94, 118, 124, 131, 145, 151, 153, 156, 161, 196, 214, 231, 262, 265, 294, 303, 308, 311, 336, 342, 352, 356, 363, 365, 367, 370, 372, 376, 377, 378, 379, 382, 383, 384, 393, 395, 397, 401, 402, 403, 405, 413, 414, 416, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 473, 480, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 537, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 574, 594, 610, 611, 612, 613, 618, 621, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 657, 660, 661, 662, 670, 671, 672, 673, 674, 682, 683, 717, 777, 778, 786, 809, 810, 811, 813, 814, 815, 816, 824, 825, 827, 829, 832, 833, 839, 844, 845, 846, 848, 852, 853, 856, 857, 859, 860, 862, 873, 874, 877, 881, 882, 884, 885, 887, 890, 892, 901, 903, 924, 935, 938, 953, 956, 957, 958, 960, 961, 963, 964, 965, 967, 968, 974, 977, 979, 980, 983, 984, 985, 988, 990, 997, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "scale": [4, 5, 12, 25, 27, 37, 40, 43, 46, 47, 55, 57, 60, 70, 71, 78, 81, 85, 96, 99, 100, 125, 145, 148, 149, 150, 153, 154, 155, 157, 163, 167, 172, 176, 177, 184, 196, 198, 210, 211, 212, 214, 216, 219, 223, 225, 231, 246, 253, 256, 257, 258, 263, 293, 294, 295, 297, 298, 306, 309, 312, 321, 323, 325, 328, 339, 352, 355, 356, 362, 363, 364, 367, 370, 375, 379, 381, 382, 383, 394, 395, 396, 400, 402, 404, 405, 430, 433, 434, 440, 447, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 484, 493, 497, 498, 507, 517, 521, 523, 524, 530, 532, 533, 544, 545, 565, 573, 574, 580, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 614, 615, 624, 627, 628, 629, 630, 632, 635, 641, 642, 643, 644, 645, 655, 657, 659, 660, 661, 664, 670, 671, 672, 673, 675, 677, 682, 686, 699, 723, 729, 739, 741, 751, 757, 759, 785, 793, 796, 807, 808, 809, 821, 822, 823, 838, 839, 842, 845, 850, 851, 853, 856, 858, 859, 861, 866, 867, 868, 870, 871, 873, 874, 881, 882, 883, 884, 885, 886, 887, 940, 941, 942, 953, 956, 957, 960, 964, 965, 966, 967, 968, 972, 978, 979, 985, 988, 990, 997, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 53, 56, 57, 63, 69, 70, 71, 91, 94, 96, 99, 102, 104, 110, 112, 115, 118, 119, 121, 122, 126, 145, 148, 166, 167, 169, 182, 184, 185, 190, 196, 197, 198, 204, 214, 234, 235, 246, 251, 252, 253, 254, 256, 257, 259, 261, 262, 264, 269, 276, 281, 294, 298, 299, 301, 303, 304, 308, 310, 319, 328, 336, 341, 342, 343, 350, 352, 356, 357, 358, 364, 365, 367, 369, 370, 372, 374, 376, 379, 381, 382, 383, 384, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 415, 418, 422, 423, 433, 439, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 476, 478, 479, 481, 487, 491, 492, 514, 515, 519, 520, 521, 522, 523, 526, 530, 532, 534, 535, 536, 537, 540, 542, 543, 544, 545, 547, 548, 550, 551, 572, 573, 585, 586, 589, 593, 594, 596, 605, 610, 611, 612, 615, 616, 629, 632, 635, 636, 638, 641, 642, 646, 649, 650, 651, 655, 656, 657, 658, 659, 660, 661, 667, 670, 682, 687, 688, 695, 696, 698, 700, 708, 713, 714, 718, 737, 738, 739, 760, 761, 762, 768, 770, 772, 774, 775, 777, 778, 779, 780, 782, 783, 785, 787, 788, 793, 797, 798, 802, 803, 804, 805, 806, 807, 808, 823, 824, 825, 829, 831, 832, 833, 844, 845, 846, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 870, 881, 882, 889, 891, 903, 907, 918, 930, 935, 938, 939, 949, 953, 954, 956, 958, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 978, 979, 980, 985, 994, 999, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "minmaxscal": [4, 5, 71, 141, 172, 218, 293, 310, 358, 396, 447, 867, 954, 974, 1007, 1010, 1013, 1015, 1016, 1017, 1021], "although": [4, 9, 25, 115, 128, 165, 193, 214, 225, 243, 274, 352, 358, 372, 383, 395, 396, 400, 403, 479, 796, 799, 852, 963, 965, 966, 967, 970, 980, 990, 997, 998, 999, 1005, 1013, 1020], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 56, 69, 71, 72, 85, 105, 114, 117, 123, 128, 145, 154, 166, 167, 193, 196, 202, 214, 217, 218, 219, 222, 225, 228, 229, 230, 232, 243, 244, 251, 256, 258, 259, 263, 265, 266, 274, 276, 289, 298, 300, 302, 304, 305, 311, 312, 319, 320, 326, 328, 336, 338, 341, 342, 343, 356, 364, 368, 370, 371, 372, 374, 378, 382, 383, 389, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 418, 424, 426, 430, 432, 433, 437, 439, 450, 456, 462, 470, 482, 486, 491, 510, 518, 520, 521, 522, 524, 527, 529, 532, 533, 540, 541, 542, 543, 544, 545, 547, 548, 564, 565, 566, 571, 572, 574, 576, 577, 580, 585, 589, 593, 615, 621, 632, 633, 634, 637, 638, 639, 642, 654, 665, 666, 681, 683, 685, 690, 710, 711, 712, 716, 718, 720, 725, 728, 760, 765, 766, 769, 770, 774, 779, 782, 783, 793, 838, 842, 843, 844, 846, 848, 850, 853, 854, 855, 858, 861, 862, 870, 873, 874, 878, 881, 882, 889, 890, 891, 892, 896, 901, 905, 918, 921, 922, 930, 932, 948, 953, 954, 956, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 970, 972, 974, 978, 979, 980, 999, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 43, 44, 45, 46, 48, 53, 54, 59, 61, 65, 70, 72, 74, 80, 85, 94, 97, 99, 101, 105, 112, 113, 114, 115, 118, 121, 122, 124, 126, 127, 137, 144, 145, 148, 150, 152, 156, 160, 166, 167, 168, 169, 176, 181, 182, 185, 186, 191, 197, 198, 200, 204, 210, 211, 214, 217, 218, 221, 225, 228, 230, 235, 241, 246, 247, 250, 251, 254, 256, 257, 259, 262, 263, 264, 265, 267, 268, 271, 276, 278, 282, 292, 293, 294, 298, 299, 300, 303, 308, 310, 312, 313, 316, 319, 321, 328, 332, 333, 336, 341, 343, 348, 349, 356, 357, 358, 364, 365, 367, 370, 372, 374, 375, 376, 378, 381, 382, 383, 384, 389, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 418, 424, 425, 427, 429, 430, 433, 434, 435, 436, 437, 438, 440, 442, 445, 447, 450, 452, 453, 454, 455, 456, 457, 458, 459, 462, 472, 491, 492, 494, 496, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 562, 563, 564, 565, 567, 571, 572, 574, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 617, 619, 623, 626, 635, 636, 641, 647, 648, 649, 650, 659, 660, 661, 669, 672, 673, 674, 675, 676, 677, 678, 691, 693, 695, 700, 707, 708, 710, 711, 712, 713, 714, 718, 719, 720, 736, 738, 739, 746, 753, 756, 760, 761, 762, 763, 765, 766, 767, 769, 773, 774, 777, 778, 779, 781, 782, 783, 784, 789, 793, 794, 795, 796, 798, 799, 802, 808, 809, 810, 812, 813, 814, 815, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 845, 846, 854, 855, 858, 859, 862, 870, 874, 878, 881, 883, 886, 889, 890, 891, 892, 893, 894, 901, 902, 917, 918, 920, 924, 929, 935, 938, 954, 956, 958, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 976, 978, 979, 980, 984, 985, 987, 990, 994, 995, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 70, 81, 85, 114, 116, 121, 145, 149, 152, 155, 166, 167, 169, 176, 182, 189, 196, 202, 204, 214, 231, 242, 253, 256, 257, 262, 274, 276, 293, 294, 295, 298, 302, 303, 304, 305, 318, 328, 336, 341, 342, 343, 346, 352, 356, 357, 365, 372, 375, 378, 381, 382, 383, 389, 392, 393, 395, 399, 400, 401, 402, 403, 405, 408, 416, 430, 431, 444, 448, 458, 465, 466, 467, 517, 519, 535, 537, 539, 541, 543, 545, 548, 551, 553, 571, 574, 590, 591, 594, 615, 616, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 655, 656, 659, 660, 661, 662, 663, 672, 682, 692, 695, 696, 704, 705, 706, 728, 745, 767, 770, 774, 779, 793, 805, 809, 814, 815, 824, 827, 829, 831, 832, 833, 839, 850, 851, 859, 861, 862, 866, 867, 869, 870, 871, 872, 882, 884, 887, 890, 892, 928, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 969, 971, 974, 979, 980, 988, 998, 1011, 1012, 1014, 1015, 1016, 1017, 1019], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 49, 54, 56, 57, 63, 67, 71, 80, 83, 85, 86, 97, 102, 104, 107, 109, 110, 112, 117, 118, 121, 126, 128, 132, 145, 152, 160, 161, 163, 166, 168, 169, 174, 178, 180, 184, 185, 191, 193, 196, 199, 202, 204, 206, 213, 214, 215, 217, 218, 221, 224, 227, 230, 235, 237, 239, 243, 244, 249, 251, 253, 261, 263, 265, 267, 272, 277, 281, 285, 286, 290, 291, 296, 297, 299, 303, 306, 310, 341, 342, 343, 350, 352, 358, 365, 367, 370, 372, 392, 393, 395, 397, 398, 399, 400, 402, 404, 405, 424, 425, 426, 428, 429, 431, 432, 433, 435, 441, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 473, 479, 485, 487, 495, 497, 505, 507, 511, 514, 520, 534, 535, 544, 545, 546, 548, 554, 614, 622, 627, 628, 636, 638, 640, 641, 646, 649, 651, 659, 660, 667, 678, 688, 695, 698, 713, 720, 725, 768, 778, 779, 793, 804, 807, 814, 823, 827, 830, 834, 838, 841, 842, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 867, 870, 883, 885, 886, 953, 956, 957, 958, 960, 961, 963, 964, 965, 966, 967, 968, 970, 974, 975, 978, 979, 980, 983, 984, 997, 998, 1005, 1007, 1012, 1013, 1018], "onehotencod": [4, 70, 114, 118, 128, 166, 167, 196, 214, 227, 236, 238, 304, 309, 311, 364, 383, 396, 402, 449, 450, 549, 564, 565, 844, 848, 849, 852, 855, 862, 974, 1006, 1009, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 70, 72, 74, 85, 94, 114, 128, 130, 131, 134, 136, 144, 145, 148, 160, 163, 165, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 225, 226, 227, 228, 233, 236, 238, 252, 259, 264, 265, 269, 270, 274, 295, 299, 300, 303, 305, 308, 309, 310, 311, 312, 320, 341, 352, 356, 358, 359, 369, 370, 372, 376, 378, 379, 382, 383, 396, 402, 422, 448, 520, 522, 525, 526, 528, 529, 531, 550, 551, 552, 553, 580, 614, 615, 617, 618, 621, 623, 624, 625, 626, 683, 684, 770, 793, 802, 803, 804, 812, 813, 814, 815, 839, 856, 860, 881, 882, 885, 888, 913, 956, 959, 960, 964, 965, 970, 972, 974, 978, 994, 995, 997, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "ridgecv": [4, 74, 128, 145, 166, 233, 383, 402, 551, 626, 655, 658, 960, 1005, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 137, 140, 141, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 347, 348, 349, 350, 352, 356, 363, 364, 365, 368, 370, 371, 372, 373, 374, 376, 378, 379, 381, 382, 383, 386, 388, 389, 391, 392, 395, 396, 399, 400, 401, 402, 403, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 443, 445, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 468, 473, 476, 477, 479, 486, 489, 491, 492, 514, 517, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 552, 553, 564, 565, 571, 572, 574, 610, 611, 612, 613, 614, 615, 616, 626, 629, 630, 632, 635, 636, 640, 641, 642, 643, 644, 645, 646, 649, 651, 653, 655, 659, 660, 661, 667, 671, 674, 675, 676, 678, 682, 685, 686, 689, 690, 692, 695, 697, 708, 709, 711, 712, 716, 717, 720, 721, 736, 738, 755, 761, 763, 764, 765, 766, 769, 770, 771, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 807, 809, 810, 813, 814, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 844, 845, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 883, 884, 886, 887, 889, 904, 916, 918, 922, 923, 924, 926, 927, 933, 935, 938, 951, 953, 954, 959, 960, 962, 964, 965, 967, 970, 974, 976, 979, 983, 985, 987, 990, 993, 994, 995, 997, 998, 999, 1005, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 98, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 137, 140, 141, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 236, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 347, 348, 349, 350, 352, 356, 364, 365, 370, 372, 375, 376, 379, 381, 383, 392, 395, 396, 399, 400, 401, 402, 403, 405, 408, 410, 413, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 443, 445, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 468, 479, 480, 491, 492, 503, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 540, 541, 542, 543, 544, 546, 547, 548, 549, 552, 553, 564, 565, 568, 569, 571, 572, 576, 577, 580, 589, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 651, 653, 654, 655, 657, 658, 659, 660, 661, 664, 665, 666, 667, 674, 675, 678, 685, 686, 689, 690, 692, 695, 696, 697, 698, 708, 709, 711, 712, 716, 717, 720, 721, 723, 736, 738, 745, 751, 755, 760, 763, 764, 765, 766, 769, 770, 771, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 805, 807, 808, 809, 810, 813, 814, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 831, 832, 833, 837, 838, 845, 846, 848, 854, 855, 856, 857, 858, 860, 861, 862, 869, 870, 873, 874, 876, 877, 878, 881, 883, 884, 886, 887, 889, 890, 891, 892, 899, 901, 902, 904, 906, 907, 916, 918, 923, 926, 927, 929, 933, 935, 938, 940, 941, 942, 953, 954, 959, 960, 962, 964, 965, 967, 968, 970, 974, 975, 976, 978, 979, 980, 990, 994, 995, 997, 998, 999, 1006, 1008, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "one_hot_encod": [4, 118], "handle_unknown": [4, 70, 114, 118, 128, 167, 168, 227, 236, 238, 304, 309, 312, 854, 855, 974, 1009, 1013, 1017, 1018], "ignor": [4, 6, 8, 17, 44, 49, 61, 70, 111, 114, 118, 125, 128, 167, 184, 188, 196, 205, 211, 227, 236, 238, 247, 293, 294, 303, 304, 309, 312, 333, 342, 347, 370, 372, 374, 376, 383, 386, 395, 396, 402, 403, 413, 414, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 443, 444, 447, 450, 452, 453, 454, 455, 456, 457, 458, 459, 466, 467, 471, 486, 491, 492, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 540, 541, 542, 543, 546, 547, 548, 549, 562, 564, 565, 566, 571, 572, 573, 574, 585, 586, 610, 611, 612, 613, 615, 616, 618, 622, 626, 632, 633, 634, 637, 638, 639, 641, 647, 648, 659, 660, 661, 671, 672, 673, 674, 675, 690, 696, 697, 708, 711, 712, 720, 737, 738, 745, 751, 756, 760, 765, 766, 769, 770, 777, 778, 780, 781, 782, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 825, 826, 827, 829, 830, 833, 840, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 873, 874, 881, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 915, 939, 960, 961, 964, 966, 970, 974, 979, 995, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "sparse_output": [4, 118, 238, 304, 312, 549, 848, 852, 854, 865, 974, 1020], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 55, 59, 64, 74, 81, 85, 94, 96, 97, 99, 100, 101, 103, 104, 109, 111, 112, 117, 121, 124, 125, 127, 128, 129, 145, 148, 151, 153, 154, 155, 156, 157, 160, 161, 166, 175, 176, 177, 178, 180, 181, 182, 184, 185, 190, 191, 193, 194, 196, 197, 198, 200, 201, 205, 208, 209, 214, 217, 218, 221, 230, 231, 237, 241, 256, 257, 258, 259, 260, 263, 264, 266, 268, 269, 271, 274, 276, 279, 281, 284, 286, 292, 294, 298, 299, 300, 301, 303, 305, 309, 311, 312, 318, 320, 325, 326, 329, 330, 333, 337, 338, 341, 356, 365, 372, 376, 381, 397, 398, 400, 402, 404, 405, 407, 454, 455, 461, 510, 514, 516, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 543, 578, 579, 581, 594, 596, 598, 599, 606, 614, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 670, 705, 730, 816, 817, 818, 820, 838, 839, 877, 889, 890, 891, 892, 953, 959, 960, 964, 966, 968, 972, 977, 978, 979, 980, 994, 997, 999, 1002, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1019, 1020, 1021], "logspac": [4, 12, 72, 77, 102, 134, 135, 145, 149, 154, 166, 189, 200, 201, 229, 231, 245, 257, 269, 271, 280, 292, 300, 303, 328, 336, 959, 960, 994, 995, 997], "naive_linear_pipelin": 4, "142": [4, 57, 402], "014": [4, 376], "184": [4, 196, 295, 376, 997], "020": [4, 972], "three": [4, 7, 26, 40, 41, 46, 57, 77, 89, 90, 109, 114, 115, 118, 120, 129, 130, 131, 142, 156, 166, 188, 193, 196, 198, 205, 207, 231, 241, 244, 304, 305, 309, 332, 357, 363, 367, 374, 386, 392, 395, 399, 400, 401, 403, 434, 445, 481, 692, 920, 957, 959, 960, 961, 964, 967, 974, 978, 979, 983, 990, 998, 1005], "higher": [4, 56, 79, 97, 102, 112, 114, 121, 124, 148, 150, 155, 156, 166, 167, 168, 172, 196, 197, 214, 221, 222, 247, 250, 254, 256, 259, 270, 281, 303, 328, 341, 342, 343, 352, 356, 365, 368, 372, 392, 395, 397, 402, 404, 405, 406, 428, 431, 432, 454, 461, 492, 515, 522, 526, 531, 536, 537, 540, 541, 542, 543, 544, 545, 547, 548, 549, 556, 571, 574, 590, 591, 602, 610, 614, 618, 620, 629, 630, 635, 636, 643, 644, 645, 646, 659, 661, 662, 687, 706, 710, 734, 767, 777, 779, 782, 783, 785, 793, 800, 805, 808, 827, 830, 856, 873, 874, 875, 883, 884, 885, 886, 887, 894, 956, 960, 961, 963, 964, 967, 971, 974, 978, 979, 997, 999, 1006, 1011, 1013, 1020], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 55, 57, 73, 74, 94, 96, 97, 104, 126, 141, 142, 148, 150, 152, 153, 160, 161, 167, 172, 184, 185, 217, 218, 219, 221, 222, 229, 230, 231, 247, 253, 259, 284, 295, 299, 303, 317, 334, 341, 343, 352, 365, 367, 369, 370, 372, 374, 375, 381, 383, 389, 392, 396, 399, 400, 402, 403, 405, 406, 407, 408, 418, 425, 427, 428, 429, 430, 433, 442, 446, 447, 448, 458, 465, 466, 467, 476, 477, 478, 484, 502, 514, 517, 518, 520, 521, 522, 523, 524, 526, 527, 536, 537, 538, 539, 542, 544, 545, 546, 548, 550, 551, 552, 553, 556, 559, 564, 567, 577, 590, 591, 597, 613, 615, 621, 624, 625, 626, 632, 654, 675, 679, 684, 710, 745, 751, 806, 827, 841, 845, 846, 849, 850, 854, 855, 857, 858, 859, 861, 870, 873, 874, 875, 878, 883, 886, 899, 901, 902, 906, 907, 935, 938, 957, 958, 960, 961, 963, 964, 967, 970, 975, 976, 977, 978, 981, 984, 988, 990, 999, 1008, 1009, 1011, 1013, 1015, 1017, 1019], "mere": [4, 256, 383, 808, 978], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 57, 74, 89, 94, 97, 111, 117, 120, 121, 126, 137, 150, 152, 153, 154, 161, 166, 178, 184, 185, 191, 198, 199, 202, 210, 218, 229, 230, 232, 274, 282, 283, 289, 292, 294, 298, 300, 301, 303, 321, 327, 334, 337, 379, 395, 398, 400, 465, 466, 467, 468, 495, 517, 518, 521, 523, 524, 532, 533, 546, 610, 614, 615, 637, 638, 639, 640, 665, 666, 687, 723, 739, 762, 782, 783, 830, 838, 839, 851, 860, 867, 918, 929, 960, 964, 967, 974, 1011, 1014, 1016, 1017, 1020], "properli": [4, 25, 125, 153, 251, 308, 358, 368, 370, 374, 378, 386, 401, 881, 882, 883, 884, 885, 886, 887, 953, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "automat": [4, 8, 12, 46, 62, 64, 70, 102, 134, 144, 175, 199, 241, 242, 254, 257, 298, 305, 309, 313, 320, 330, 357, 359, 365, 368, 370, 372, 374, 378, 383, 386, 391, 395, 396, 397, 400, 402, 403, 404, 417, 433, 435, 439, 445, 447, 448, 450, 479, 482, 498, 524, 532, 534, 540, 544, 547, 566, 571, 574, 577, 585, 626, 628, 629, 630, 635, 636, 641, 642, 643, 644, 645, 646, 649, 650, 651, 655, 657, 658, 659, 661, 664, 667, 670, 671, 674, 678, 781, 796, 799, 807, 817, 838, 839, 842, 843, 845, 854, 855, 862, 873, 874, 881, 883, 886, 889, 891, 895, 907, 935, 938, 953, 955, 958, 963, 968, 974, 978, 980, 984, 985, 994, 1005, 1008, 1009, 1010, 1016, 1019, 1020], "term": [4, 13, 14, 25, 32, 57, 99, 112, 118, 121, 153, 165, 184, 185, 196, 198, 200, 210, 213, 214, 254, 258, 276, 292, 311, 336, 341, 343, 358, 359, 370, 372, 374, 381, 389, 393, 394, 395, 397, 399, 400, 402, 405, 427, 430, 432, 435, 442, 445, 507, 518, 521, 523, 527, 530, 532, 571, 572, 573, 574, 587, 590, 591, 615, 616, 623, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 655, 656, 657, 658, 659, 661, 663, 670, 678, 838, 839, 856, 860, 863, 881, 882, 883, 884, 885, 886, 887, 953, 955, 958, 959, 960, 961, 964, 965, 966, 968, 969, 974, 978, 979, 990, 999, 1013, 1019, 1020], "raw": [4, 12, 14, 37, 80, 96, 128, 153, 166, 172, 295, 305, 318, 343, 356, 365, 378, 383, 393, 394, 395, 397, 400, 403, 452, 457, 484, 485, 486, 542, 543, 544, 546, 565, 571, 572, 573, 574, 617, 660, 673, 677, 688, 768, 827, 885, 961, 964, 968, 970, 971, 974, 977, 996, 998, 1006, 1010, 1013, 1016], "recogn": [4, 29, 35, 85, 116, 163, 197, 311, 376, 395, 403, 485, 680, 696, 807, 886, 964, 990], "increas": [4, 7, 14, 26, 37, 43, 56, 57, 60, 74, 97, 110, 112, 117, 125, 141, 148, 152, 153, 154, 157, 166, 167, 172, 176, 178, 187, 196, 197, 198, 200, 214, 222, 229, 242, 243, 256, 257, 258, 263, 269, 292, 299, 300, 303, 310, 317, 328, 336, 342, 343, 346, 356, 357, 358, 369, 378, 379, 393, 395, 397, 400, 402, 403, 406, 424, 428, 435, 446, 454, 455, 461, 515, 519, 536, 537, 542, 543, 544, 545, 550, 551, 571, 574, 610, 618, 619, 620, 628, 633, 634, 637, 638, 639, 641, 642, 649, 651, 659, 660, 661, 665, 666, 668, 669, 675, 689, 690, 695, 764, 771, 782, 783, 810, 829, 831, 832, 833, 836, 838, 839, 855, 881, 882, 918, 953, 955, 959, 960, 961, 963, 964, 967, 974, 978, 979, 980, 988, 1005, 1007, 1010, 1014, 1016, 1017, 1020], "strong": [4, 163, 165, 166, 174, 189, 193, 200, 202, 215, 231, 305, 394, 400, 402, 405, 507, 632, 655, 957, 958, 960, 961, 963, 971, 979, 997], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 56, 59, 74, 85, 94, 98, 121, 144, 148, 155, 165, 166, 167, 168, 196, 198, 210, 217, 219, 220, 221, 225, 231, 247, 253, 256, 259, 262, 263, 264, 274, 276, 298, 311, 327, 336, 342, 343, 352, 356, 362, 364, 366, 368, 369, 370, 372, 375, 376, 379, 381, 383, 389, 392, 393, 395, 398, 399, 400, 402, 403, 404, 405, 406, 424, 425, 427, 428, 429, 433, 435, 437, 438, 486, 491, 492, 519, 565, 572, 573, 574, 593, 660, 675, 678, 686, 688, 698, 702, 707, 710, 711, 713, 716, 720, 722, 737, 742, 743, 768, 772, 773, 776, 777, 778, 803, 808, 853, 874, 877, 881, 882, 883, 884, 902, 953, 956, 957, 959, 960, 961, 963, 965, 967, 968, 970, 971, 974, 976, 977, 978, 979, 980, 984, 985, 990, 998, 1001, 1005, 1009, 1010, 1011, 1013, 1017, 1018], "magnitud": [4, 104, 111, 149, 161, 166, 213, 261, 298, 303, 311, 356, 365, 376, 395, 402, 405, 596, 635, 687, 861, 960, 964, 968, 974, 978, 980, 1007, 1014], "discret": [4, 46, 104, 107, 132, 147, 158, 163, 167, 196, 214, 297, 301, 306, 358, 362, 365, 366, 374, 382, 383, 395, 400, 402, 403, 405, 422, 423, 431, 435, 443, 444, 445, 475, 497, 498, 503, 505, 536, 542, 554, 571, 572, 575, 578, 579, 582, 583, 590, 591, 593, 594, 595, 599, 600, 601, 640, 641, 724, 776, 779, 790, 807, 816, 817, 820, 842, 846, 854, 855, 858, 861, 870, 881, 886, 889, 890, 927, 953, 960, 961, 962, 964, 965, 967, 980, 984, 990, 1001, 1007, 1010, 1018, 1019, 1020], "manner": [4, 74, 94, 142, 167, 172, 243, 312, 313, 357, 370, 376, 395, 400, 402, 403, 692, 821, 822, 953, 964, 980, 1008, 1015], "uniqu": [4, 16, 24, 30, 42, 47, 48, 56, 57, 62, 66, 115, 116, 122, 123, 166, 168, 211, 214, 243, 265, 285, 304, 305, 319, 341, 342, 343, 364, 372, 379, 383, 395, 396, 399, 402, 403, 424, 433, 437, 439, 447, 450, 479, 532, 533, 534, 536, 537, 540, 541, 542, 543, 544, 545, 547, 548, 549, 593, 616, 617, 618, 649, 651, 659, 680, 692, 736, 764, 779, 781, 793, 804, 809, 810, 813, 819, 828, 833, 838, 852, 854, 855, 862, 865, 881, 883, 889, 890, 891, 892, 906, 918, 927, 928, 960, 965, 974, 988, 997, 1013, 1016, 1017, 1019, 1020, 1021], "decid": [4, 11, 56, 59, 70, 247, 253, 256, 263, 365, 370, 384, 403, 405, 433, 440, 542, 543, 618, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 654, 664, 667, 777, 823, 824, 825, 827, 829, 831, 832, 833, 844, 963, 970, 988, 1018], "therebi": [4, 166, 399, 402, 956, 1015], "assumpt": [4, 9, 25, 27, 36, 67, 77, 78, 97, 153, 163, 165, 196, 225, 298, 376, 381, 382, 385, 393, 394, 395, 397, 399, 400, 403, 405, 430, 434, 436, 471, 486, 495, 515, 517, 524, 633, 637, 778, 779, 782, 783, 793, 818, 873, 874, 958, 960, 964, 965, 966, 967, 969, 970, 971, 974, 977, 980, 1012, 1018], "impli": [4, 148, 341, 342, 343, 400, 402, 405, 457, 556, 565, 593, 594, 605, 717, 905, 960, 961, 999, 1016], "give": [4, 12, 13, 24, 25, 39, 44, 49, 59, 61, 63, 69, 70, 74, 96, 120, 148, 153, 157, 160, 166, 167, 185, 187, 193, 196, 197, 198, 225, 247, 253, 258, 265, 278, 282, 285, 295, 311, 312, 320, 356, 358, 365, 367, 369, 370, 372, 376, 378, 381, 382, 383, 384, 389, 392, 393, 394, 395, 396, 397, 400, 402, 403, 407, 418, 430, 432, 434, 442, 455, 479, 482, 486, 516, 521, 532, 533, 534, 535, 540, 541, 547, 548, 549, 576, 577, 580, 590, 591, 621, 630, 644, 648, 659, 703, 718, 721, 774, 779, 782, 783, 793, 802, 803, 804, 806, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 858, 859, 861, 862, 870, 960, 964, 967, 968, 969, 971, 972, 974, 978, 979, 980, 984, 988, 990, 992, 997, 998, 999, 1005, 1009, 1012, 1013, 1015, 1016, 1017, 1019, 1021], "lot": [4, 81, 166, 365, 370, 371, 372, 378, 400, 402, 782, 783, 873, 874, 953, 976, 978, 979, 984, 985, 988, 998, 999, 1005, 1010, 1012, 1013, 1014, 1015, 1017], "addit": [4, 5, 7, 12, 13, 14, 65, 70, 81, 94, 97, 109, 113, 115, 118, 119, 144, 153, 154, 155, 161, 166, 167, 175, 180, 185, 197, 198, 221, 235, 258, 265, 270, 274, 298, 309, 310, 318, 343, 348, 352, 356, 357, 362, 363, 364, 365, 366, 368, 369, 370, 372, 375, 376, 378, 381, 382, 384, 386, 389, 394, 395, 397, 399, 400, 403, 404, 405, 406, 417, 425, 426, 428, 429, 433, 440, 452, 457, 479, 486, 515, 517, 519, 520, 522, 524, 525, 526, 532, 536, 537, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 594, 595, 602, 611, 613, 614, 618, 621, 622, 623, 624, 625, 626, 627, 628, 653, 670, 671, 675, 681, 682, 685, 724, 740, 741, 770, 772, 777, 778, 785, 810, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 863, 873, 874, 881, 882, 912, 918, 932, 953, 958, 960, 964, 965, 967, 968, 971, 974, 976, 977, 978, 979, 980, 984, 990, 1001, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "level": [4, 9, 11, 12, 16, 27, 41, 53, 94, 114, 117, 137, 145, 147, 152, 153, 155, 158, 163, 166, 167, 207, 208, 209, 210, 211, 214, 225, 229, 230, 245, 256, 259, 265, 266, 282, 289, 326, 327, 329, 330, 332, 334, 342, 350, 356, 365, 367, 368, 370, 376, 383, 385, 386, 393, 400, 403, 409, 437, 476, 477, 486, 504, 514, 519, 520, 530, 544, 545, 550, 551, 594, 605, 608, 649, 650, 651, 659, 660, 661, 670, 673, 675, 677, 685, 699, 705, 710, 767, 802, 803, 804, 806, 809, 810, 837, 838, 839, 894, 953, 960, 964, 965, 967, 972, 978, 980, 984, 985, 999, 1008, 1016, 1019, 1020, 1021], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 209, 215], "011": [4, 264, 276, 376], "131": [4, 13, 55, 109, 376, 964, 1006], "rate": [4, 108, 113, 118, 140, 167, 196, 203, 214, 229, 234, 253, 256, 263, 265, 266, 293, 294, 295, 358, 370, 395, 396, 400, 404, 449, 519, 536, 537, 542, 543, 544, 545, 575, 578, 579, 581, 582, 583, 589, 627, 628, 651, 659, 660, 661, 675, 681, 685, 709, 764, 771, 837, 838, 839, 875, 953, 960, 961, 964, 967, 968, 978, 980, 988, 1009, 1013, 1014], "better": [4, 5, 9, 19, 24, 31, 50, 73, 74, 77, 78, 79, 80, 85, 89, 94, 97, 112, 120, 121, 128, 140, 152, 153, 154, 156, 160, 168, 176, 182, 185, 196, 197, 198, 204, 211, 213, 214, 221, 230, 231, 246, 250, 256, 258, 259, 262, 265, 266, 295, 302, 303, 312, 313, 328, 341, 342, 343, 346, 352, 356, 365, 369, 370, 371, 372, 374, 375, 376, 378, 383, 385, 389, 393, 395, 397, 399, 400, 401, 402, 403, 405, 432, 433, 521, 523, 530, 542, 543, 544, 545, 590, 591, 613, 654, 660, 675, 692, 707, 716, 721, 724, 745, 778, 806, 816, 817, 818, 819, 820, 821, 822, 827, 838, 839, 858, 859, 862, 870, 873, 874, 881, 882, 932, 953, 954, 956, 957, 958, 960, 961, 963, 964, 966, 967, 968, 972, 974, 977, 978, 980, 985, 987, 988, 992, 994, 999, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "confirm": [4, 85, 112, 118, 121, 168, 196, 198, 259, 262, 265, 303, 343, 374, 953, 974, 1013], "progress": [4, 7, 8, 94, 131, 145, 161, 189, 281, 312, 367, 370, 374, 375, 384, 386, 391, 395, 542, 543, 675, 810, 812, 815, 830, 838, 839, 988, 997, 999, 1005, 1007, 1014, 1019], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 59, 61, 79, 80, 81, 84, 91, 97, 100, 121, 126, 134, 153, 160, 166, 167, 168, 185, 196, 197, 198, 201, 204, 214, 221, 225, 231, 241, 258, 259, 262, 263, 265, 266, 271, 276, 294, 298, 311, 316, 319, 328, 338, 341, 343, 352, 356, 365, 369, 370, 372, 375, 376, 378, 381, 382, 383, 389, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 426, 430, 435, 445, 454, 455, 461, 483, 487, 493, 540, 541, 544, 545, 547, 548, 550, 551, 572, 573, 605, 633, 634, 637, 638, 639, 647, 665, 666, 668, 674, 675, 678, 688, 725, 728, 772, 777, 779, 787, 789, 793, 796, 799, 821, 822, 846, 850, 851, 852, 861, 873, 874, 883, 886, 889, 890, 891, 892, 918, 953, 956, 957, 959, 960, 961, 962, 963, 964, 967, 968, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 983, 984, 985, 987, 988, 997, 998, 1005, 1010, 1011, 1013, 1016, 1018, 1020], "new": [4, 7, 8, 10, 50, 55, 57, 59, 69, 70, 102, 108, 111, 113, 114, 121, 127, 128, 142, 145, 148, 154, 161, 168, 169, 196, 202, 210, 225, 255, 258, 263, 280, 282, 304, 309, 312, 317, 320, 327, 352, 357, 358, 364, 365, 367, 368, 369, 372, 373, 374, 376, 378, 379, 382, 383, 384, 386, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 483, 484, 485, 487, 488, 491, 492, 493, 495, 506, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 687, 691, 696, 697, 701, 704, 705, 706, 707, 709, 710, 711, 712, 713, 716, 721, 722, 723, 725, 728, 735, 736, 739, 743, 748, 749, 751, 760, 764, 765, 766, 767, 769, 770, 771, 777, 778, 779, 782, 783, 785, 792, 793, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 867, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 899, 901, 902, 904, 912, 913, 917, 918, 927, 930, 932, 934, 939, 945, 951, 953, 954, 956, 960, 964, 965, 967, 968, 969, 970, 974, 976, 977, 978, 979, 980, 985, 988, 990, 991, 994, 997, 999, 1003, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 365, 370, 961, 983], "1440": 4, "caus": [4, 25, 27, 121, 149, 166, 194, 196, 201, 214, 305, 343, 352, 368, 375, 393, 395, 400, 401, 403, 405, 427, 430, 432, 442, 492, 515, 565, 572, 593, 594, 816, 817, 818, 820, 845, 854, 856, 859, 860, 901, 902, 953, 954, 960, 964, 972, 974, 977, 985, 990, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021], "signific": [4, 121, 141, 163, 214, 249, 256, 272, 274, 276, 341, 352, 364, 365, 381, 395, 398, 399, 402, 487, 515, 517, 532, 533, 610, 641, 642, 649, 651, 659, 660, 661, 798, 806, 881, 883, 884, 885, 886, 887, 963, 964, 967, 980, 1005, 1007, 1008, 1009, 1013], "overfit": [4, 114, 121, 163, 167, 168, 175, 225, 243, 249, 251, 257, 261, 271, 272, 292, 299, 300, 302, 303, 304, 305, 328, 346, 348, 349, 365, 383, 393, 399, 402, 421, 471, 472, 550, 551, 640, 779, 782, 783, 793, 803, 804, 838, 839, 841, 856, 860, 959, 968, 970, 972, 974, 988, 997, 1008], "avoid": [4, 7, 12, 44, 56, 61, 71, 114, 166, 167, 198, 205, 214, 220, 238, 251, 257, 261, 279, 284, 286, 287, 302, 303, 305, 324, 325, 342, 357, 368, 370, 371, 372, 374, 375, 376, 383, 384, 386, 389, 393, 395, 397, 399, 402, 403, 406, 424, 426, 428, 435, 445, 451, 476, 477, 478, 482, 491, 492, 517, 522, 526, 529, 568, 569, 617, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 672, 674, 676, 678, 695, 772, 779, 780, 784, 790, 793, 802, 803, 804, 841, 844, 850, 851, 853, 858, 859, 860, 861, 864, 866, 867, 868, 870, 871, 872, 874, 879, 918, 958, 961, 963, 964, 967, 968, 970, 972, 974, 979, 985, 999, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "kbinsdiscret": [4, 53, 163, 196, 214, 297, 300, 305, 306, 313, 495, 640, 844, 860, 890, 974, 1013, 1017, 1018, 1019, 1021], "re": [4, 8, 13, 26, 55, 69, 70, 118, 151, 165, 214, 242, 246, 259, 261, 265, 309, 341, 343, 357, 370, 371, 374, 378, 382, 384, 393, 399, 403, 452, 453, 454, 455, 456, 457, 458, 459, 538, 539, 544, 545, 546, 629, 635, 643, 645, 781, 796, 799, 889, 890, 891, 892, 960, 965, 967, 974, 979, 985, 988, 999, 1005, 1009, 1010, 1012, 1014], "fine": [4, 37, 117, 212, 247, 254, 348, 349, 367, 374, 383, 403, 918, 967, 970, 985, 1015], "grain": [4, 31, 37, 230, 247, 300, 376, 403, 985], "still": [4, 32, 44, 53, 56, 61, 81, 98, 116, 118, 121, 128, 148, 154, 165, 166, 168, 175, 196, 198, 214, 230, 259, 265, 298, 310, 311, 341, 342, 352, 358, 364, 369, 370, 372, 374, 375, 376, 378, 381, 383, 395, 399, 402, 403, 406, 424, 428, 437, 457, 479, 610, 615, 618, 620, 700, 738, 760, 763, 772, 773, 782, 783, 796, 799, 859, 861, 881, 899, 953, 954, 958, 960, 963, 967, 970, 972, 979, 980, 983, 985, 988, 1005, 1007, 1010, 1011, 1013, 1014, 1015, 1018, 1019, 1020, 1021], "express": [4, 7, 12, 148, 153, 166, 256, 257, 304, 310, 325, 343, 364, 365, 370, 371, 376, 395, 400, 403, 433, 439, 440, 571, 572, 574, 699, 779, 785, 793, 802, 803, 804, 805, 808, 828, 960, 964, 968, 974, 975, 980, 1013], "advantag": [4, 5, 39, 56, 94, 99, 196, 197, 225, 242, 257, 312, 352, 383, 393, 399, 400, 403, 405, 425, 429, 443, 517, 572, 632, 657, 658, 745, 809, 810, 811, 841, 842, 881, 882, 883, 884, 885, 886, 887, 953, 956, 959, 960, 961, 964, 965, 967, 968, 974, 978, 979, 980, 1008], "final": [4, 26, 40, 42, 69, 70, 79, 81, 85, 90, 99, 108, 110, 112, 114, 118, 119, 122, 128, 131, 142, 153, 161, 165, 167, 172, 175, 184, 185, 193, 196, 198, 213, 214, 218, 225, 238, 245, 254, 262, 276, 304, 305, 308, 309, 328, 356, 358, 368, 370, 371, 374, 382, 383, 392, 393, 395, 396, 399, 402, 403, 421, 426, 430, 431, 435, 442, 445, 447, 519, 538, 539, 550, 551, 553, 610, 630, 636, 642, 662, 673, 677, 702, 779, 809, 810, 841, 842, 878, 881, 953, 954, 960, 961, 964, 967, 970, 971, 974, 977, 980, 988, 997, 1010, 1013, 1014, 1015, 1016, 1018], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 53, 61, 70, 77, 79, 80, 81, 95, 96, 99, 102, 108, 112, 113, 115, 121, 124, 127, 136, 137, 145, 148, 151, 153, 154, 155, 157, 166, 167, 168, 175, 176, 191, 192, 194, 196, 197, 198, 200, 210, 214, 221, 222, 228, 229, 252, 256, 258, 259, 263, 276, 282, 289, 303, 319, 327, 328, 333, 336, 341, 342, 343, 348, 349, 365, 367, 383, 393, 395, 396, 397, 398, 399, 400, 401, 404, 405, 425, 427, 429, 430, 432, 442, 443, 452, 453, 454, 455, 456, 457, 458, 459, 507, 515, 534, 535, 546, 593, 594, 629, 635, 640, 684, 699, 701, 740, 800, 819, 827, 860, 862, 960, 963, 964, 968, 969, 970, 971, 974, 977, 978, 979, 980, 987, 991, 993, 994, 996, 1006, 1018, 1019, 1020, 1021], "complet": [4, 37, 38, 39, 44, 49, 52, 57, 61, 85, 126, 140, 142, 145, 163, 168, 169, 202, 224, 225, 239, 254, 303, 305, 308, 342, 352, 365, 370, 374, 375, 378, 381, 396, 399, 400, 402, 403, 425, 429, 432, 435, 445, 446, 447, 450, 478, 519, 520, 521, 522, 527, 529, 541, 552, 553, 564, 570, 571, 572, 574, 610, 611, 612, 613, 628, 632, 640, 654, 656, 687, 688, 698, 699, 700, 713, 718, 719, 739, 768, 775, 809, 812, 815, 824, 840, 841, 842, 843, 904, 949, 953, 958, 960, 964, 965, 967, 974, 979, 980, 990, 999, 1005, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "induct": [4, 36, 67, 121, 163, 383, 395, 402, 409, 425, 495, 547, 610, 614, 876, 877, 925, 948, 960, 977, 1007], "bia": [4, 27, 77, 107, 115, 116, 121, 132, 163, 166, 168, 175, 176, 178, 200, 261, 292, 336, 352, 365, 372, 383, 393, 397, 401, 402, 405, 507, 539, 542, 543, 590, 591, 597, 625, 631, 632, 641, 642, 652, 653, 663, 838, 839, 854, 856, 860, 866, 867, 869, 870, 871, 872, 890, 959, 960, 963, 964, 968, 969, 972, 978, 997], "preserv": [4, 48, 99, 221, 229, 251, 372, 373, 394, 399, 400, 403, 564, 571, 572, 574, 629, 635, 679, 682, 756, 760, 797, 798, 799, 865, 901, 902, 954, 960, 961, 974, 976, 994, 1005, 1008, 1009, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "smooth": [4, 46, 47, 54, 153, 189, 197, 212, 304, 328, 367, 384, 395, 401, 405, 431, 432, 520, 521, 522, 529, 540, 541, 542, 543, 547, 548, 549, 573, 574, 602, 605, 659, 816, 817, 818, 820, 858, 862, 870, 889, 890, 891, 892, 960, 966, 974, 978, 979, 980, 999], "local": [4, 39, 56, 60, 94, 97, 125, 153, 154, 163, 167, 197, 216, 219, 221, 223, 225, 234, 277, 290, 348, 349, 357, 367, 368, 370, 374, 376, 378, 386, 395, 400, 402, 403, 405, 430, 435, 445, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 485, 521, 523, 527, 530, 532, 542, 543, 546, 549, 593, 594, 671, 672, 673, 674, 675, 676, 678, 679, 740, 741, 824, 827, 830, 832, 842, 851, 874, 877, 885, 930, 962, 963, 967, 968, 980, 998, 1000, 1001, 1009, 1013, 1017, 1020], "attempt": [4, 54, 167, 192, 202, 251, 341, 356, 369, 383, 395, 407, 433, 440, 451, 614, 671, 672, 676, 797, 823, 824, 825, 827, 829, 831, 832, 833, 859, 861, 879, 901, 902, 960, 961, 967, 980, 990, 1012, 1017], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 57, 59, 60, 69, 70, 72, 73, 74, 84, 85, 88, 90, 91, 94, 95, 99, 102, 103, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 124, 126, 127, 128, 129, 130, 131, 141, 143, 145, 150, 152, 157, 160, 161, 165, 166, 167, 169, 172, 175, 182, 183, 185, 190, 194, 196, 197, 198, 200, 201, 204, 211, 214, 218, 225, 226, 229, 230, 231, 232, 235, 236, 238, 241, 244, 246, 250, 251, 252, 254, 256, 257, 259, 261, 262, 265, 266, 274, 276, 279, 281, 285, 287, 289, 292, 293, 295, 298, 299, 300, 301, 303, 304, 305, 308, 310, 311, 312, 316, 317, 318, 321, 328, 334, 336, 342, 343, 346, 347, 350, 352, 356, 357, 358, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 381, 382, 383, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 443, 444, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 502, 505, 506, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 690, 691, 693, 696, 702, 707, 710, 711, 712, 720, 721, 727, 728, 730, 732, 733, 735, 736, 740, 741, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 758, 760, 761, 762, 763, 765, 766, 767, 769, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 907, 912, 913, 918, 920, 921, 932, 940, 941, 942, 945, 954, 956, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 988, 990, 994, 996, 997, 998, 999, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "sine": [4, 148, 153, 154, 163, 190, 202, 240, 248, 348, 366, 598, 777, 778, 963, 980], "cosin": [4, 40, 270, 276, 281, 362, 365, 383, 395, 400, 401, 425, 429, 433, 440, 518, 573, 574, 603, 679, 742, 743, 744, 747, 752, 753, 756, 760, 761, 762, 821, 822, 826, 853, 967, 980, 1001, 1015], "match": [4, 37, 45, 94, 97, 101, 163, 172, 174, 196, 215, 219, 228, 343, 365, 368, 372, 374, 395, 400, 402, 403, 415, 432, 447, 449, 491, 492, 498, 509, 514, 520, 525, 531, 534, 550, 551, 555, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 641, 647, 648, 668, 669, 682, 686, 687, 688, 696, 698, 702, 716, 768, 821, 822, 826, 830, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 881, 888, 894, 905, 932, 961, 963, 964, 966, 967, 986, 990, 999, 1001, 1005, 1011, 1012, 1013, 1015, 1017, 1018], "togeth": [4, 12, 51, 59, 70, 117, 128, 148, 154, 166, 177, 218, 221, 252, 304, 312, 331, 347, 352, 372, 374, 381, 382, 383, 389, 395, 402, 403, 410, 434, 436, 550, 551, 672, 698, 779, 793, 841, 842, 855, 960, 961, 965, 971, 974, 980, 981, 988, 991, 993, 1011], "equival": [4, 14, 56, 118, 124, 144, 148, 153, 166, 214, 246, 265, 276, 303, 343, 352, 356, 368, 376, 379, 382, 383, 395, 396, 397, 398, 399, 400, 402, 404, 405, 425, 427, 428, 429, 430, 432, 433, 440, 452, 457, 492, 517, 524, 541, 544, 545, 546, 548, 571, 574, 596, 599, 602, 604, 607, 629, 630, 631, 635, 637, 641, 642, 649, 650, 651, 652, 655, 659, 660, 663, 666, 670, 671, 676, 691, 692, 705, 716, 723, 729, 730, 731, 743, 752, 761, 762, 777, 778, 782, 783, 787, 789, 812, 815, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 838, 844, 850, 851, 853, 856, 857, 858, 859, 861, 869, 871, 872, 905, 916, 950, 953, 958, 960, 961, 962, 964, 970, 974, 978, 979, 980, 1013, 1014, 1015, 1016, 1018, 1019], "importantli": [4, 13, 95, 167, 172, 298, 395], "jump": [4, 197, 298, 367, 370, 403, 860], "functiontransform": [4, 69, 114, 196, 214, 320, 448, 974, 1010, 1011, 1013, 1018, 1019, 1020], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 55, 60, 69, 74, 91, 100, 102, 104, 112, 114, 120, 121, 124, 128, 151, 154, 156, 161, 175, 176, 184, 185, 188, 196, 197, 204, 205, 206, 214, 234, 237, 238, 244, 246, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 270, 276, 281, 286, 289, 295, 298, 300, 303, 308, 324, 328, 341, 343, 346, 350, 356, 363, 364, 365, 370, 371, 372, 376, 377, 379, 381, 383, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 926, 927, 928, 930, 931, 933, 934, 935, 936, 937, 938, 939, 945, 948, 949, 950, 951, 952, 954, 964, 967, 971, 972, 979, 980, 985, 990, 995, 997, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "lambda": [4, 7, 8, 10, 19, 55, 72, 120, 135, 176, 214, 256, 257, 302, 320, 391, 395, 400, 402, 403, 627, 628, 629, 630, 845, 857, 960, 974, 994, 1013, 1019], "sin": [4, 13, 19, 39, 95, 110, 120, 121, 125, 127, 140, 148, 154, 155, 157, 175, 176, 190, 197, 202, 219, 231, 247, 288, 299, 309, 335, 348, 349, 405, 499, 598, 682, 746, 998], "pi": [4, 13, 34, 39, 40, 95, 104, 125, 127, 140, 148, 176, 184, 190, 197, 219, 241, 242, 243, 246, 247, 270, 289, 309, 349, 386, 401, 405, 499, 500, 501, 598, 625, 958, 959, 960, 966, 998], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 125, 127, 153, 163, 166, 197, 219, 256, 270, 312, 349, 374, 401, 403, 432, 434, 436, 471, 494, 574, 682, 702, 746, 775, 959, 974, 988, 1000, 1001], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 56, 61, 68, 75, 85, 97, 99, 121, 123, 125, 144, 148, 149, 153, 155, 163, 164, 166, 167, 169, 170, 196, 197, 198, 201, 202, 216, 221, 223, 238, 242, 246, 256, 257, 258, 261, 264, 265, 295, 297, 299, 306, 309, 315, 322, 328, 333, 336, 337, 338, 341, 342, 343, 352, 357, 368, 370, 372, 375, 381, 383, 393, 395, 396, 400, 401, 402, 403, 405, 406, 433, 448, 461, 473, 479, 483, 497, 507, 508, 540, 541, 542, 543, 547, 548, 549, 571, 572, 573, 574, 589, 592, 632, 640, 641, 642, 656, 670, 674, 675, 684, 686, 735, 767, 777, 784, 790, 798, 807, 827, 838, 839, 845, 850, 851, 853, 857, 858, 859, 861, 862, 867, 870, 878, 881, 882, 886, 889, 890, 891, 892, 901, 902, 918, 930, 938, 953, 958, 960, 961, 963, 964, 965, 971, 974, 977, 979, 980, 995, 997, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "expans": [4, 160, 310, 433, 856, 1014], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 115, 121, 126, 148, 153, 155, 167, 186, 198, 213, 292, 300, 336, 352, 356, 363, 373, 384, 395, 397, 404, 641, 642, 881, 882, 888, 958, 997, 1011], "beyond": [4, 27, 197, 198, 356, 358, 369, 370, 381, 393, 402, 886, 961, 965, 974, 979, 980, 985, 1013], "pd": [4, 12, 25, 70, 71, 72, 115, 121, 125, 153, 160, 165, 166, 167, 168, 175, 185, 196, 204, 214, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 303, 304, 305, 311, 312, 336, 341, 342, 375, 383, 396, 447, 449, 610, 611, 612, 613, 615, 760, 899, 901, 902, 953, 954, 971, 974, 1016, 1018, 1019, 1020], "hour_df": 4, "datafram": [4, 25, 69, 70, 71, 72, 118, 121, 125, 153, 160, 165, 166, 167, 168, 175, 185, 204, 214, 235, 238, 246, 254, 256, 257, 259, 267, 268, 303, 304, 305, 311, 312, 313, 336, 341, 342, 364, 365, 370, 372, 375, 383, 396, 417, 426, 427, 429, 430, 432, 447, 449, 450, 451, 465, 466, 467, 468, 472, 473, 474, 475, 479, 483, 484, 485, 487, 488, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 671, 672, 675, 779, 782, 783, 793, 807, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 879, 897, 924, 935, 938, 953, 954, 985, 999, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "arang": [4, 11, 13, 16, 40, 57, 59, 64, 72, 78, 79, 102, 105, 108, 117, 118, 119, 120, 122, 123, 126, 130, 141, 148, 150, 155, 156, 160, 161, 169, 180, 196, 199, 201, 205, 220, 228, 230, 251, 256, 259, 264, 267, 274, 276, 289, 292, 300, 311, 316, 317, 319, 321, 328, 335, 341, 343, 348, 349, 350, 352, 381, 392, 399, 403, 448, 527, 807, 856, 860, 959, 960, 968, 974, 978, 995], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 57, 71, 79, 84, 94, 97, 104, 112, 116, 117, 126, 137, 143, 148, 150, 151, 152, 153, 154, 155, 157, 175, 187, 193, 209, 210, 212, 213, 218, 220, 222, 225, 230, 233, 245, 254, 280, 282, 289, 292, 294, 295, 299, 300, 301, 305, 308, 311, 312, 321, 327, 328, 332, 333, 334, 337, 338, 381, 392, 400, 402, 403, 429, 448, 567, 614, 807, 856, 860, 960, 974, 995, 998, 1010], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 57, 61, 89, 95, 98, 105, 126, 172, 187, 212, 214, 217, 218, 219, 220, 221, 222, 228, 229, 232, 234, 238, 276, 280, 293, 298, 299, 303, 304, 305, 308, 311, 313, 328, 341, 342, 343, 352, 362, 365, 372, 375, 376, 383, 391, 396, 400, 403, 404, 411, 417, 426, 427, 429, 430, 432, 447, 449, 451, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 671, 672, 673, 674, 675, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 879, 954, 956, 960, 965, 967, 974, 975, 976, 990, 995, 998, 999, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1019, 1021], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 60, 61, 67, 93, 106, 126, 163, 190, 197, 202, 217, 219, 222, 225, 228, 229, 325, 328, 364, 366, 370, 372, 379, 383, 395, 396, 400, 403, 405, 425, 435, 445, 447, 450, 471, 473, 474, 475, 476, 477, 483, 484, 485, 487, 493, 497, 516, 524, 532, 567, 569, 618, 626, 640, 655, 674, 720, 761, 802, 806, 810, 848, 897, 901, 902, 917, 927, 950, 951, 958, 960, 961, 964, 971, 975, 980, 990, 996, 1005, 1009, 1012, 1013, 1014, 1017, 1019], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 55, 56, 57, 58, 59, 61, 66, 79, 85, 89, 90, 91, 96, 98, 99, 100, 101, 103, 110, 111, 117, 124, 126, 127, 129, 137, 140, 148, 149, 150, 152, 154, 155, 156, 157, 165, 166, 172, 176, 179, 186, 188, 192, 193, 194, 197, 198, 199, 205, 208, 209, 210, 213, 217, 218, 219, 220, 221, 222, 225, 230, 231, 232, 241, 242, 243, 244, 245, 246, 247, 251, 257, 259, 270, 276, 282, 283, 284, 285, 286, 287, 288, 292, 298, 300, 301, 303, 312, 318, 321, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 341, 347, 348, 349, 397, 614, 684, 958, 960, 997], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 77, 78, 79, 80, 81, 85, 90, 91, 94, 95, 96, 98, 101, 102, 103, 104, 108, 110, 117, 118, 119, 120, 123, 124, 125, 126, 128, 130, 134, 137, 148, 150, 151, 152, 153, 154, 155, 156, 157, 161, 163, 166, 168, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 213, 214, 218, 219, 220, 222, 225, 229, 230, 231, 232, 235, 241, 242, 243, 244, 245, 246, 247, 251, 255, 257, 259, 260, 261, 262, 263, 265, 266, 267, 269, 271, 274, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 298, 299, 300, 302, 303, 304, 309, 318, 319, 321, 326, 327, 328, 329, 330, 332, 334, 335, 337, 347, 348, 364, 365, 367, 378, 395, 402, 403, 430, 476, 477, 489, 566, 567, 761, 938, 978, 980, 1010, 1015, 1017], "map": [4, 5, 10, 11, 17, 19, 26, 53, 99, 113, 120, 123, 126, 135, 148, 163, 172, 196, 217, 219, 224, 239, 257, 260, 265, 279, 284, 287, 289, 297, 298, 306, 320, 328, 334, 342, 343, 364, 371, 381, 383, 393, 394, 395, 396, 399, 400, 402, 403, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 479, 481, 485, 492, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 744, 747, 777, 778, 779, 782, 783, 790, 791, 793, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 869, 870, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 923, 953, 956, 961, 964, 966, 976, 979, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "space": [4, 8, 10, 19, 31, 46, 48, 53, 56, 57, 59, 60, 62, 64, 69, 70, 73, 85, 94, 96, 103, 105, 114, 117, 121, 126, 142, 148, 154, 172, 197, 217, 218, 219, 221, 229, 230, 231, 234, 235, 242, 247, 264, 267, 268, 276, 285, 286, 300, 310, 341, 342, 343, 350, 352, 356, 362, 365, 366, 367, 370, 377, 381, 382, 383, 392, 394, 395, 398, 400, 401, 402, 403, 405, 427, 430, 431, 432, 435, 445, 447, 448, 449, 450, 465, 466, 467, 481, 515, 517, 518, 521, 522, 523, 524, 526, 527, 532, 556, 565, 571, 572, 574, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 621, 623, 624, 625, 626, 671, 672, 673, 675, 676, 677, 679, 682, 779, 782, 783, 793, 811, 821, 822, 829, 830, 831, 832, 841, 846, 847, 853, 858, 873, 874, 875, 894, 922, 956, 957, 958, 959, 960, 962, 964, 965, 967, 968, 969, 970, 974, 975, 976, 977, 978, 979, 984, 985, 990, 997, 999, 1000, 1001, 1005, 1006, 1008, 1013, 1014, 1015, 1019, 1020], "akin": [4, 197, 383], "sort": [4, 8, 10, 12, 19, 20, 24, 59, 69, 112, 118, 121, 127, 145, 175, 196, 197, 214, 233, 256, 257, 260, 270, 288, 335, 341, 348, 349, 370, 374, 378, 379, 383, 399, 402, 403, 405, 517, 524, 538, 549, 564, 593, 600, 680, 695, 701, 711, 712, 720, 736, 765, 766, 769, 771, 779, 804, 816, 817, 818, 819, 820, 821, 822, 829, 831, 832, 833, 836, 846, 852, 854, 855, 858, 860, 862, 870, 883, 886, 918, 923, 960, 967, 970, 974, 980, 988, 999, 1005, 1009, 1015, 1016, 1017, 1019, 1020], "analog": [4, 19, 123, 376, 402, 964, 965, 979, 1014], "clock": 4, "25th": [4, 859], "back": [4, 99, 236, 357, 370, 372, 384, 389, 396, 403, 418, 427, 430, 442, 465, 466, 467, 491, 492, 516, 517, 518, 521, 523, 524, 527, 564, 613, 641, 642, 649, 651, 659, 660, 661, 710, 846, 848, 849, 850, 854, 855, 856, 858, 859, 861, 873, 874, 881, 960, 964, 968, 985, 990, 999, 1008, 1013, 1015, 1016, 1019], "natur": [4, 31, 121, 155, 166, 167, 172, 196, 197, 213, 214, 221, 241, 247, 265, 341, 370, 372, 383, 400, 402, 403, 406, 428, 433, 440, 534, 573, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 675, 687, 723, 737, 739, 823, 824, 825, 827, 829, 831, 832, 833, 860, 916, 960, 961, 963, 964, 967, 969, 974, 978, 984, 987, 1005, 1013], "sp": [4, 166, 954, 998], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 55, 56, 58, 59, 60, 64, 70, 71, 73, 85, 89, 90, 91, 99, 100, 101, 109, 111, 112, 117, 118, 124, 126, 127, 129, 130, 135, 137, 143, 149, 150, 151, 152, 156, 172, 179, 181, 186, 187, 188, 189, 191, 193, 194, 200, 203, 205, 207, 208, 209, 210, 212, 213, 217, 218, 219, 221, 222, 230, 231, 232, 236, 242, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 259, 261, 265, 267, 276, 279, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 295, 298, 299, 300, 303, 308, 309, 310, 311, 312, 313, 318, 321, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 341, 347, 348, 349, 356, 357, 364, 365, 367, 368, 370, 371, 372, 373, 375, 378, 379, 381, 386, 392, 393, 395, 396, 397, 398, 399, 400, 402, 404, 408, 421, 426, 427, 430, 432, 442, 451, 458, 506, 511, 517, 521, 523, 524, 530, 532, 533, 573, 590, 591, 593, 614, 622, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 655, 656, 662, 668, 669, 671, 672, 675, 676, 691, 697, 698, 701, 713, 717, 723, 724, 740, 741, 779, 793, 806, 816, 817, 818, 819, 820, 821, 822, 828, 830, 837, 852, 854, 855, 856, 860, 876, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 896, 901, 902, 927, 953, 956, 957, 960, 961, 962, 964, 966, 967, 969, 971, 974, 976, 978, 979, 980, 984, 988, 990, 994, 995, 997, 998, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "colorbar": [4, 11, 30, 40, 94, 105, 116, 124, 143, 149, 151, 152, 154, 167, 217, 229, 245, 267, 298, 328, 680, 1017], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 64, 67, 79, 97, 311, 313, 314, 517, 953, 964, 974], "166": [4, 206, 215, 261, 272, 295, 376, 964, 1005], "simpl": [4, 16, 27, 70, 74, 77, 84, 85, 94, 119, 155, 163, 167, 197, 213, 237, 257, 277, 290, 312, 324, 341, 343, 347, 352, 368, 370, 372, 373, 374, 375, 377, 381, 382, 383, 384, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 409, 415, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 497, 505, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 768, 770, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 956, 958, 959, 960, 961, 963, 964, 967, 974, 976, 978, 980, 985, 988, 990, 999, 1002, 1005], "wors": [4, 85, 149, 167, 202, 256, 264, 303, 352, 393, 395, 405, 416, 448, 465, 466, 467, 535, 537, 539, 541, 543, 545, 548, 551, 553, 593, 594, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 652, 653, 655, 656, 661, 662, 663, 688, 704, 705, 706, 710, 767, 814, 815, 824, 832, 839, 882, 884, 887, 890, 892, 964, 974, 1014], "further": [4, 25, 42, 70, 77, 85, 94, 112, 117, 119, 144, 148, 153, 166, 168, 175, 217, 222, 253, 256, 257, 263, 313, 328, 342, 350, 356, 370, 381, 383, 394, 395, 397, 400, 402, 403, 405, 435, 445, 498, 515, 518, 565, 597, 605, 611, 641, 642, 649, 651, 659, 660, 661, 674, 678, 719, 756, 760, 763, 772, 773, 817, 823, 824, 831, 832, 859, 861, 881, 883, 886, 918, 963, 964, 966, 967, 968, 970, 974, 978, 979, 997, 999, 1014, 1018], "analyz": [4, 7, 17, 258, 265, 313, 341, 343, 375, 376, 395, 403, 486, 571, 572, 574, 770, 961, 964, 971, 972, 980, 999, 1005, 1014], "reason": [4, 8, 12, 42, 53, 69, 121, 145, 166, 167, 172, 196, 197, 204, 214, 225, 229, 230, 234, 253, 256, 257, 262, 276, 299, 303, 342, 343, 352, 356, 357, 358, 365, 369, 370, 372, 374, 378, 381, 382, 383, 384, 395, 396, 397, 400, 402, 403, 405, 491, 515, 557, 621, 629, 635, 637, 655, 670, 675, 745, 779, 793, 825, 830, 837, 856, 878, 953, 954, 959, 960, 961, 964, 966, 967, 968, 970, 974, 978, 979, 988, 999, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "disappoint": 4, "outcom": [4, 166, 383, 552, 641, 692, 724, 774, 809, 876, 877, 878, 883, 886, 960, 964, 980, 987, 999, 1009, 1013, 1015], "altern": [4, 26, 70, 85, 115, 116, 122, 128, 168, 180, 196, 214, 226, 244, 247, 265, 308, 341, 342, 343, 352, 365, 373, 374, 376, 381, 383, 384, 386, 390, 392, 393, 395, 396, 397, 399, 400, 402, 403, 405, 425, 426, 429, 430, 435, 441, 446, 482, 521, 523, 524, 530, 536, 537, 540, 541, 542, 543, 547, 548, 549, 565, 571, 572, 574, 600, 603, 626, 675, 689, 691, 753, 756, 760, 763, 781, 810, 845, 851, 854, 867, 874, 876, 889, 890, 891, 892, 931, 932, 958, 960, 961, 963, 964, 967, 968, 972, 974, 976, 977, 979, 980, 985, 994, 999, 1001, 1010, 1012, 1018, 1019], "larger": [4, 7, 27, 37, 39, 42, 47, 79, 81, 91, 104, 112, 122, 149, 154, 155, 161, 166, 167, 172, 176, 211, 212, 213, 222, 229, 231, 241, 247, 257, 259, 265, 266, 276, 278, 292, 293, 295, 298, 328, 342, 343, 363, 365, 370, 376, 381, 383, 392, 393, 395, 396, 397, 399, 400, 402, 403, 405, 424, 427, 432, 433, 435, 437, 439, 498, 510, 524, 527, 544, 545, 546, 550, 551, 565, 572, 626, 635, 655, 656, 657, 658, 662, 670, 675, 687, 702, 718, 777, 826, 827, 858, 860, 861, 862, 870, 875, 917, 918, 935, 938, 956, 957, 960, 961, 963, 964, 967, 968, 972, 974, 978, 979, 980, 997, 999, 1009, 1010, 1013, 1014, 1015, 1018, 1019], "periodic_spline_transform": 4, "n_spline": [4, 860], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 54, 55, 61, 96, 99, 104, 113, 117, 118, 120, 123, 137, 149, 155, 156, 169, 175, 196, 197, 204, 207, 214, 217, 231, 232, 250, 256, 257, 268, 281, 283, 287, 302, 310, 311, 317, 320, 326, 328, 329, 332, 333, 335, 341, 342, 365, 367, 370, 372, 377, 379, 383, 395, 399, 402, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 486, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 690, 691, 692, 694, 695, 696, 697, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 714, 716, 717, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 870, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 904, 905, 906, 907, 910, 912, 917, 918, 921, 922, 923, 924, 927, 930, 932, 933, 935, 938, 939, 945, 948, 949, 951, 953, 960, 964, 974, 977, 980, 990, 994, 999, 1001, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "degre": [4, 16, 34, 96, 111, 153, 160, 165, 167, 172, 175, 184, 185, 197, 231, 236, 241, 242, 243, 246, 247, 256, 270, 295, 310, 311, 325, 335, 400, 404, 435, 481, 518, 524, 622, 623, 626, 639, 757, 777, 779, 827, 856, 860, 883, 884, 885, 886, 887, 956, 957, 959, 960, 961, 962, 964, 965, 967, 970, 971, 974, 977, 979, 997, 1008, 1014, 1018, 1019], "n_knot": [4, 197, 311, 860, 974, 1018], "include_bia": [4, 175, 270, 856, 860, 1019], "knot": [4, 197, 311, 860, 974, 1018], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 79, 80, 95, 104, 110, 119, 121, 148, 149, 151, 152, 153, 154, 155, 157, 167, 175, 176, 178, 186, 190, 196, 197, 198, 202, 206, 207, 208, 209, 210, 214, 222, 225, 228, 229, 231, 232, 245, 256, 258, 259, 263, 264, 265, 266, 270, 281, 282, 288, 289, 299, 301, 312, 313, 327, 328, 331, 333, 334, 336, 337, 338, 614, 615, 785, 805, 821, 822, 998], "again": [4, 66, 71, 121, 152, 154, 156, 166, 221, 257, 341, 352, 374, 379, 383, 384, 395, 396, 397, 402, 403, 455, 550, 551, 617, 630, 634, 636, 638, 644, 646, 648, 675, 953, 960, 964, 978, 1002, 1005, 1013], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 57, 59, 60, 65, 69, 73, 74, 79, 84, 94, 95, 97, 100, 110, 115, 116, 117, 118, 121, 122, 123, 126, 127, 137, 141, 143, 149, 150, 152, 154, 155, 160, 161, 163, 167, 168, 180, 184, 185, 196, 198, 203, 205, 208, 209, 210, 211, 212, 216, 218, 220, 223, 225, 228, 229, 230, 231, 233, 234, 241, 243, 245, 246, 247, 254, 256, 258, 259, 262, 263, 265, 266, 276, 281, 282, 286, 289, 292, 294, 300, 301, 308, 310, 313, 318, 319, 321, 325, 327, 328, 331, 332, 333, 334, 337, 338, 341, 342, 350, 356, 363, 364, 365, 370, 372, 383, 392, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 903, 906, 907, 912, 916, 918, 920, 923, 926, 928, 933, 935, 939, 940, 941, 942, 943, 944, 945, 954, 959, 960, 964, 965, 966, 967, 968, 970, 974, 975, 976, 977, 978, 979, 980, 995, 996, 998, 999, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1021], "concat": [4, 160, 165, 185, 214, 854], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 57, 79, 81, 88, 89, 94, 97, 101, 105, 111, 116, 117, 137, 143, 151, 152, 167, 175, 179, 187, 188, 205, 208, 209, 210, 212, 218, 219, 220, 229, 230, 233, 250, 251, 276, 279, 280, 282, 284, 285, 287, 289, 292, 294, 295, 298, 300, 316, 317, 321, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 338, 347, 680, 995, 996], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 57, 59, 60, 66, 79, 81, 88, 89, 94, 97, 101, 111, 116, 117, 137, 143, 151, 152, 167, 179, 188, 205, 208, 209, 210, 212, 218, 219, 220, 226, 229, 230, 233, 238, 250, 251, 276, 280, 282, 286, 289, 292, 294, 295, 298, 300, 310, 313, 316, 317, 321, 324, 325, 326, 327, 328, 329, 330, 332, 334, 337, 338, 347, 367, 396, 680, 894, 964, 974, 980, 995, 996], "tab20b": 4, "stai": [4, 26, 37, 104, 166, 342, 369, 370, 374, 383, 384, 969, 1011], "midnight": 4, "fewer": [4, 13, 26, 109, 117, 119, 196, 356, 371, 404, 405, 431, 444, 536, 577, 679, 811, 922, 960, 965, 967, 1010, 1011, 1012], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 61, 77, 84, 85, 103, 115, 122, 128, 140, 141, 142, 144, 145, 153, 161, 165, 166, 167, 168, 169, 172, 196, 197, 214, 235, 241, 247, 253, 254, 259, 263, 264, 266, 285, 298, 304, 305, 308, 311, 317, 328, 341, 342, 343, 352, 356, 357, 358, 365, 366, 368, 370, 372, 374, 375, 376, 378, 381, 383, 384, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 427, 428, 433, 439, 440, 443, 451, 479, 486, 504, 507, 515, 517, 522, 526, 532, 534, 544, 545, 549, 550, 571, 572, 574, 576, 587, 594, 610, 613, 632, 641, 655, 657, 659, 661, 670, 671, 675, 678, 707, 710, 728, 740, 741, 745, 767, 774, 777, 778, 782, 783, 798, 809, 810, 823, 824, 825, 827, 829, 830, 831, 832, 833, 856, 858, 866, 867, 869, 870, 871, 872, 879, 917, 918, 920, 927, 932, 953, 954, 958, 959, 960, 961, 962, 963, 964, 965, 967, 970, 971, 972, 977, 978, 979, 980, 983, 984, 985, 988, 995, 997, 999, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 367], "132": [4, 13, 14, 55, 109, 402], "013": [4, 92, 115, 158, 342], "successfulli": [4, 13, 302, 369, 374, 403, 978], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 70, 71, 77, 112, 119, 121, 123, 126, 142, 166, 175, 176, 194, 201, 204, 227, 229, 234, 257, 263, 285, 300, 303, 304, 313, 342, 343, 352, 362, 364, 367, 370, 376, 381, 383, 393, 394, 395, 397, 399, 400, 402, 403, 404, 406, 428, 429, 433, 440, 443, 476, 517, 527, 532, 538, 539, 540, 541, 546, 547, 548, 556, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 610, 626, 635, 655, 656, 657, 658, 670, 675, 678, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 808, 858, 870, 873, 874, 889, 890, 891, 892, 953, 956, 958, 959, 960, 961, 964, 967, 976, 977, 981, 990, 998, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1019, 1021], "choic": [4, 7, 40, 46, 64, 69, 77, 102, 148, 149, 155, 160, 185, 197, 234, 250, 254, 256, 259, 281, 305, 310, 341, 342, 352, 356, 368, 372, 375, 381, 386, 395, 397, 399, 401, 402, 404, 405, 435, 445, 454, 455, 456, 457, 458, 459, 461, 521, 523, 524, 530, 542, 621, 630, 631, 639, 641, 642, 644, 652, 663, 675, 688, 810, 823, 824, 829, 831, 832, 858, 861, 870, 872, 881, 882, 905, 953, 958, 960, 961, 962, 964, 965, 970, 972, 977, 978, 979, 980, 1012, 1015, 1016, 1020], "arbitrari": [4, 85, 94, 95, 96, 114, 155, 175, 196, 213, 214, 254, 298, 302, 304, 310, 341, 350, 357, 370, 381, 383, 396, 399, 400, 402, 403, 407, 433, 438, 440, 448, 515, 516, 542, 543, 564, 622, 631, 652, 663, 671, 780, 781, 786, 788, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 845, 847, 860, 953, 955, 956, 960, 961, 964, 967, 974, 980, 985, 999, 1005, 1006, 1009, 1011, 1012, 1013, 1015, 1019], "held": [4, 8, 70, 102, 122, 168, 204, 243, 259, 264, 274, 402, 542, 543, 544, 545, 684, 779, 782, 783, 793, 838, 839, 851, 953, 954, 963, 972, 999], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 57, 59, 63, 66, 79, 80, 84, 89, 90, 91, 93, 97, 99, 100, 106, 111, 117, 118, 126, 150, 155, 156, 163, 166, 167, 168, 175, 179, 185, 188, 190, 192, 194, 196, 197, 198, 202, 205, 208, 209, 213, 214, 217, 218, 219, 220, 221, 225, 228, 230, 234, 243, 247, 250, 253, 257, 258, 263, 265, 266, 274, 276, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 299, 300, 302, 304, 316, 317, 321, 324, 327, 328, 329, 330, 332, 333, 337, 338, 341, 342, 343, 347, 352, 356, 357, 358, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 378, 381, 383, 384, 394, 395, 400, 401, 402, 403, 406, 407, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 443, 444, 452, 455, 457, 481, 487, 495, 497, 498, 502, 505, 508, 513, 516, 518, 524, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 593, 594, 611, 614, 615, 616, 620, 621, 622, 627, 628, 634, 638, 640, 653, 654, 656, 658, 659, 661, 662, 665, 666, 671, 672, 673, 674, 675, 676, 677, 682, 684, 689, 690, 693, 696, 700, 705, 707, 713, 718, 719, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 746, 761, 762, 777, 778, 779, 793, 802, 811, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 846, 860, 875, 876, 877, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 899, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 974, 976, 977, 979, 980, 984, 985, 994, 997, 998, 999, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 114, 298], "insight": [4, 7, 166, 167, 197, 198, 214, 294, 298, 341, 350, 393, 779, 782, 783, 793, 804, 971, 980, 988], "last_hour": 4, "slice": [4, 17, 117, 205, 219, 222, 230, 279, 284, 287, 311, 312, 324, 365, 371, 372, 379, 396, 447, 450, 476, 477, 491, 529, 622, 756, 760, 763, 897, 921, 922, 935, 1017, 1019], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 56, 59, 66, 74, 94, 97, 105, 117, 118, 125, 128, 157, 166, 167, 190, 195, 211, 212, 217, 218, 219, 233, 244, 252, 295, 298, 300, 308, 310, 316, 317, 321, 335, 336, 347], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 57, 59, 62, 63, 64, 65, 66, 72, 74, 77, 78, 79, 80, 84, 85, 90, 91, 96, 98, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 135, 141, 148, 149, 153, 154, 155, 156, 157, 160, 163, 166, 169, 172, 175, 176, 178, 179, 180, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 211, 213, 214, 218, 219, 220, 225, 230, 231, 232, 234, 235, 243, 250, 251, 254, 255, 257, 258, 259, 260, 262, 265, 266, 267, 268, 269, 270, 271, 274, 281, 283, 285, 288, 293, 295, 298, 299, 303, 308, 309, 312, 315, 319, 320, 321, 322, 335, 336, 341, 342, 346, 347, 348, 349, 358, 362, 363, 364, 369, 370, 372, 375, 379, 383, 384, 392, 393, 394, 405, 406, 412, 413, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 444, 445, 448, 452, 470, 471, 472, 476, 477, 478, 479, 485, 486, 491, 492, 495, 497, 498, 502, 505, 506, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 552, 553, 575, 576, 577, 578, 579, 581, 582, 583, 587, 588, 589, 592, 593, 614, 641, 642, 649, 650, 651, 656, 657, 658, 659, 660, 661, 680, 681, 683, 685, 686, 687, 688, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 707, 708, 709, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 736, 737, 738, 739, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 830, 831, 838, 839, 841, 845, 848, 849, 852, 854, 855, 865, 876, 877, 878, 881, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 901, 906, 907, 927, 928, 935, 953, 960, 961, 965, 966, 967, 968, 970, 971, 974, 978, 979, 980, 984, 986, 990, 995, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "actual": [4, 27, 46, 59, 74, 85, 109, 172, 185, 196, 204, 243, 252, 259, 343, 352, 356, 358, 367, 368, 370, 372, 375, 376, 381, 382, 383, 393, 395, 400, 403, 404, 418, 492, 498, 499, 510, 521, 523, 530, 545, 546, 627, 628, 631, 641, 642, 649, 650, 651, 652, 653, 655, 657, 659, 660, 661, 663, 670, 674, 678, 684, 687, 692, 698, 704, 705, 706, 767, 777, 782, 783, 798, 799, 827, 858, 881, 887, 909, 910, 911, 939, 956, 963, 964, 967, 971, 972, 1012, 1013, 1019, 1020, 1021], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 79, 80, 91, 94, 109, 117, 140, 148, 149, 153, 154, 157, 161, 166, 167, 175, 184, 185, 186, 188, 192, 196, 197, 198, 202, 205, 208, 209, 214, 225, 241, 244, 279, 281, 292, 293, 295, 321, 338, 347, 348, 349, 370, 386, 388, 395, 402, 405, 538, 539, 614, 970, 971, 980, 984, 990], "One": [4, 9, 12, 24, 30, 49, 90, 99, 102, 116, 118, 121, 124, 163, 166, 169, 174, 211, 215, 225, 235, 246, 256, 263, 266, 285, 299, 323, 325, 339, 342, 356, 367, 370, 382, 383, 395, 398, 400, 401, 402, 403, 406, 428, 432, 455, 457, 461, 495, 549, 614, 622, 641, 649, 651, 656, 658, 659, 660, 770, 786, 787, 809, 810, 811, 842, 843, 854, 885, 927, 954, 956, 960, 961, 962, 963, 964, 965, 967, 968, 971, 972, 974, 979, 986, 1001, 1009, 1011, 1018, 1020], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 60, 71, 72, 74, 77, 78, 79, 80, 84, 85, 96, 98, 102, 103, 104, 108, 109, 110, 111, 112, 113, 119, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 141, 148, 149, 153, 154, 155, 156, 157, 166, 167, 172, 175, 176, 178, 180, 181, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 220, 228, 229, 230, 231, 232, 235, 243, 251, 253, 255, 256, 258, 259, 260, 261, 263, 265, 266, 268, 269, 270, 271, 281, 282, 283, 288, 293, 299, 303, 309, 312, 318, 327, 330, 335, 341, 346, 347, 348, 349, 683], "draw": [4, 7, 16, 59, 157, 166, 192, 235, 258, 263, 328, 377, 398, 400, 401, 402, 538, 539, 540, 541, 546, 547, 548, 549, 594, 617, 684, 785, 893, 895, 963, 984, 993, 1018, 1019], "conclus": [4, 99, 166, 168, 196, 198, 256, 258, 352, 402, 993], "abov": [4, 25, 26, 37, 44, 65, 69, 111, 114, 119, 121, 131, 144, 145, 166, 167, 169, 182, 196, 198, 202, 207, 229, 232, 256, 262, 281, 300, 303, 304, 309, 311, 342, 343, 350, 352, 356, 357, 358, 364, 365, 367, 368, 369, 370, 372, 374, 376, 381, 383, 384, 395, 396, 397, 399, 400, 401, 403, 405, 425, 429, 447, 450, 472, 478, 479, 480, 506, 573, 617, 687, 737, 779, 791, 793, 802, 844, 845, 858, 864, 870, 878, 927, 953, 954, 956, 958, 960, 961, 964, 967, 969, 971, 974, 978, 979, 980, 985, 990, 991, 997, 998, 999, 1011], "problemat": [4, 252, 396, 954, 1013], "captur": [4, 9, 12, 37, 39, 85, 121, 125, 140, 153, 166, 175, 196, 247, 309, 328, 378, 402, 403, 404, 554, 571, 572, 574, 827, 931, 964, 969, 977, 981, 997, 1017], "big": [4, 44, 59, 61, 200, 201, 218, 247, 357, 370, 376, 384, 397, 403, 407, 521, 544, 545, 785, 805, 816, 817, 818, 819, 820, 985, 988, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "goe": [4, 37, 114, 350, 370, 402, 454, 455, 461, 540, 541, 547, 548, 549, 889, 890, 891, 892, 974, 978], "artifact": [4, 13, 46, 47, 298, 358, 374], "discontinu": [4, 381], "fail": [4, 54, 65, 95, 102, 156, 157, 175, 256, 308, 357, 368, 370, 372, 373, 378, 384, 386, 398, 399, 424, 455, 457, 659, 660, 661, 838, 839, 912, 953, 961, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020], "intra": [4, 571, 574, 772, 773], "variat": [4, 12, 37, 125, 153, 154, 163, 166, 201, 240, 242, 247, 248, 253, 274, 309, 328, 367, 399, 400, 405, 427, 430, 442, 519, 626, 655, 657, 658, 777, 778, 797, 798, 800, 953, 964, 974, 977, 980, 984, 995, 997, 1000, 1001, 1008, 1010, 1011], "harmon": [4, 37, 263, 342, 395, 518, 524, 711, 712, 718, 765, 775, 964], "phase": [4, 190, 356, 610, 956, 961, 967, 988, 1013, 1015], "potenti": [4, 77, 161, 165, 167, 175, 282, 283, 292, 343, 356, 357, 383, 386, 395, 399, 402, 403, 451, 465, 466, 467, 468, 479, 507, 532, 540, 541, 544, 545, 547, 548, 556, 589, 594, 617, 745, 871, 872, 879, 889, 890, 891, 892, 932, 970, 978, 984, 999, 1008, 1015, 1016, 1019], "fix": [4, 8, 25, 34, 46, 70, 104, 114, 117, 148, 149, 153, 156, 166, 198, 214, 247, 259, 292, 308, 309, 310, 311, 312, 313, 342, 356, 357, 364, 366, 368, 369, 370, 372, 373, 378, 381, 383, 384, 396, 399, 400, 402, 403, 405, 435, 445, 455, 487, 495, 514, 520, 523, 525, 531, 532, 542, 543, 547, 548, 571, 574, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 613, 636, 646, 653, 667, 670, 674, 678, 690, 767, 777, 793, 800, 823, 824, 826, 829, 831, 832, 848, 865, 889, 890, 918, 931, 953, 960, 963, 964, 967, 974, 985, 987, 999, 1003, 1004, 1006, 1007, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "two": [4, 7, 9, 11, 14, 24, 26, 30, 34, 37, 39, 40, 43, 59, 63, 69, 70, 74, 79, 84, 85, 89, 90, 91, 94, 96, 97, 99, 103, 107, 110, 116, 117, 118, 121, 124, 125, 126, 129, 132, 142, 145, 148, 149, 150, 151, 154, 155, 160, 161, 163, 166, 167, 168, 175, 179, 184, 185, 186, 187, 192, 196, 197, 198, 204, 205, 208, 213, 214, 219, 221, 222, 225, 230, 232, 234, 241, 242, 243, 245, 246, 247, 251, 253, 257, 263, 279, 281, 284, 285, 287, 289, 298, 300, 303, 308, 309, 311, 312, 318, 324, 325, 328, 329, 330, 337, 341, 342, 343, 347, 352, 363, 364, 365, 366, 367, 368, 370, 372, 374, 376, 377, 378, 381, 383, 384, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 440, 442, 447, 452, 453, 454, 455, 456, 457, 458, 459, 471, 473, 474, 475, 476, 477, 479, 481, 483, 484, 485, 486, 487, 488, 490, 493, 497, 502, 505, 519, 521, 523, 527, 530, 532, 533, 536, 543, 553, 564, 567, 573, 574, 575, 578, 579, 581, 582, 583, 585, 586, 589, 590, 591, 593, 594, 603, 604, 607, 611, 614, 615, 622, 626, 628, 653, 654, 656, 675, 682, 686, 687, 688, 695, 698, 699, 702, 704, 705, 706, 713, 714, 717, 718, 720, 723, 725, 736, 737, 739, 745, 746, 753, 756, 759, 760, 761, 762, 763, 767, 768, 774, 775, 776, 777, 810, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 838, 839, 845, 846, 853, 854, 855, 856, 875, 876, 877, 881, 889, 891, 892, 927, 943, 944, 950, 953, 954, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 990, 994, 997, 998, 999, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "onc": [4, 8, 50, 142, 145, 148, 218, 254, 257, 276, 304, 308, 312, 341, 343, 350, 352, 356, 358, 364, 365, 370, 374, 375, 376, 377, 378, 382, 383, 384, 395, 396, 398, 399, 400, 402, 403, 404, 405, 432, 434, 436, 455, 491, 492, 521, 527, 534, 542, 543, 573, 574, 580, 602, 610, 630, 634, 636, 638, 644, 646, 648, 649, 650, 651, 659, 660, 661, 680, 695, 699, 701, 718, 763, 780, 784, 787, 797, 816, 817, 818, 819, 820, 893, 960, 961, 967, 974, 978, 979, 980, 990, 999, 1002, 1005, 1013, 1015, 1016, 1017, 1018], "specif": [4, 11, 12, 27, 44, 61, 64, 69, 71, 128, 153, 156, 166, 167, 172, 214, 251, 256, 298, 308, 309, 313, 341, 342, 343, 352, 356, 357, 365, 370, 373, 375, 376, 378, 381, 383, 386, 391, 394, 395, 396, 399, 400, 402, 403, 404, 405, 479, 486, 517, 534, 540, 547, 550, 551, 552, 553, 557, 571, 574, 576, 580, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 608, 623, 626, 629, 630, 635, 641, 655, 670, 680, 695, 696, 728, 779, 780, 781, 786, 787, 788, 793, 804, 817, 910, 912, 913, 927, 940, 941, 942, 958, 960, 961, 963, 964, 966, 967, 969, 971, 974, 978, 980, 981, 982, 983, 999, 1001, 1005, 1009, 1013, 1014, 1015, 1016, 1019, 1020], "furthermor": [4, 37, 154, 167, 168, 235, 237, 276, 341, 342, 356, 358, 377, 395, 400, 402, 403, 545, 573, 589, 602, 687, 718, 728, 737, 739, 775, 881, 960, 972, 1008, 1012], "enforc": [4, 12, 53, 94, 153, 190, 285, 356, 370, 397, 400, 402, 405, 491, 510, 514, 520, 522, 525, 526, 528, 529, 531, 544, 545, 860, 901, 902, 954, 961, 1007, 1013, 1015, 1017, 1021], "behav": [4, 12, 48, 52, 56, 251, 298, 310, 328, 352, 370, 376, 381, 382, 395, 399, 861, 960, 974, 979, 981, 985, 999, 1005, 1012, 1014, 1018, 1019], "similarli": [4, 12, 37, 91, 124, 167, 185, 196, 226, 256, 292, 298, 328, 352, 357, 366, 368, 372, 375, 383, 392, 398, 399, 403, 959, 961, 962, 964, 971, 978, 979, 981, 990, 994, 1013, 1019], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 55, 57, 112, 142, 145, 161, 167, 168, 179, 227, 252, 254, 265, 267, 268, 279, 287, 308, 321, 324, 325, 331, 341, 342, 343, 355, 356, 357, 364, 365, 367, 368, 369, 370, 372, 374, 375, 376, 378, 379, 381, 383, 386, 392, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 409, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 445, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 471, 474, 475, 478, 479, 480, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 560, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 593, 594, 603, 610, 611, 612, 613, 615, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 690, 703, 711, 712, 720, 753, 756, 760, 761, 762, 763, 765, 766, 769, 770, 771, 772, 773, 777, 778, 779, 781, 782, 783, 784, 785, 786, 788, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 870, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 901, 902, 904, 912, 913, 917, 918, 932, 933, 934, 935, 938, 948, 949, 953, 954, 960, 961, 964, 966, 967, 970, 972, 974, 978, 979, 980, 985, 987, 990, 997, 998, 999, 1001, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "shorter": [4, 154, 244, 381, 395, 400, 405, 433, 440, 546, 680, 966, 970, 980, 999, 1016], "necessarili": [4, 31, 71, 97, 166, 196, 204, 214, 230, 231, 242, 300, 341, 342, 364, 374, 393, 395, 402, 610, 829, 831, 832, 833, 958, 961, 963, 964], "59": [4, 67, 172, 214, 295, 333, 367, 376, 396, 493, 964, 1005], "37": [4, 259, 316, 365, 402, 507, 699, 861, 974, 1005], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 43, 44, 46, 49, 52, 57, 59, 61, 70, 71, 79, 85, 96, 99, 111, 114, 117, 118, 121, 124, 127, 143, 144, 148, 150, 153, 154, 155, 157, 161, 165, 167, 175, 177, 179, 182, 192, 197, 198, 208, 209, 219, 230, 235, 237, 246, 251, 252, 254, 256, 266, 274, 279, 284, 286, 287, 300, 302, 303, 308, 311, 312, 321, 324, 325, 329, 330, 333, 336, 337, 338, 343, 346, 348, 349, 352, 357, 365, 366, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 382, 383, 386, 393, 395, 396, 399, 401, 402, 403, 405, 422, 434, 436, 448, 449, 482, 498, 499, 500, 501, 529, 536, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 571, 572, 574, 580, 611, 613, 614, 615, 616, 680, 681, 683, 684, 685, 764, 771, 779, 781, 785, 789, 793, 797, 802, 803, 811, 842, 854, 883, 886, 889, 890, 891, 892, 896, 899, 921, 922, 937, 949, 954, 960, 963, 964, 965, 967, 971, 974, 975, 976, 978, 979, 980, 984, 985, 988, 995, 997, 998, 1002, 1005, 1006, 1008, 1011, 1015, 1018, 1019, 1020, 1021], "turn": [4, 32, 77, 160, 161, 166, 211, 212, 230, 256, 280, 343, 356, 358, 365, 381, 383, 384, 394, 395, 396, 398, 400, 403, 404, 405, 564, 565, 572, 590, 591, 810, 814, 883, 886, 904, 954, 958, 966, 969, 974, 988, 999, 1010, 1012, 1013, 1018], "downstream": [4, 79, 305, 343, 403, 514, 517, 520, 524, 525, 589, 854, 974, 1015], "freedom": [4, 96, 153, 184, 185, 187, 256, 524, 639, 777, 960, 1008], "underfit": [4, 121, 148, 163, 168, 249, 271, 272, 292, 304, 640, 779, 782, 783, 793, 803, 804, 841, 856, 959, 960], "approxim": [4, 5, 27, 33, 46, 53, 79, 98, 99, 104, 113, 120, 121, 149, 166, 173, 176, 192, 196, 197, 210, 214, 224, 225, 228, 231, 239, 247, 256, 261, 270, 277, 285, 290, 298, 300, 301, 303, 308, 311, 341, 343, 348, 349, 352, 359, 362, 367, 379, 381, 383, 392, 393, 396, 398, 399, 400, 402, 405, 407, 408, 409, 417, 432, 452, 453, 456, 457, 458, 459, 465, 466, 467, 474, 479, 485, 504, 507, 516, 517, 518, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 542, 543, 565, 572, 593, 594, 602, 621, 622, 623, 624, 625, 640, 641, 642, 655, 657, 659, 660, 662, 670, 675, 740, 741, 746, 777, 780, 797, 802, 806, 807, 821, 822, 825, 829, 831, 832, 833, 837, 841, 842, 847, 851, 853, 854, 858, 870, 881, 886, 887, 917, 918, 938, 957, 958, 959, 960, 961, 963, 967, 968, 969, 970, 971, 972, 976, 978, 979, 980, 984, 985, 999, 1001, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019], "especi": [4, 8, 55, 118, 121, 166, 196, 304, 313, 332, 342, 352, 357, 364, 370, 378, 381, 383, 393, 395, 403, 427, 432, 484, 521, 540, 541, 542, 543, 547, 548, 549, 629, 630, 631, 633, 635, 636, 637, 641, 642, 643, 644, 645, 646, 652, 663, 678, 688, 728, 816, 817, 818, 819, 820, 889, 890, 891, 892, 960, 966, 967, 972, 974, 988, 1008, 1013, 1017, 1018, 1019], "sharp": [4, 167, 971, 974], "rush": [4, 370], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 79, 94, 123, 148, 155, 166, 167, 211, 214, 256, 263, 267, 312, 341, 342, 352, 369, 393, 395, 397, 400, 402, 403, 404, 421, 427, 430, 434, 436, 442, 514, 521, 523, 525, 526, 528, 529, 530, 590, 591, 617, 782, 783, 821, 822, 917, 918, 956, 961, 964, 980, 1019], "tend": [4, 12, 27, 37, 39, 43, 52, 56, 166, 167, 185, 196, 200, 201, 214, 241, 244, 253, 257, 274, 295, 343, 356, 358, 370, 372, 383, 393, 395, 397, 400, 402, 404, 421, 431, 636, 827, 858, 870, 918, 960, 961, 967, 980, 999], "under": [4, 7, 11, 24, 25, 27, 41, 66, 77, 78, 102, 118, 121, 167, 196, 225, 234, 256, 263, 265, 266, 299, 336, 364, 370, 372, 374, 376, 378, 383, 386, 389, 393, 395, 397, 399, 400, 403, 404, 434, 436, 453, 454, 455, 456, 457, 458, 459, 515, 522, 524, 526, 637, 638, 639, 685, 689, 690, 691, 698, 724, 736, 770, 771, 777, 778, 826, 960, 961, 962, 964, 967, 974, 978, 979, 980, 984, 985, 999, 1005, 1007, 1008, 1010, 1013, 1017], "These": [4, 5, 7, 27, 51, 94, 96, 100, 114, 117, 163, 167, 185, 196, 197, 198, 200, 226, 263, 274, 276, 280, 295, 298, 305, 307, 312, 317, 319, 352, 356, 357, 363, 366, 367, 370, 372, 374, 377, 379, 381, 383, 386, 389, 392, 393, 394, 395, 398, 400, 402, 403, 404, 405, 426, 431, 481, 491, 492, 498, 521, 550, 551, 585, 586, 651, 659, 660, 689, 715, 738, 760, 774, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 826, 827, 846, 953, 955, 958, 960, 961, 964, 965, 975, 977, 979, 980, 984, 990, 994, 999, 1005, 1011, 1013, 1014, 1015, 1018], "systemat": [4, 256, 372, 695, 710, 964, 1020], "reveal": [4, 166, 168, 341, 376, 392, 961], "form": [4, 9, 19, 32, 42, 59, 66, 94, 131, 155, 156, 166, 231, 247, 256, 316, 352, 364, 367, 370, 372, 374, 383, 384, 392, 394, 395, 398, 399, 400, 401, 402, 403, 405, 407, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 442, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 682, 777, 778, 779, 782, 783, 784, 787, 789, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 907, 953, 955, 957, 958, 960, 961, 964, 965, 968, 969, 970, 974, 979, 980, 984, 990, 997, 1011, 1015, 1017], "explain": [4, 5, 12, 55, 72, 84, 85, 103, 121, 148, 153, 154, 167, 168, 196, 214, 225, 247, 266, 269, 304, 341, 342, 357, 368, 370, 374, 389, 391, 398, 400, 405, 476, 504, 507, 517, 524, 527, 532, 608, 631, 639, 652, 663, 704, 705, 706, 710, 767, 960, 967, 980, 983, 984, 995, 997, 998, 1016, 1018, 1019], "lack": [4, 370, 372, 381, 399, 806, 896, 979, 1019], "deriv": [4, 19, 104, 105, 120, 153, 156, 168, 184, 185, 189, 197, 357, 365, 372, 397, 399, 401, 402, 403, 405, 407, 425, 429, 448, 516, 589, 600, 605, 631, 652, 659, 663, 838, 839, 854, 860, 881, 882, 958, 960, 961, 964, 968, 970, 979, 1005, 1006, 1007, 1012, 1013, 1014, 1020], "address": [4, 48, 341, 365, 370, 395, 403, 640, 960, 961, 966, 967, 968, 969, 970, 974, 988, 997, 1013], "section": [4, 37, 94, 99, 112, 128, 134, 135, 136, 137, 153, 157, 165, 166, 167, 175, 184, 185, 198, 221, 226, 236, 254, 256, 259, 265, 303, 304, 305, 310, 341, 342, 343, 352, 363, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 384, 389, 393, 394, 396, 398, 399, 400, 402, 403, 404, 405, 423, 427, 442, 517, 597, 602, 605, 620, 628, 770, 778, 883, 886, 953, 958, 960, 964, 965, 967, 968, 970, 971, 978, 979, 981, 983, 997, 999, 1005, 1007, 1008, 1009, 1012], "margin": [4, 12, 25, 27, 149, 150, 152, 153, 154, 163, 166, 167, 174, 215, 256, 298, 304, 323, 326, 328, 330, 339, 367, 393, 394, 400, 402, 405, 495, 593, 594, 614, 628, 659, 717, 810, 858, 870, 883, 886, 960, 964, 966, 970, 971, 974, 978, 979, 997, 1012, 1014], "construct": [4, 11, 69, 71, 109, 111, 113, 116, 128, 214, 226, 236, 238, 274, 289, 299, 301, 309, 312, 364, 367, 372, 379, 383, 395, 399, 400, 402, 403, 406, 418, 425, 426, 428, 429, 433, 435, 440, 446, 448, 450, 502, 518, 524, 527, 538, 539, 564, 570, 622, 671, 673, 674, 793, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 840, 841, 842, 843, 845, 886, 900, 902, 917, 918, 927, 953, 954, 956, 960, 961, 964, 965, 967, 974, 977, 979, 980, 985, 990, 994, 1010, 1012, 1013, 1016, 1019], "polynomialfeatur": [4, 175, 196, 197, 202, 236, 270, 310, 860, 960, 974, 1009, 1013, 1014, 1015, 1018, 1019], "coars": [4, 117, 376, 431, 444], "too": [4, 7, 12, 17, 44, 50, 56, 61, 69, 73, 81, 98, 121, 160, 168, 197, 218, 229, 242, 250, 254, 263, 271, 294, 304, 328, 341, 348, 349, 356, 367, 370, 376, 378, 381, 383, 395, 397, 399, 402, 403, 404, 407, 421, 432, 521, 571, 574, 662, 675, 690, 816, 817, 818, 819, 820, 846, 859, 861, 959, 961, 963, 964, 966, 967, 971, 997, 1006, 1009, 1012, 1013, 1014, 1015, 1017], "mani": [4, 7, 10, 19, 55, 73, 77, 81, 115, 116, 117, 119, 122, 141, 145, 168, 196, 217, 229, 242, 250, 256, 263, 264, 268, 276, 298, 303, 304, 308, 309, 310, 311, 312, 341, 352, 356, 358, 365, 367, 369, 370, 382, 383, 384, 392, 393, 395, 396, 397, 400, 402, 403, 404, 405, 407, 486, 536, 537, 540, 541, 542, 543, 547, 548, 549, 571, 574, 589, 592, 610, 622, 633, 637, 641, 642, 649, 651, 659, 660, 661, 675, 678, 682, 756, 760, 779, 783, 793, 838, 839, 854, 859, 861, 881, 889, 890, 891, 892, 953, 954, 956, 960, 961, 963, 964, 965, 966, 967, 970, 971, 972, 974, 977, 979, 980, 981, 983, 984, 985, 988, 997, 999, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1020, 1021], "featureunion": [4, 73, 362, 383, 394, 447, 612, 843, 954, 985, 988, 1001, 1006, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "hour_workday_interact": 4, "interaction_onli": [4, 856, 960, 974], "combin": [4, 12, 25, 27, 60, 69, 70, 72, 73, 94, 103, 104, 107, 119, 123, 132, 148, 154, 161, 163, 166, 196, 213, 214, 221, 225, 230, 256, 257, 265, 267, 268, 285, 293, 304, 310, 311, 313, 331, 343, 347, 356, 362, 366, 367, 370, 375, 382, 383, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 407, 408, 429, 447, 449, 450, 456, 458, 459, 462, 463, 464, 472, 479, 491, 492, 498, 504, 507, 509, 514, 520, 521, 523, 525, 530, 532, 543, 545, 548, 550, 551, 593, 597, 599, 604, 607, 613, 617, 626, 629, 630, 635, 636, 641, 642, 643, 644, 645, 646, 649, 651, 655, 656, 657, 658, 659, 661, 662, 664, 667, 684, 712, 770, 779, 782, 783, 790, 791, 802, 804, 808, 840, 842, 846, 854, 855, 856, 861, 881, 938, 953, 956, 957, 960, 964, 965, 967, 970, 974, 977, 978, 981, 988, 995, 997, 999, 1005, 1010, 1013, 1016, 1017, 1018, 1020, 1021], "ones": [4, 11, 34, 43, 70, 80, 124, 148, 172, 201, 225, 228, 256, 264, 267, 283, 302, 317, 338, 356, 357, 370, 378, 383, 395, 397, 399, 402, 433, 515, 549, 564, 593, 594, 627, 628, 641, 642, 653, 659, 686, 776, 781, 786, 797, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 856, 860, 923, 960, 964, 969, 970, 974, 979, 997, 1005, 1013, 1014, 1015], "previou": [4, 43, 53, 70, 94, 112, 118, 121, 128, 148, 153, 154, 165, 166, 167, 182, 197, 229, 231, 256, 259, 263, 298, 303, 312, 341, 342, 343, 352, 356, 365, 370, 372, 375, 376, 378, 381, 383, 384, 386, 395, 402, 403, 451, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 613, 629, 631, 635, 636, 641, 643, 645, 649, 650, 651, 652, 659, 660, 661, 663, 690, 798, 812, 815, 830, 838, 839, 878, 895, 960, 964, 968, 974, 985, 990, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "nice": [4, 66, 197, 298, 356, 400, 999], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": [4, 342], "009": [4, 264, 376], "104": [4, 24, 182], "highlight": [4, 79, 91, 148, 149, 154, 214, 302, 314, 341, 343, 359, 370, 374, 375, 378, 381, 405, 427, 430, 447, 450, 473, 474, 479, 484, 487, 495, 498, 507, 521, 544, 545, 547, 548, 550, 582, 585, 611, 613, 615, 617, 623, 629, 631, 635, 641, 652, 663, 671, 684, 685, 700, 730, 770, 779, 782, 783, 785, 793, 807, 823, 825, 842, 846, 851, 854, 855, 856, 860, 861, 878, 879, 881, 886, 890, 913, 961, 964, 972, 974, 979, 1015, 1016, 1017, 1018, 1019, 1020], "anoth": [4, 37, 94, 99, 123, 145, 148, 156, 161, 166, 185, 204, 222, 225, 235, 242, 256, 258, 259, 262, 266, 286, 341, 343, 346, 352, 356, 358, 364, 365, 368, 370, 372, 376, 381, 383, 389, 392, 395, 399, 400, 402, 403, 404, 406, 426, 428, 435, 438, 445, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 491, 521, 523, 530, 656, 659, 675, 692, 702, 785, 840, 841, 862, 953, 959, 960, 961, 964, 965, 967, 970, 974, 978, 979, 990, 997, 998, 999, 1014, 1015], "either": [4, 10, 30, 70, 117, 118, 166, 184, 186, 226, 251, 260, 265, 281, 341, 350, 356, 357, 362, 365, 368, 370, 371, 372, 376, 383, 389, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 426, 430, 435, 470, 479, 495, 507, 516, 517, 519, 527, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 565, 566, 567, 571, 572, 573, 574, 576, 577, 580, 585, 590, 591, 593, 594, 605, 610, 613, 615, 616, 633, 637, 639, 647, 659, 661, 665, 666, 673, 680, 681, 685, 689, 690, 694, 695, 703, 706, 708, 709, 710, 717, 721, 722, 724, 734, 738, 751, 756, 760, 764, 767, 770, 771, 774, 779, 782, 783, 785, 793, 801, 802, 803, 804, 805, 806, 808, 811, 871, 872, 878, 881, 882, 889, 890, 891, 892, 896, 925, 953, 960, 964, 965, 966, 967, 968, 969, 972, 974, 978, 979, 990, 998, 999, 1005, 1008, 1014, 1015, 1016, 1019], "after": [4, 17, 20, 21, 26, 46, 53, 69, 70, 74, 80, 96, 109, 119, 126, 128, 131, 141, 145, 153, 155, 157, 160, 166, 172, 189, 196, 234, 235, 238, 244, 256, 265, 276, 284, 286, 298, 299, 302, 303, 341, 342, 358, 365, 367, 368, 369, 370, 372, 374, 376, 377, 378, 381, 383, 389, 391, 392, 393, 395, 396, 399, 400, 403, 404, 405, 407, 426, 430, 433, 434, 435, 436, 439, 445, 498, 515, 519, 536, 537, 542, 543, 544, 545, 580, 610, 613, 641, 642, 649, 650, 651, 656, 658, 659, 660, 661, 675, 695, 708, 738, 774, 777, 778, 782, 783, 830, 837, 841, 854, 860, 881, 886, 887, 953, 954, 958, 960, 964, 968, 969, 974, 976, 978, 979, 980, 985, 990, 997, 999, 1005, 1008, 1012, 1013, 1016, 1017, 1020], "quadrat": [4, 29, 35, 153, 157, 163, 210, 258, 311, 394, 424, 441, 444, 532, 533, 606, 631, 641, 642, 652, 659, 663, 699, 886, 887, 960, 961, 964, 967, 970, 974, 978, 979, 986, 1001, 1006], "tractabl": [4, 399, 617, 984, 1018], "nystr\u00f6m": 4, "latter": [4, 14, 246, 256, 265, 266, 284, 303, 336, 358, 367, 370, 383, 399, 402, 403, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 724, 777, 778, 779, 782, 783, 788, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 931, 967, 1014], "kernel_approxim": [4, 160, 163, 171, 172, 210, 225, 230, 310, 359, 660, 740, 741, 847, 956, 990, 1006, 1012, 1021], "nystroem": [4, 160, 210, 225, 230, 362, 623, 624, 625, 660, 847, 886, 887, 1001, 1006, 1012, 1015, 1017, 1018, 1019], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 137, 172, 256, 325, 332, 335, 435, 518, 603, 747, 756, 779, 856, 883, 884, 885, 886, 887, 960, 974, 997], "n_compon": [4, 5, 6, 12, 14, 44, 52, 56, 57, 58, 69, 71, 72, 73, 84, 85, 89, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 126, 172, 195, 217, 218, 219, 220, 221, 222, 225, 229, 230, 232, 236, 241, 242, 243, 244, 245, 246, 247, 255, 280, 285, 295, 303, 310, 312, 342, 372, 375, 376, 383, 398, 400, 407, 434, 435, 445, 447, 465, 466, 467, 468, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 622, 623, 624, 625, 671, 672, 673, 674, 675, 676, 677, 678, 679, 777, 778, 830, 837, 840, 873, 874, 875, 918, 956, 958, 961, 963, 967, 995, 998, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019], "300": [4, 20, 21, 34, 38, 50, 57, 97, 109, 110, 111, 161, 186, 222, 225, 229, 245, 259, 286, 301, 310, 316, 334, 336, 372, 427, 430, 431, 442, 444, 622, 627, 628, 662, 673, 675, 677, 838, 960, 1015], "053": [4, 367, 376], "002": [4, 12, 145, 148, 367], "076": [4, 869], "004": [4, 342], "almost": [4, 119, 120, 198, 204, 270, 303, 319, 352, 363, 365, 374, 376, 381, 382, 383, 395, 399, 400, 453, 454, 455, 456, 458, 459, 460, 777, 953, 959, 960, 963, 964, 979, 998, 999, 1013, 1018], "rival": [4, 878, 977], "intermedi": [4, 7, 52, 114, 121, 328, 403, 542, 543, 602, 841, 964, 1017], "compound": [4, 214, 403, 593, 595, 663, 706, 734, 960, 999], "one_hot_poly_pipelin": 4, "082": 4, "006": [4, 280, 290, 342, 376], "111": [4, 7, 8, 16, 66, 89, 100, 101, 108, 193, 211, 221, 256, 276, 290, 833, 1008], "competit": [4, 121, 341, 627, 967], "low": [4, 11, 12, 37, 50, 80, 85, 96, 98, 102, 112, 124, 145, 168, 189, 191, 196, 198, 210, 217, 219, 225, 229, 234, 241, 242, 244, 247, 250, 256, 258, 262, 263, 271, 282, 283, 294, 302, 304, 305, 319, 327, 328, 341, 350, 366, 367, 370, 375, 378, 383, 386, 392, 393, 394, 399, 400, 403, 426, 432, 504, 507, 518, 565, 572, 586, 662, 675, 679, 688, 708, 724, 771, 826, 855, 862, 918, 929, 932, 953, 956, 959, 960, 961, 963, 964, 967, 969, 970, 971, 972, 974, 976, 979, 980, 986, 1001, 1006, 1009, 1010, 1011, 1013, 1014, 1019, 1020], "rank": [4, 17, 25, 79, 98, 102, 115, 143, 168, 169, 214, 254, 256, 264, 366, 390, 392, 393, 397, 398, 400, 402, 403, 491, 492, 504, 507, 532, 533, 576, 577, 589, 631, 640, 652, 663, 679, 682, 703, 708, 709, 721, 722, 738, 774, 782, 783, 918, 953, 955, 956, 961, 972, 974, 988, 1001, 1006, 1011, 1014, 1015, 1019, 1020], "fact": [4, 11, 19, 25, 80, 85, 121, 168, 229, 238, 341, 364, 377, 381, 383, 398, 400, 401, 402, 403, 632, 651, 653, 687, 958, 960, 967, 974, 978, 979, 985, 988, 1019], "smoother": [4, 5, 121, 167, 294, 401], "allow": [4, 55, 57, 73, 74, 98, 99, 112, 113, 126, 148, 153, 155, 157, 190, 196, 214, 218, 226, 229, 235, 237, 238, 241, 256, 274, 308, 309, 310, 311, 313, 333, 341, 350, 352, 356, 364, 368, 370, 371, 372, 374, 377, 379, 383, 384, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 425, 428, 429, 447, 449, 450, 506, 507, 517, 536, 537, 542, 543, 544, 545, 550, 551, 565, 566, 572, 576, 577, 580, 586, 593, 594, 598, 610, 611, 613, 617, 621, 626, 629, 630, 635, 636, 641, 643, 644, 645, 646, 659, 661, 664, 665, 666, 667, 671, 675, 744, 747, 756, 760, 763, 772, 773, 777, 778, 779, 781, 782, 783, 786, 788, 790, 793, 800, 807, 827, 836, 843, 844, 847, 848, 853, 865, 874, 876, 877, 878, 881, 882, 889, 890, 891, 892, 899, 901, 902, 912, 913, 928, 953, 954, 956, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 974, 976, 977, 978, 979, 980, 984, 985, 988, 990, 1002, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 56, 64, 72, 79, 80, 94, 96, 98, 99, 105, 119, 128, 148, 152, 154, 156, 167, 184, 185, 198, 204, 217, 219, 221, 222, 228, 246, 255, 256, 257, 267, 284, 285, 286, 303, 308, 330, 331, 336, 341, 342, 346, 357, 367, 368, 370, 371, 372, 375, 376, 379, 381, 382, 383, 384, 392, 395, 397, 398, 400, 402, 403, 404, 406, 425, 428, 429, 433, 434, 435, 436, 445, 514, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 541, 548, 565, 572, 593, 594, 630, 633, 636, 637, 638, 639, 641, 642, 654, 671, 690, 711, 712, 720, 764, 765, 766, 769, 770, 774, 779, 793, 823, 824, 825, 827, 829, 831, 832, 833, 854, 855, 860, 873, 874, 875, 889, 890, 892, 898, 917, 918, 920, 953, 954, 956, 959, 960, 961, 963, 964, 965, 968, 970, 974, 978, 979, 980, 983, 985, 988, 990, 992, 994, 995, 997, 998, 999, 1005, 1012, 1013, 1014, 1015, 1017, 1019, 1020], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 56, 58, 65, 69, 70, 71, 74, 94, 97, 99, 108, 114, 118, 120, 121, 122, 123, 141, 148, 151, 152, 153, 154, 155, 156, 161, 163, 165, 166, 167, 174, 175, 178, 183, 194, 196, 197, 202, 204, 209, 210, 212, 214, 215, 217, 226, 228, 231, 235, 237, 246, 254, 256, 257, 258, 259, 264, 265, 270, 276, 292, 298, 308, 309, 311, 312, 321, 325, 326, 327, 328, 329, 330, 334, 336, 338, 341, 342, 347, 352, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 386, 389, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 421, 424, 427, 428, 429, 430, 431, 433, 435, 437, 440, 441, 442, 443, 444, 447, 448, 452, 454, 455, 457, 461, 471, 472, 474, 475, 478, 480, 486, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 555, 558, 564, 565, 571, 572, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 587, 590, 591, 592, 593, 594, 598, 600, 602, 603, 605, 606, 610, 611, 614, 615, 616, 617, 618, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 685, 686, 687, 689, 694, 695, 699, 702, 704, 705, 706, 710, 714, 716, 717, 720, 722, 723, 724, 732, 737, 739, 743, 744, 745, 747, 750, 753, 756, 760, 761, 762, 763, 764, 765, 767, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 783, 784, 785, 790, 791, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 850, 851, 853, 857, 858, 859, 860, 861, 862, 865, 867, 870, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 899, 908, 910, 911, 912, 917, 918, 930, 931, 932, 934, 935, 938, 939, 948, 953, 954, 955, 957, 959, 961, 962, 965, 967, 968, 969, 970, 971, 972, 974, 977, 978, 980, 984, 985, 986, 990, 993, 994, 995, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "abl": [4, 5, 9, 24, 47, 60, 81, 85, 98, 99, 125, 154, 166, 185, 196, 212, 214, 221, 262, 267, 328, 352, 356, 357, 358, 364, 368, 370, 372, 374, 375, 381, 397, 399, 403, 468, 486, 517, 806, 853, 953, 954, 960, 963, 964, 965, 970, 974, 977, 980, 981, 985, 990, 998, 999, 1011, 1012, 1016], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 172, 278, 336, 343, 356, 391, 397, 403, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 789, 821, 822, 889, 890, 891, 892, 953, 964, 967, 980, 988, 993, 997, 1008, 1009], "depth": [4, 108, 114, 118, 122, 124, 129, 346, 348, 349, 350, 356, 368, 370, 374, 382, 402, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 821, 822, 826, 889, 890, 891, 892, 893, 895, 923, 969, 970, 980, 1007, 1008, 1016], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 69, 70, 71, 72, 109, 115, 119, 120, 126, 141, 142, 144, 149, 169, 172, 196, 204, 211, 212, 243, 254, 255, 256, 257, 258, 260, 262, 271, 278, 284, 285, 286, 295, 300, 303, 316, 317, 319, 328, 331, 352, 356, 372, 382, 383, 394, 395, 399, 402, 403, 404, 412, 421, 432, 452, 454, 455, 461, 515, 517, 524, 532, 533, 534, 536, 538, 540, 541, 542, 544, 547, 548, 550, 552, 593, 617, 641, 642, 649, 651, 654, 657, 658, 659, 675, 680, 686, 691, 696, 701, 716, 720, 725, 736, 745, 769, 774, 776, 805, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 823, 828, 830, 831, 838, 876, 877, 881, 883, 886, 889, 891, 917, 918, 953, 958, 959, 960, 961, 965, 967, 968, 972, 976, 978, 980, 994, 999, 1013, 1014], "On": [4, 12, 17, 26, 66, 70, 71, 84, 85, 99, 108, 112, 114, 115, 116, 121, 124, 125, 128, 131, 140, 142, 152, 153, 166, 167, 168, 177, 184, 185, 198, 226, 227, 228, 229, 231, 235, 236, 237, 238, 241, 243, 246, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 268, 295, 298, 300, 302, 303, 304, 309, 310, 312, 313, 318, 328, 350, 356, 368, 371, 372, 374, 381, 383, 389, 393, 395, 399, 400, 402, 404, 405, 626, 639, 674, 717, 743, 862, 953, 957, 960, 963, 964, 966, 970, 977, 979, 980, 994, 997], "contrari": [4, 13, 166, 218, 222, 241, 259, 298, 341, 364, 395, 479, 527, 589, 796, 862, 960, 966, 970], "significantli": [4, 24, 25, 37, 77, 78, 119, 145, 166, 167, 168, 196, 204, 212, 214, 256, 276, 309, 310, 342, 343, 352, 357, 374, 395, 400, 402, 403, 408, 452, 457, 462, 463, 521, 523, 530, 541, 548, 629, 630, 635, 636, 643, 644, 645, 646, 667, 675, 821, 822, 956, 960, 961, 967, 972, 979, 1005, 1007, 1008, 1012, 1013, 1018, 1019, 1020], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 71, 73, 94, 112, 124, 140, 144, 148, 156, 160, 165, 167, 178, 190, 196, 204, 214, 225, 256, 257, 259, 261, 263, 264, 265, 268, 281, 289, 292, 293, 300, 311, 312, 316, 341, 342, 356, 357, 358, 365, 366, 369, 370, 371, 372, 376, 382, 383, 391, 393, 394, 395, 396, 399, 400, 401, 402, 403, 405, 407, 432, 447, 455, 492, 516, 517, 519, 520, 521, 522, 529, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 571, 572, 574, 577, 585, 615, 616, 617, 627, 628, 629, 630, 635, 636, 641, 643, 644, 645, 646, 648, 649, 650, 651, 659, 660, 661, 668, 669, 680, 699, 701, 721, 745, 770, 773, 777, 779, 782, 783, 785, 790, 791, 793, 802, 803, 804, 805, 806, 808, 837, 838, 839, 840, 856, 860, 881, 898, 907, 932, 953, 960, 961, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 977, 978, 979, 980, 984, 985, 988, 995, 998, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1018], "compet": 4, "access": [4, 49, 77, 242, 247, 341, 350, 356, 357, 370, 371, 372, 378, 381, 383, 384, 395, 397, 398, 402, 403, 405, 433, 440, 447, 519, 550, 551, 552, 553, 600, 682, 839, 840, 841, 896, 960, 963, 964, 970, 971, 972, 978, 979, 985, 988, 990, 998, 999, 1005, 1007, 1011, 1012, 1013, 1014, 1017, 1019, 1020, 1021], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 56, 57, 66, 69, 89, 98, 100, 101, 114, 118, 122, 124, 128, 145, 167, 185, 193, 196, 214, 217, 219, 226, 229, 238, 257, 265, 267, 276, 278, 298, 303, 310, 311, 341, 342, 343, 364, 367, 368, 370, 372, 374, 376, 378, 381, 383, 384, 386, 391, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 412, 421, 422, 423, 428, 433, 435, 440, 445, 447, 450, 452, 465, 466, 467, 479, 491, 504, 507, 518, 524, 532, 533, 534, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 562, 563, 564, 593, 594, 602, 610, 615, 616, 617, 626, 641, 642, 649, 651, 654, 657, 658, 659, 660, 661, 669, 672, 674, 675, 676, 678, 682, 706, 711, 712, 724, 729, 731, 734, 745, 766, 769, 779, 782, 783, 786, 788, 793, 804, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 838, 841, 842, 843, 845, 855, 856, 857, 859, 861, 869, 873, 874, 876, 877, 881, 882, 883, 886, 889, 890, 891, 892, 930, 950, 953, 958, 959, 960, 961, 964, 965, 966, 967, 968, 970, 971, 974, 978, 979, 980, 985, 990, 997, 999, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "geograph": [4, 11, 289, 365, 481], "repartit": 4, "immobil": 4, "quant": 4, "predictionerrordisplai": [4, 74, 128, 166, 252, 313, 964, 1020], "nrow": [4, 5, 32, 56, 65, 72, 94, 157, 167, 196, 198, 204, 214, 217, 218, 221, 258, 259, 276, 300, 302, 303, 313, 317, 335, 336, 995], "ncol": [4, 5, 32, 53, 56, 65, 94, 99, 105, 167, 196, 197, 198, 204, 214, 217, 218, 228, 252, 258, 259, 267, 276, 293, 299, 300, 302, 303, 313, 335, 336, 342], "sharex": [4, 7, 14, 72, 91, 99, 129, 157, 167, 198, 234, 258, 281, 319, 995], "sharei": [4, 74, 91, 99, 105, 129, 157, 167, 196, 198, 204, 234, 258, 267, 281, 299, 304, 335, 336, 342], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 74, 128, 166, 252, 313, 684], "residual_vs_predict": [4, 74, 252, 313, 684], "axis_idx": 4, "kind": [4, 9, 12, 24, 25, 74, 103, 128, 140, 166, 167, 246, 250, 252, 265, 305, 310, 313, 325, 328, 341, 357, 358, 363, 365, 370, 372, 376, 381, 382, 393, 395, 398, 399, 400, 402, 403, 404, 471, 472, 486, 491, 492, 504, 507, 571, 615, 616, 684, 910, 960, 966, 971, 980, 1008, 1017, 1019, 1020], "enumer": [4, 8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 58, 59, 60, 61, 69, 78, 80, 81, 85, 95, 97, 104, 108, 112, 119, 120, 122, 123, 134, 150, 152, 157, 169, 176, 178, 187, 196, 218, 219, 222, 225, 230, 233, 234, 241, 242, 243, 244, 246, 247, 251, 258, 259, 265, 266, 281, 285, 286, 288, 295, 300, 301, 316, 317, 319, 321, 326, 328, 335, 336, 341, 347, 365, 542, 543, 547, 548, 763, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800], "pred": [4, 7, 11, 32, 337, 341, 365, 631, 652, 663, 680, 685, 689, 701, 711, 712, 720, 765, 766, 769, 770, 964], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 62, 63, 64, 74, 85, 91, 94, 95, 98, 103, 104, 105, 109, 111, 113, 128, 129, 154, 160, 163, 166, 167, 168, 181, 187, 188, 196, 204, 205, 217, 229, 242, 246, 247, 254, 258, 259, 260, 263, 265, 276, 281, 284, 292, 293, 294, 300, 302, 303, 304, 320, 325, 336, 337, 347, 368, 402, 805, 974, 999], "disp": [4, 32, 111, 124, 125, 250, 259, 303, 309, 325, 330, 422, 614, 680, 683, 684, 830], "from_predict": [4, 32, 74, 128, 166, 234, 252, 263, 265, 311, 316, 341, 377, 422, 614, 681, 701, 709, 764, 766, 769, 770, 771, 964, 1002, 1018, 1019, 1020, 1021], "y_true": [4, 19, 32, 58, 74, 128, 151, 196, 206, 214, 244, 319, 370, 416, 422, 423, 448, 465, 466, 467, 535, 537, 539, 540, 541, 543, 545, 547, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 680, 681, 683, 684, 685, 686, 690, 691, 692, 695, 696, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 764, 765, 766, 767, 769, 770, 771, 774, 776, 814, 815, 824, 832, 839, 882, 884, 887, 890, 892, 964, 1006, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020], "y_pred": [4, 6, 7, 25, 30, 32, 34, 44, 56, 61, 69, 74, 108, 121, 122, 128, 142, 166, 196, 198, 203, 206, 211, 213, 214, 225, 226, 234, 252, 254, 259, 283, 287, 295, 303, 319, 320, 352, 370, 377, 383, 402, 416, 423, 448, 465, 466, 467, 532, 535, 537, 539, 540, 541, 543, 545, 547, 548, 550, 551, 553, 594, 614, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 680, 681, 683, 684, 685, 686, 691, 695, 696, 701, 704, 705, 706, 710, 711, 712, 716, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 765, 766, 767, 769, 770, 776, 779, 782, 783, 793, 802, 812, 814, 815, 824, 832, 839, 841, 881, 882, 883, 884, 885, 886, 887, 890, 892, 964, 966, 995, 1011, 1012, 1014, 1016, 1020, 1021], "scatter_kwarg": [4, 74, 128, 166, 684], "set_xtick": [4, 8, 10, 16, 31, 34, 43, 59, 63, 105, 126, 130, 167, 169, 187, 212, 230, 241, 267, 268, 274, 292, 294, 300, 301, 325], "num": [4, 12, 70, 145, 148, 153, 154, 155, 167, 168, 198, 263, 264, 312, 615], "set_ytick": [4, 16, 31, 34, 43, 59, 63, 105, 126, 160, 161, 169, 187, 212, 241, 267, 292, 294, 300, 301, 325, 343], "loc": [4, 7, 8, 9, 24, 26, 33, 40, 71, 74, 78, 79, 80, 84, 96, 98, 102, 103, 104, 108, 111, 112, 113, 119, 120, 121, 122, 123, 125, 128, 130, 131, 135, 141, 148, 149, 155, 157, 166, 167, 178, 180, 181, 186, 190, 196, 197, 198, 199, 202, 203, 206, 209, 210, 213, 214, 220, 228, 229, 230, 231, 232, 243, 244, 251, 254, 255, 256, 259, 260, 263, 266, 269, 270, 271, 281, 282, 293, 299, 302, 303, 309, 312, 318, 327, 330, 335, 341, 347, 349, 793, 858, 870], "upper": [4, 7, 9, 24, 71, 74, 78, 79, 80, 108, 111, 112, 113, 120, 121, 122, 123, 128, 130, 141, 152, 154, 157, 166, 190, 196, 202, 203, 206, 210, 213, 214, 229, 232, 233, 255, 256, 257, 281, 282, 293, 303, 319, 327, 330, 335, 395, 401, 446, 571, 572, 574, 578, 596, 597, 598, 600, 602, 603, 605, 606, 608, 615, 616, 618, 620, 633, 637, 660, 717, 854, 855, 883, 884, 885, 905, 963, 964, 967, 974, 978, 979, 980, 1013], "bbox_to_anchor": [4, 37, 157, 261, 335], "set_aspect": [4, 151, 207, 243, 337], "equal": [4, 11, 12, 26, 37, 39, 53, 59, 79, 85, 109, 121, 151, 166, 197, 198, 200, 207, 213, 235, 243, 246, 250, 254, 256, 265, 286, 300, 304, 328, 330, 337, 342, 365, 366, 370, 372, 383, 392, 393, 395, 399, 400, 402, 403, 408, 421, 424, 425, 426, 427, 429, 430, 432, 437, 442, 443, 446, 452, 457, 462, 463, 486, 495, 498, 502, 515, 516, 517, 522, 524, 526, 527, 532, 533, 534, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 571, 576, 577, 580, 582, 583, 590, 591, 608, 611, 612, 615, 616, 617, 618, 620, 624, 625, 628, 632, 641, 642, 654, 682, 686, 701, 703, 711, 750, 765, 769, 770, 774, 776, 779, 780, 782, 783, 792, 793, 797, 802, 809, 813, 814, 821, 822, 823, 824, 829, 830, 831, 832, 833, 838, 839, 844, 845, 846, 853, 856, 859, 860, 861, 862, 864, 871, 878, 881, 882, 888, 889, 890, 891, 892, 907, 918, 939, 945, 958, 960, 964, 965, 967, 968, 970, 974, 978, 979, 980, 998, 999, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "adjust": [4, 9, 36, 38, 49, 57, 67, 77, 121, 163, 225, 230, 237, 257, 308, 320, 336, 342, 377, 395, 400, 402, 403, 507, 536, 537, 540, 542, 544, 545, 547, 641, 642, 649, 651, 657, 658, 659, 687, 688, 691, 697, 698, 737, 739, 768, 775, 816, 817, 819, 820, 851, 873, 874, 881, 882, 883, 886, 889, 891, 907, 963, 964, 968, 974, 997, 1002, 1005, 1011, 1021], "box": [4, 10, 30, 167, 168, 218, 298, 302, 377, 400, 402, 495, 538, 539, 857, 869, 893, 895, 964, 965, 971, 974, 980, 984, 990, 1013], "showseem": [4, 9, 46, 121, 167, 196, 221, 225, 257, 293, 302, 341, 342, 369, 370, 375, 399, 484, 960, 964, 980], "regim": [4, 383, 881, 882, 963], "overal": [4, 43, 48, 112, 128, 153, 214, 253, 276, 303, 304, 342, 356, 369, 370, 376, 392, 393, 402, 405, 430, 432, 447, 454, 455, 461, 532, 862, 961, 964, 980, 988, 1015], "closer": [4, 27, 37, 97, 99, 127, 148, 167, 175, 343, 393, 395, 400, 432, 536, 611, 695, 823, 824, 829, 831, 832, 833, 979, 1012], "diagon": [4, 25, 40, 81, 84, 214, 234, 243, 246, 247, 250, 328, 392, 395, 397, 405, 436, 454, 455, 461, 464, 494, 496, 510, 515, 533, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 633, 634, 637, 638, 639, 665, 666, 684, 698, 772, 777, 778, 825, 833, 958, 960, 963, 964, 967, 974, 1011, 1013, 1014, 1015], "obtain": [4, 7, 9, 12, 27, 48, 56, 57, 70, 73, 74, 99, 102, 118, 121, 122, 126, 134, 145, 150, 152, 166, 167, 196, 198, 210, 221, 241, 242, 243, 252, 256, 257, 258, 262, 265, 303, 311, 326, 342, 343, 350, 352, 365, 367, 381, 383, 389, 393, 395, 397, 398, 400, 402, 403, 404, 405, 421, 426, 452, 479, 515, 516, 538, 539, 540, 541, 542, 543, 546, 547, 548, 576, 589, 597, 628, 642, 644, 649, 651, 655, 657, 659, 660, 670, 691, 695, 708, 721, 738, 773, 785, 806, 809, 810, 813, 827, 838, 858, 870, 883, 886, 889, 890, 918, 954, 956, 958, 960, 961, 963, 964, 965, 967, 968, 970, 971, 974, 978, 979, 1011, 1013, 1016, 1018, 1019, 1020], "slightli": [4, 25, 63, 81, 112, 118, 121, 124, 128, 145, 148, 149, 150, 168, 175, 196, 220, 222, 264, 276, 308, 325, 343, 369, 370, 381, 393, 395, 402, 403, 405, 407, 571, 572, 574, 621, 641, 782, 783, 881, 883, 886, 917, 918, 953, 960, 974, 978, 979, 1014, 1018, 1019], "cost": [4, 39, 97, 148, 163, 172, 217, 230, 258, 265, 308, 328, 342, 343, 345, 351, 370, 376, 378, 381, 395, 402, 461, 483, 520, 521, 522, 529, 540, 541, 542, 543, 547, 548, 585, 593, 602, 610, 629, 630, 635, 636, 643, 644, 645, 646, 651, 655, 657, 659, 661, 670, 671, 675, 807, 881, 882, 883, 886, 889, 890, 891, 892, 918, 956, 960, 961, 964, 967, 977, 978, 979, 986, 1001, 1011, 1014, 1015], "durat": [4, 8, 196, 214, 278, 343, 357, 930, 931, 960], "regressor": [4, 74, 85, 94, 122, 127, 128, 131, 148, 153, 161, 163, 166, 174, 176, 178, 196, 199, 213, 214, 215, 309, 310, 356, 370, 372, 381, 383, 393, 396, 405, 416, 420, 448, 465, 466, 467, 468, 507, 534, 535, 536, 537, 538, 539, 540, 541, 543, 545, 548, 549, 550, 551, 552, 553, 588, 589, 592, 594, 615, 616, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 650, 652, 653, 655, 656, 661, 662, 684, 809, 810, 813, 814, 815, 824, 832, 837, 838, 839, 842, 848, 856, 861, 862, 882, 884, 887, 889, 890, 891, 892, 895, 910, 912, 953, 954, 960, 964, 965, 967, 972, 978, 984, 986, 994, 1001, 1005, 1006, 1010, 1011, 1012, 1014, 1015, 1018, 1019, 1020], "mlpregressor": [4, 167, 235, 358, 837, 838, 968, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "hidden": [4, 167, 294, 295, 378, 392, 400, 837, 838, 839, 968, 969, 984, 1005, 1016], "layer": [4, 163, 212, 235, 291, 294, 295, 296, 356, 378, 402, 497, 498, 505, 550, 807, 837, 838, 839, 842, 861, 969, 986, 1001, 1011], "cyclic": [4, 629, 630, 635, 636, 643, 644, 645, 646, 1017], "within": [4, 59, 114, 115, 116, 127, 142, 144, 145, 192, 197, 198, 208, 214, 235, 254, 255, 259, 269, 298, 299, 310, 326, 329, 336, 343, 352, 356, 365, 370, 374, 379, 381, 383, 384, 392, 393, 395, 396, 399, 401, 402, 406, 428, 431, 444, 446, 447, 452, 457, 498, 532, 550, 551, 552, 553, 576, 577, 615, 675, 679, 682, 693, 707, 763, 777, 778, 784, 785, 797, 798, 805, 806, 821, 822, 823, 824, 829, 831, 832, 833, 840, 841, 842, 854, 862, 866, 867, 869, 870, 871, 872, 883, 884, 885, 886, 887, 889, 890, 891, 892, 953, 958, 960, 961, 967, 970, 974, 977, 979, 980, 985, 988, 990, 994, 997, 999, 1007, 1008, 1012, 1013, 1018, 1019], "finer": [4, 37, 278, 328, 357, 395, 399, 953, 967, 1015], "resolut": [4, 11, 17, 104, 167, 288, 289, 328, 384, 393, 990, 1015], "taken": [4, 7, 31, 42, 53, 123, 153, 166, 229, 230, 244, 262, 300, 365, 367, 369, 370, 374, 383, 389, 394, 395, 399, 403, 405, 407, 424, 516, 566, 567, 629, 630, 633, 635, 636, 637, 641, 642, 643, 644, 645, 646, 660, 662, 664, 667, 678, 854, 855, 875, 878, 884, 885, 964, 966, 974, 976, 1011, 1014, 1017, 1018], "everi": [4, 94, 160, 194, 197, 218, 231, 242, 247, 265, 311, 352, 365, 368, 370, 372, 374, 378, 383, 395, 397, 399, 400, 403, 424, 437, 491, 514, 519, 522, 528, 540, 542, 543, 547, 573, 574, 586, 629, 630, 632, 635, 636, 642, 643, 644, 645, 646, 647, 648, 649, 651, 655, 656, 657, 658, 659, 668, 669, 670, 675, 679, 736, 753, 761, 762, 792, 830, 889, 891, 893, 895, 907, 957, 959, 964, 965, 966, 974, 980, 988, 994, 1005, 1009, 1011, 1014, 1018], "offer": [4, 372, 378, 381, 382, 386, 399, 400, 402, 403, 953, 954, 965, 968, 980, 984, 985, 988, 1011], "view": [4, 16, 30, 42, 46, 77, 96, 167, 193, 198, 236, 356, 358, 370, 395, 403, 519, 628, 640, 821, 822, 896, 960, 961], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 56, 60, 77, 78, 79, 80, 81, 90, 95, 96, 97, 104, 110, 111, 121, 124, 158, 161, 175, 186, 225, 229, 243, 244, 248, 281, 289, 302, 325, 359, 362, 366, 372, 375, 383, 395, 397, 400, 401, 407, 435, 452, 453, 454, 455, 456, 457, 458, 459, 479, 487, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 508, 513, 515, 527, 532, 533, 546, 593, 594, 596, 597, 598, 600, 601, 602, 605, 606, 608, 610, 626, 627, 655, 660, 663, 686, 706, 723, 734, 758, 777, 778, 779, 793, 816, 817, 818, 819, 820, 821, 822, 826, 857, 861, 869, 873, 874, 875, 958, 960, 961, 962, 970, 986, 988, 998, 1000, 1001, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1019], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 56, 57, 59, 60, 61, 63, 64, 65, 70, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 100, 101, 102, 107, 110, 112, 114, 115, 116, 117, 120, 121, 123, 124, 125, 128, 131, 132, 137, 140, 141, 144, 148, 149, 152, 154, 155, 157, 160, 161, 163, 164, 165, 170, 175, 176, 177, 178, 180, 185, 186, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 209, 210, 213, 214, 217, 218, 220, 221, 222, 224, 225, 230, 231, 233, 234, 239, 241, 242, 244, 245, 246, 247, 249, 251, 253, 256, 257, 259, 261, 263, 265, 266, 267, 268, 270, 272, 274, 276, 281, 282, 283, 288, 292, 299, 301, 302, 305, 309, 310, 312, 316, 317, 320, 321, 327, 328, 330, 331, 333, 334, 335, 336, 338, 341, 342, 348, 349, 356, 357, 359, 362, 366, 373, 375, 381, 382, 383, 390, 393, 395, 403, 404, 418, 424, 427, 430, 432, 434, 435, 436, 437, 441, 442, 443, 445, 447, 452, 453, 454, 455, 456, 457, 458, 459, 471, 472, 474, 475, 478, 479, 480, 485, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 518, 519, 521, 522, 523, 524, 527, 530, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 556, 565, 566, 567, 572, 590, 591, 593, 594, 610, 613, 615, 617, 622, 623, 624, 625, 626, 629, 630, 632, 633, 635, 636, 637, 641, 643, 644, 645, 646, 653, 654, 655, 659, 660, 661, 662, 672, 673, 674, 675, 676, 677, 678, 684, 687, 688, 691, 713, 725, 763, 773, 777, 778, 779, 781, 782, 783, 784, 791, 793, 794, 795, 796, 797, 798, 799, 800, 806, 807, 812, 814, 815, 816, 817, 818, 820, 821, 822, 826, 830, 837, 838, 839, 841, 844, 846, 855, 858, 862, 870, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 904, 917, 918, 935, 938, 954, 956, 959, 961, 963, 964, 968, 969, 970, 972, 974, 979, 980, 984, 985, 986, 990, 994, 995, 997, 998, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "constant": [4, 104, 112, 151, 155, 161, 166, 184, 197, 198, 200, 214, 227, 236, 259, 288, 293, 295, 299, 301, 309, 336, 338, 352, 362, 372, 379, 383, 392, 402, 405, 416, 448, 465, 466, 467, 494, 496, 517, 521, 523, 530, 532, 533, 534, 535, 537, 539, 541, 543, 545, 548, 551, 553, 573, 589, 592, 594, 596, 610, 613, 615, 616, 618, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 659, 660, 661, 662, 663, 670, 672, 676, 678, 704, 705, 706, 710, 757, 759, 767, 814, 815, 824, 832, 838, 839, 846, 857, 860, 869, 881, 882, 883, 884, 885, 886, 887, 888, 890, 892, 958, 960, 961, 964, 966, 967, 974, 978, 980, 1001, 1008, 1013, 1015, 1017, 1018, 1019], "varianc": [4, 5, 27, 44, 56, 61, 72, 77, 79, 84, 85, 94, 95, 96, 99, 102, 103, 105, 107, 123, 132, 155, 163, 166, 174, 176, 185, 196, 198, 201, 214, 215, 246, 253, 256, 259, 265, 266, 269, 285, 292, 298, 303, 342, 352, 362, 366, 379, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 405, 407, 425, 429, 432, 446, 504, 507, 515, 516, 517, 524, 527, 532, 533, 538, 539, 541, 542, 543, 548, 586, 590, 591, 594, 608, 626, 627, 628, 635, 639, 640, 643, 645, 655, 656, 657, 658, 659, 670, 693, 710, 767, 777, 778, 819, 830, 845, 851, 857, 859, 861, 867, 869, 871, 872, 890, 892, 939, 940, 941, 945, 958, 959, 960, 962, 967, 968, 969, 976, 978, 979, 980, 981, 986, 995, 997, 998, 1001, 1005, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "poisson": [4, 163, 174, 215, 232, 366, 402, 447, 448, 479, 506, 535, 541, 545, 548, 631, 652, 655, 663, 689, 706, 727, 731, 732, 734, 807, 841, 842, 845, 846, 854, 855, 856, 861, 890, 892, 922, 960, 980, 1015, 1016, 1017, 1018, 1019], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 99, 129, 137, 172, 210, 225, 230, 231, 254, 256, 258, 261, 267, 271, 310, 316, 317, 319, 321, 325, 327, 328, 331, 332, 334, 335, 338, 398, 400, 405, 435, 518, 545, 602, 603, 622, 623, 624, 626, 627, 628, 631, 663, 668, 674, 706, 729, 734, 741, 748, 757, 758, 759, 777, 790, 793, 876, 877, 878, 883, 884, 885, 886, 887, 953, 956, 959, 960, 962, 977, 979, 990, 994, 995, 997, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1019, 1020, 1021], "achiev": [4, 12, 17, 19, 27, 31, 97, 109, 117, 119, 126, 156, 172, 196, 204, 253, 256, 263, 303, 319, 328, 331, 336, 341, 352, 356, 358, 364, 365, 367, 372, 376, 381, 383, 392, 393, 395, 399, 400, 402, 403, 536, 541, 548, 623, 632, 659, 661, 690, 722, 745, 782, 783, 817, 861, 953, 954, 956, 960, 964, 974, 977, 979, 987, 999, 1018], "gridsearchcv": [4, 54, 68, 70, 72, 73, 75, 77, 102, 163, 231, 236, 246, 249, 254, 255, 256, 257, 261, 264, 267, 272, 278, 280, 295, 300, 310, 328, 352, 357, 372, 381, 383, 396, 399, 485, 503, 523, 524, 558, 582, 590, 636, 686, 724, 790, 793, 841, 851, 881, 889, 953, 960, 964, 968, 978, 979, 984, 985, 994, 995, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020], "tweedieregressor": [4, 309, 312, 631, 652, 960, 1016, 1019, 1020], "power": [4, 7, 17, 119, 165, 197, 214, 247, 259, 264, 280, 298, 299, 302, 316, 325, 356, 357, 382, 393, 395, 398, 401, 402, 403, 406, 428, 465, 466, 467, 515, 518, 524, 527, 613, 663, 677, 682, 706, 729, 731, 734, 823, 824, 831, 832, 834, 835, 856, 857, 858, 869, 870, 917, 918, 960, 961, 964, 972, 974, 978, 979, 988, 1008, 1011, 1013, 1015, 1016, 1018], "param_grid": [4, 6, 70, 71, 72, 73, 121, 231, 236, 246, 254, 255, 256, 260, 261, 264, 267, 278, 300, 328, 383, 396, 402, 724, 779, 782, 790, 791, 953, 964, 994, 995], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 347, 348, 349, 350, 351, 357, 364, 365, 367, 376, 383, 392, 395, 401, 403, 406, 416, 428, 448, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 487, 488, 493, 495, 497, 498, 502, 505, 506, 519, 520, 527, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 553, 566, 567, 573, 577, 579, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 659, 660, 661, 662, 680, 687, 688, 696, 711, 712, 713, 716, 720, 721, 739, 751, 765, 766, 769, 774, 775, 776, 779, 793, 802, 803, 804, 814, 815, 816, 817, 824, 826, 832, 839, 856, 860, 882, 884, 887, 889, 890, 891, 892, 918, 953, 960, 961, 964, 965, 966, 967, 974, 978, 979, 980, 995, 999, 1006, 1011, 1013, 1021], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 357, 370, 371, 372, 373, 374, 376, 381, 383, 386, 403, 985, 987, 999], "252": [4, 15, 219, 367, 517, 857, 869], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 352, 356, 365, 372, 374, 376, 383, 392, 395, 399, 400, 402, 403, 405, 447, 450, 471, 473, 474, 475, 477, 479, 483, 485, 487, 493, 536, 566, 571, 572, 573, 574, 604, 607, 614, 615, 682, 695, 699, 740, 741, 745, 746, 748, 749, 756, 757, 758, 759, 760, 763, 779, 782, 783, 793, 805, 811, 812, 815, 818, 829, 831, 832, 833, 838, 839, 953, 954, 958, 959, 960, 961, 964, 965, 966, 967, 968, 971, 974, 975, 980, 990, 996, 998, 1020], "plot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 357, 368, 370, 371, 374, 376, 378, 383, 386, 403, 406, 424, 428, 437, 444, 448, 481, 513, 627, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 850, 851, 853, 856, 857, 858, 859, 860, 861, 866, 867, 868, 869, 870, 871, 872, 913, 964, 984, 997, 999, 1005, 1007, 1011, 1015, 1019], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 371, 396, 451, 879, 980, 984, 985, 1016, 1019], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 365, 370, 372, 383, 386, 388, 995, 1005, 1009, 1012], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 346, 347, 348, 349, 350, 370, 374, 383, 386, 388, 999, 1005, 1012], "kernelpca": [5, 396, 400, 516, 517, 524, 527, 671, 673, 675, 847, 974, 1006, 1007, 1011, 1014, 1015, 1016, 1017, 1018, 1019], "take": [5, 8, 27, 30, 46, 53, 56, 65, 74, 79, 89, 91, 94, 109, 117, 148, 150, 153, 157, 166, 172, 179, 204, 205, 221, 243, 244, 251, 257, 261, 265, 266, 274, 276, 279, 282, 283, 284, 286, 287, 298, 312, 319, 324, 325, 328, 338, 342, 343, 347, 356, 357, 358, 364, 365, 368, 370, 372, 375, 376, 377, 378, 381, 383, 384, 393, 395, 396, 398, 399, 400, 402, 403, 404, 405, 407, 421, 427, 430, 432, 433, 435, 440, 441, 442, 444, 446, 452, 502, 516, 521, 522, 523, 529, 530, 564, 575, 578, 579, 581, 582, 583, 593, 594, 599, 603, 604, 607, 615, 626, 632, 654, 656, 657, 658, 659, 662, 674, 675, 682, 688, 690, 692, 702, 711, 712, 720, 724, 725, 738, 753, 756, 760, 761, 762, 763, 765, 766, 769, 770, 779, 780, 784, 785, 793, 797, 805, 823, 824, 825, 827, 829, 830, 831, 832, 833, 845, 855, 876, 877, 881, 882, 883, 884, 885, 886, 887, 905, 934, 953, 956, 960, 961, 963, 964, 965, 967, 969, 970, 971, 974, 979, 980, 988, 990, 994, 996, 1002, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "exact": [5, 7, 81, 99, 153, 200, 230, 276, 352, 356, 357, 364, 370, 372, 379, 381, 382, 383, 395, 404, 405, 418, 465, 466, 467, 471, 479, 517, 518, 524, 544, 545, 621, 625, 629, 675, 779, 793, 802, 803, 804, 883, 886, 953, 956, 960, 961, 970, 974, 978, 979, 1012, 1013, 1015], "usp": 5, "digit": [5, 29, 35, 36, 51, 67, 71, 87, 92, 133, 138, 143, 163, 187, 203, 212, 216, 221, 223, 229, 230, 254, 255, 258, 280, 285, 291, 293, 294, 296, 315, 322, 363, 370, 376, 395, 401, 402, 404, 425, 429, 430, 485, 524, 527, 532, 549, 641, 671, 672, 673, 674, 675, 680, 687, 688, 696, 700, 701, 719, 773, 775, 803, 807, 823, 830, 837, 841, 842, 851, 861, 867, 874, 877, 886, 893, 894, 895, 953, 959, 961, 964, 967, 969, 977, 990, 994, 997, 998, 1001, 1009], "reproduc": [5, 12, 59, 109, 166, 172, 184, 265, 295, 357, 359, 369, 370, 372, 373, 378, 381, 383, 389, 395, 399, 400, 403, 407, 424, 437, 443, 452, 457, 471, 474, 475, 478, 480, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 534, 536, 537, 538, 539, 542, 543, 544, 545, 546, 590, 591, 593, 594, 617, 622, 623, 624, 625, 629, 630, 633, 635, 636, 637, 643, 644, 645, 646, 649, 650, 651, 654, 659, 661, 662, 672, 673, 675, 676, 677, 773, 777, 778, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 805, 806, 807, 811, 812, 815, 826, 830, 837, 838, 839, 846, 858, 862, 870, 873, 874, 881, 882, 883, 886, 917, 918, 935, 938, 956, 984, 987, 1005, 1013, 1018, 1019], "sect": 5, "bak\u0131r": [5, 400, 518], "g\u00f6khan": [5, 400, 518], "h": [5, 6, 48, 57, 94, 95, 108, 109, 110, 126, 150, 166, 243, 281, 284, 292, 300, 312, 321, 324, 343, 367, 376, 393, 395, 397, 400, 401, 402, 403, 406, 428, 502, 515, 518, 521, 523, 530, 536, 550, 551, 565, 573, 590, 591, 672, 676, 687, 691, 739, 816, 820, 821, 822, 827, 837, 852, 861, 956, 958, 960, 961, 962, 964, 966, 968, 969, 978, 980, 995, 1011, 1016, 1020, 1021], "jason": [5, 400, 518, 877, 1011, 1013, 1017, 1020], "weston": [5, 400, 518, 576, 577, 877], "bernhard": [5, 400, 518, 812, 847, 877, 965, 970, 979, 1011], "sch\u00f6lkopf": [5, 400, 518, 847, 970, 974, 979], "pre": [5, 70, 118, 166, 185, 298, 343, 359, 368, 370, 383, 386, 397, 399, 400, 402, 403, 404, 406, 407, 427, 428, 430, 442, 516, 518, 673, 695, 745, 844, 886, 964, 969, 974, 979, 980, 984, 985, 1001, 1008, 1013, 1019], "advanc": [5, 163, 224, 226, 239, 256, 358, 395, 400, 472, 484, 518, 615, 622, 765, 777, 830, 839, 842, 861, 890, 956, 967, 974, 988, 1002, 1007], "neural": [5, 6, 31, 256, 294, 359, 381, 383, 389, 399, 400, 402, 407, 516, 518, 521, 523, 530, 550, 551, 622, 628, 679, 723, 777, 830, 837, 838, 839, 847, 956, 960, 961, 962, 964, 967, 970, 974, 978, 980, 984, 986, 988, 995, 1000, 1001, 1005, 1017], "system": [5, 99, 256, 263, 352, 356, 357, 358, 365, 367, 370, 371, 372, 373, 378, 381, 386, 395, 400, 402, 406, 428, 454, 455, 461, 518, 522, 526, 533, 622, 628, 633, 634, 637, 638, 639, 665, 666, 708, 738, 751, 777, 830, 876, 877, 932, 960, 964, 967, 976, 984, 985, 988, 999, 1005, 1013, 1014], "2004": [5, 145, 256, 365, 367, 395, 397, 400, 456, 518, 590, 591, 672, 676, 688, 725, 765, 877, 958, 960, 961, 966, 979, 997], "449": [5, 400, 518], "456": [5, 400, 518], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 55, 56, 60, 64, 65, 66, 69, 70, 71, 73, 74, 81, 94, 96, 98, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 175, 176, 178, 181, 183, 184, 185, 187, 188, 189, 190, 196, 197, 198, 200, 201, 203, 204, 211, 212, 213, 214, 217, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 244, 255, 257, 259, 260, 262, 269, 274, 276, 278, 281, 288, 289, 292, 295, 298, 299, 301, 302, 303, 316, 317, 318, 319, 321, 336, 341, 342, 343, 364, 370, 374, 378, 381, 383, 384, 399, 434, 517, 848, 956, 982, 984, 1008], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 56, 74, 81, 154, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 303, 336, 341, 342, 343, 514, 520, 641, 647, 668, 669, 740, 741, 962, 964], "licenc": [5, 364], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 94, 96, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 316, 317, 318, 319, 321, 332, 333, 336, 337, 341, 342, 343, 376], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 94, 96, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 225, 230, 231, 232, 234, 241, 243, 257, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 298, 299, 300, 301, 302, 303, 332, 333, 336, 337, 341, 342, 343], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 56, 60, 61, 65, 72, 74, 77, 78, 79, 84, 85, 95, 100, 109, 110, 112, 120, 121, 124, 125, 140, 151, 154, 155, 161, 163, 165, 166, 174, 175, 176, 177, 178, 180, 186, 189, 191, 194, 198, 199, 200, 202, 210, 215, 220, 234, 241, 246, 247, 250, 253, 256, 262, 281, 282, 297, 299, 303, 306, 309, 312, 319, 328, 342, 343, 352, 359, 362, 365, 366, 367, 370, 375, 379, 382, 383, 392, 393, 395, 396, 398, 401, 402, 403, 407, 424, 432, 434, 435, 436, 445, 447, 448, 458, 465, 466, 467, 472, 479, 495, 498, 502, 509, 510, 516, 519, 524, 525, 527, 531, 532, 535, 536, 537, 540, 541, 542, 543, 545, 546, 547, 548, 549, 562, 563, 565, 571, 572, 573, 574, 594, 608, 610, 622, 633, 634, 637, 638, 639, 641, 642, 647, 648, 652, 655, 659, 663, 670, 674, 678, 680, 686, 687, 689, 701, 706, 708, 716, 718, 723, 727, 731, 732, 734, 737, 738, 739, 743, 752, 774, 775, 776, 782, 783, 807, 809, 818, 820, 826, 827, 830, 841, 842, 845, 846, 849, 850, 851, 854, 855, 856, 857, 858, 859, 861, 866, 867, 869, 870, 871, 872, 876, 877, 889, 890, 891, 892, 917, 918, 922, 940, 941, 946, 947, 953, 958, 960, 961, 962, 963, 966, 970, 975, 977, 979, 980, 995, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "pixel": [5, 6, 13, 32, 47, 48, 53, 94, 107, 132, 143, 163, 172, 229, 254, 294, 295, 367, 395, 400, 402, 403, 404, 476, 477, 478, 547, 568, 569, 590, 591, 617, 967, 969, 980, 995, 998], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 70, 74, 85, 99, 108, 114, 115, 119, 120, 121, 122, 123, 124, 127, 141, 142, 165, 166, 168, 169, 172, 191, 196, 203, 204, 211, 212, 214, 226, 237, 238, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 305, 308, 309, 310, 320, 346, 350, 352, 375, 382, 396, 399, 402, 421, 422, 541, 543, 550, 551, 680, 681, 683, 685, 779, 809, 812, 830, 838, 839, 841, 891, 892, 953, 954, 964, 966, 967, 972, 974, 979, 995, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1018], "data_id": [5, 118, 153, 166, 196, 214, 226, 304, 364, 479], "41082": 5, "return_x_i": [5, 7, 14, 57, 69, 70, 71, 72, 94, 118, 119, 131, 134, 135, 136, 141, 160, 161, 168, 172, 181, 183, 184, 185, 187, 192, 193, 203, 211, 212, 226, 233, 237, 238, 252, 255, 258, 263, 264, 271, 274, 278, 285, 293, 294, 295, 303, 308, 310, 312, 313, 319, 331, 343, 346, 363, 375, 376, 382, 389, 395, 396, 399, 402, 404, 471, 472, 473, 474, 475, 477, 478, 479, 480, 483, 484, 485, 487, 488, 493, 515, 516, 517, 518, 541, 544, 545, 550, 551, 575, 578, 579, 581, 582, 583, 585, 593, 602, 603, 605, 606, 621, 622, 641, 642, 651, 656, 657, 658, 671, 672, 673, 674, 684, 770, 782, 783, 785, 809, 814, 825, 830, 833, 890, 891, 892, 954, 959, 964, 965, 966, 967, 974, 990, 994, 995, 997, 998, 1002, 1011, 1013, 1015, 1018], "idea": [5, 53, 79, 80, 145, 153, 166, 197, 217, 281, 328, 346, 356, 357, 370, 375, 376, 397, 398, 399, 400, 401, 402, 404, 590, 591, 960, 961, 964, 967, 970, 983, 988, 999], "noisi": [5, 33, 49, 61, 95, 141, 148, 154, 195, 198, 200, 220, 228, 247, 257, 263, 265, 266, 303, 348, 349, 352, 395, 403, 406, 428, 433, 504, 507, 918, 959, 961, 967, 979, 984], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 56, 60, 65, 70, 71, 74, 78, 79, 94, 96, 97, 104, 110, 124, 127, 130, 149, 153, 156, 157, 166, 167, 169, 172, 175, 176, 178, 180, 182, 186, 187, 188, 190, 195, 196, 197, 198, 205, 206, 207, 209, 211, 212, 214, 219, 220, 222, 228, 229, 230, 231, 235, 241, 243, 247, 251, 252, 254, 256, 259, 261, 266, 267, 270, 281, 282, 283, 295, 299, 300, 302, 304, 305, 311, 320, 321, 326, 327, 329, 330, 331, 335, 336, 338, 341, 342, 346, 349, 350, 356, 358, 365, 367, 370, 372, 375, 376, 392, 395, 396, 399, 400, 401, 402, 403, 421, 425, 429, 432, 454, 455, 461, 473, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 511, 513, 514, 517, 519, 520, 522, 527, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 593, 614, 615, 616, 622, 623, 624, 625, 629, 630, 631, 632, 635, 636, 641, 642, 643, 644, 645, 646, 648, 650, 652, 654, 663, 664, 667, 671, 672, 673, 674, 676, 728, 777, 778, 781, 805, 806, 811, 816, 817, 818, 820, 821, 822, 826, 838, 839, 857, 859, 862, 871, 953, 954, 957, 961, 964, 965, 971, 974, 976, 990, 994, 998, 999, 1013, 1014, 1015, 1018, 1019], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 60, 61, 66, 74, 85, 94, 95, 97, 99, 102, 110, 112, 121, 125, 126, 147, 148, 153, 158, 163, 175, 177, 178, 180, 185, 186, 191, 194, 195, 198, 199, 201, 213, 220, 222, 225, 227, 228, 231, 256, 264, 269, 270, 288, 292, 293, 300, 305, 309, 335, 348, 349, 352, 366, 372, 375, 393, 395, 400, 402, 404, 406, 428, 435, 494, 496, 497, 498, 499, 500, 501, 505, 507, 508, 513, 515, 517, 524, 590, 591, 594, 596, 597, 598, 599, 600, 604, 605, 607, 608, 627, 628, 632, 633, 634, 636, 637, 638, 639, 646, 647, 648, 654, 662, 675, 858, 870, 876, 957, 959, 960, 961, 964, 967, 977, 997, 998, 1006, 1011, 1016, 1018, 1019], "approach": [5, 8, 57, 62, 65, 98, 145, 148, 160, 166, 169, 178, 184, 196, 198, 204, 214, 217, 304, 341, 342, 343, 358, 369, 370, 376, 379, 383, 386, 389, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 421, 427, 431, 435, 445, 503, 515, 565, 572, 618, 641, 642, 657, 658, 810, 826, 918, 953, 954, 960, 961, 964, 965, 967, 968, 974, 978, 979, 980, 983, 984, 988, 992, 997, 998, 1009], "copi": [5, 12, 17, 44, 61, 74, 97, 112, 160, 161, 166, 167, 168, 182, 189, 202, 212, 214, 218, 276, 316, 317, 319, 321, 342, 347, 357, 367, 370, 372, 374, 375, 376, 381, 383, 418, 421, 424, 426, 427, 428, 430, 432, 437, 442, 465, 466, 467, 468, 483, 485, 493, 515, 516, 517, 518, 524, 531, 536, 537, 542, 544, 545, 555, 573, 580, 590, 591, 593, 594, 611, 613, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 648, 654, 655, 657, 662, 664, 667, 668, 669, 714, 751, 772, 779, 793, 821, 822, 836, 844, 847, 850, 851, 852, 853, 857, 858, 859, 861, 864, 866, 867, 868, 869, 870, 871, 872, 876, 877, 881, 883, 884, 885, 886, 887, 896, 899, 901, 902, 935, 937, 938, 974, 979, 980, 985, 991, 994, 999, 1005, 1008, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "add": [5, 12, 16, 17, 25, 26, 27, 32, 33, 40, 44, 54, 74, 79, 80, 85, 95, 117, 120, 141, 145, 148, 153, 154, 155, 160, 161, 178, 180, 185, 191, 197, 199, 211, 220, 225, 229, 231, 263, 265, 266, 276, 288, 300, 302, 308, 310, 311, 331, 335, 336, 342, 356, 368, 369, 370, 371, 372, 374, 376, 378, 383, 386, 393, 399, 402, 403, 404, 498, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 585, 610, 611, 613, 615, 641, 642, 677, 680, 800, 821, 822, 878, 908, 932, 953, 954, 963, 970, 974, 977, 978, 980, 985, 997, 998, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "corrupt": [5, 102, 180, 202, 213, 381, 837, 960, 972], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 55, 56, 57, 66, 69, 70, 74, 79, 94, 95, 108, 110, 120, 121, 122, 126, 128, 131, 139, 142, 146, 148, 153, 154, 156, 167, 168, 169, 185, 196, 197, 204, 213, 214, 217, 225, 232, 253, 254, 259, 276, 289, 295, 298, 299, 301, 303, 310, 312, 321, 326, 342, 346, 356, 357, 359, 364, 365, 366, 367, 368, 371, 372, 373, 378, 383, 384, 385, 393, 396, 400, 401, 403, 405, 406, 407, 421, 428, 430, 431, 432, 433, 435, 439, 440, 444, 446, 447, 448, 449, 450, 470, 484, 491, 492, 515, 516, 518, 519, 520, 521, 522, 524, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 561, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 590, 591, 593, 594, 599, 600, 601, 604, 607, 615, 616, 618, 619, 628, 629, 631, 633, 634, 635, 637, 638, 639, 647, 652, 654, 655, 656, 657, 658, 663, 665, 666, 668, 669, 670, 673, 675, 687, 700, 708, 717, 718, 719, 721, 723, 737, 738, 739, 775, 779, 781, 782, 783, 785, 786, 788, 793, 797, 798, 799, 805, 811, 812, 815, 823, 824, 825, 827, 829, 831, 832, 833, 838, 839, 843, 846, 853, 854, 856, 860, 862, 870, 873, 874, 876, 877, 878, 883, 884, 885, 886, 887, 889, 890, 891, 892, 904, 912, 932, 933, 953, 955, 956, 958, 959, 961, 964, 965, 966, 967, 968, 969, 970, 971, 974, 976, 977, 978, 979, 980, 983, 984, 985, 986, 988, 994, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016], "solv": [5, 6, 65, 148, 185, 230, 256, 369, 370, 371, 372, 375, 381, 395, 397, 399, 400, 405, 430, 436, 445, 461, 514, 520, 521, 522, 526, 528, 529, 530, 531, 618, 620, 629, 635, 637, 638, 647, 648, 653, 655, 657, 660, 668, 669, 670, 811, 881, 882, 885, 918, 955, 958, 960, 961, 964, 965, 978, 979, 980, 983, 984, 988, 992, 995, 999, 1011, 1015, 1018], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 99, 108, 109, 112, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 210, 211, 212, 214, 226, 233, 237, 238, 243, 245, 250, 253, 254, 259, 263, 265, 269, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 305, 308, 309, 310, 319, 320, 327, 341, 346, 350, 352, 356, 364, 372, 375, 382, 396, 399, 402, 421, 422, 492, 541, 542, 543, 550, 551, 680, 681, 683, 685, 807, 809, 812, 830, 838, 839, 841, 855, 891, 892, 954, 964, 966, 967, 968, 970, 972, 974, 978, 979, 994, 995, 1002], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 99, 108, 109, 112, 114, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 153, 156, 165, 166, 167, 168, 169, 172, 176, 180, 186, 191, 193, 194, 202, 203, 204, 210, 211, 212, 214, 226, 228, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 270, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 305, 308, 309, 310, 319, 320, 327, 341, 346, 348, 349, 350, 352, 356, 364, 372, 375, 382, 396, 399, 402, 422, 453, 454, 455, 456, 457, 458, 459, 492, 541, 542, 543, 550, 551, 680, 681, 683, 685, 807, 809, 812, 830, 838, 839, 841, 855, 891, 892, 954, 964, 966, 967, 968, 970, 974, 978, 979, 994, 995, 997, 1002, 1005], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 99, 108, 109, 112, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 154, 155, 156, 157, 165, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 211, 212, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 305, 308, 309, 310, 316, 317, 319, 320, 321, 341, 346, 350, 352, 356, 364, 372, 375, 382, 396, 399, 402, 421, 422, 541, 542, 543, 550, 551, 680, 681, 683, 685, 807, 809, 812, 830, 838, 839, 841, 891, 892, 954, 964, 966, 967, 972, 974, 979, 994, 995, 1002], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 99, 108, 109, 112, 114, 115, 119, 120, 121, 122, 123, 124, 127, 136, 137, 141, 142, 156, 165, 166, 167, 168, 169, 172, 180, 191, 193, 196, 202, 203, 204, 211, 212, 214, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 305, 308, 309, 310, 319, 320, 341, 346, 350, 352, 364, 375, 382, 396, 399, 402, 422, 541, 542, 543, 550, 551, 680, 681, 683, 685, 807, 809, 812, 830, 838, 839, 841, 891, 892, 964, 966, 967, 974, 979, 994, 995, 1002, 1005], "stratifi": [5, 99, 115, 124, 141, 168, 211, 226, 238, 251, 256, 259, 265, 284, 285, 308, 372, 383, 534, 542, 550, 551, 585, 642, 649, 651, 659, 779, 782, 783, 785, 793, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 812, 815, 830, 838, 935, 964, 967, 994, 1010, 1011, 1012, 1014, 1015, 1018], "train_siz": [5, 7, 10, 127, 149, 172, 212, 231, 258, 269, 310, 313, 336, 781, 785, 796, 799, 805, 807, 959, 994, 1005, 1006, 1011, 1012], "1_000": [5, 48, 71, 99, 148, 153, 155, 167, 229, 253, 684], "rng": [5, 20, 21, 31, 37, 50, 80, 85, 94, 96, 102, 110, 121, 124, 125, 127, 148, 149, 152, 154, 155, 157, 160, 161, 165, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 225, 231, 233, 234, 241, 251, 259, 262, 267, 268, 292, 302, 305, 309, 310, 312, 316, 317, 321, 331, 336, 348, 349, 352, 357, 372, 375, 453, 457, 458, 459, 626, 632, 653, 655, 661, 791, 816, 817, 818, 820, 821, 822, 826, 829, 831, 832, 833, 858, 870, 873, 874, 876, 877, 878, 887, 990], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 60, 80, 81, 85, 94, 96, 102, 110, 120, 121, 124, 125, 127, 141, 148, 149, 152, 154, 155, 157, 160, 161, 165, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 220, 225, 231, 234, 241, 244, 251, 259, 262, 263, 265, 266, 267, 268, 292, 299, 301, 302, 305, 309, 310, 312, 316, 317, 321, 331, 336, 348, 349, 372, 375, 379, 383, 400, 407, 424, 427, 430, 432, 434, 435, 436, 437, 441, 442, 443, 445, 452, 453, 457, 458, 459, 471, 474, 475, 478, 480, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 566, 567, 590, 591, 593, 594, 610, 615, 617, 622, 623, 624, 625, 626, 629, 630, 632, 633, 635, 636, 637, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 657, 659, 660, 661, 662, 670, 672, 673, 674, 675, 676, 677, 678, 684, 763, 773, 777, 778, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 805, 806, 807, 811, 812, 815, 816, 817, 818, 820, 821, 822, 826, 830, 837, 838, 839, 846, 858, 862, 870, 873, 874, 876, 877, 878, 881, 882, 883, 886, 887, 889, 890, 891, 892, 904, 917, 918, 933, 935, 938, 974, 990, 1001], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 97, 214, 267, 363, 372, 373, 382, 383, 399, 558, 994, 995, 1005, 1012, 1013, 1014, 1018], "qualit": [5, 6, 53, 60, 121, 196, 313, 365, 395, 423, 684, 995, 1020], "assess": [5, 37, 59, 119, 121, 166, 196, 214, 234, 252, 253, 255, 259, 393, 402, 684, 725, 963, 964, 970, 985, 1020], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 69, 77, 81, 85, 90, 94, 99, 110, 112, 118, 120, 121, 153, 155, 166, 167, 176, 182, 186, 187, 197, 202, 211, 213, 214, 243, 256, 263, 268, 278, 289, 293, 295, 298, 300, 302, 310, 316, 321, 328, 333, 341, 342, 358, 363, 365, 367, 370, 373, 379, 383, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 425, 427, 429, 430, 432, 441, 442, 446, 458, 479, 481, 521, 523, 530, 538, 539, 540, 544, 545, 547, 565, 572, 573, 585, 590, 591, 633, 637, 638, 639, 641, 642, 662, 665, 666, 728, 782, 783, 797, 806, 809, 838, 839, 846, 874, 883, 886, 918, 953, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 971, 972, 974, 976, 977, 980, 985, 988, 997, 998, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021], "img": [5, 50, 65, 489, 569], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 57, 79, 104, 110, 112, 117, 121, 126, 127, 128, 137, 148, 150, 152, 153, 154, 155, 166, 175, 186, 187, 189, 196, 209, 210, 218, 222, 225, 229, 231, 238, 243, 245, 259, 263, 265, 276, 281, 282, 288, 289, 292, 293, 294, 295, 300, 301, 312, 321, 327, 328, 332, 333, 334, 335, 337, 338, 341, 348, 349, 448, 476, 477, 478, 614, 701, 951, 964], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 57, 81, 88, 94, 97, 105, 150, 151, 152, 156, 169, 187, 212, 218, 233, 267, 280, 295, 316, 317, 328, 334, 337, 364, 615, 680, 995, 996, 1019], "grei": [5, 34, 266, 298, 365], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 77, 81, 84, 94, 218, 230, 233, 250, 255, 257, 258, 298, 317, 321, 328, 338, 341, 365, 370, 372, 395, 397, 402, 404, 426, 536, 537, 542, 543, 571, 574, 617, 639, 675, 698, 777, 778, 779, 782, 783, 793, 804, 922, 963, 969, 979, 985, 1005, 1009, 1010, 1012], "fontsiz": [5, 8, 10, 14, 34, 50, 59, 90, 97, 117, 140, 151, 152, 154, 157, 167, 176, 186, 195, 207, 218, 219, 244, 251, 260, 261, 262, 267, 268, 295, 302, 335, 895], "mse": [5, 7, 77, 78, 121, 122, 160, 161, 196, 198, 202, 270, 630, 636, 732, 964, 980, 1016, 1018], "quantit": [5, 6, 25, 60, 121, 131, 145, 252, 270, 367, 995], "nmse": [5, 270], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 61, 63, 66, 84, 91, 97, 104, 121, 127, 128, 140, 166, 167, 169, 172, 176, 185, 187, 192, 196, 211, 212, 213, 214, 225, 229, 255, 259, 260, 262, 264, 265, 266, 284, 285, 292, 300, 303, 312, 328, 341, 342, 352, 396, 399, 402, 805], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 56, 73, 74, 84, 85, 94, 99, 103, 108, 112, 114, 126, 128, 131, 134, 135, 137, 140, 143, 145, 152, 154, 160, 161, 164, 165, 167, 170, 172, 178, 182, 184, 185, 186, 191, 193, 194, 197, 198, 204, 208, 210, 212, 213, 214, 215, 216, 219, 221, 223, 228, 231, 232, 233, 236, 250, 252, 253, 254, 256, 259, 261, 262, 263, 264, 265, 266, 270, 281, 284, 285, 295, 298, 299, 300, 305, 310, 311, 323, 325, 328, 329, 330, 332, 333, 336, 337, 339, 341, 348, 349, 357, 359, 362, 366, 367, 368, 372, 373, 375, 383, 385, 395, 398, 399, 400, 401, 402, 403, 404, 405, 407, 426, 438, 448, 450, 458, 465, 466, 467, 479, 484, 485, 495, 498, 504, 507, 515, 516, 517, 518, 519, 522, 524, 526, 527, 531, 532, 533, 537, 549, 565, 572, 576, 577, 589, 592, 597, 603, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 670, 671, 672, 673, 674, 675, 676, 684, 690, 699, 732, 735, 747, 749, 756, 767, 779, 790, 794, 804, 807, 821, 822, 826, 830, 837, 838, 839, 842, 847, 848, 851, 854, 856, 858, 859, 860, 861, 870, 874, 881, 882, 883, 884, 885, 886, 887, 953, 955, 956, 957, 959, 964, 967, 968, 969, 970, 971, 972, 978, 979, 984, 986, 988, 990, 993, 994, 999, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019], "radial": [5, 99, 148, 153, 155, 328, 362, 435, 605, 674, 962, 979, 1001], "rbf": [5, 6, 10, 11, 16, 30, 31, 99, 129, 137, 148, 149, 150, 152, 153, 154, 155, 157, 163, 210, 224, 225, 231, 239, 254, 256, 258, 261, 321, 323, 325, 332, 334, 335, 339, 362, 396, 400, 402, 435, 485, 487, 518, 524, 593, 594, 595, 596, 599, 602, 603, 604, 606, 607, 622, 623, 624, 625, 626, 659, 674, 747, 756, 758, 779, 790, 793, 799, 841, 861, 876, 877, 881, 883, 884, 885, 886, 887, 953, 956, 957, 961, 964, 970, 974, 977, 990, 995, 1001, 1011, 1016], "decomposit": [5, 6, 14, 17, 57, 69, 71, 72, 73, 85, 86, 89, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 126, 132, 217, 218, 220, 230, 232, 236, 255, 280, 285, 303, 312, 342, 358, 359, 363, 376, 379, 383, 392, 393, 396, 402, 432, 434, 435, 436, 445, 465, 466, 467, 478, 532, 539, 594, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 655, 656, 657, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 777, 778, 830, 837, 840, 843, 859, 890, 917, 918, 960, 961, 964, 981, 984, 986, 993, 995, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "kernel_pca": [5, 99, 396], "400": [5, 26, 50, 94, 108, 123, 127, 148, 161, 202, 222, 233, 239, 268, 293, 342, 365, 400, 478, 999], "1e": [5, 6, 7, 10, 17, 26, 46, 94, 148, 151, 153, 154, 155, 156, 157, 160, 166, 176, 189, 196, 197, 203, 210, 214, 220, 225, 231, 235, 241, 244, 247, 254, 264, 267, 294, 305, 311, 320, 326, 328, 336, 341, 376, 407, 427, 430, 435, 442, 445, 454, 455, 461, 465, 466, 467, 514, 515, 516, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 542, 543, 544, 545, 575, 580, 594, 596, 597, 598, 602, 603, 605, 606, 608, 610, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 635, 636, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 670, 672, 673, 674, 675, 676, 677, 678, 710, 723, 767, 777, 778, 793, 816, 817, 818, 819, 820, 821, 822, 830, 838, 839, 846, 876, 877, 881, 882, 883, 884, 885, 886, 887, 950, 953, 964, 968, 972, 974, 978, 995, 999, 1013, 1018, 1019, 1020], "fit_inverse_transform": [5, 99, 518, 1014], "5e": [5, 94, 181, 578, 579, 581], "inde": [5, 7, 25, 39, 40, 53, 57, 81, 85, 99, 112, 144, 145, 148, 166, 168, 175, 184, 185, 196, 198, 258, 259, 263, 265, 276, 298, 303, 342, 352, 356, 369, 375, 382, 383, 384, 397, 402, 550, 551, 960, 974, 978, 1019], "least": [5, 14, 79, 80, 83, 86, 97, 119, 122, 145, 156, 163, 174, 175, 189, 196, 198, 201, 204, 213, 214, 215, 229, 256, 274, 303, 310, 311, 328, 342, 343, 356, 363, 365, 367, 369, 370, 374, 376, 378, 381, 383, 384, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 428, 431, 433, 439, 440, 441, 444, 457, 465, 466, 467, 468, 477, 499, 514, 520, 522, 524, 525, 526, 528, 529, 530, 531, 532, 540, 541, 542, 543, 545, 547, 548, 549, 576, 585, 618, 626, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 646, 647, 648, 649, 650, 651, 652, 654, 655, 657, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 675, 680, 695, 699, 701, 767, 780, 784, 785, 791, 793, 794, 795, 797, 798, 800, 802, 805, 806, 807, 838, 839, 842, 853, 861, 886, 889, 890, 891, 892, 910, 927, 954, 957, 961, 964, 967, 976, 978, 979, 980, 985, 986, 988, 997, 1001, 1005, 1007, 1008, 1011, 1012, 1016], "hope": [5, 214, 383, 394, 1014], "remov": [5, 14, 16, 17, 34, 54, 69, 74, 145, 160, 161, 166, 169, 175, 257, 298, 305, 308, 309, 310, 341, 342, 346, 352, 362, 365, 369, 370, 371, 374, 375, 379, 383, 395, 396, 399, 402, 403, 405, 406, 421, 426, 428, 430, 432, 433, 440, 442, 461, 471, 472, 509, 517, 518, 520, 522, 524, 529, 536, 537, 538, 539, 550, 551, 552, 553, 562, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 594, 613, 615, 616, 621, 627, 628, 633, 634, 637, 638, 639, 641, 647, 648, 654, 675, 682, 723, 750, 760, 761, 762, 805, 828, 840, 841, 845, 846, 854, 858, 859, 861, 870, 884, 885, 887, 896, 912, 913, 915, 954, 961, 967, 980, 986, 991, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "think": [5, 37, 167, 341, 342, 370, 401, 963, 985, 987, 988, 990], "happen": [5, 114, 184, 298, 304, 342, 352, 356, 357, 369, 370, 374, 375, 376, 381, 383, 384, 386, 395, 397, 399, 402, 421, 498, 555, 641, 767, 859, 861, 881, 960, 964, 965, 979, 985, 999, 1013, 1017, 1018, 1020, 1021], "ridg": [5, 10, 13, 54, 74, 128, 145, 147, 158, 160, 163, 166, 167, 174, 175, 196, 197, 215, 224, 233, 239, 341, 356, 359, 381, 400, 402, 507, 518, 522, 526, 594, 598, 605, 608, 626, 627, 628, 630, 632, 640, 644, 656, 657, 658, 661, 670, 684, 732, 779, 785, 793, 814, 887, 959, 964, 972, 974, 978, 979, 986, 997, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1018, 1019, 1020], "x_reconstructed_kernel_pca": [5, 99], "inverse_transform": [5, 51, 54, 99, 142, 280, 342, 400, 403, 429, 448, 465, 466, 467, 516, 517, 518, 521, 522, 523, 524, 526, 527, 564, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 613, 779, 782, 783, 793, 841, 845, 846, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 873, 874, 974, 975, 976, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "x_reconstructed_pca": [5, 99], "lower": [5, 16, 26, 30, 31, 33, 57, 78, 85, 94, 96, 102, 108, 109, 112, 117, 121, 124, 148, 150, 152, 154, 156, 167, 168, 181, 182, 186, 196, 197, 198, 199, 209, 217, 221, 228, 229, 233, 243, 247, 255, 256, 258, 259, 263, 264, 266, 269, 280, 282, 283, 300, 303, 312, 319, 328, 334, 341, 342, 343, 347, 365, 370, 393, 394, 395, 398, 399, 400, 401, 402, 403, 406, 428, 431, 447, 450, 481, 492, 515, 517, 524, 527, 536, 542, 543, 544, 545, 546, 571, 572, 574, 586, 594, 596, 597, 598, 600, 602, 603, 605, 606, 608, 615, 616, 618, 620, 660, 662, 695, 699, 707, 710, 716, 721, 777, 778, 827, 829, 831, 832, 833, 835, 862, 883, 884, 885, 888, 905, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 976, 978, 979, 980, 997, 1007, 1008, 1013, 1020], "analysi": [5, 7, 9, 25, 29, 35, 36, 56, 62, 67, 93, 95, 96, 98, 99, 101, 103, 106, 118, 163, 166, 185, 218, 240, 248, 253, 256, 257, 261, 277, 290, 298, 303, 342, 359, 362, 365, 367, 370, 372, 384, 392, 395, 397, 402, 403, 407, 423, 430, 431, 456, 458, 459, 465, 466, 468, 485, 487, 495, 498, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 532, 533, 538, 539, 614, 621, 671, 673, 674, 675, 676, 693, 702, 707, 708, 738, 770, 771, 772, 773, 777, 779, 803, 807, 823, 830, 841, 842, 847, 857, 861, 869, 917, 918, 954, 960, 961, 963, 964, 974, 983, 984, 986, 988, 991, 1000, 1001, 1005, 1006, 1007, 1009, 1014], "favor": [5, 81, 241, 247, 381, 397, 402, 616, 712, 787, 789, 840, 912, 953, 972, 1007, 1009, 1011, 1012, 1014, 1017, 1018, 1019, 1020, 1021], "background": [5, 11, 47, 65, 124, 295, 300, 365, 370, 378, 395, 476, 477, 961, 969, 978, 1015], "058": [5, 15, 254, 328, 339, 367], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 66, 67, 70, 71, 72, 73, 74, 79, 80, 81, 85, 92, 93, 97, 98, 99, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 138, 141, 142, 143, 144, 145, 147, 156, 158, 160, 161, 168, 169, 172, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 195, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 215, 219, 221, 222, 224, 226, 229, 231, 232, 233, 234, 237, 238, 239, 241, 243, 244, 245, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 274, 276, 278, 279, 280, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 322, 323, 324, 326, 328, 329, 330, 331, 332, 336, 337, 338, 339, 342, 343, 345, 346, 348, 349, 350, 351, 352, 357, 358, 359, 372, 373, 374, 376, 382, 383, 385, 386, 389, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 410, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 441, 442, 452, 453, 456, 457, 458, 459, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 529, 532, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 566, 567, 571, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 585, 586, 593, 594, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 611, 614, 615, 616, 617, 618, 621, 622, 623, 626, 628, 629, 630, 632, 634, 635, 636, 638, 640, 641, 642, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 671, 672, 673, 674, 675, 680, 681, 683, 684, 685, 686, 687, 691, 711, 737, 739, 769, 770, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 837, 838, 839, 841, 842, 845, 846, 854, 855, 859, 861, 863, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 901, 902, 906, 907, 953, 954, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 984, 985, 987, 988, 991, 993, 994, 995, 998, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "excerpt": [6, 976, 995], "wild": [6, 363, 476, 477, 491, 492, 995, 1001, 1005], "aka": [6, 292, 341, 381, 403, 435, 519, 521, 523, 527, 530, 564, 565, 598, 605, 634, 635, 637, 638, 639, 641, 642, 645, 649, 650, 651, 653, 659, 660, 661, 723, 848, 852, 854, 960, 968, 978, 990, 995, 1007, 1019], "lfw": [6, 365, 476, 477, 995, 1005], "vi": [6, 8, 365, 682, 995, 1013, 1016], "www": [6, 70, 172, 196, 212, 214, 226, 274, 294, 364, 365, 370, 378, 386, 395, 399, 426, 432, 470, 491, 492, 514, 517, 520, 524, 627, 641, 647, 654, 668, 669, 830, 837, 889, 890, 960, 977, 995], "umass": [6, 19, 365, 995], "edu": [6, 8, 11, 17, 46, 119, 145, 155, 172, 178, 217, 244, 255, 281, 289, 302, 341, 364, 365, 367, 395, 432, 470, 485, 491, 492, 493, 517, 624, 627, 632, 641, 649, 650, 659, 662, 665, 666, 816, 818, 819, 820, 830, 837, 874, 876, 889, 890, 960, 962, 995], "funnel": [6, 476, 477, 995], "tgz": [6, 995], "233mb": [6, 995], "randomizedsearchcv": [6, 70, 148, 257, 264, 310, 352, 382, 558, 953, 964, 978, 984, 995, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020], "fetch_lfw_peopl": [6, 365, 995, 1020], "classification_report": [6, 32, 69, 142, 254, 295, 316, 317, 964, 995, 999, 1007, 1009, 1013, 1014, 1015, 1017, 1021], "confusionmatrixdisplai": [6, 32, 250, 311, 316, 341, 614, 701, 964, 995, 1015, 1016, 1018, 1019, 1020], "standardscal": [6, 10, 31, 44, 49, 57, 61, 70, 72, 85, 105, 128, 166, 175, 184, 185, 187, 196, 212, 214, 226, 227, 235, 236, 238, 253, 263, 284, 285, 292, 300, 303, 308, 309, 311, 312, 313, 328, 331, 352, 358, 370, 372, 375, 379, 382, 396, 399, 415, 449, 450, 550, 633, 634, 637, 638, 639, 647, 648, 659, 661, 841, 842, 845, 858, 872, 881, 882, 883, 884, 886, 887, 954, 961, 968, 974, 978, 979, 981, 995, 1007, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1021], "svc": [6, 16, 25, 27, 30, 31, 32, 69, 73, 129, 135, 137, 143, 163, 172, 230, 232, 236, 250, 254, 256, 258, 261, 262, 263, 266, 267, 271, 300, 308, 310, 319, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 341, 356, 372, 376, 383, 389, 393, 396, 399, 402, 451, 498, 538, 680, 681, 683, 685, 779, 796, 808, 810, 841, 878, 879, 881, 883, 952, 953, 959, 962, 964, 965, 974, 990, 994, 995, 997, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "stat": [6, 8, 10, 69, 79, 100, 145, 148, 169, 253, 256, 264, 268, 281, 310, 316, 317, 367, 379, 382, 397, 457, 575, 578, 579, 581, 582, 583, 587, 588, 589, 592, 665, 666, 783, 791, 793, 889, 890, 920, 953, 960, 974, 995, 1012, 1014, 1018], "loguniform": [6, 148, 264, 953, 995, 1015], "disk": [6, 13, 365, 368, 370, 375, 383, 389, 995], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 60, 61, 63, 69, 71, 80, 84, 91, 95, 96, 109, 120, 122, 124, 127, 130, 135, 142, 145, 149, 150, 151, 156, 166, 175, 177, 189, 190, 193, 196, 197, 203, 213, 218, 219, 225, 229, 235, 238, 241, 242, 243, 245, 246, 251, 252, 254, 256, 257, 260, 261, 265, 274, 289, 301, 308, 311, 312, 317, 324, 331, 341, 349, 350, 352, 356, 357, 363, 364, 365, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 389, 392, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 498, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 564, 565, 566, 567, 569, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 898, 899, 901, 902, 903, 906, 907, 915, 916, 917, 918, 919, 920, 922, 923, 924, 926, 927, 928, 935, 936, 937, 938, 939, 940, 941, 942, 950, 951, 954, 959, 960, 962, 964, 965, 967, 968, 970, 971, 974, 975, 976, 978, 979, 980, 983, 988, 994, 995, 996, 997, 998, 999, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "lfw_peopl": [6, 365, 995], "min_faces_per_person": [6, 365, 477, 995], "resiz": [6, 46, 47, 235, 365, 476, 477, 995], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 69, 74, 77, 78, 79, 80, 81, 85, 91, 94, 95, 99, 102, 108, 109, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 136, 137, 144, 145, 157, 160, 161, 165, 175, 177, 178, 180, 182, 184, 186, 188, 190, 191, 195, 196, 197, 199, 200, 204, 208, 211, 213, 214, 217, 218, 219, 220, 221, 222, 225, 229, 230, 242, 244, 245, 246, 247, 253, 254, 256, 259, 260, 263, 265, 266, 267, 268, 269, 270, 276, 286, 300, 301, 302, 305, 309, 310, 312, 318, 326, 329, 330, 336, 341, 342, 352, 363, 367, 370, 372, 375, 379, 381, 382, 383, 395, 397, 398, 399, 400, 402, 406, 407, 408, 410, 412, 413, 414, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 484, 487, 491, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 604, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 752, 753, 754, 755, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 906, 907, 918, 920, 922, 926, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 953, 956, 960, 964, 965, 967, 968, 974, 975, 976, 978, 979, 980, 990, 995, 996, 997, 998, 999, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 57, 63, 101, 104, 160, 180, 195, 200, 213, 232, 241, 242, 243, 246, 247, 267, 295, 311, 312, 333, 336, 343, 352, 365, 367, 376, 389, 395, 396, 400, 402, 403, 407, 412, 416, 421, 448, 452, 455, 457, 465, 466, 467, 506, 521, 523, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 571, 572, 574, 593, 594, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 676, 682, 707, 708, 738, 779, 793, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 832, 838, 839, 874, 876, 877, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 915, 920, 960, 964, 968, 969, 974, 976, 978, 979, 995, 999, 1015, 1019, 1020, 1021], "info": [6, 42, 70, 94, 166, 167, 254, 367, 369, 374, 383, 403, 995], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 57, 59, 60, 77, 78, 79, 80, 81, 84, 90, 91, 94, 102, 109, 111, 113, 115, 142, 144, 145, 160, 161, 172, 175, 178, 180, 182, 190, 191, 195, 199, 200, 211, 213, 218, 225, 229, 230, 241, 246, 253, 259, 263, 265, 266, 268, 269, 286, 292, 300, 308, 309, 310, 312, 336, 341, 342, 343, 352, 356, 363, 364, 370, 372, 375, 381, 382, 383, 395, 397, 398, 400, 402, 403, 406, 407, 408, 410, 412, 413, 414, 416, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 477, 484, 487, 491, 492, 495, 498, 499, 502, 504, 506, 507, 509, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 693, 707, 740, 741, 742, 743, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 918, 939, 940, 941, 942, 943, 944, 945, 956, 960, 965, 967, 968, 974, 978, 979, 980, 990, 995, 996, 998, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "id": [6, 19, 214, 289, 350, 364, 365, 370, 378, 397, 399, 403, 477, 478, 479, 893, 895, 913, 995, 999, 1013, 1014, 1017], "person": [6, 259, 365, 369, 399, 403, 476, 477, 478, 974, 995, 1013], "target_nam": [6, 19, 52, 98, 103, 165, 205, 218, 243, 250, 257, 265, 266, 279, 304, 320, 341, 347, 363, 365, 471, 472, 474, 475, 476, 477, 479, 480, 483, 485, 486, 487, 488, 493, 696, 964, 980, 990, 995, 999, 1015], "n_class": [6, 30, 37, 90, 91, 109, 111, 115, 117, 142, 144, 211, 218, 230, 232, 243, 263, 264, 265, 285, 286, 308, 347, 352, 370, 372, 383, 402, 421, 471, 472, 485, 498, 502, 506, 532, 533, 534, 536, 538, 540, 542, 544, 547, 550, 552, 576, 577, 587, 593, 617, 622, 641, 642, 649, 650, 651, 657, 658, 659, 660, 680, 690, 699, 701, 717, 720, 723, 736, 770, 774, 779, 782, 783, 793, 802, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 823, 828, 830, 831, 838, 841, 848, 849, 852, 855, 865, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 891, 906, 907, 960, 964, 965, 968, 975, 978, 979, 987, 995, 1010, 1011, 1012, 1014, 1015, 1016], "1288": [6, 365], "1850": [6, 365], "scaler": [6, 70, 72, 163, 212, 230, 236, 238, 284, 297, 303, 306, 313, 328, 331, 352, 375, 396, 399, 473, 641, 642, 655, 657, 670, 841, 850, 851, 853, 857, 858, 859, 861, 866, 867, 868, 869, 870, 871, 872, 968, 974, 978, 995, 1005, 1010, 1013, 1018], "unlabel": [6, 232, 310, 316, 317, 318, 320, 321, 383, 394, 395, 876, 877, 878, 963, 990, 993, 995, 997, 1017], "unsupervis": [6, 12, 37, 49, 71, 72, 85, 94, 114, 126, 225, 232, 282, 283, 327, 341, 342, 352, 359, 362, 365, 372, 382, 383, 394, 395, 398, 400, 401, 402, 403, 417, 426, 429, 515, 517, 519, 520, 522, 525, 526, 532, 546, 549, 550, 552, 553, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 611, 613, 617, 618, 621, 622, 623, 624, 625, 660, 724, 779, 782, 783, 785, 793, 805, 808, 823, 824, 827, 829, 830, 831, 832, 837, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 862, 873, 874, 878, 885, 961, 964, 970, 977, 986, 990, 991, 993, 995, 1001, 1005, 1008, 1018], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 56, 57, 61, 68, 70, 72, 73, 75, 84, 85, 91, 94, 102, 109, 114, 126, 136, 137, 148, 150, 151, 155, 163, 192, 197, 213, 216, 218, 219, 221, 223, 225, 229, 230, 232, 242, 243, 277, 280, 290, 300, 325, 341, 352, 356, 362, 365, 366, 367, 370, 379, 383, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 429, 430, 432, 448, 452, 456, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 487, 488, 493, 498, 502, 515, 517, 518, 521, 522, 523, 524, 527, 530, 532, 546, 549, 556, 582, 590, 614, 623, 624, 625, 635, 671, 672, 673, 674, 675, 676, 677, 679, 682, 693, 707, 777, 778, 779, 807, 821, 822, 823, 826, 829, 830, 837, 841, 842, 845, 851, 856, 861, 873, 874, 875, 881, 885, 918, 950, 955, 956, 959, 960, 965, 966, 970, 976, 977, 978, 979, 980, 986, 988, 990, 991, 993, 995, 996, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1017, 1020], "reduct": [6, 19, 54, 56, 68, 72, 75, 85, 94, 112, 126, 163, 216, 218, 219, 223, 229, 232, 277, 290, 312, 325, 352, 356, 362, 394, 395, 396, 398, 400, 402, 404, 451, 465, 466, 467, 468, 485, 513, 515, 517, 518, 521, 522, 523, 524, 527, 530, 532, 536, 537, 540, 541, 542, 543, 547, 548, 549, 582, 590, 641, 642, 671, 672, 673, 674, 675, 676, 763, 779, 807, 823, 830, 837, 841, 842, 851, 861, 879, 881, 889, 890, 891, 892, 956, 961, 976, 980, 985, 986, 988, 995, 1001, 1006, 1007, 1008, 1011, 1019, 1020, 1021], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 61, 63, 70, 90, 96, 114, 117, 128, 131, 166, 196, 198, 207, 211, 225, 234, 235, 241, 243, 244, 247, 253, 257, 265, 266, 281, 298, 300, 304, 309, 316, 317, 328, 341, 352, 368, 370, 376, 381, 392, 393, 395, 400, 401, 402, 470, 570, 571, 574, 582, 708, 738, 774, 893, 895, 953, 956, 960, 962, 972, 988, 995, 998, 999, 1019], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 57, 61, 63, 97, 182, 211, 212, 213, 219, 222, 225, 229, 231, 257, 341, 342, 343, 659, 660, 661, 995], "svd_solver": [6, 94, 102, 400, 518, 524, 995, 1011], "whiten": [6, 94, 95, 96, 280, 400, 407, 516, 517, 524, 859, 861, 995, 1009, 1011, 1019, 1020], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 97, 142, 145, 153, 166, 167, 172, 175, 182, 213, 231, 246, 254, 257, 260, 265, 276, 301, 310, 341, 342, 343, 352, 357, 364, 368, 370, 372, 374, 377, 378, 379, 381, 383, 395, 397, 399, 400, 402, 425, 426, 429, 433, 435, 455, 465, 466, 467, 468, 472, 518, 544, 545, 565, 589, 611, 613, 615, 617, 626, 627, 628, 642, 723, 777, 778, 779, 793, 798, 799, 845, 859, 949, 953, 954, 957, 960, 961, 964, 966, 967, 968, 974, 977, 978, 979, 980, 985, 990, 994, 995, 997, 999, 1005, 1007, 1012, 1015, 1017], "components_": [6, 14, 57, 85, 94, 96, 97, 100, 105, 229, 230, 295, 303, 312, 383, 396, 400, 428, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 527, 622, 830, 837, 873, 874, 976, 995, 1009, 1011, 1017, 1020], "project": [6, 8, 11, 13, 17, 45, 57, 66, 89, 93, 94, 96, 98, 100, 101, 106, 163, 167, 193, 217, 218, 219, 221, 224, 230, 232, 239, 280, 285, 289, 325, 342, 356, 359, 362, 364, 368, 369, 375, 376, 379, 383, 384, 386, 392, 398, 400, 401, 407, 424, 434, 435, 445, 457, 465, 466, 467, 468, 472, 485, 487, 514, 516, 517, 518, 520, 522, 524, 525, 526, 527, 531, 532, 556, 565, 572, 624, 625, 632, 655, 657, 671, 674, 678, 679, 811, 830, 858, 873, 874, 875, 917, 918, 958, 960, 961, 962, 965, 967, 968, 970, 977, 980, 982, 987, 988, 990, 995, 998, 1001, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "orthonorm": [6, 379, 917, 995], "x_train_pca": [6, 995], "x_test_pca": [6, 99, 995], "966": 6, "283": [6, 332, 339], "012": [6, 12, 15, 169, 172, 342], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 55, 69, 70, 71, 72, 99, 108, 110, 111, 113, 115, 116, 117, 120, 126, 129, 130, 141, 142, 144, 163, 168, 172, 174, 186, 187, 188, 194, 203, 205, 208, 211, 215, 225, 230, 237, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 271, 273, 275, 278, 279, 284, 285, 287, 292, 295, 300, 310, 311, 315, 316, 317, 319, 320, 322, 323, 324, 327, 329, 330, 331, 336, 337, 338, 339, 343, 365, 367, 370, 372, 375, 381, 383, 395, 396, 399, 403, 404, 405, 412, 419, 421, 422, 423, 471, 472, 479, 487, 495, 497, 498, 505, 514, 519, 520, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 576, 577, 585, 589, 593, 605, 612, 614, 615, 616, 632, 641, 642, 649, 651, 654, 655, 656, 657, 658, 659, 680, 681, 683, 685, 686, 690, 691, 692, 695, 696, 701, 703, 708, 709, 711, 712, 716, 717, 720, 721, 722, 723, 724, 725, 736, 738, 764, 765, 766, 769, 770, 771, 774, 776, 779, 782, 783, 785, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 828, 829, 831, 832, 837, 838, 839, 841, 842, 848, 861, 862, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 910, 912, 953, 954, 956, 959, 960, 961, 964, 965, 966, 969, 972, 974, 977, 978, 979, 984, 985, 986, 988, 990, 991, 993, 994, 995, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "1e3": [6, 7, 10, 148, 154, 160, 231, 267, 953, 995], "1e5": [6, 153, 177, 179, 186, 267, 596, 597, 598, 602, 603, 605, 606, 608, 870, 875, 976, 995, 997], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 57, 62, 70, 89, 100, 101, 113, 120, 123, 124, 129, 134, 137, 141, 142, 144, 150, 152, 169, 186, 188, 189, 193, 194, 200, 203, 205, 208, 209, 210, 212, 220, 226, 227, 230, 232, 234, 238, 245, 253, 257, 261, 262, 264, 267, 268, 279, 282, 283, 284, 287, 292, 300, 303, 308, 309, 310, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 341, 346, 347, 350, 356, 365, 382, 383, 389, 396, 399, 402, 404, 422, 532, 533, 536, 538, 540, 542, 544, 546, 547, 550, 576, 577, 580, 615, 617, 621, 622, 623, 624, 625, 627, 628, 631, 635, 641, 642, 643, 644, 645, 649, 651, 652, 655, 656, 657, 658, 659, 660, 663, 680, 681, 683, 685, 770, 779, 782, 783, 793, 809, 810, 811, 813, 816, 817, 818, 819, 820, 827, 828, 838, 881, 883, 885, 886, 889, 893, 895, 954, 956, 960, 964, 965, 967, 968, 970, 971, 978, 979, 980, 990, 994, 995, 999], "class_weight": [6, 330, 383, 540, 544, 547, 641, 642, 649, 651, 657, 658, 659, 660, 881, 883, 884, 885, 886, 887, 888, 889, 891, 953, 978, 979, 995, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1019, 1020], "n_iter": [6, 17, 70, 148, 175, 204, 217, 218, 222, 257, 264, 276, 295, 330, 372, 376, 382, 407, 437, 461, 515, 516, 520, 522, 527, 528, 529, 530, 627, 628, 629, 630, 635, 636, 643, 644, 645, 646, 664, 665, 666, 667, 668, 669, 670, 675, 677, 782, 783, 791, 793, 837, 839, 917, 918, 953, 978, 995, 1006, 1011, 1012, 1013, 1017, 1019, 1020, 1021], "found": [6, 19, 20, 21, 105, 115, 144, 148, 152, 154, 156, 200, 232, 254, 257, 258, 259, 303, 308, 311, 313, 328, 343, 356, 358, 364, 367, 369, 370, 372, 381, 383, 384, 392, 395, 398, 399, 400, 402, 403, 405, 418, 425, 428, 429, 442, 455, 540, 541, 542, 543, 547, 548, 571, 573, 593, 594, 611, 619, 630, 634, 636, 638, 644, 646, 648, 654, 655, 657, 659, 661, 670, 671, 695, 702, 779, 782, 783, 793, 818, 823, 824, 830, 852, 854, 855, 889, 890, 891, 892, 896, 948, 952, 953, 956, 960, 961, 963, 965, 966, 967, 968, 974, 978, 979, 980, 985, 987, 990, 995, 999, 1005, 1008, 1009, 1012, 1013, 1015, 1019], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 60, 70, 71, 73, 77, 81, 117, 119, 126, 152, 163, 165, 166, 167, 185, 214, 222, 230, 231, 235, 241, 246, 249, 253, 255, 257, 260, 261, 272, 274, 278, 280, 281, 289, 295, 300, 301, 303, 325, 328, 334, 341, 372, 377, 381, 383, 390, 396, 399, 401, 402, 403, 405, 431, 444, 447, 455, 481, 485, 498, 505, 614, 615, 616, 630, 633, 636, 637, 639, 642, 644, 646, 659, 696, 710, 724, 767, 770, 779, 782, 783, 790, 793, 795, 807, 808, 886, 957, 959, 964, 967, 971, 985, 990, 991, 993, 995, 997, 1001, 1005, 1008, 1009, 1010, 1012, 1013, 1019], "search": [6, 46, 54, 70, 71, 72, 73, 121, 142, 148, 163, 214, 231, 246, 249, 257, 260, 261, 268, 272, 276, 278, 280, 295, 300, 313, 328, 341, 352, 359, 367, 368, 370, 372, 381, 383, 390, 395, 396, 399, 402, 403, 404, 405, 406, 427, 431, 433, 435, 440, 441, 444, 447, 454, 455, 461, 485, 498, 505, 540, 541, 542, 543, 547, 548, 549, 562, 582, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 611, 636, 659, 671, 672, 675, 676, 696, 710, 767, 770, 779, 782, 783, 790, 791, 793, 795, 807, 808, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 886, 889, 890, 891, 892, 923, 952, 957, 959, 961, 964, 967, 968, 978, 984, 985, 990, 991, 993, 995, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1020], "best_estimator_": [6, 54, 72, 73, 77, 102, 231, 246, 257, 260, 280, 779, 782, 783, 793, 953, 994, 995, 1012], "157": [6, 376], "76823": 6, "03433306453": 6, "003418945823095797": 6, "from_estim": [6, 25, 27, 31, 55, 111, 114, 124, 125, 129, 167, 179, 188, 205, 231, 235, 237, 250, 253, 258, 259, 263, 266, 279, 284, 287, 303, 308, 309, 310, 311, 313, 324, 325, 326, 329, 330, 347, 377, 393, 616, 701, 709, 764, 766, 769, 770, 771, 959, 964, 971, 995, 1002, 1018, 1019, 1020, 1021], "display_label": [6, 250, 680, 995, 1017], "xticks_rot": [6, 680, 995], "vertic": [6, 17, 59, 120, 169, 185, 229, 230, 260, 274, 298, 301, 333, 335, 383, 392, 395, 400, 498, 680, 763, 995], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 64, 72, 74, 85, 94, 95, 105, 111, 115, 117, 122, 126, 128, 130, 150, 152, 157, 160, 165, 166, 168, 169, 175, 176, 186, 194, 196, 204, 207, 211, 214, 217, 230, 234, 251, 252, 268, 274, 276, 278, 288, 299, 300, 301, 302, 303, 308, 312, 326, 342, 346, 347, 995], "055": [6, 367, 964], "precis": [6, 25, 32, 69, 74, 81, 94, 142, 154, 155, 163, 172, 226, 249, 250, 254, 272, 295, 298, 316, 317, 370, 372, 383, 392, 393, 394, 395, 397, 400, 402, 427, 452, 453, 454, 455, 456, 457, 458, 459, 461, 487, 506, 515, 517, 524, 527, 627, 628, 629, 631, 633, 634, 635, 637, 638, 639, 652, 655, 657, 663, 665, 666, 670, 683, 689, 690, 691, 696, 709, 711, 712, 713, 721, 745, 764, 765, 766, 769, 770, 777, 778, 807, 810, 821, 822, 827, 842, 861, 865, 881, 886, 893, 895, 918, 958, 960, 967, 968, 979, 980, 995, 999, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "recal": [6, 25, 32, 69, 99, 142, 163, 226, 249, 254, 272, 295, 316, 317, 370, 383, 395, 487, 587, 683, 689, 690, 691, 695, 696, 709, 711, 712, 713, 764, 765, 766, 769, 770, 807, 810, 842, 861, 865, 881, 960, 980, 995, 999, 1008, 1009, 1012, 1014, 1015, 1017, 1018, 1019, 1021], "f1": [6, 25, 32, 69, 142, 254, 295, 316, 317, 320, 399, 696, 711, 712, 720, 765, 964, 965, 995, 999, 1009, 1021], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 69, 71, 107, 113, 119, 127, 132, 141, 142, 167, 197, 206, 207, 208, 214, 230, 231, 237, 250, 254, 261, 263, 276, 295, 298, 302, 312, 316, 317, 320, 321, 324, 325, 328, 329, 331, 333, 336, 339, 356, 357, 358, 359, 364, 368, 370, 372, 374, 375, 376, 377, 379, 380, 382, 383, 384, 395, 399, 400, 403, 405, 421, 424, 433, 435, 436, 447, 449, 450, 452, 457, 470, 479, 495, 521, 523, 524, 527, 530, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 596, 597, 598, 600, 602, 603, 605, 606, 608, 610, 614, 615, 616, 626, 628, 640, 641, 642, 653, 654, 655, 657, 658, 659, 660, 661, 670, 673, 677, 690, 696, 711, 712, 720, 725, 750, 760, 761, 762, 765, 766, 769, 770, 779, 782, 783, 785, 793, 804, 805, 813, 814, 819, 821, 822, 825, 827, 828, 833, 841, 842, 846, 852, 854, 855, 857, 861, 869, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 897, 907, 912, 913, 952, 953, 954, 956, 957, 958, 960, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 978, 980, 982, 984, 985, 986, 988, 990, 993, 995, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "ariel": [6, 365, 1005, 1011], "sharon": [6, 365], "69": [6, 8, 50, 187, 303, 317, 395, 454, 455, 590, 591, 738, 964, 974, 997], "colin": [6, 365, 1011], "powel": [6, 365], "87": [6, 32, 69, 157, 254, 295, 317, 580, 650, 770, 779, 857, 869, 964, 999], "donald": [6, 365, 395, 707, 954], "rumsfeld": [6, 365], "63": [6, 295, 367, 402, 540, 541, 548, 549, 708, 779, 793, 891, 892, 964], "georg": [6, 365, 395, 1011, 1017, 1018, 1019, 1020], "bush": [6, 365], "95": [6, 14, 30, 32, 44, 52, 56, 66, 90, 100, 101, 117, 121, 155, 166, 175, 196, 198, 203, 214, 243, 244, 247, 256, 257, 281, 289, 295, 300, 304, 312, 317, 328, 352, 402, 510, 615, 616, 619, 630, 644, 730, 878, 960, 964, 965, 977, 999, 1008], "91": [6, 8, 32, 51, 153, 295, 316, 317, 402, 959, 995, 999], "146": [6, 402], "gerhard": [6, 365], "schroeder": [6, 365], "hugo": [6, 365, 1011, 1016, 1017, 1018, 1019], "chavez": [6, 365], "90": [6, 8, 10, 14, 32, 73, 104, 105, 120, 121, 122, 142, 153, 169, 176, 187, 193, 195, 198, 203, 214, 241, 265, 267, 295, 300, 304, 316, 317, 352, 356, 370, 376, 399, 546, 763, 779, 805, 810, 862, 959, 964, 995, 999, 1020], "toni": [6, 365, 546, 861, 970, 1018, 1019], "blair": [6, 365], "93": [6, 32, 196, 238, 254, 295, 317, 341, 367, 770, 779, 805, 889, 959, 964, 995, 999], "83": [6, 30, 34, 39, 69, 295, 316, 367, 372, 405, 690, 768, 964, 995, 999, 1008], "322": [6, 90, 103, 106, 454, 455], "macro": [6, 32, 69, 142, 254, 295, 308, 316, 317, 365, 399, 690, 696, 711, 712, 720, 765, 766, 769, 770, 964, 999, 1005, 1013, 1021], "avg": [6, 32, 69, 142, 254, 295, 316, 317, 552, 687, 696, 964, 995, 999, 1021], "weight": [6, 13, 14, 19, 24, 32, 54, 69, 105, 109, 121, 129, 130, 141, 142, 153, 161, 163, 166, 174, 185, 187, 196, 200, 201, 210, 211, 212, 214, 215, 236, 241, 254, 259, 263, 265, 279, 288, 291, 292, 295, 296, 303, 305, 308, 311, 316, 317, 323, 330, 339, 341, 342, 343, 352, 366, 367, 379, 381, 383, 395, 397, 398, 400, 401, 404, 406, 412, 416, 421, 424, 427, 428, 430, 432, 436, 442, 443, 446, 447, 448, 450, 452, 457, 465, 466, 467, 479, 498, 507, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 569, 572, 573, 574, 576, 580, 585, 586, 593, 594, 611, 617, 618, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 672, 676, 680, 681, 682, 683, 685, 686, 690, 691, 692, 695, 696, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 716, 717, 718, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 751, 764, 765, 766, 767, 769, 770, 771, 774, 775, 776, 777, 778, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 843, 846, 860, 861, 862, 876, 877, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 906, 907, 920, 939, 945, 954, 955, 960, 961, 963, 964, 966, 967, 968, 969, 971, 974, 977, 978, 979, 980, 985, 990, 997, 999, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "85": [6, 16, 17, 32, 50, 69, 97, 142, 211, 214, 267, 295, 317, 352, 402, 423, 483, 538, 539, 580, 635, 641, 727, 735, 770, 779, 805, 964, 965, 995, 1005], "plot_galleri": [6, 94, 995], "n_row": [6, 19, 94, 392, 410, 434, 436, 494, 496, 995], "n_col": [6, 19, 94, 233, 410, 434, 436, 494, 496, 615, 995], "portrait": [6, 400, 995], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 66, 77, 81, 84, 88, 89, 90, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 108, 109, 110, 111, 112, 119, 120, 121, 122, 123, 126, 127, 131, 134, 135, 137, 140, 141, 144, 149, 150, 151, 152, 155, 156, 161, 166, 167, 168, 175, 181, 186, 189, 190, 193, 195, 197, 198, 200, 202, 207, 210, 211, 212, 213, 219, 220, 221, 225, 229, 230, 231, 232, 233, 235, 241, 243, 244, 247, 250, 255, 260, 261, 270, 281, 285, 286, 289, 292, 295, 298, 300, 301, 305, 308, 310, 316, 317, 318, 326, 328, 332, 333, 347, 348, 349, 370, 395, 401, 402, 403, 405, 422, 614, 615, 680, 681, 683, 684, 685, 785, 895, 953, 957, 960, 963, 964, 967, 968, 971, 978, 979, 980, 995, 997, 998, 1018], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 61, 63, 79, 81, 90, 91, 96, 97, 104, 109, 111, 112, 128, 166, 195, 196, 211, 214, 225, 232, 241, 243, 244, 247, 251, 267, 269, 281, 289, 292, 295, 300, 310, 317, 325, 328, 995], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 61, 63, 90, 91, 119, 126, 131, 196, 207, 225, 241, 243, 244, 247, 253, 256, 267, 281, 298, 317, 319, 328, 370, 393, 395, 401, 570, 893, 958, 960, 964, 985, 995, 998], "left": [6, 7, 12, 13, 14, 16, 24, 33, 39, 42, 44, 45, 51, 61, 63, 71, 74, 80, 81, 90, 91, 96, 97, 109, 112, 114, 115, 118, 121, 128, 130, 151, 157, 161, 166, 181, 189, 196, 197, 198, 200, 207, 209, 210, 213, 214, 225, 229, 232, 234, 235, 241, 243, 244, 247, 252, 253, 254, 255, 257, 265, 266, 268, 281, 282, 289, 292, 295, 298, 312, 317, 327, 328, 350, 370, 372, 374, 392, 395, 398, 399, 401, 402, 403, 405, 455, 465, 466, 467, 468, 476, 481, 532, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 570, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 618, 622, 626, 634, 638, 777, 778, 779, 782, 783, 786, 793, 854, 861, 889, 890, 891, 892, 893, 905, 918, 935, 938, 953, 956, 958, 960, 962, 964, 966, 971, 976, 978, 980, 994, 995, 997, 998, 1012, 1014, 1019], "01": [6, 8, 10, 13, 15, 16, 22, 28, 35, 40, 44, 51, 61, 67, 75, 86, 92, 94, 96, 97, 106, 112, 119, 120, 122, 125, 126, 132, 145, 146, 153, 157, 166, 167, 170, 177, 180, 187, 203, 208, 209, 214, 215, 217, 218, 225, 229, 230, 231, 235, 239, 243, 247, 250, 255, 256, 257, 261, 263, 264, 272, 281, 290, 293, 298, 309, 314, 322, 330, 339, 348, 349, 351, 365, 367, 375, 395, 404, 432, 454, 498, 515, 522, 526, 578, 579, 581, 625, 629, 637, 641, 661, 679, 698, 779, 793, 875, 933, 960, 964, 968, 974, 976, 978, 995, 999], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 59, 61, 63, 78, 79, 81, 90, 91, 96, 97, 99, 102, 104, 108, 109, 111, 112, 113, 121, 122, 123, 130, 141, 148, 151, 161, 186, 197, 198, 199, 200, 202, 203, 206, 207, 225, 228, 229, 241, 243, 244, 246, 247, 251, 252, 256, 259, 263, 266, 267, 269, 281, 289, 292, 295, 298, 300, 303, 317, 328, 330, 336, 338, 341, 347, 350, 352, 359, 370, 381, 384, 392, 395, 398, 400, 401, 402, 405, 447, 465, 466, 467, 468, 517, 524, 527, 540, 541, 542, 543, 544, 545, 547, 548, 549, 570, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 618, 659, 661, 846, 889, 890, 891, 892, 893, 905, 918, 953, 956, 958, 960, 962, 964, 966, 967, 971, 976, 978, 979, 980, 984, 985, 988, 991, 995, 997, 998, 1007, 1013, 1019, 1021], "99": [6, 25, 32, 44, 51, 61, 94, 214, 225, 229, 241, 243, 254, 257, 295, 298, 317, 357, 363, 367, 374, 399, 402, 403, 475, 630, 644, 654, 770, 828, 933, 959, 964, 974, 978, 995, 1001, 1007], "hspace": [6, 13, 14, 44, 45, 61, 94, 214, 225, 241, 243, 244, 247, 281, 310, 317, 325, 995], "grai": [6, 13, 46, 47, 50, 51, 53, 94, 97, 123, 194, 196, 214, 229, 232, 233, 263, 294, 367, 400, 476, 477, 485, 504, 995, 998, 1016], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 97, 119, 122, 135, 141, 150, 151, 152, 156, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 251, 270, 280, 289, 295, 316, 328, 332, 333, 334, 341, 995], "portion": [6, 8, 80, 265, 356, 365, 367, 370, 376, 383, 770, 802, 819, 953, 963, 967, 995, 999], "pred_nam": [6, 995], "rsplit": [6, 17, 257, 995], "true_nam": [6, 995], "ntrue": [6, 316, 317, 995], "prediction_titl": [6, 995], "signif": [6, 995], "eigenface_titl": [6, 995], "convolut": [6, 156, 995], "network": [6, 294, 356, 357, 358, 359, 364, 365, 381, 383, 384, 389, 395, 400, 402, 407, 479, 516, 518, 550, 551, 679, 723, 838, 839, 932, 960, 962, 964, 978, 980, 984, 986, 995, 1000, 1001, 1005, 1019], "famili": [6, 356, 358, 383, 395, 398, 400, 402, 403, 404, 575, 578, 579, 581, 582, 583, 589, 838, 839, 857, 869, 960, 974, 978, 995, 997, 1009, 1019], "outsid": [6, 9, 19, 117, 197, 198, 228, 238, 381, 403, 618, 860, 970, 995, 1013], "scope": [6, 19, 356, 358, 370, 381, 403, 984, 985, 995], "scikit": [6, 8, 10, 12, 16, 17, 31, 32, 34, 50, 69, 84, 111, 114, 128, 142, 145, 157, 161, 163, 166, 184, 185, 188, 205, 214, 224, 237, 238, 249, 253, 272, 276, 281, 283, 305, 307, 314, 333, 341, 342, 346, 347, 352, 357, 358, 359, 362, 364, 365, 366, 367, 369, 370, 373, 376, 377, 378, 379, 382, 383, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 416, 417, 422, 427, 430, 433, 440, 442, 447, 448, 450, 451, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 495, 498, 507, 521, 544, 545, 547, 548, 550, 559, 564, 565, 566, 568, 569, 572, 582, 585, 594, 609, 611, 613, 615, 617, 621, 623, 629, 631, 635, 641, 652, 663, 671, 683, 684, 685, 700, 730, 760, 761, 762, 770, 779, 780, 781, 782, 783, 784, 785, 793, 796, 797, 798, 799, 800, 807, 809, 810, 823, 825, 842, 844, 846, 848, 851, 853, 854, 855, 856, 860, 861, 865, 878, 879, 881, 886, 890, 912, 913, 930, 931, 953, 954, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 974, 977, 978, 979, 980, 983, 987, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "librari": [6, 256, 311, 313, 348, 352, 362, 364, 365, 368, 369, 370, 371, 376, 381, 382, 383, 386, 391, 641, 881, 882, 883, 884, 886, 887, 932, 960, 964, 979, 980, 984, 985, 988, 995, 999, 1003, 1008, 1012, 1013, 1014, 1015, 1016, 1018], "reader": [6, 42, 311, 358, 370, 995], "pytorch": [6, 381, 984, 985, 995, 1021], "tensorflow": [6, 381, 984, 995], "implement": [6, 7, 13, 16, 17, 46, 55, 80, 94, 161, 172, 181, 185, 210, 214, 217, 225, 231, 254, 256, 265, 276, 278, 281, 301, 308, 309, 310, 311, 312, 341, 343, 356, 357, 358, 364, 365, 367, 368, 370, 371, 372, 375, 376, 378, 379, 383, 386, 389, 391, 392, 394, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 421, 426, 427, 428, 430, 431, 432, 433, 458, 476, 479, 491, 515, 516, 517, 518, 519, 521, 524, 525, 526, 536, 537, 538, 540, 541, 544, 545, 546, 550, 555, 565, 571, 572, 574, 576, 580, 584, 593, 594, 615, 616, 623, 624, 628, 629, 636, 640, 641, 642, 646, 647, 651, 654, 655, 657, 658, 659, 660, 661, 667, 668, 669, 670, 671, 674, 675, 678, 690, 694, 703, 717, 720, 760, 764, 770, 771, 777, 779, 782, 783, 785, 793, 797, 798, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 816, 817, 818, 819, 820, 823, 824, 826, 829, 831, 832, 837, 838, 839, 841, 863, 871, 872, 878, 881, 882, 883, 884, 885, 886, 887, 917, 918, 929, 932, 933, 935, 953, 954, 956, 958, 960, 961, 962, 963, 965, 966, 968, 969, 970, 974, 976, 977, 980, 981, 982, 984, 985, 986, 988, 990, 995, 996, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "451": [6, 15, 629], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 60, 67, 69, 71, 113, 122, 142, 156, 163, 197, 237, 238, 243, 247, 249, 259, 262, 265, 270, 272, 278, 281, 288, 297, 300, 302, 305, 306, 310, 315, 317, 318, 321, 322, 326, 336, 341, 342, 343, 352, 358, 365, 366, 370, 375, 381, 391, 395, 399, 402, 430, 485, 495, 503, 680, 686, 696, 724, 778, 779, 846, 877, 889, 953, 954, 958, 964, 965, 966, 967, 974, 977, 980, 983], "diabet": [7, 122, 131, 133, 138, 145, 161, 163, 183, 184, 185, 192, 193, 252, 363, 402, 484, 635, 636, 779, 784, 802, 803, 804, 972, 990, 994, 1001], "regress": [7, 10, 13, 25, 27, 30, 54, 68, 70, 75, 79, 80, 83, 86, 97, 107, 112, 114, 119, 127, 132, 145, 147, 158, 160, 161, 163, 165, 166, 167, 174, 178, 180, 182, 186, 190, 191, 193, 197, 199, 200, 201, 212, 215, 224, 226, 233, 238, 239, 252, 269, 270, 274, 277, 290, 295, 299, 303, 310, 311, 312, 313, 323, 339, 341, 345, 351, 357, 358, 359, 362, 363, 365, 367, 370, 372, 375, 378, 379, 381, 382, 383, 390, 393, 397, 398, 399, 400, 404, 416, 421, 447, 448, 457, 467, 472, 473, 475, 479, 484, 485, 487, 488, 495, 499, 500, 501, 507, 511, 514, 518, 520, 522, 524, 525, 526, 528, 529, 531, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 553, 554, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 588, 589, 592, 593, 594, 597, 598, 605, 606, 608, 614, 615, 616, 617, 618, 620, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 677, 684, 689, 704, 705, 706, 710, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 767, 779, 782, 783, 785, 793, 804, 805, 807, 808, 812, 814, 815, 823, 824, 829, 831, 832, 838, 839, 841, 842, 845, 846, 848, 854, 855, 856, 858, 861, 862, 865, 870, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 895, 901, 904, 906, 922, 953, 954, 956, 959, 961, 971, 972, 974, 975, 984, 985, 986, 987, 988, 990, 993, 996, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "patient": [7, 131, 145, 161, 367, 378, 399, 960, 997], "diseas": [7, 131, 145, 161, 259, 367, 695, 964, 997], "newsgroup": [7, 14, 19, 229, 257, 320, 342, 343, 363, 392, 403, 471, 472, 991, 1001], "post": [7, 14, 19, 69, 163, 312, 341, 342, 343, 345, 351, 356, 365, 369, 370, 374, 375, 382, 395, 431, 471, 472, 483, 695, 807, 889, 964, 980, 988, 999, 1016], "written": [7, 29, 35, 88, 163, 203, 311, 357, 367, 370, 371, 372, 376, 378, 381, 383, 396, 401, 470, 485, 491, 680, 696, 807, 886, 893, 958, 960, 964, 968, 969, 978, 983, 990, 991, 996, 999, 1014], "about": [7, 11, 29, 44, 53, 56, 61, 69, 85, 88, 117, 142, 157, 163, 165, 166, 169, 213, 225, 253, 254, 256, 258, 263, 281, 303, 308, 310, 311, 312, 313, 317, 341, 343, 350, 352, 356, 357, 359, 363, 365, 369, 370, 374, 375, 376, 382, 383, 384, 389, 399, 400, 403, 405, 422, 475, 477, 478, 479, 480, 483, 484, 485, 487, 488, 493, 498, 544, 545, 576, 577, 590, 591, 597, 616, 623, 659, 661, 725, 779, 793, 810, 902, 954, 960, 961, 963, 965, 967, 970, 971, 974, 975, 977, 979, 980, 982, 984, 988, 990, 991, 997, 999, 1010, 1011, 1021], "sgdclassifi": [7, 8, 203, 204, 205, 206, 207, 208, 209, 230, 264, 320, 330, 341, 352, 356, 358, 376, 383, 393, 394, 403, 621, 623, 624, 625, 629, 641, 649, 651, 881, 886, 956, 960, 965, 978, 979, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021], "stochast": [7, 57, 120, 123, 163, 172, 174, 215, 219, 221, 225, 230, 284, 285, 291, 296, 311, 395, 400, 402, 445, 471, 479, 485, 486, 487, 497, 505, 519, 527, 542, 543, 554, 587, 610, 622, 641, 642, 651, 655, 657, 659, 660, 661, 662, 670, 671, 672, 673, 675, 807, 830, 837, 838, 839, 842, 851, 885, 917, 918, 938, 953, 967, 968, 970, 986, 1000, 1001, 1005, 1006, 1009, 1010, 1012, 1014, 1016], "gradient": [7, 46, 65, 107, 114, 125, 128, 131, 132, 153, 154, 163, 174, 215, 225, 230, 298, 304, 383, 395, 405, 435, 445, 449, 450, 471, 479, 484, 486, 487, 498, 503, 536, 537, 542, 543, 544, 545, 554, 569, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 617, 618, 622, 631, 632, 641, 642, 651, 652, 655, 657, 659, 660, 661, 663, 670, 675, 677, 678, 723, 724, 730, 732, 782, 783, 784, 804, 807, 837, 838, 839, 842, 854, 855, 885, 938, 961, 964, 967, 968, 969, 970, 984, 986, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1018, 1020], "descent": [7, 13, 163, 174, 181, 215, 225, 230, 311, 400, 402, 454, 455, 461, 471, 479, 486, 514, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 554, 622, 629, 630, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 655, 657, 659, 660, 661, 664, 665, 666, 667, 670, 677, 807, 838, 839, 842, 881, 885, 938, 961, 968, 970, 979, 986, 997, 1001, 1005, 1008, 1009, 1010, 1012, 1014, 1016, 1018, 1019, 1020], "nusvr": [7, 356, 887, 979, 1007, 1013, 1015, 1016, 1017, 1019, 1020], "nu": [7, 9, 11, 157, 210, 225, 327, 356, 402, 405, 602, 660, 883, 884, 885, 970, 978, 979, 1016, 1020], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 67, 71, 88, 94, 96, 141, 148, 156, 177, 183, 200, 201, 208, 212, 230, 231, 234, 237, 254, 256, 257, 261, 282, 295, 298, 321, 324, 325, 327, 328, 329, 331, 332, 333, 336, 338, 339, 342, 356, 358, 359, 375, 376, 379, 381, 383, 392, 393, 395, 397, 398, 399, 400, 402, 405, 406, 407, 421, 427, 428, 429, 430, 432, 433, 434, 436, 447, 448, 450, 451, 465, 466, 467, 468, 470, 472, 480, 492, 495, 504, 507, 514, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 532, 533, 534, 535, 550, 551, 552, 553, 564, 565, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 603, 605, 606, 608, 614, 621, 623, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 672, 674, 675, 676, 678, 682, 702, 717, 745, 750, 751, 752, 753, 755, 756, 757, 759, 760, 779, 782, 783, 793, 805, 808, 809, 810, 816, 817, 818, 819, 820, 823, 824, 825, 827, 828, 829, 831, 832, 833, 838, 839, 846, 848, 853, 861, 865, 868, 879, 881, 882, 883, 884, 885, 886, 887, 888, 901, 915, 917, 918, 927, 933, 953, 956, 957, 958, 960, 961, 962, 964, 965, 966, 968, 969, 970, 974, 978, 980, 986, 990, 993, 996, 999, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1016, 1018], "gradientboostingregressor": [7, 121, 122, 128, 131, 356, 375, 381, 402, 537, 545, 615, 616, 960, 964, 965, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "forward": [7, 145, 310, 356, 370, 404, 491, 492, 522, 526, 536, 542, 543, 568, 569, 585, 668, 669, 845, 960, 985, 1017], "wise": [7, 26, 48, 156, 197, 225, 266, 298, 342, 356, 383, 393, 395, 399, 400, 404, 441, 514, 517, 520, 524, 528, 529, 532, 533, 536, 538, 539, 542, 543, 575, 578, 579, 581, 582, 583, 589, 623, 635, 683, 736, 809, 858, 871, 872, 875, 937, 939, 940, 941, 942, 945, 956, 958, 964, 965, 978, 980, 985, 1005, 1010, 1013, 1014, 1015], "fashion": [7, 114, 119, 204, 265, 357, 383, 392, 393, 400, 402, 536, 540, 541, 542, 543, 547, 548, 549, 585, 610, 807, 830, 845, 848, 854, 865, 889, 890, 891, 892, 935, 954, 960, 974, 1014], "notic": [7, 25, 26, 53, 56, 79, 112, 114, 121, 144, 175, 225, 237, 253, 254, 256, 257, 259, 265, 266, 276, 303, 341, 342, 343, 352, 375, 384, 399, 479, 524, 546, 953, 963, 964, 970, 999, 1002, 1018], "faster": [7, 19, 39, 63, 72, 94, 109, 114, 118, 121, 145, 167, 172, 182, 196, 198, 211, 212, 214, 231, 276, 278, 294, 309, 311, 312, 341, 342, 343, 356, 364, 370, 378, 379, 383, 394, 395, 400, 404, 405, 407, 427, 430, 432, 434, 435, 436, 445, 491, 514, 515, 516, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 536, 542, 543, 544, 545, 626, 629, 630, 635, 636, 641, 642, 643, 644, 645, 646, 655, 657, 667, 670, 674, 678, 682, 708, 738, 760, 761, 762, 821, 822, 826, 838, 839, 856, 858, 860, 870, 874, 918, 933, 953, 957, 960, 965, 967, 968, 971, 976, 978, 979, 980, 984, 987, 995, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "10_000": [7, 25, 74, 114, 121, 165, 172, 229, 259, 276, 542, 543, 858], "vari": [7, 34, 44, 46, 61, 74, 115, 117, 144, 163, 166, 167, 185, 187, 190, 194, 222, 230, 246, 252, 256, 259, 291, 296, 298, 303, 315, 322, 328, 331, 352, 356, 358, 365, 383, 425, 429, 483, 491, 497, 498, 505, 542, 543, 547, 548, 629, 630, 633, 634, 635, 636, 637, 638, 643, 644, 645, 646, 664, 667, 686, 745, 798, 805, 807, 808, 838, 842, 846, 861, 878, 886, 889, 890, 938, 956, 959, 960, 964, 967, 968, 977, 980, 988, 1012, 1013], "relev": [7, 9, 19, 76, 82, 143, 163, 175, 190, 256, 257, 263, 352, 356, 358, 365, 367, 369, 370, 372, 374, 375, 376, 383, 384, 397, 398, 404, 405, 453, 457, 517, 524, 628, 638, 708, 722, 738, 782, 783, 810, 859, 861, 893, 894, 895, 964, 965, 970, 981, 985, 1008, 1013, 1017, 1019], "select": [7, 9, 36, 44, 56, 61, 67, 68, 70, 73, 75, 81, 91, 93, 106, 111, 116, 118, 121, 128, 135, 142, 146, 153, 155, 166, 167, 169, 172, 174, 176, 204, 211, 214, 215, 218, 225, 229, 231, 240, 241, 248, 254, 255, 256, 257, 261, 280, 298, 303, 304, 310, 316, 317, 320, 323, 328, 336, 339, 341, 342, 343, 352, 356, 357, 359, 365, 367, 368, 370, 372, 378, 382, 383, 392, 395, 396, 397, 400, 402, 403, 405, 427, 429, 430, 432, 434, 436, 441, 442, 443, 447, 449, 450, 455, 456, 459, 471, 472, 475, 476, 479, 480, 484, 485, 487, 495, 498, 515, 517, 518, 523, 524, 527, 532, 534, 541, 542, 543, 546, 548, 564, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 610, 614, 615, 628, 629, 630, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 654, 656, 659, 661, 665, 666, 674, 675, 680, 695, 699, 701, 736, 772, 773, 777, 778, 779, 782, 783, 784, 785, 793, 803, 804, 805, 807, 809, 823, 824, 825, 827, 829, 831, 832, 833, 841, 842, 846, 851, 857, 861, 878, 881, 882, 886, 889, 890, 891, 892, 897, 933, 934, 958, 959, 961, 964, 965, 967, 968, 970, 974, 977, 978, 979, 980, 981, 984, 985, 986, 988, 990, 991, 993, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "ham": [7, 433, 440, 564, 682, 686, 692, 716, 723, 760, 761, 762, 776, 967], "loss": [7, 24, 25, 26, 27, 119, 120, 121, 122, 123, 148, 149, 163, 174, 178, 186, 189, 198, 201, 203, 204, 208, 214, 215, 231, 264, 293, 294, 303, 311, 320, 325, 326, 330, 336, 341, 381, 383, 393, 394, 400, 405, 447, 448, 479, 491, 492, 515, 521, 522, 523, 526, 530, 535, 536, 537, 541, 542, 543, 544, 545, 548, 626, 629, 632, 641, 642, 649, 650, 651, 652, 653, 654, 655, 659, 660, 661, 662, 686, 689, 692, 705, 716, 717, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 776, 779, 782, 783, 793, 803, 804, 807, 838, 839, 841, 842, 845, 846, 854, 855, 856, 861, 881, 882, 887, 888, 890, 892, 918, 922, 957, 960, 968, 972, 977, 978, 979, 980, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "eustach": [7, 8, 10, 988, 1007, 1008], "diemert": [7, 8, 10, 988, 1007, 1008], "maria": [7, 122, 128, 145, 161, 395, 1016, 1017, 1018, 1019, 1020], "telenczuk": [7, 122, 128, 145, 161, 1014, 1017, 1018, 1020], "github": [7, 8, 12, 26, 70, 71, 108, 114, 115, 116, 122, 124, 125, 128, 131, 142, 153, 161, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 295, 304, 309, 310, 312, 313, 318, 350, 364, 368, 369, 373, 374, 375, 376, 378, 381, 383, 384, 386, 389, 391, 435, 445, 491, 519, 674, 675, 678, 967, 983, 984, 987, 988, 999, 1010, 1015], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 50, 56, 64, 69, 70, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 148, 151, 153, 155, 157, 161, 176, 196, 198, 203, 213, 214, 218, 220, 222, 228, 241, 243, 244, 257, 260, 276, 298, 299, 302, 303, 341, 342, 364, 365, 368, 370, 374, 375, 376, 378, 381, 386, 395, 426, 435, 445, 491, 517, 519, 524, 654, 674, 678, 688, 967, 982, 987, 1010, 1012, 1015], "maikia": [7, 122, 128, 161, 1013, 1014, 1016, 1017], "lemaitre58": [7, 128, 148, 153, 155, 157, 218, 298], "gmail": [7, 11, 14, 16, 24, 42, 48, 56, 64, 69, 70, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 148, 151, 153, 155, 157, 176, 196, 198, 213, 214, 218, 220, 228, 241, 243, 244, 257, 260, 298, 303, 341, 342], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 94, 96, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 127, 128, 145, 148, 149, 151, 152, 153, 154, 155, 157, 161, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 316, 317, 318, 319, 321, 332, 333, 336, 337, 341, 342, 343, 364, 383, 389, 980, 988], "mean_squared_error": [7, 121, 122, 192, 196, 198, 200, 202, 214, 352, 402, 724, 734, 964, 1006, 1008, 1015, 1016], "hamming_loss": [7, 686, 776, 964, 1007, 1011, 1014], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 56, 58, 59, 61, 63, 64, 70, 77, 78, 79, 91, 95, 100, 101, 112, 117, 137, 140, 168, 180, 186, 191, 194, 199, 202, 205, 209, 213, 220, 242, 244, 245, 246, 247, 259, 262, 270, 281, 282, 283, 288, 333, 334, 338, 342, 352, 357, 372, 379, 381, 383, 395, 399, 400, 427, 430, 431, 433, 435, 440, 442, 443, 444, 445, 454, 455, 456, 519, 527, 536, 537, 538, 539, 542, 543, 610, 629, 630, 635, 636, 643, 644, 645, 646, 660, 672, 674, 676, 678, 777, 778, 783, 812, 815, 830, 884, 904, 917, 918, 929, 933, 953, 954, 959, 961, 997, 1009, 1010, 1014, 1015, 1021], "fetch_20newsgroups_vector": [7, 211, 229, 365, 1005, 1015, 1017], "spars": [7, 12, 13, 17, 39, 40, 54, 56, 76, 82, 93, 106, 114, 126, 163, 174, 191, 195, 212, 215, 229, 231, 257, 276, 309, 313, 336, 340, 343, 344, 350, 356, 362, 364, 365, 366, 370, 372, 373, 374, 375, 381, 382, 383, 394, 395, 396, 402, 403, 405, 406, 410, 422, 424, 426, 427, 428, 430, 432, 433, 434, 435, 436, 440, 442, 443, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 470, 471, 472, 479, 480, 486, 491, 506, 507, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 564, 565, 568, 569, 571, 572, 573, 574, 576, 577, 586, 587, 588, 589, 590, 591, 592, 612, 613, 614, 616, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 695, 696, 697, 711, 712, 713, 716, 720, 721, 722, 736, 737, 742, 743, 745, 746, 748, 749, 750, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 772, 773, 776, 779, 782, 783, 793, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 850, 851, 852, 853, 854, 856, 858, 859, 861, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 899, 900, 901, 902, 907, 915, 918, 919, 922, 923, 924, 927, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 950, 954, 957, 960, 961, 962, 964, 965, 967, 977, 979, 980, 985, 986, 997, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "generate_data": [7, 33], "load_diabet": [7, 122, 131, 134, 145, 161, 181, 183, 184, 185, 192, 193, 235, 252, 313, 402, 541, 545, 551, 656, 684, 802, 803, 804, 890, 892, 972, 994, 997, 1011, 1016, 1019], "elif": [7, 8, 16, 34, 176, 198, 232, 234, 243, 281, 857], "subset": [7, 19, 26, 27, 32, 69, 70, 79, 80, 115, 117, 118, 134, 142, 167, 185, 197, 211, 212, 213, 214, 228, 230, 233, 234, 254, 257, 259, 265, 266, 268, 303, 304, 310, 316, 320, 341, 342, 343, 352, 365, 370, 378, 381, 383, 392, 393, 395, 396, 399, 402, 403, 405, 412, 421, 432, 447, 449, 450, 452, 471, 472, 475, 476, 480, 491, 532, 533, 534, 536, 538, 539, 540, 542, 544, 545, 546, 547, 550, 552, 585, 593, 612, 622, 623, 624, 625, 634, 638, 641, 649, 651, 654, 657, 658, 659, 660, 661, 662, 680, 686, 687, 696, 699, 701, 713, 716, 737, 739, 773, 776, 781, 805, 807, 809, 810, 811, 812, 816, 817, 818, 819, 820, 823, 828, 831, 838, 847, 876, 877, 881, 883, 886, 889, 891, 897, 933, 953, 960, 964, 965, 975, 977, 979, 980, 999, 1008, 1013, 1014, 1016, 1018], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 58, 79, 107, 113, 129, 132, 161, 163, 169, 192, 201, 213, 230, 255, 256, 262, 266, 270, 274, 326, 333, 352, 356, 377, 383, 392, 393, 395, 399, 400, 402, 406, 422, 425, 427, 428, 429, 431, 433, 434, 436, 438, 439, 454, 455, 461, 464, 519, 530, 536, 547, 552, 580, 594, 603, 615, 616, 617, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 655, 656, 657, 658, 662, 664, 667, 671, 673, 675, 677, 690, 699, 711, 712, 717, 718, 720, 726, 736, 746, 751, 753, 754, 755, 756, 760, 763, 765, 766, 769, 770, 771, 772, 773, 775, 786, 788, 802, 806, 819, 821, 822, 859, 860, 861, 867, 871, 881, 882, 907, 920, 956, 958, 960, 961, 962, 964, 966, 967, 968, 972, 974, 977, 979, 994, 997, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "given": [7, 10, 11, 27, 37, 49, 57, 59, 77, 84, 95, 99, 124, 126, 128, 148, 155, 166, 167, 196, 197, 214, 218, 225, 229, 230, 233, 235, 252, 256, 257, 258, 259, 265, 282, 283, 284, 300, 304, 311, 336, 341, 342, 343, 349, 356, 358, 365, 369, 370, 372, 374, 376, 378, 379, 381, 383, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 412, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 441, 442, 443, 444, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 465, 466, 467, 470, 479, 484, 486, 488, 506, 519, 521, 522, 523, 526, 530, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 571, 572, 573, 574, 576, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 614, 615, 627, 629, 632, 634, 635, 636, 638, 641, 642, 644, 646, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 670, 671, 674, 680, 681, 682, 683, 684, 685, 687, 688, 689, 695, 697, 700, 701, 703, 706, 708, 709, 716, 718, 719, 722, 734, 737, 738, 740, 741, 746, 756, 760, 763, 764, 766, 769, 770, 771, 774, 775, 777, 778, 779, 782, 783, 785, 791, 793, 797, 803, 804, 805, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 848, 851, 852, 854, 855, 856, 857, 858, 860, 861, 867, 868, 870, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 891, 896, 905, 906, 907, 948, 952, 953, 956, 958, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 974, 977, 978, 979, 980, 988, 990, 994, 995, 997, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "round": [7, 9, 25, 84, 160, 161, 203, 214, 256, 262, 300, 302, 341, 433, 439, 440, 547, 548, 576, 577, 580, 610, 675, 696, 781, 791, 846, 878, 893, 895, 954, 968, 980, 1007, 1009, 1011, 1013, 1014, 1016, 1018, 1019, 1021], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 79, 113, 124, 131, 145, 153, 161, 169, 184, 189, 210, 220, 228, 259, 282, 327, 330, 342, 343, 356, 365, 367, 374, 386, 399, 400, 402, 403, 405, 447, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 552, 553, 564, 566, 567, 571, 572, 573, 574, 615, 781, 785, 786, 788, 935, 938, 953, 959, 960, 964, 970, 975, 980, 985, 988, 994, 999, 1007, 1017], "chang": [7, 16, 25, 26, 94, 98, 99, 112, 122, 149, 160, 165, 166, 169, 197, 198, 200, 201, 235, 236, 251, 256, 263, 266, 302, 308, 309, 310, 311, 312, 313, 317, 328, 343, 352, 356, 357, 358, 365, 368, 372, 373, 374, 375, 378, 381, 383, 395, 399, 402, 403, 405, 418, 421, 424, 430, 432, 435, 437, 442, 445, 451, 454, 455, 461, 476, 477, 479, 487, 491, 492, 495, 496, 497, 505, 509, 514, 518, 519, 520, 521, 522, 523, 529, 530, 532, 533, 534, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 571, 572, 574, 576, 577, 580, 585, 593, 594, 596, 597, 598, 600, 602, 603, 605, 606, 608, 610, 618, 627, 628, 630, 632, 633, 634, 636, 637, 638, 639, 641, 642, 644, 646, 647, 648, 653, 655, 657, 662, 670, 675, 683, 687, 690, 695, 699, 700, 711, 712, 718, 719, 723, 737, 738, 739, 760, 766, 767, 769, 775, 777, 778, 779, 780, 781, 782, 783, 784, 793, 797, 798, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 813, 814, 816, 817, 818, 820, 821, 822, 827, 828, 840, 843, 845, 854, 869, 870, 875, 876, 879, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 899, 901, 902, 913, 918, 930, 931, 932, 934, 953, 954, 955, 963, 964, 965, 967, 974, 977, 978, 979, 980, 982, 985, 990, 997, 999, 1003, 1004], "affect": [7, 25, 79, 155, 165, 166, 200, 221, 235, 259, 266, 303, 352, 356, 357, 358, 366, 383, 385, 393, 395, 398, 399, 401, 403, 406, 408, 428, 433, 440, 456, 458, 462, 532, 533, 552, 695, 770, 779, 782, 783, 784, 793, 797, 798, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 861, 862, 872, 886, 963, 967, 979, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 374, 393, 399, 816, 966, 1019], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 60, 70, 102, 109, 112, 113, 119, 121, 135, 161, 169, 189, 200, 201, 203, 204, 211, 214, 230, 231, 256, 259, 265, 266, 269, 274, 292, 293, 304, 319, 328, 331, 341, 342, 343, 346, 350, 376, 383, 396, 403, 641, 642, 881, 882, 888, 908, 974, 994], "start_tim": [7, 10, 19, 115, 116, 128, 148, 185, 218], "elapsed_tim": [7, 39, 66, 115, 116, 128, 213], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 59, 60, 64, 65, 66, 70, 97, 101, 137, 156, 166, 182, 186, 220, 255, 256, 260, 264, 336, 343, 356, 364, 365, 370, 379, 383, 395, 396, 403, 404, 406, 407, 408, 412, 414, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 470, 475, 476, 477, 479, 481, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 566, 567, 571, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 593, 594, 596, 597, 598, 599, 600, 602, 603, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 741, 748, 751, 757, 758, 759, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 785, 793, 796, 799, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 841, 844, 847, 848, 854, 855, 857, 859, 861, 862, 863, 864, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 899, 901, 902, 905, 915, 916, 927, 939, 945, 950, 954, 964, 965, 967, 968, 974, 979, 980, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 112, 120, 122, 211, 212, 214, 303], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 67, 93, 106, 125, 163, 195, 342, 343, 363, 364, 365, 372, 381, 383, 395, 403, 432, 447, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 493, 509, 514, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 550, 551, 552, 553, 564, 565, 567, 570, 571, 572, 615, 616, 617, 647, 668, 669, 684, 696, 779, 782, 783, 790, 791, 793, 804, 840, 845, 854, 889, 890, 891, 892, 896, 906, 953, 960, 964, 979, 990, 999, 1000, 1001, 1005, 1013, 1016, 1017, 1018, 1019, 1020], "necessari": [7, 13, 113, 196, 201, 241, 256, 257, 263, 278, 348, 356, 365, 368, 369, 370, 371, 372, 373, 374, 378, 381, 395, 397, 402, 435, 445, 471, 472, 474, 475, 476, 477, 478, 480, 517, 627, 628, 629, 635, 639, 640, 643, 644, 645, 646, 647, 648, 654, 656, 658, 659, 674, 678, 775, 844, 853, 864, 868, 874, 953, 956, 960, 963, 966, 974, 980, 999, 1005, 1013], "defin": [7, 9, 12, 27, 53, 56, 65, 69, 70, 72, 85, 94, 99, 108, 109, 110, 128, 145, 148, 155, 156, 157, 167, 168, 175, 197, 200, 204, 213, 214, 225, 229, 235, 237, 241, 246, 256, 257, 259, 263, 265, 266, 267, 268, 276, 298, 309, 328, 336, 341, 342, 356, 366, 369, 370, 371, 372, 376, 377, 379, 381, 382, 383, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 405, 411, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 442, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 472, 502, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 610, 611, 612, 613, 615, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 679, 680, 682, 691, 693, 699, 704, 705, 706, 707, 710, 713, 720, 723, 727, 728, 730, 732, 733, 735, 736, 739, 742, 748, 763, 767, 772, 773, 777, 778, 779, 782, 783, 785, 793, 804, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 868, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 905, 907, 910, 916, 948, 953, 954, 960, 961, 962, 963, 965, 966, 967, 969, 970, 971, 972, 974, 976, 978, 979, 980, 985, 995, 998, 1001, 1002, 1007, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 68, 69, 75, 80, 89, 104, 117, 120, 153, 163, 165, 166, 167, 172, 196, 198, 238, 240, 243, 246, 248, 251, 262, 263, 265, 266, 332, 336, 341, 343, 350, 352, 357, 359, 363, 364, 365, 367, 368, 370, 371, 373, 374, 375, 376, 381, 382, 386, 389, 391, 392, 396, 403, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 479, 491, 492, 498, 550, 555, 564, 565, 568, 569, 571, 572, 574, 583, 587, 600, 610, 612, 613, 621, 639, 641, 655, 657, 662, 670, 672, 675, 676, 684, 690, 697, 699, 711, 712, 720, 723, 765, 766, 769, 770, 777, 778, 779, 785, 793, 805, 807, 808, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 841, 842, 843, 846, 848, 854, 855, 861, 862, 883, 884, 885, 886, 887, 897, 899, 901, 902, 905, 909, 910, 927, 928, 935, 938, 951, 954, 956, 961, 963, 964, 965, 966, 967, 968, 974, 976, 980, 987, 988, 992, 997, 998, 999, 1005, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 84, 141, 142, 145, 165, 166, 175, 178, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 195, 199, 200, 201, 205, 211, 212, 232, 238, 269, 305, 312, 326, 333, 337, 341, 352, 365, 372, 383, 398, 404, 448, 465, 466, 467, 532, 576, 577, 580, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 881, 882, 883, 884, 885, 886, 887, 948, 958, 960, 978, 979, 997, 1005, 1007, 1010, 1012, 1017, 1019], "toarrai": [7, 320, 350, 396, 403, 549, 565, 571, 573, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 854, 871, 872, 935, 938, 954, 967, 974], "count_nonzero": [7, 10, 356], "configur": [7, 10, 70, 71, 167, 236, 238, 305, 341, 355, 368, 370, 372, 376, 378, 381, 383, 386, 391, 396, 403, 404, 417, 426, 427, 429, 430, 432, 435, 445, 447, 451, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 609, 610, 611, 612, 613, 615, 618, 621, 622, 623, 624, 625, 671, 672, 673, 674, 675, 677, 678, 770, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 879, 930, 931, 961, 964, 974, 979, 984, 999, 1001, 1009, 1012, 1013, 1014, 1015, 1017, 1019, 1020], "penalti": [7, 10, 30, 81, 163, 174, 175, 185, 189, 196, 211, 212, 215, 227, 264, 292, 311, 320, 333, 341, 356, 378, 381, 394, 397, 400, 404, 454, 455, 456, 457, 458, 459, 461, 485, 514, 520, 521, 522, 523, 525, 526, 530, 531, 580, 626, 629, 630, 631, 632, 635, 636, 637, 640, 641, 642, 643, 644, 645, 651, 652, 653, 655, 659, 661, 663, 664, 670, 793, 861, 881, 882, 884, 886, 887, 888, 953, 960, 963, 968, 974, 978, 979, 997, 999, 1007, 1010, 1012, 1014, 1015, 1017, 1018, 1020, 1021], "elasticnet": [7, 10, 177, 187, 264, 269, 356, 376, 381, 400, 630, 635, 640, 641, 642, 643, 644, 645, 646, 651, 659, 661, 664, 960, 978, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1019], "001": [7, 13, 32, 44, 61, 148, 166, 205, 225, 241, 254, 256, 258, 319, 342, 367, 376, 399, 519, 520, 522, 529, 610, 627, 628, 629, 630, 635, 636, 643, 644, 645, 646, 649, 650, 651, 659, 660, 661, 662, 664, 667, 672, 673, 676, 677, 777, 778, 838, 839, 876, 877, 883, 884, 885, 886, 887, 953, 990, 999], "modified_hub": [7, 659, 978], "fit_intercept": [7, 175, 176, 182, 201, 210, 225, 264, 305, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 881, 882, 888, 960, 978, 1009, 1013, 1014, 1015, 1017, 1018, 1019], "tol": [7, 10, 17, 72, 94, 119, 160, 176, 187, 189, 203, 204, 210, 212, 225, 235, 242, 244, 295, 311, 336, 341, 372, 376, 402, 407, 427, 430, 432, 435, 442, 445, 454, 455, 461, 465, 466, 467, 514, 515, 516, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 542, 543, 544, 545, 585, 610, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 655, 657, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 674, 676, 678, 777, 778, 793, 830, 838, 839, 876, 877, 881, 882, 883, 884, 885, 886, 887, 950, 960, 978, 979, 995, 999, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "n_iter_no_chang": [7, 119, 204, 311, 341, 375, 383, 402, 542, 543, 544, 545, 649, 650, 651, 659, 660, 661, 838, 839, 978, 1013, 1016], "l1_ratio": [7, 10, 14, 180, 181, 187, 264, 269, 356, 381, 400, 521, 523, 530, 629, 630, 635, 641, 642, 643, 644, 645, 646, 651, 659, 661, 664, 960, 978, 1006, 1008, 1010, 1017, 1019], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 57, 59, 77, 78, 81, 94, 97, 142, 163, 164, 165, 170, 174, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 198, 199, 211, 214, 215, 238, 294, 305, 310, 311, 312, 341, 342, 343, 356, 366, 370, 372, 383, 385, 394, 397, 398, 400, 404, 405, 408, 416, 435, 448, 450, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 479, 507, 509, 510, 514, 518, 520, 522, 525, 526, 531, 535, 537, 539, 541, 543, 545, 548, 551, 553, 565, 572, 576, 580, 592, 594, 597, 610, 618, 619, 622, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 684, 686, 699, 702, 711, 716, 720, 725, 732, 735, 757, 759, 767, 768, 772, 773, 776, 794, 804, 807, 814, 815, 824, 832, 839, 842, 854, 861, 881, 882, 883, 884, 885, 886, 887, 890, 892, 955, 958, 960, 978, 979, 997, 1005, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "misclassif": [7, 776, 978, 979, 980, 1006], "ratio": [7, 53, 65, 72, 103, 163, 229, 231, 244, 249, 272, 356, 370, 395, 397, 399, 402, 433, 439, 476, 477, 498, 524, 532, 533, 534, 614, 641, 693, 695, 699, 707, 718, 721, 764, 765, 766, 769, 775, 804, 807, 827, 874, 933, 958, 970, 980, 995, 1020], "sparsifi": [7, 180, 356, 641, 642, 649, 651, 659, 660, 661, 881, 948, 1007], "05": [7, 8, 14, 24, 26, 30, 37, 44, 52, 59, 61, 63, 64, 66, 67, 74, 82, 84, 90, 99, 106, 112, 119, 121, 126, 132, 141, 153, 156, 157, 166, 176, 177, 195, 198, 210, 215, 221, 222, 223, 225, 239, 241, 243, 244, 247, 256, 257, 263, 265, 266, 267, 272, 281, 284, 289, 298, 300, 306, 308, 312, 317, 319, 333, 342, 367, 404, 433, 439, 575, 578, 579, 581, 596, 597, 598, 602, 603, 605, 606, 608, 615, 616, 632, 673, 677, 738, 779, 830, 881, 882, 960, 968, 974], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 64, 69, 71, 97, 100, 104, 105, 109, 112, 117, 118, 119, 136, 137, 143, 144, 148, 156, 161, 167, 169, 195, 196, 214, 220, 225, 228, 229, 230, 233, 234, 241, 243, 244, 251, 254, 256, 257, 264, 265, 267, 270, 274, 276, 283, 285, 286, 292, 299, 300, 301, 304, 316, 317, 320, 328, 335, 338, 341, 342, 343, 350, 381, 383, 405, 421, 429, 433, 439, 447, 490, 498, 533, 552, 553, 565, 580, 615, 616, 764, 779, 793, 803, 807, 809, 812, 876, 877, 997, 998, 999, 1014, 1017], "support_vectors_": [7, 10, 16, 329, 332, 333, 883, 884, 885, 886, 887, 979], "squared_error": [7, 104, 121, 122, 311, 402, 541, 542, 543, 545, 548, 654, 659, 661, 676, 890, 892, 978, 1018], "learning_r": [7, 108, 109, 120, 121, 122, 123, 222, 276, 293, 295, 309, 311, 402, 536, 537, 542, 543, 544, 545, 651, 659, 660, 661, 675, 837, 838, 839, 961, 971, 978, 1006, 1014, 1018], "max_depth": [7, 31, 108, 109, 110, 111, 114, 117, 120, 121, 122, 123, 126, 127, 129, 160, 218, 253, 268, 310, 311, 346, 348, 349, 350, 382, 383, 402, 536, 537, 540, 541, 542, 543, 544, 545, 547, 548, 549, 782, 783, 805, 889, 890, 891, 892, 893, 894, 895, 953, 971, 980, 1014, 1016], "n_estim": [7, 10, 26, 31, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 126, 127, 130, 160, 169, 218, 233, 237, 243, 253, 268, 300, 308, 310, 356, 382, 383, 402, 404, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 615, 782, 783, 953, 970, 971, 1002, 1013], "n_tree": 7, "loop": [7, 8, 112, 121, 166, 251, 261, 341, 350, 356, 370, 371, 376, 395, 399, 404, 629, 630, 635, 636, 642, 643, 644, 645, 646, 953, 977, 978, 994, 1008, 1009, 1012, 1017, 1018], "previous": [7, 53, 56, 70, 154, 166, 254, 263, 312, 365, 378, 381, 386, 395, 400, 403, 424, 427, 437, 507, 517, 524, 632, 641, 642, 649, 651, 659, 660, 661, 881, 932, 960, 974, 984, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "subsequ": [7, 32, 57, 74, 97, 142, 184, 198, 258, 261, 276, 278, 328, 352, 370, 372, 376, 383, 395, 396, 402, 405, 421, 479, 491, 536, 537, 542, 544, 545, 649, 651, 659, 782, 783, 809, 810, 813, 816, 817, 818, 819, 820, 838, 856, 860, 954, 963, 965, 1014, 1015, 1019], "relax": [7, 395, 403, 436, 977, 1012], "sgd": [7, 8, 163, 174, 203, 210, 215, 225, 264, 293, 294, 311, 341, 352, 358, 487, 495, 614, 632, 649, 650, 651, 654, 659, 660, 661, 662, 838, 839, 953, 968, 986, 1001, 1005, 1008, 1009, 1010, 1012, 1016, 1018], "svr": [7, 10, 163, 224, 239, 308, 323, 339, 356, 539, 550, 551, 576, 577, 626, 661, 779, 785, 882, 884, 886, 957, 997, 1005, 1007, 1009, 1010, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "optim": [7, 13, 27, 53, 54, 56, 59, 71, 77, 78, 94, 108, 120, 122, 144, 148, 149, 152, 153, 154, 155, 156, 184, 185, 189, 204, 212, 231, 254, 261, 264, 269, 274, 280, 295, 298, 303, 312, 319, 330, 336, 341, 342, 343, 352, 356, 359, 364, 367, 370, 372, 373, 381, 383, 386, 390, 392, 395, 397, 399, 400, 402, 404, 405, 406, 428, 431, 432, 433, 435, 440, 444, 445, 455, 456, 462, 514, 517, 518, 520, 522, 526, 540, 541, 542, 543, 557, 593, 594, 602, 603, 618, 621, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 670, 673, 675, 677, 678, 684, 705, 712, 779, 793, 823, 824, 825, 827, 829, 830, 831, 832, 833, 838, 839, 857, 869, 873, 874, 881, 882, 883, 884, 885, 886, 887, 956, 957, 958, 959, 960, 964, 965, 966, 967, 968, 969, 978, 979, 980, 984, 988, 994, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020], "few": [7, 14, 19, 39, 46, 52, 98, 118, 151, 154, 155, 185, 194, 196, 214, 231, 241, 258, 259, 263, 294, 298, 302, 308, 309, 310, 311, 312, 313, 316, 336, 343, 356, 365, 366, 367, 370, 372, 382, 384, 389, 392, 393, 395, 399, 400, 404, 405, 421, 432, 544, 545, 571, 574, 638, 675, 678, 874, 918, 932, 960, 961, 963, 964, 967, 968, 977, 979, 980, 988, 990, 997, 998, 999, 1011], "drawn": [7, 52, 79, 112, 144, 148, 157, 165, 235, 263, 280, 341, 366, 395, 401, 402, 405, 407, 452, 453, 454, 455, 456, 457, 458, 459, 498, 506, 516, 538, 539, 546, 594, 610, 615, 624, 817, 873, 874, 891, 892, 960, 974, 976, 1008], "boost": [7, 107, 108, 109, 110, 114, 125, 128, 131, 132, 163, 304, 376, 383, 404, 431, 449, 450, 479, 484, 487, 498, 503, 536, 537, 542, 543, 544, 545, 615, 616, 617, 618, 723, 724, 730, 732, 782, 783, 784, 804, 807, 842, 854, 855, 960, 964, 984, 986, 1001, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1018], "detriment": [7, 144, 357, 404, 960], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 56, 59, 64, 66, 72, 74, 79, 91, 118, 161, 169, 196, 226, 228, 235, 241, 259, 267, 299, 303, 304, 319, 341, 342, 995], "add_subplot": [7, 16, 25, 27, 42, 45, 63, 66, 89, 100, 101, 108, 167, 193, 211, 219, 221, 316, 317, 377], "line1": [7, 12, 220], "tab": [7, 53, 125, 128, 148, 153, 155, 184, 185, 309, 396, 1012], "blue": [7, 20, 21, 26, 34, 91, 94, 112, 115, 123, 125, 128, 130, 143, 153, 155, 172, 176, 184, 185, 192, 194, 220, 229, 250, 251, 256, 293, 303, 309, 318, 367, 395, 400], "set_xlabel": [7, 10, 45, 53, 59, 71, 72, 74, 89, 91, 99, 108, 157, 160, 161, 165, 167, 168, 172, 185, 191, 193, 194, 196, 198, 211, 212, 230, 256, 258, 262, 267, 268, 281, 298, 299, 303, 319, 342, 343, 346], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 59, 64, 71, 72, 74, 79, 89, 91, 99, 105, 108, 115, 157, 167, 172, 185, 187, 191, 193, 194, 196, 198, 211, 230, 241, 256, 258, 262, 267, 268, 274, 281, 298, 299, 303, 308, 319, 336, 342, 346, 995], "spine": [7, 14, 207, 298], "set_color": [7, 207], "get_color": 7, "yaxi": [7, 10, 45, 59, 89, 100, 101, 193, 217, 219, 222, 241, 276, 281, 341], "tick_param": [7, 14, 131, 241, 256, 302, 319], "ax2": [7, 56, 59, 64, 66, 79, 91, 118, 161, 169, 196, 226, 235, 241, 259, 267, 286, 299, 303, 304, 319, 341], "frameon": [7, 202], "line2": [7, 12, 220, 337], "orang": [7, 53, 91, 95, 96, 102, 123, 125, 155, 161, 184, 185, 206, 232, 244, 279, 287, 309, 349, 965], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 25, 60, 160, 196, 198, 238, 251, 258, 300, 320, 341, 342, 343, 377, 381, 854], "prediction_perform": 7, "4948": 7, "2675": 7, "066419": 7, "1847": 7, "3264": 7, "053592": 7, "997": [7, 40], "3383": 7, "045877": 7, "802": [7, 367], "3582": 7, "036885": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000267": 7, "5289": 7, "8022": [7, 383, 456, 1014], "000280": 7, "5193": 7, "8353": 7, "000441": 7, "124": [7, 402, 1007], "5131": [7, 1010], "3279": 7, "000661": 7, "178": [7, 367, 376, 493, 825], "5149": 7, "0779": 7, "000886": 7, "4066": 7, "4812": 7, "000294": 7, "3551": 7, "1723": [7, 8], "000327": 7, "3445": 7, "2171": [7, 8], "000324": 7, "3433": 7, "0358": 7, "000346": 7, "3456": 7, "0602": 7, "000468": 7, "deduc": 7, "guarante": [7, 8, 79, 80, 166, 204, 229, 274, 276, 298, 342, 352, 358, 364, 378, 379, 395, 399, 400, 403, 519, 628, 641, 642, 651, 655, 657, 659, 661, 670, 677, 796, 799, 821, 822, 859, 861, 874, 875, 888, 956, 960, 961, 963, 967, 972, 976, 980, 998, 1015], "aspect": [7, 57, 85, 94, 152, 167, 217, 225, 285, 334, 356, 357, 358, 370, 383, 384, 395, 641, 642, 980, 988], "610": [7, 15], "plot_model_complexity_influ": [7, 15], "doesn": [8, 196, 242, 294, 328, 378, 383, 395, 403, 404, 408, 418, 458, 615, 616, 649, 651, 659, 699, 805, 808, 813, 823, 824, 838, 963, 964, 980, 1009], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 57, 69, 71, 77, 78, 79, 81, 84, 91, 95, 96, 100, 102, 104, 105, 108, 109, 112, 113, 119, 120, 121, 122, 123, 127, 128, 145, 149, 151, 152, 153, 156, 157, 163, 166, 167, 168, 169, 175, 177, 183, 190, 193, 194, 195, 196, 197, 214, 216, 218, 219, 220, 221, 223, 232, 242, 245, 247, 255, 256, 276, 288, 289, 294, 308, 311, 312, 316, 317, 319, 324, 325, 328, 329, 332, 333, 336, 341, 342, 343, 349, 350, 352, 356, 357, 364, 365, 367, 370, 372, 374, 376, 378, 381, 382, 383, 386, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 408, 412, 416, 418, 421, 430, 431, 433, 439, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 478, 479, 496, 497, 498, 502, 503, 508, 513, 515, 517, 524, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 573, 574, 577, 590, 591, 593, 594, 610, 611, 613, 614, 615, 616, 618, 622, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 679, 687, 693, 699, 700, 708, 718, 719, 737, 738, 739, 749, 770, 771, 774, 775, 779, 782, 783, 793, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 828, 831, 832, 837, 838, 839, 847, 852, 854, 855, 861, 862, 874, 876, 877, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 918, 928, 953, 958, 960, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 978, 979, 980, 987, 990, 997, 998, 999, 1000, 1001, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "memori": [8, 54, 70, 71, 98, 119, 166, 167, 278, 304, 308, 310, 312, 313, 341, 342, 343, 357, 358, 364, 370, 373, 379, 383, 396, 399, 400, 403, 406, 407, 425, 426, 427, 428, 429, 430, 432, 433, 437, 440, 442, 451, 456, 462, 479, 486, 491, 516, 517, 518, 521, 538, 539, 540, 541, 546, 547, 548, 564, 565, 571, 572, 574, 629, 630, 631, 635, 636, 641, 642, 643, 644, 645, 646, 649, 651, 652, 659, 660, 661, 662, 663, 664, 667, 760, 761, 762, 763, 779, 785, 793, 802, 803, 804, 805, 808, 809, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 841, 842, 859, 861, 871, 872, 874, 879, 881, 882, 889, 890, 891, 892, 902, 933, 949, 960, 966, 967, 974, 976, 977, 979, 980, 984, 985, 988, 990, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "onlin": [8, 14, 36, 67, 94, 97, 163, 174, 210, 215, 358, 365, 369, 375, 383, 395, 400, 403, 405, 426, 430, 432, 478, 485, 514, 519, 520, 521, 522, 528, 529, 565, 567, 641, 649, 650, 651, 659, 661, 807, 816, 817, 818, 819, 820, 823, 824, 829, 831, 832, 850, 851, 861, 881, 882, 956, 960, 968, 970, 983, 986, 988, 997, 1001, 1005, 1009, 1010, 1012, 1020], "partial_fit": [8, 50, 94, 312, 358, 372, 383, 395, 400, 426, 432, 517, 519, 520, 521, 572, 580, 641, 642, 649, 650, 651, 659, 660, 661, 809, 810, 813, 814, 816, 817, 818, 819, 820, 837, 838, 839, 850, 851, 861, 881, 960, 966, 968, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020], "fed": [8, 128, 352, 365, 403, 953, 969, 974, 1016], "batch": [8, 11, 63, 94, 98, 289, 312, 358, 379, 383, 403, 424, 426, 430, 432, 434, 436, 514, 516, 517, 519, 520, 521, 522, 523, 525, 526, 528, 529, 647, 668, 669, 784, 797, 798, 816, 817, 818, 819, 820, 838, 839, 850, 851, 861, 862, 874, 921, 930, 968, 969, 978, 1005, 1009, 1010, 1013, 1014, 1015, 1016, 1018, 1020, 1021], "remain": [8, 25, 27, 70, 115, 120, 122, 144, 166, 196, 212, 241, 254, 258, 262, 265, 392, 396, 397, 399, 403, 447, 450, 498, 499, 504, 511, 517, 553, 593, 594, 682, 745, 751, 781, 782, 783, 784, 787, 789, 816, 817, 818, 820, 922, 953, 954, 963, 964, 968, 974, 980, 985, 1007, 1013, 1019], "hashingvector": [8, 343, 358, 472, 571, 573, 1006, 1012, 1013, 1014, 1015, 1018], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 53, 56, 79, 85, 91, 94, 97, 100, 104, 105, 108, 111, 113, 118, 119, 121, 125, 142, 145, 148, 154, 157, 161, 166, 175, 180, 188, 197, 205, 206, 207, 209, 213, 214, 217, 219, 220, 225, 226, 229, 232, 236, 247, 252, 253, 256, 258, 262, 263, 265, 267, 268, 295, 298, 300, 301, 302, 303, 304, 305, 308, 310, 311, 317, 318, 326, 336, 337, 338, 341, 346, 347, 352, 356, 357, 358, 364, 366, 367, 369, 370, 372, 374, 376, 377, 378, 381, 382, 383, 384, 386, 389, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 416, 421, 428, 430, 431, 435, 444, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 470, 479, 514, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 565, 566, 567, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 592, 593, 594, 596, 598, 602, 605, 606, 608, 610, 611, 612, 613, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 671, 674, 675, 676, 679, 682, 690, 695, 699, 707, 711, 712, 713, 721, 724, 737, 745, 750, 751, 752, 755, 763, 764, 765, 766, 769, 772, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 806, 808, 809, 810, 813, 814, 815, 816, 817, 818, 819, 820, 824, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 844, 851, 854, 856, 857, 860, 861, 867, 869, 875, 876, 877, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 909, 910, 911, 912, 918, 949, 953, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 985, 987, 990, 991, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "word": [8, 14, 19, 69, 148, 229, 232, 328, 342, 343, 356, 365, 366, 370, 372, 375, 383, 392, 395, 397, 398, 399, 400, 436, 494, 506, 517, 519, 524, 571, 572, 574, 679, 810, 820, 878, 958, 962, 966, 969, 974, 977, 978, 988, 997, 998, 1005, 1013], "federicov": 8, "itertool": [8, 42, 44, 61, 129, 167, 181, 242, 247, 256, 263, 265, 402], "pathlib": [8, 1020], "path": [8, 16, 17, 94, 163, 174, 181, 185, 215, 346, 364, 368, 370, 374, 378, 379, 383, 425, 429, 433, 469, 470, 471, 482, 483, 484, 486, 487, 488, 491, 492, 531, 540, 541, 546, 547, 548, 549, 576, 577, 580, 629, 630, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 664, 665, 666, 667, 668, 669, 671, 841, 842, 888, 889, 890, 891, 892, 923, 953, 960, 961, 970, 984, 985, 1005, 1006, 1009, 1011, 1012, 1014, 1015, 1017, 1018, 1020, 1021], "hashlib": 8, "sha256": [8, 1020], "tarfil": 8, "sy": [8, 12, 16, 19, 204, 229, 276, 320, 343, 365, 381, 600], "rcparam": [8, 225, 230, 305], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 196, 214, 311, 357, 364, 368, 369, 373, 383, 384, 389, 400, 403, 404, 432, 555, 594, 615, 682, 967, 999, 1011, 1012, 1013], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 65, 69, 97, 163, 257, 320, 340, 341, 342, 343, 358, 359, 365, 395, 396, 403, 447, 486, 527, 854, 962, 998, 999, 1005, 1006, 1007, 1008, 1011, 1012], "passiveaggressiveclassifi": [8, 203, 356, 358, 960, 965, 1006, 1009, 1010, 1012, 1013, 1016, 1018], "perceptron": [8, 163, 203, 206, 212, 235, 291, 296, 358, 381, 403, 497, 498, 505, 649, 659, 807, 837, 838, 839, 842, 861, 962, 965, 969, 978, 986, 1001, 1009, 1011, 1012, 1013, 1017], "naive_bay": [8, 24, 25, 27, 31, 126, 130, 257, 258, 341, 352, 358, 359, 365, 396, 402, 421, 552, 842, 958, 965, 966, 999, 1006, 1007, 1009, 1010, 1011, 1012], "multinomialnb": [8, 358, 365, 396, 403, 816, 817, 818, 819, 966, 999, 1007, 1009, 1012, 1013, 1017, 1018, 1020], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 70, 124, 151, 154, 156, 166, 167, 196, 214, 218, 226, 254, 298, 350, 352, 357, 365, 368, 369, 370, 372, 374, 375, 376, 383, 395, 396, 397, 399, 400, 402, 404, 407, 424, 426, 434, 436, 437, 442, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 470, 471, 474, 475, 479, 480, 486, 491, 492, 497, 505, 510, 514, 515, 520, 521, 522, 523, 525, 528, 529, 531, 535, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 564, 571, 572, 573, 574, 580, 585, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 612, 614, 615, 616, 618, 619, 620, 621, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 673, 677, 678, 680, 681, 683, 685, 687, 695, 724, 743, 749, 756, 760, 764, 771, 779, 782, 783, 784, 785, 793, 797, 798, 801, 804, 805, 807, 810, 812, 815, 816, 817, 818, 820, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 838, 839, 845, 862, 868, 881, 882, 883, 884, 885, 886, 887, 893, 895, 899, 901, 902, 903, 905, 917, 918, 937, 948, 952, 953, 954, 959, 960, 964, 969, 970, 976, 978, 979, 980, 988, 1012, 1013, 1014], "builder": [8, 10, 374], "__file__": [8, 10, 1018], "global": [8, 10, 42, 56, 94, 196, 217, 218, 238, 265, 294, 309, 352, 356, 357, 376, 381, 383, 395, 405, 426, 435, 445, 451, 573, 609, 615, 671, 674, 675, 678, 690, 711, 712, 720, 765, 766, 769, 770, 797, 862, 877, 879, 932, 934, 953, 961, 964, 970, 974, 980, 988, 1013, 1020], "21578": [8, 1018], "uci": [8, 303, 364, 367, 483, 485, 487, 493], "ml": [8, 364, 367, 375, 483, 485, 493, 960, 962, 984, 985, 988], "uncompress": [8, 491, 492, 999], "reuterspars": 8, "util": [8, 10, 11, 48, 55, 60, 88, 128, 196, 198, 204, 212, 219, 228, 233, 244, 262, 264, 276, 300, 308, 319, 328, 341, 357, 359, 364, 365, 368, 370, 371, 372, 373, 381, 382, 383, 391, 395, 396, 399, 400, 403, 436, 451, 554, 555, 556, 560, 653, 682, 779, 801, 807, 808, 848, 953, 959, 962, 964, 965, 974, 975, 980, 984, 988, 991, 1001, 1005, 1006, 1008, 1009, 1011, 1012], "pars": [8, 17, 356, 364, 365, 371, 491], "sgml": [8, 356], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 50, 67, 75, 82, 86, 92, 106, 132, 138, 146, 158, 162, 170, 173, 215, 223, 239, 248, 272, 275, 290, 296, 306, 314, 322, 339, 341, 342, 344, 351, 356, 358, 364, 365, 367, 368, 370, 374, 375, 376, 378, 381, 389, 396, 400, 470, 476, 477, 479, 486, 491, 492, 517, 562, 563, 571, 572, 574, 893, 967, 980, 984, 987, 991, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020], "yield": [8, 9, 25, 45, 77, 78, 79, 80, 119, 121, 191, 196, 211, 214, 261, 274, 292, 298, 325, 330, 341, 342, 352, 356, 358, 364, 375, 383, 392, 395, 397, 399, 400, 402, 403, 404, 405, 421, 432, 451, 455, 491, 492, 520, 521, 522, 524, 529, 536, 537, 542, 543, 544, 545, 550, 551, 577, 585, 630, 634, 635, 636, 638, 644, 646, 648, 656, 658, 669, 682, 708, 763, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 804, 805, 806, 808, 812, 815, 873, 874, 912, 919, 921, 922, 956, 958, 960, 961, 964, 979, 980, 994, 1010, 1011, 1013, 1016, 1018], "__init__": [8, 16, 55, 156, 276, 328, 370, 372, 374, 375, 376, 377, 383, 403, 409, 925, 1006, 1011, 1013, 1018, 1019, 1020, 1021], "self": [8, 16, 19, 25, 27, 55, 156, 163, 276, 315, 321, 322, 328, 341, 364, 370, 371, 372, 375, 376, 377, 378, 395, 403, 405, 409, 412, 416, 417, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 483, 491, 492, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 686, 777, 778, 779, 782, 783, 793, 798, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 925, 930, 938, 967, 985, 986, 988, 1001, 1007, 1012, 1019], "latin": [8, 403], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 70, 225, 318, 364, 369, 373, 374, 378, 381, 383, 403, 479, 809, 985, 987, 1010, 1014, 1015, 1016, 1019, 1020, 1021], "attr": [8, 55], "start_": 8, "getattr": [8, 298, 372, 383], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 69, 145, 235, 313, 367], "topic_d": 8, "fd": 8, "chunk": [8, 50, 356, 357, 395, 400, 406, 428, 432, 451, 521, 760, 763, 809, 810, 816, 817, 818, 819, 820, 879, 966, 1012, 1013, 1014, 1015, 1016], "feed": [8, 85, 197, 343, 365, 375, 381, 395, 403, 854, 965], "decod": [8, 289, 365, 383, 486, 552, 571, 572, 574, 1005, 1006], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 59, 65, 77, 78, 81, 99, 112, 118, 121, 124, 128, 148, 149, 152, 153, 154, 155, 156, 166, 168, 202, 218, 225, 231, 234, 241, 247, 256, 257, 282, 283, 298, 308, 328, 333, 342, 352, 365, 370, 372, 378, 381, 383, 384, 393, 394, 395, 398, 399, 402, 405, 433, 438, 455, 491, 492, 515, 546, 611, 626, 630, 644, 655, 657, 670, 688, 728, 777, 797, 798, 816, 817, 818, 820, 827, 902, 953, 957, 958, 960, 961, 963, 964, 965, 967, 970, 971, 974, 979, 980, 988, 997, 1008, 1012, 1013, 1014], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 70, 84, 103, 115, 116, 119, 141, 145, 196, 204, 234, 246, 254, 255, 260, 268, 285, 289, 311, 343, 350, 358, 359, 363, 364, 365, 367, 370, 373, 377, 381, 391, 392, 393, 395, 396, 397, 398, 400, 402, 403, 404, 405, 410, 411, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 680, 681, 683, 684, 685, 718, 775, 777, 778, 779, 782, 783, 785, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 896, 925, 948, 958, 960, 965, 967, 968, 970, 974, 977, 978, 979, 988, 990, 996, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "end_reut": 8, "sub": [8, 37, 48, 53, 56, 59, 69, 104, 233, 241, 310, 316, 317, 325, 328, 337, 365, 370, 372, 376, 396, 402, 403, 519, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 654, 960, 964, 978, 999, 1015, 1019], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 71, 81, 94, 97, 109, 112, 117, 119, 120, 122, 123, 145, 157, 160, 163, 175, 176, 204, 211, 243, 244, 249, 251, 267, 272, 292, 294, 295, 300, 310, 317, 319, 320, 328, 370, 372, 376, 378, 379, 382, 383, 390, 395, 398, 400, 402, 404, 407, 421, 424, 425, 427, 429, 430, 431, 432, 435, 437, 442, 444, 445, 446, 454, 455, 461, 465, 466, 467, 498, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 542, 543, 544, 545, 547, 550, 551, 564, 565, 571, 572, 574, 576, 577, 585, 593, 610, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 815, 830, 837, 838, 839, 840, 841, 845, 852, 854, 856, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 896, 917, 918, 924, 930, 954, 960, 961, 963, 964, 967, 968, 969, 977, 978, 979, 980, 985, 988, 994, 998, 999, 1001, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "archiv": [8, 364, 365, 367, 368, 389, 395, 426, 485, 493, 740, 741, 962, 979, 999], "exist": [8, 9, 17, 19, 53, 214, 256, 294, 298, 364, 369, 372, 373, 376, 381, 383, 384, 386, 389, 395, 399, 400, 402, 403, 405, 410, 418, 421, 434, 436, 451, 482, 532, 538, 539, 540, 541, 547, 548, 568, 572, 580, 586, 615, 616, 628, 659, 660, 661, 663, 681, 683, 685, 744, 747, 751, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 826, 841, 846, 854, 855, 948, 956, 961, 963, 964, 968, 970, 971, 974, 980, 984, 988, 998, 1005, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "str": [8, 10, 16, 57, 59, 103, 105, 117, 214, 234, 256, 268, 276, 286, 326, 341, 364, 365, 379, 403, 406, 407, 411, 415, 422, 423, 425, 426, 427, 428, 429, 430, 432, 433, 435, 440, 447, 448, 449, 450, 451, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 534, 544, 545, 549, 550, 551, 552, 553, 559, 564, 565, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 600, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 642, 649, 650, 654, 656, 658, 659, 661, 671, 672, 675, 679, 680, 681, 682, 683, 685, 690, 692, 694, 696, 709, 711, 712, 714, 715, 720, 753, 756, 760, 761, 762, 763, 764, 765, 766, 769, 771, 772, 773, 779, 782, 783, 785, 790, 791, 793, 802, 803, 804, 805, 806, 808, 813, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 879, 893, 894, 895, 897, 900, 901, 902, 905, 908, 910, 914, 927, 948, 949, 952, 1020], "kei": [8, 9, 10, 17, 19, 42, 118, 128, 160, 165, 214, 237, 257, 259, 260, 309, 310, 311, 312, 313, 358, 363, 372, 375, 376, 377, 381, 383, 384, 386, 395, 396, 399, 405, 447, 455, 544, 545, 550, 551, 552, 553, 571, 574, 577, 600, 609, 615, 616, 617, 642, 779, 782, 783, 791, 793, 804, 840, 841, 896, 906, 929, 985, 999, 1002, 1011, 1017, 1018, 1020, 1021], "download_url": 8, "ic": [8, 310, 364, 367, 385, 485, 493, 615, 616, 1001, 1017, 1018], "databas": [8, 303, 356, 358, 365, 367, 395, 400, 402, 403, 406, 426, 428, 493, 538, 539, 874, 976], "reuters21578": 8, "mld": 8, "tar": [8, 374], "gz": [8, 374, 386, 491, 492], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 61, 81, 98, 112, 117, 121, 156, 166, 167, 185, 198, 214, 218, 225, 229, 231, 232, 233, 256, 257, 260, 267, 276, 281, 289, 292, 293, 300, 341, 342, 350, 370, 374, 376, 402, 403, 405, 407, 421, 432, 491, 503, 516, 552, 608, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 655, 656, 657, 659, 662, 664, 665, 666, 667, 686, 692, 750, 770, 774, 776, 782, 783, 807, 845, 854, 857, 868, 881, 882, 896, 926, 928, 930, 951, 980], "mkdir": [8, 376, 378], "parent": [8, 165, 370, 374, 383, 395, 426, 446, 1005], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 67, 75, 82, 86, 92, 106, 132, 138, 146, 158, 162, 170, 173, 215, 223, 229, 239, 248, 272, 275, 290, 296, 306, 314, 322, 339, 341, 343, 344, 351, 365, 376, 883, 884, 885, 886, 887, 979], "1e6": [8, 10, 189, 229, 341, 343, 356, 519, 875, 964, 976], "current_sz_mb": 8, "stdout": [8, 94, 204, 810, 830, 838, 839], "write": [8, 17, 161, 341, 356, 357, 364, 368, 369, 373, 374, 375, 376, 378, 379, 381, 383, 386, 396, 400, 403, 975, 985, 999, 1006, 1018], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 320, 365, 376, 389, 471, 483, 486, 487, 490, 571, 572, 574, 999, 1005, 1010, 1013, 1014], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 95, 229, 256, 265, 357, 373, 985], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 219, 364, 365, 369, 370, 374, 376, 381, 382, 384, 386, 389, 396, 403, 470, 479, 491, 492, 954, 988, 993, 1008, 1012, 1013, 1015], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 403, 486, 571, 572, 574, 1007], "alternate_sign": [8, 403, 565, 572, 1012], "data_stream": 8, "binari": [8, 13, 25, 27, 108, 113, 124, 126, 142, 156, 166, 172, 187, 189, 196, 204, 218, 226, 237, 253, 254, 259, 265, 271, 274, 280, 328, 334, 350, 352, 364, 365, 366, 372, 374, 375, 383, 386, 389, 392, 393, 394, 395, 402, 403, 405, 421, 422, 423, 435, 470, 483, 491, 492, 503, 506, 532, 533, 536, 538, 542, 544, 545, 549, 550, 551, 564, 571, 572, 574, 576, 577, 585, 593, 610, 611, 612, 613, 615, 616, 641, 642, 649, 651, 656, 657, 658, 659, 683, 686, 690, 691, 692, 695, 696, 698, 701, 703, 709, 711, 712, 716, 717, 720, 721, 722, 723, 724, 725, 764, 765, 766, 769, 770, 771, 774, 776, 779, 780, 782, 783, 784, 785, 793, 797, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 816, 827, 837, 848, 852, 854, 862, 865, 881, 883, 886, 927, 954, 965, 966, 967, 968, 969, 971, 972, 974, 975, 976, 978, 979, 980, 987, 990, 1002, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1019, 1020], "acq": 8, "chosen": [8, 46, 72, 128, 149, 166, 167, 185, 197, 200, 213, 232, 250, 251, 253, 259, 342, 352, 356, 381, 395, 397, 398, 402, 405, 424, 432, 434, 436, 437, 443, 479, 506, 518, 540, 541, 542, 543, 547, 548, 630, 636, 639, 641, 642, 644, 646, 654, 659, 660, 661, 662, 663, 673, 677, 774, 777, 778, 779, 782, 783, 793, 811, 830, 881, 889, 890, 891, 892, 918, 953, 956, 958, 960, 961, 963, 965, 970, 971, 978, 994, 995, 997, 998, 1013], "evenli": [8, 39, 52, 121, 251, 403, 922, 999], "care": [8, 122, 356, 358, 374, 376, 381, 383, 384, 395, 397, 403, 421, 443, 452, 623, 641, 642, 649, 651, 659, 660, 661, 678, 881, 961, 979, 988], "all_class": 8, "positive_class": [8, 695], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 71, 72, 94, 97, 114, 130, 134, 136, 157, 160, 161, 166, 167, 175, 182, 188, 189, 203, 204, 205, 208, 209, 211, 217, 218, 219, 220, 235, 236, 241, 242, 243, 244, 247, 269, 286, 292, 293, 294, 304, 310, 311, 312, 316, 317, 325, 341, 342, 376, 383, 402, 407, 424, 427, 430, 431, 432, 437, 442, 444, 454, 455, 461, 465, 466, 467, 514, 515, 516, 518, 519, 520, 521, 522, 523, 526, 528, 529, 530, 531, 544, 545, 610, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 655, 657, 659, 660, 661, 662, 663, 665, 666, 670, 671, 672, 673, 676, 677, 777, 778, 793, 830, 838, 839, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 954, 956, 960, 967, 968, 977, 978, 995, 999, 1006, 1009, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021], "nb": [8, 102, 126, 352, 818, 966], "multinomi": [8, 30, 163, 174, 211, 215, 232, 251, 265, 365, 366, 370, 400, 402, 479, 495, 506, 534, 536, 542, 544, 552, 614, 641, 642, 723, 807, 815, 816, 817, 818, 819, 820, 861, 904, 964, 965, 980, 986, 999, 1001, 1005, 1009, 1011, 1012, 1013, 1018, 1019], "passiv": [8, 203, 649, 650, 986, 1001, 1006], "aggress": [8, 203, 649, 650, 782, 783, 986, 1001, 1006], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 395, 400, 432, 517, 659, 837, 838, 839, 984, 1005], "tupl": [8, 48, 49, 104, 167, 214, 363, 364, 365, 372, 383, 399, 407, 418, 434, 436, 447, 450, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 487, 488, 491, 493, 494, 495, 496, 497, 505, 516, 529, 544, 545, 550, 551, 552, 553, 565, 566, 567, 570, 571, 572, 574, 610, 615, 616, 617, 695, 702, 763, 765, 777, 779, 793, 804, 821, 822, 840, 841, 851, 852, 856, 859, 867, 871, 883, 884, 885, 886, 887, 896, 902, 903, 905, 909, 910, 911, 912, 931, 948, 971, 1011, 1012, 1016, 1017, 1018], "x_text": 8, "befor": [8, 12, 25, 42, 69, 71, 74, 85, 128, 141, 155, 157, 159, 162, 163, 166, 167, 169, 177, 184, 185, 189, 256, 263, 278, 299, 302, 303, 305, 311, 331, 352, 356, 357, 365, 368, 370, 372, 373, 375, 376, 378, 379, 381, 383, 384, 385, 389, 393, 395, 396, 397, 399, 400, 404, 407, 408, 427, 430, 431, 432, 442, 444, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 473, 484, 517, 520, 521, 522, 523, 524, 527, 529, 530, 544, 545, 548, 550, 552, 553, 560, 571, 572, 574, 594, 610, 611, 613, 628, 633, 634, 637, 638, 639, 647, 648, 649, 650, 651, 654, 659, 661, 670, 675, 677, 682, 777, 778, 784, 785, 797, 798, 800, 803, 805, 807, 821, 822, 829, 830, 831, 832, 833, 836, 841, 842, 845, 848, 855, 859, 860, 861, 862, 866, 867, 869, 870, 871, 872, 878, 889, 890, 918, 948, 954, 960, 961, 964, 970, 974, 978, 979, 980, 985, 999, 1005, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "exclud": [8, 19, 165, 298, 370, 374, 383, 447, 449, 711, 712, 720, 765, 766, 769, 792, 800, 856, 939, 964, 967, 1014, 1021], "invalid": [8, 196, 383, 561, 654, 695, 756, 960, 964, 1011, 1013, 1015, 1016, 1018, 1019], "assign": [8, 17, 37, 46, 49, 56, 57, 59, 114, 124, 126, 141, 150, 209, 214, 225, 230, 232, 292, 300, 305, 321, 336, 342, 365, 370, 372, 383, 392, 399, 400, 402, 403, 404, 405, 424, 425, 426, 427, 429, 430, 431, 432, 435, 437, 439, 442, 443, 444, 445, 498, 519, 544, 545, 576, 577, 590, 591, 593, 641, 642, 649, 650, 651, 659, 660, 661, 687, 688, 698, 699, 700, 703, 713, 721, 725, 737, 739, 768, 773, 774, 775, 779, 782, 783, 785, 788, 793, 802, 803, 804, 805, 808, 825, 831, 833, 834, 835, 848, 876, 877, 881, 882, 883, 884, 885, 886, 887, 958, 963, 964, 965, 966, 967, 968, 969, 974, 977, 980, 988, 990, 999, 1005, 1010, 1012, 1013], "format": [8, 11, 12, 19, 20, 21, 48, 54, 57, 60, 69, 79, 94, 104, 112, 117, 120, 122, 134, 140, 141, 169, 172, 176, 182, 187, 196, 214, 251, 261, 263, 264, 267, 270, 280, 281, 284, 285, 302, 308, 335, 346, 350, 356, 363, 369, 370, 372, 373, 378, 379, 382, 383, 396, 399, 402, 403, 417, 426, 427, 429, 430, 432, 433, 435, 442, 447, 451, 465, 466, 467, 468, 470, 472, 479, 480, 481, 491, 492, 493, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 534, 540, 541, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 629, 635, 641, 642, 643, 645, 649, 651, 659, 660, 661, 671, 672, 675, 680, 696, 703, 721, 722, 733, 750, 772, 810, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 868, 873, 874, 879, 881, 893, 901, 902, 923, 926, 930, 935, 938, 940, 941, 942, 943, 944, 945, 954, 964, 967, 972, 974, 975, 978, 980, 984, 990, 991, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1020], "islic": [8, 44, 61], "asarrai": [8, 17, 196, 214, 295, 318, 341, 342, 372, 383, 391, 568, 569, 708, 738, 829, 831, 832, 833, 974, 979], "int": [8, 10, 13, 16, 17, 19, 37, 44, 61, 80, 112, 120, 124, 136, 137, 149, 150, 151, 157, 161, 165, 177, 187, 189, 196, 214, 222, 225, 231, 234, 241, 251, 254, 255, 256, 276, 281, 283, 289, 305, 317, 343, 365, 370, 372, 381, 383, 393, 396, 399, 403, 406, 407, 410, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 471, 474, 475, 477, 478, 479, 480, 485, 486, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 590, 591, 593, 594, 600, 610, 611, 612, 613, 614, 615, 616, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 690, 692, 696, 708, 709, 711, 712, 713, 716, 720, 738, 739, 751, 756, 760, 761, 762, 763, 764, 765, 766, 769, 771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 897, 901, 902, 904, 905, 917, 918, 920, 921, 922, 923, 929, 933, 935, 938, 943, 944, 960, 971, 1005, 1011, 1015, 1016], "iter_minibatch": 8, "minibatch_s": [8, 358], "statist": [8, 80, 108, 112, 113, 123, 134, 135, 136, 137, 140, 144, 145, 163, 165, 166, 167, 168, 184, 249, 253, 255, 258, 265, 272, 298, 304, 310, 352, 359, 363, 365, 367, 370, 376, 383, 393, 395, 396, 397, 399, 400, 402, 404, 418, 452, 457, 476, 477, 499, 500, 501, 503, 505, 524, 529, 542, 543, 545, 587, 588, 589, 592, 610, 613, 617, 618, 627, 632, 639, 673, 677, 679, 693, 699, 704, 705, 706, 713, 725, 770, 779, 795, 811, 838, 839, 857, 858, 859, 861, 866, 869, 870, 872, 886, 889, 890, 939, 953, 954, 958, 960, 961, 963, 964, 965, 966, 971, 974, 978, 979, 980, 981, 982, 983, 991, 997, 998, 1010, 1013, 1016, 1017, 1019, 1020], "test_stat": 8, "n_test": [8, 10, 33, 112, 256, 1005, 1008], "n_test_po": 8, "hold": [8, 16, 26, 27, 196, 257, 350, 363, 370, 371, 372, 393, 395, 399, 402, 403, 405, 486, 544, 545, 572, 615, 616, 617, 718, 779, 782, 783, 793, 817, 848, 849, 854, 855, 862, 865, 954, 958, 964, 968, 978, 979, 980, 987, 990, 999, 1013, 1017], "n_test_docu": 8, "tick": [8, 43, 59, 151, 235, 267, 615, 805], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 60, 80, 91, 97, 104, 120, 121, 141, 145, 156, 166, 177, 183, 192, 196, 211, 214, 218, 220, 265, 276, 283, 286, 312, 320, 333, 336, 341, 342, 343, 350, 367, 376, 383, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 405, 416, 426, 427, 430, 432, 442, 447, 448, 465, 466, 467, 498, 503, 506, 514, 517, 519, 520, 524, 527, 528, 529, 532, 533, 535, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 573, 574, 594, 596, 606, 608, 618, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 656, 659, 660, 661, 662, 664, 667, 673, 677, 679, 682, 692, 693, 702, 708, 723, 738, 740, 741, 745, 770, 809, 810, 814, 815, 824, 828, 832, 839, 840, 860, 861, 881, 882, 884, 887, 889, 890, 891, 892, 920, 939, 945, 950, 960, 964, 965, 966, 967, 979, 980, 997, 1008, 1009, 1011, 1013, 1014, 1016], "cls_name": [8, 10], "string": [8, 27, 70, 117, 156, 214, 227, 260, 311, 343, 356, 364, 365, 370, 371, 372, 376, 383, 389, 396, 399, 402, 403, 404, 406, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 472, 473, 479, 488, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 564, 565, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 600, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 682, 692, 694, 702, 714, 744, 747, 753, 756, 760, 761, 762, 763, 772, 773, 777, 778, 779, 782, 783, 785, 793, 804, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 899, 901, 902, 909, 910, 911, 928, 932, 948, 949, 953, 954, 964, 977, 979, 990, 997, 1005, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "n_train": [8, 10, 33, 112, 256, 1005, 1008], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 177, 259, 356, 392, 397, 404, 491, 492, 532, 580, 610, 613, 627, 854, 858, 870, 954, 960, 1013, 1017], "mini": [8, 63, 94, 312, 358, 383, 403, 424, 426, 430, 432, 434, 436, 514, 516, 519, 520, 521, 522, 523, 525, 526, 528, 529, 968, 969, 1005, 1016, 1018], "smaller": [8, 24, 40, 46, 81, 153, 154, 160, 181, 185, 187, 200, 229, 282, 283, 292, 298, 328, 336, 342, 370, 392, 394, 395, 397, 399, 400, 402, 404, 405, 423, 424, 433, 437, 439, 497, 517, 518, 540, 541, 542, 543, 547, 548, 576, 593, 602, 616, 629, 630, 632, 633, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 655, 657, 665, 666, 675, 692, 777, 782, 783, 827, 830, 854, 855, 873, 874, 881, 889, 890, 891, 892, 918, 958, 960, 961, 963, 964, 965, 967, 968, 970, 974, 976, 978, 979, 980, 985, 999, 1013, 1018], "bigger": [8, 40, 59, 209, 256, 295, 338, 342, 355, 357, 403, 422, 423, 491, 521, 827, 994, 1001], "overhead": [8, 276, 357, 358, 370, 376, 379, 381, 383, 402, 425, 429, 432, 517, 682, 813, 814, 816, 817, 818, 819, 820, 821, 822, 932, 966, 967, 1008, 1013, 1014, 1017], "partial": [8, 12, 50, 83, 86, 125, 163, 164, 170, 214, 224, 239, 310, 313, 367, 383, 385, 397, 398, 400, 402, 405, 447, 465, 466, 467, 468, 479, 484, 517, 519, 524, 545, 572, 615, 616, 640, 770, 807, 809, 810, 837, 838, 839, 842, 854, 855, 858, 861, 890, 961, 968, 978, 999, 1001, 1002, 1006, 1013, 1014, 1018], "stream": [8, 395, 400, 403, 445, 572, 850, 851, 861, 956, 984, 1013, 1016], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 74, 113, 118, 121, 128, 166, 194, 198, 204, 218, 231, 233, 243, 253, 259, 312, 317, 342, 363, 370, 371, 372, 379, 396, 447, 509, 544, 545, 571, 572, 574, 615, 791, 854, 876, 877, 896, 897, 923, 956, 977, 985, 990], "updat": [8, 16, 44, 61, 109, 123, 230, 308, 343, 368, 369, 370, 374, 378, 383, 395, 400, 402, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 896, 939, 960, 967, 968, 969, 978, 987, 988, 1006, 1012, 1013, 1014, 1016, 1018, 1020, 1021], "accumul": [8, 50, 115, 116, 185, 374, 376, 395, 403, 964, 1006, 1013], "acc_histori": 8, "run_histori": 8, "runner": [8, 34, 50, 111, 188, 205, 333, 347], "scikit_learn_data": [8, 50, 365, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "986": 8, "159": [8, 53, 365, 1005], "988": 8, "844": [8, 402, 538, 539], "1107": 8, "902": 8, "1103": 8, "839": [8, 663], "1083": 8, "903": 8, "92": [8, 32, 34, 50, 97, 142, 172, 254, 295, 316, 317, 328, 365, 367, 521, 523, 530, 545, 580, 779, 793, 959, 999], "1078": 8, "3748": 8, "508": [8, 997], "921": 8, "58": [8, 65, 78, 295, 367, 397, 408, 458, 746, 974, 995], "1453": 8, "1451": 8, "857": [8, 257, 342], "1444": 8, "942": [8, 196, 215], "1442": 8, "6706": 8, "865": 8, "953": [8, 49], "1624": [8, 481], "931": 8, "1623": [8, 19], "876": 8, "1617": 8, "1615": 8, "9615": 8, "1258": 8, "954": [8, 857, 869], "1686": 8, "934": [8, 994], "1685": 8, "1681": 8, "962": 8, "1680": [8, 367], "12406": 8, "1497": 8, "952": [8, 49, 248], "1728": 8, "946": [8, 80], "1727": 8, "905": [8, 254], "941": 8, "1722": 8, "14833": 8, "1785": 8, "949": 8, "67": [8, 65, 166, 214, 295, 367, 499, 500, 501, 610, 650, 696, 793, 954, 964, 978, 1005], "1710": 8, "909": 8, "1707": 8, "963": [8, 31, 35, 994], "17695": 8, "961": [8, 368, 386, 387, 388, 838], "1745": 8, "913": [8, 402, 542], "1742": 8, "957": [8, 405, 710, 964], "curv": [8, 11, 23, 28, 37, 74, 77, 112, 114, 120, 163, 174, 175, 186, 196, 214, 215, 217, 219, 222, 224, 226, 234, 235, 239, 240, 248, 249, 256, 266, 272, 293, 308, 348, 377, 390, 394, 399, 401, 421, 422, 423, 485, 493, 498, 504, 508, 547, 615, 628, 641, 681, 683, 685, 689, 690, 691, 692, 709, 711, 723, 724, 764, 766, 769, 770, 771, 777, 778, 785, 796, 805, 807, 808, 819, 842, 861, 881, 886, 960, 961, 963, 964, 970, 980, 986, 988, 1001, 1002, 1007, 1008, 1011, 1015, 1017, 1018, 1019, 1020, 1021], "evolut": [8, 10, 268, 356, 358, 529], "cours": [8, 9, 172, 356, 370, 372, 400, 403, 404, 954, 959, 960, 988], "valid": [8, 13, 26, 54, 55, 70, 73, 77, 81, 102, 113, 117, 118, 119, 120, 121, 133, 138, 139, 143, 145, 146, 156, 163, 166, 168, 174, 184, 196, 198, 204, 214, 215, 233, 243, 246, 249, 253, 256, 257, 258, 260, 262, 264, 265, 270, 272, 280, 295, 297, 299, 304, 306, 308, 310, 319, 328, 336, 346, 357, 365, 370, 373, 381, 382, 383, 389, 390, 393, 395, 396, 397, 400, 401, 402, 403, 404, 405, 411, 421, 426, 427, 429, 430, 432, 433, 440, 446, 447, 451, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 476, 484, 485, 487, 498, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 555, 558, 560, 565, 566, 572, 576, 577, 580, 585, 615, 617, 621, 622, 623, 624, 625, 626, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 675, 682, 684, 685, 689, 696, 710, 744, 747, 756, 760, 761, 762, 767, 772, 773, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 815, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 853, 861, 862, 873, 874, 876, 877, 879, 881, 883, 886, 888, 889, 890, 891, 892, 901, 902, 905, 912, 924, 954, 963, 964, 965, 968, 972, 974, 976, 978, 979, 980, 984, 985, 988, 990, 993, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "consumpt": [8, 356, 517, 540, 541, 547, 548, 779, 793, 802, 803, 804, 889, 890, 891, 892, 930, 990, 1005, 1007, 1011, 1013, 1014, 1019], "queue": [8, 967, 1008], "up": [8, 11, 37, 44, 46, 47, 48, 52, 56, 61, 69, 79, 80, 88, 91, 114, 161, 167, 175, 189, 197, 212, 213, 234, 243, 258, 261, 276, 289, 295, 299, 304, 312, 317, 325, 341, 343, 358, 364, 365, 370, 374, 376, 377, 378, 379, 381, 383, 384, 393, 395, 400, 402, 403, 427, 430, 431, 432, 433, 435, 439, 442, 443, 444, 491, 492, 519, 532, 533, 540, 541, 542, 543, 544, 545, 547, 548, 549, 593, 610, 615, 616, 622, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 664, 665, 666, 667, 675, 688, 751, 777, 778, 781, 782, 783, 785, 805, 855, 856, 859, 871, 889, 890, 891, 892, 895, 918, 921, 922, 953, 960, 961, 964, 967, 974, 978, 979, 985, 987, 988, 998, 999, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "amount": [8, 12, 45, 53, 65, 77, 80, 94, 98, 110, 112, 154, 166, 214, 230, 310, 316, 319, 321, 328, 336, 343, 356, 357, 358, 381, 394, 395, 397, 400, 402, 403, 404, 427, 437, 452, 521, 522, 524, 526, 546, 579, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 648, 664, 667, 675, 782, 783, 821, 822, 827, 862, 877, 878, 891, 892, 959, 960, 963, 966, 968, 974, 976, 977, 978, 979, 997, 998, 1018], "learner": [8, 108, 110, 119, 128, 358, 540, 541, 542, 543, 547, 548, 549, 565, 572, 613, 823, 824, 829, 831, 832, 966, 969, 980, 984, 985, 999], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 61, 85, 151, 200, 201, 205, 207, 225, 237, 260, 284, 286, 299, 324, 326, 329, 330, 971, 1002], "set_ylim": [8, 10, 16, 31, 42, 59, 71, 91, 108, 114, 125, 126, 157, 167, 169, 176, 194, 196, 197, 230, 241, 260, 263, 274, 281, 292, 298, 300, 301, 303, 309, 319, 337], "runtim": [8, 10, 57, 182, 211, 213, 230, 295, 300, 357, 372, 373, 381, 383, 394, 395, 402, 433, 546, 662, 793, 881, 882, 883, 884, 885, 886, 887, 978, 979, 1008, 1012, 1013, 1019, 1020], "gcf": [8, 971], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 71, 115, 118, 119, 122, 130, 141, 145, 156, 160, 167, 175, 241, 246, 255, 257, 261, 274, 303, 304, 312, 313, 342, 372, 398, 564, 615, 631, 652, 663, 964, 971, 978, 980, 1011, 1012, 1013, 1014], "width": [8, 10, 16, 45, 53, 79, 89, 96, 97, 103, 104, 105, 112, 117, 118, 121, 130, 141, 150, 156, 179, 238, 241, 255, 298, 300, 301, 304, 310, 313, 325, 367, 396, 422, 423, 435, 447, 476, 477, 489, 504, 569, 846, 894, 974, 978, 980, 996, 997, 1013], "set_xticklabel": [8, 10, 79, 105, 130, 151, 167, 169, 267, 268, 274], "ymax": [8, 10, 11, 77, 183, 185, 188, 189, 197, 205, 256, 289], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 56, 59, 63, 64, 71, 74, 79, 89, 91, 99, 105, 114, 115, 124, 126, 128, 129, 157, 160, 161, 165, 166, 167, 168, 175, 176, 185, 187, 194, 196, 197, 198, 204, 217, 218, 221, 222, 228, 230, 231, 234, 235, 241, 250, 251, 252, 253, 256, 258, 259, 263, 267, 268, 274, 276, 280, 281, 286, 292, 293, 298, 299, 300, 301, 302, 303, 308, 312, 316, 317, 325, 336, 337, 338, 341, 346], "autolabel": [8, 119], "attach": [8, 119, 341, 418, 826, 1006, 1016], "rect": [8, 52, 119, 175], "height": [8, 14, 53, 97, 118, 145, 169, 298, 304, 341, 401, 476, 477, 489, 569], "get_height": [8, 119], "get_x": [8, 119], "get_width": [8, 119], "va": [8, 119, 267, 284, 286, 335], "setp": [8, 10, 180, 267, 270], "rotat": [8, 40, 93, 96, 99, 106, 120, 130, 163, 169, 220, 267, 268, 274, 328, 335, 398, 400, 405, 407, 487, 515, 524, 533, 597, 680, 861, 893, 960, 1016, 1017], "read": [8, 17, 94, 217, 263, 308, 309, 310, 312, 356, 364, 368, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 395, 406, 407, 408, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 442, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 593, 594, 596, 597, 598, 599, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 914, 953, 960, 964, 965, 984, 988, 999, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018], "feat": [8, 10, 374, 403], "extr": 8, "hash": [8, 107, 132, 163, 342, 343, 356, 358, 362, 370, 373, 381, 402, 497, 527, 540, 549, 564, 565, 572, 623, 816, 929, 956, 999, 1001, 1006, 1009, 1012], "vect": [8, 69, 257, 320, 403, 999], "467": [8, 15], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 55, 56, 69, 70, 73, 74, 77, 79, 85, 91, 96, 100, 108, 109, 112, 116, 119, 123, 125, 127, 128, 140, 145, 147, 148, 149, 150, 153, 154, 155, 156, 158, 163, 165, 167, 168, 172, 185, 192, 193, 196, 198, 200, 204, 210, 213, 214, 217, 218, 220, 222, 225, 227, 228, 230, 231, 233, 256, 263, 268, 269, 277, 290, 303, 307, 308, 310, 319, 328, 329, 333, 334, 336, 337, 342, 343, 349, 352, 356, 367, 370, 375, 378, 382, 398, 400, 402, 403, 498, 593, 594, 596, 597, 598, 602, 605, 606, 830, 953, 960, 964, 967, 970, 976, 977, 978, 979, 988, 990], "robust": [9, 60, 62, 76, 82, 121, 161, 163, 166, 167, 174, 198, 213, 215, 225, 298, 358, 367, 372, 378, 395, 402, 403, 431, 452, 453, 456, 457, 458, 459, 507, 517, 542, 543, 632, 640, 653, 654, 661, 662, 732, 811, 842, 856, 858, 859, 870, 876, 916, 964, 968, 970, 974, 977, 978, 984, 986, 988, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1021], "covari": [9, 12, 29, 33, 35, 78, 82, 84, 102, 105, 124, 148, 155, 225, 240, 242, 245, 246, 247, 248, 359, 379, 383, 395, 398, 400, 405, 465, 466, 467, 468, 487, 498, 502, 510, 515, 517, 524, 529, 531, 532, 533, 546, 593, 594, 596, 605, 606, 627, 628, 633, 637, 639, 665, 666, 669, 672, 676, 777, 778, 779, 798, 963, 970, 974, 986, 1000, 1001, 1005, 1007, 1008, 1009, 1010, 1012, 1014], "wine": [9, 237, 303, 304, 363, 493, 1001], "tool": [9, 11, 166, 254, 259, 352, 363, 364, 365, 368, 370, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 389, 394, 395, 396, 397, 470, 675, 684, 953, 959, 960, 964, 970, 974, 979, 981, 984, 985, 988, 990, 999, 1012, 1015, 1018, 1019, 1020], "purpos": [9, 12, 16, 37, 85, 160, 210, 211, 212, 217, 219, 232, 244, 246, 252, 253, 328, 329, 341, 342, 352, 365, 370, 372, 382, 383, 384, 386, 388, 392, 395, 396, 400, 402, 403, 404, 405, 529, 621, 803, 804, 841, 961, 964, 965, 967, 970, 982, 984, 990, 1017, 1019], "awar": [9, 14, 108, 142, 157, 325, 341, 368, 372, 381, 384, 399, 403, 550, 551, 631, 637, 638, 639, 641, 642, 652, 663, 827, 856, 970, 974, 980, 1002, 1005, 1006, 1019], "thing": [9, 218, 251, 341, 357, 358, 365, 369, 370, 372, 381, 395, 397, 403, 542, 543, 960, 974, 988, 1011], "trivial": [9, 198, 346, 370, 395, 797, 883, 886, 961, 985, 1005], "dimens": [9, 12, 14, 37, 40, 53, 81, 84, 89, 94, 150, 152, 154, 156, 167, 179, 194, 200, 219, 221, 225, 229, 230, 235, 242, 243, 280, 281, 285, 301, 341, 342, 343, 365, 367, 371, 383, 394, 395, 400, 401, 405, 407, 426, 427, 429, 430, 431, 432, 435, 447, 448, 465, 466, 467, 476, 477, 498, 507, 508, 512, 513, 516, 524, 532, 565, 566, 567, 568, 570, 572, 580, 602, 605, 624, 627, 642, 673, 674, 675, 677, 678, 682, 746, 802, 821, 822, 826, 840, 873, 874, 875, 883, 884, 885, 886, 887, 901, 902, 903, 927, 935, 938, 954, 956, 958, 960, 961, 962, 965, 967, 968, 970, 976, 979, 990, 997, 998, 1012, 1014, 1015, 1017], "below": [9, 25, 26, 27, 32, 59, 69, 74, 79, 88, 89, 94, 113, 115, 116, 121, 140, 165, 167, 179, 192, 193, 196, 198, 212, 213, 218, 222, 227, 236, 251, 254, 259, 261, 262, 263, 298, 302, 308, 309, 310, 311, 312, 313, 332, 333, 341, 350, 352, 357, 363, 364, 368, 370, 372, 374, 375, 379, 383, 384, 386, 395, 397, 398, 399, 400, 402, 403, 404, 405, 431, 454, 455, 461, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 493, 514, 520, 525, 531, 565, 578, 579, 580, 581, 582, 583, 616, 629, 635, 641, 642, 650, 656, 658, 675, 682, 688, 725, 745, 777, 778, 779, 790, 793, 810, 841, 844, 854, 855, 858, 864, 870, 953, 954, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 970, 971, 972, 974, 978, 979, 980, 981, 984, 992, 999, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "main": [9, 16, 32, 61, 85, 98, 118, 163, 225, 265, 307, 336, 341, 356, 357, 358, 363, 368, 370, 372, 374, 376, 378, 381, 382, 383, 385, 393, 394, 395, 400, 402, 403, 405, 486, 508, 513, 532, 533, 608, 696, 811, 953, 961, 963, 964, 971, 976, 985, 987, 996, 999, 1005, 1008, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "empir": [9, 24, 25, 36, 67, 76, 79, 81, 82, 163, 214, 262, 298, 393, 399, 402, 405, 430, 432, 443, 452, 453, 454, 457, 460, 461, 515, 517, 522, 524, 526, 532, 534, 548, 573, 586, 622, 632, 650, 654, 661, 662, 699, 704, 705, 706, 806, 816, 817, 818, 820, 839, 862, 904, 938, 956, 958, 964, 966, 968, 974, 976, 978, 1000, 1001], "heterogen": [9, 24, 68, 70, 75, 163, 167, 196, 238, 303, 308, 362, 364, 381, 447, 471, 527, 564, 574, 696, 841, 845, 881, 961, 971, 974, 984, 1001, 1009, 1013, 1015, 1016], "mode": [9, 10, 46, 47, 79, 196, 225, 276, 278, 295, 308, 370, 373, 378, 379, 381, 392, 398, 402, 406, 427, 428, 430, 432, 435, 442, 445, 454, 455, 461, 465, 470, 491, 492, 540, 544, 547, 575, 578, 579, 581, 582, 583, 593, 610, 627, 628, 641, 642, 649, 651, 656, 657, 658, 659, 662, 665, 666, 672, 676, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 837, 881, 883, 886, 889, 891, 907, 917, 918, 920, 967, 970, 984, 990, 991, 998, 1006, 1014, 1019], "stick": [9, 777, 963], "bias": [9, 27, 81, 97, 121, 127, 165, 166, 168, 200, 261, 365, 385, 393, 402, 507, 532, 837, 861, 872, 959, 963, 972, 978, 980], "yet": [9, 56, 214, 246, 257, 343, 358, 365, 369, 374, 381, 385, 386, 399, 400, 402, 403, 405, 431, 435, 444, 445, 560, 760, 948, 953, 960, 964, 970, 978, 985, 1014], "extent": [9, 30, 57, 150, 151, 152, 229, 334, 337, 424, 518, 679, 777, 964], "assum": [9, 56, 155, 161, 165, 166, 185, 196, 214, 225, 228, 234, 247, 256, 265, 298, 343, 357, 369, 370, 372, 374, 376, 381, 382, 383, 385, 389, 392, 393, 395, 397, 399, 400, 402, 403, 405, 406, 411, 415, 421, 423, 428, 433, 440, 446, 452, 453, 454, 455, 456, 457, 458, 459, 486, 491, 492, 515, 525, 531, 532, 544, 545, 550, 551, 570, 571, 572, 574, 603, 615, 626, 627, 629, 630, 635, 641, 642, 643, 644, 645, 649, 650, 651, 654, 655, 659, 660, 661, 664, 668, 670, 671, 675, 692, 708, 717, 723, 738, 746, 751, 756, 760, 763, 779, 782, 783, 793, 817, 823, 824, 827, 828, 829, 831, 832, 837, 848, 861, 940, 941, 942, 954, 958, 960, 962, 963, 964, 966, 967, 969, 970, 971, 974, 978, 979, 980, 1011, 1017], "parametr": [9, 24, 25, 81, 228, 280, 302, 311, 393, 396, 401, 402, 421, 534, 536, 618, 668, 679, 857, 869, 912, 913, 960, 963, 966, 967, 974, 977, 980, 1013, 1015, 1018], "therefor": [9, 13, 24, 37, 52, 53, 70, 71, 74, 79, 85, 99, 104, 109, 112, 114, 121, 126, 128, 144, 165, 168, 196, 212, 213, 241, 246, 247, 257, 259, 294, 298, 303, 316, 328, 337, 341, 342, 350, 356, 364, 368, 375, 381, 395, 396, 397, 399, 400, 402, 403, 421, 479, 518, 532, 534, 536, 537, 542, 543, 547, 548, 587, 589, 641, 642, 648, 651, 654, 659, 661, 662, 684, 695, 717, 739, 777, 841, 842, 854, 858, 862, 870, 881, 882, 954, 958, 960, 961, 964, 966, 967, 968, 969, 972, 974, 979, 980, 985, 990, 997, 998, 999, 1014, 1015, 1018, 1019, 1020, 1021], "minimum": [9, 56, 79, 121, 122, 144, 185, 206, 229, 266, 282, 283, 372, 379, 386, 388, 392, 395, 402, 403, 425, 429, 433, 437, 439, 452, 453, 456, 457, 458, 459, 494, 496, 524, 535, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 577, 610, 614, 615, 618, 620, 651, 654, 659, 661, 662, 665, 666, 675, 688, 707, 761, 762, 782, 783, 802, 817, 838, 839, 850, 851, 854, 855, 856, 860, 874, 875, 888, 889, 890, 891, 892, 898, 901, 902, 905, 921, 961, 964, 968, 970, 974, 976, 980, 1005, 1008, 1012, 1013, 1017, 1018], "determin": [9, 11, 13, 19, 46, 79, 111, 153, 166, 175, 176, 192, 199, 256, 298, 303, 343, 350, 352, 369, 370, 372, 379, 382, 383, 392, 393, 395, 399, 400, 402, 403, 404, 405, 416, 421, 425, 426, 427, 429, 430, 432, 433, 439, 442, 443, 444, 448, 452, 453, 455, 456, 457, 458, 459, 465, 466, 467, 471, 474, 475, 478, 480, 486, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 520, 522, 525, 526, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 548, 550, 551, 553, 565, 566, 567, 571, 574, 577, 585, 590, 591, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 610, 618, 619, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 670, 672, 673, 675, 676, 677, 690, 694, 705, 711, 712, 720, 765, 766, 767, 769, 770, 773, 779, 781, 782, 783, 785, 793, 801, 802, 803, 804, 805, 806, 808, 812, 814, 815, 817, 824, 826, 827, 832, 837, 838, 839, 845, 846, 854, 855, 856, 858, 862, 870, 881, 882, 884, 887, 890, 892, 895, 916, 927, 933, 935, 938, 953, 956, 958, 963, 967, 969, 970, 974, 977, 978, 980, 990, 1005, 1010, 1013, 1014, 1016, 1017, 1018], "concentr": [9, 99, 109, 126, 153, 163, 222, 240, 247, 248, 300, 318, 366, 370, 402, 405, 427, 502, 777, 963, 970], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 56, 58, 60, 61, 67, 79, 90, 101, 111, 117, 124, 169, 222, 241, 242, 243, 244, 257, 282, 283, 285, 301, 309, 313, 330, 340, 341, 343, 344, 358, 359, 363, 365, 367, 370, 372, 375, 381, 383, 390, 401, 403, 409, 410, 413, 471, 485, 486, 487, 494, 495, 496, 497, 498, 505, 513, 524, 527, 547, 549, 572, 573, 574, 614, 674, 675, 678, 687, 688, 693, 700, 702, 707, 713, 718, 719, 737, 739, 760, 761, 768, 772, 773, 775, 777, 778, 833, 834, 842, 846, 853, 861, 910, 912, 925, 932, 948, 954, 961, 963, 967, 970, 972, 974, 977, 981, 984, 985, 988, 990, 993, 996, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "outli": [9, 79, 383, 452, 457, 960, 970], "skew": [9, 121, 199, 229, 298, 362, 399, 622, 623, 624, 625, 857, 869, 960, 974, 1001, 1008, 1012, 1021], "Of": [9, 25, 27, 160, 356, 372, 395, 403, 954], "screen": [9, 1018], "presenc": [9, 59, 61, 79, 80, 165, 298, 368, 371, 383, 397, 400, 695, 708, 738, 751, 810, 844, 852, 854, 948, 954, 960, 964, 965, 978, 1008, 1009, 1011, 1015, 1017, 1019], "mixtur": [9, 44, 56, 243, 244, 248, 359, 365, 366, 383, 395, 400, 401, 405, 606, 779, 984, 985, 1000, 1001, 1005, 1009, 1010, 1011, 1012], "univari": [9, 36, 67, 71, 73, 139, 140, 146, 163, 211, 323, 339, 362, 394, 395, 396, 403, 429, 487, 508, 513, 575, 578, 579, 581, 582, 583, 585, 588, 589, 590, 591, 592, 610, 611, 612, 613, 628, 779, 784, 803, 807, 841, 842, 851, 856, 860, 861, 881, 886, 960, 979, 981, 986, 998, 1001, 1005, 1011], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 57, 61, 70, 72, 74, 85, 94, 95, 101, 103, 105, 114, 121, 141, 148, 166, 168, 185, 201, 210, 217, 218, 219, 225, 230, 256, 257, 259, 268, 274, 285, 298, 302, 303, 309, 328, 343, 350, 352, 356, 362, 370, 372, 378, 381, 382, 383, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 407, 424, 435, 445, 447, 448, 450, 452, 457, 465, 466, 467, 468, 491, 492, 499, 500, 501, 507, 514, 515, 516, 517, 518, 520, 522, 524, 525, 526, 531, 532, 533, 536, 537, 540, 541, 542, 543, 547, 548, 549, 571, 572, 573, 574, 610, 615, 616, 621, 622, 624, 625, 641, 642, 651, 659, 660, 661, 674, 682, 684, 690, 708, 738, 740, 741, 763, 770, 772, 773, 779, 793, 807, 810, 816, 817, 818, 819, 820, 830, 840, 841, 850, 857, 858, 861, 866, 867, 869, 870, 871, 872, 877, 888, 889, 890, 891, 892, 901, 907, 910, 917, 918, 936, 954, 956, 960, 961, 962, 963, 964, 966, 968, 970, 974, 978, 979, 980, 981, 983, 988, 1006, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019], "ellipticenvelop": [9, 225, 453, 456, 457, 458, 459, 546, 970, 1005, 1008, 1012, 1013, 1018], "oneclasssvm": [9, 11, 16, 210, 225, 311, 327, 546, 660, 827, 970, 978, 979, 1007, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "font_manag": [9, 80, 282, 327], "load_win": [9, 237, 303, 825, 833, 1002, 1016], "support_fract": [9, 452, 457], "contamin": [9, 79, 80, 225, 234, 282, 283, 452, 546, 827, 970, 1013, 1021], "ocsvm": [9, 210], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 84, 90, 111, 120, 151, 208, 220, 234, 298, 325, 372, 383, 415, 447, 492, 550, 551, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 682, 746, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 998], "frontier": [9, 210, 282, 327, 970, 997], "xx1": [9, 111, 614], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 57, 79, 117, 126, 149, 150, 151, 152, 154, 167, 207, 208, 209, 210, 222, 225, 245, 282, 289, 292, 300, 301, 321, 327, 328, 333, 334, 337, 338, 614], "500": [9, 10, 44, 50, 56, 59, 60, 62, 84, 85, 102, 104, 113, 122, 144, 148, 172, 209, 210, 218, 235, 236, 241, 242, 246, 256, 259, 269, 276, 282, 288, 302, 309, 327, 334, 338, 356, 402, 452, 453, 457, 458, 459, 465, 466, 467, 594, 596, 597, 599, 604, 607, 608, 633, 634, 637, 638, 639, 663, 665, 666, 839, 953, 979], "clf_name": [9, 10, 341], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 55, 111, 124, 137, 208, 209, 210, 226, 234, 263, 282, 283, 292, 300, 326, 327, 328, 332, 333, 334, 338, 372, 383, 393, 402, 421, 452, 532, 533, 536, 538, 542, 544, 546, 550, 576, 577, 614, 615, 616, 641, 642, 649, 651, 657, 658, 659, 660, 681, 683, 685, 690, 703, 708, 709, 717, 721, 722, 724, 738, 764, 770, 771, 774, 779, 782, 783, 793, 802, 809, 810, 811, 812, 827, 841, 848, 878, 881, 883, 885, 886, 960, 964, 970, 971, 978, 979, 997, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 57, 79, 95, 100, 117, 120, 125, 126, 135, 137, 150, 194, 209, 210, 212, 225, 234, 282, 301, 303, 321, 327, 328, 332, 334, 337, 338, 395, 642, 697, 698, 701, 964, 994, 997, 998], "contour": [9, 11, 16, 34, 46, 47, 79, 117, 137, 151, 152, 154, 207, 208, 209, 210, 225, 230, 245, 282, 289, 326, 327, 329, 330, 332, 333, 334, 367, 614, 615, 970, 978], "linewidth": [9, 24, 33, 34, 37, 40, 57, 72, 77, 85, 91, 110, 121, 125, 148, 152, 156, 185, 186, 190, 191, 192, 194, 197, 199, 202, 210, 213, 225, 232, 234, 265, 269, 282, 286, 299, 309, 326, 327, 329, 334, 348, 995], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 43, 84, 93, 100, 106, 163, 378, 400, 516, 524, 675, 964, 983, 984, 998], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 69, 72, 73, 101, 121, 123, 194, 202, 225, 233, 243, 254, 255, 257, 260, 263, 265, 276, 280, 300, 304, 312, 320, 328, 342, 343, 358, 362, 364, 372, 381, 383, 396, 399, 406, 407, 409, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 479, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 680, 681, 683, 684, 685, 696, 744, 747, 753, 761, 762, 777, 778, 779, 782, 783, 785, 790, 791, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 896, 906, 907, 923, 953, 964, 974, 994, 999, 1001, 1005, 1011, 1012], "boxstyl": [9, 300], "fc": [9, 281, 365], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 263, 289, 333, 386, 629, 630, 633, 635, 636, 637, 643, 644, 645, 646, 647, 664, 665, 666, 667, 669], "xycoord": [9, 26], "textcoord": [9, 172], "xytext": [9, 26, 172], "bbox": [9, 12, 34, 45, 101, 241, 242, 243, 246, 247, 300], "arrowprop": [9, 26], "xlim": [9, 12, 26, 34, 44, 57, 61, 72, 77, 78, 79, 89, 96, 109, 111, 112, 113, 127, 134, 149, 150, 166, 175, 186, 188, 195, 202, 205, 210, 225, 232, 242, 247, 251, 266, 270, 282, 283, 327, 332, 333, 337, 349], "ylim": [9, 12, 24, 26, 33, 34, 37, 44, 57, 61, 77, 78, 79, 89, 96, 109, 111, 112, 118, 119, 121, 127, 130, 135, 149, 150, 166, 183, 185, 186, 188, 189, 190, 202, 205, 206, 210, 225, 232, 242, 247, 251, 255, 259, 266, 269, 270, 271, 282, 283, 327, 332, 333, 337, 341, 349], "prop": [9, 72, 80, 202, 243, 282, 327, 350], "fontproperti": [9, 80, 282, 327], "ash": [9, 367, 1008, 1011], "malic_acid": 9, "abil": [9, 60, 79, 121, 154, 160, 165, 166, 168, 196, 214, 225, 341, 358, 386, 402, 403, 764, 765, 766, 769, 961, 964, 967, 970, 980, 985, 1005, 1007, 1012, 1014, 1018, 1019], "locat": [9, 25, 53, 54, 71, 79, 80, 190, 289, 310, 328, 363, 368, 370, 374, 375, 378, 379, 386, 395, 397, 401, 431, 443, 444, 452, 453, 454, 455, 456, 457, 458, 459, 471, 483, 484, 487, 488, 495, 498, 949, 954, 960, 965, 970, 974, 980, 1013], "hard": [9, 196, 225, 229, 256, 258, 358, 369, 381, 383, 395, 400, 403, 517, 524, 552, 659, 883, 884, 885, 886, 887, 960, 977, 979, 980, 985, 997, 998, 999, 1014, 1015], "due": [9, 26, 27, 53, 59, 74, 112, 148, 166, 167, 175, 187, 194, 196, 198, 213, 214, 229, 242, 264, 265, 276, 303, 304, 341, 342, 343, 370, 376, 383, 386, 393, 395, 399, 400, 402, 405, 427, 430, 442, 518, 522, 526, 527, 557, 654, 779, 782, 783, 787, 789, 793, 802, 803, 806, 809, 813, 814, 846, 850, 851, 861, 954, 960, 961, 963, 964, 965, 967, 971, 978, 980, 985, 998, 1005, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "banana": [9, 964], "anywai": [9, 341, 372, 648, 668, 669], "rid": [9, 978], "difficulti": [9, 27, 214, 298, 358, 370, 393, 838, 839, 963, 967, 980], "bandwidth": [9, 44, 62, 231, 280, 281, 289, 381, 383, 395, 401, 431, 441, 444, 821, 822, 826, 957, 970, 984, 1016, 1020], "compromis": [9, 167, 356, 370, 630, 662, 967, 1008], "risk": [9, 196, 214, 299, 336, 352, 369, 370, 383, 394, 399, 402, 550, 551, 866, 867, 869, 870, 871, 872, 960, 964, 988, 1012], "x2": [9, 16, 84, 90, 111, 120, 151, 208, 234, 372, 396, 571, 612, 682, 746, 998], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 367], "702": [9, 15], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 56, 85, 160, 167, 172, 196, 211, 214, 233, 234, 253, 254, 341, 357, 358, 365, 372, 375, 376, 383, 384, 385, 400, 402, 404, 525, 531, 573, 576, 721, 964, 967, 969, 970, 978, 979, 980, 982, 988, 990, 993, 997, 999, 1013], "boxplot": [10, 79, 122, 166, 169, 308], "defaultdict": [10, 19, 25, 169, 259, 342, 343], "gc": 10, "make_regress": [10, 74, 175, 177, 178, 182, 199, 200, 269, 309, 352, 366, 372, 373, 382, 537, 539, 543, 548, 618, 629, 630, 632, 634, 636, 638, 646, 647, 648, 650, 654, 662, 839, 882, 964, 965, 967], "randomforestregressor": [10, 127, 128, 131, 160, 161, 310, 382, 402, 540, 541, 543, 545, 549, 551, 553, 615, 616, 891, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "sgdregressor": [10, 207, 356, 358, 381, 394, 629, 632, 650, 654, 659, 662, 839, 882, 887, 960, 978, 1007, 1009, 1011, 1012, 1013, 1016, 1018, 1019, 1020, 1021], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 59, 60, 94, 108, 115, 117, 128, 161, 204, 205, 210, 225, 257, 261, 262, 269, 276, 305, 316, 317, 318, 319, 330, 341, 342, 352, 365, 379, 383, 390, 452, 457, 471, 472, 474, 475, 478, 480, 486, 494, 495, 496, 497, 498, 502, 505, 507, 514, 520, 522, 523, 529, 530, 536, 537, 538, 539, 547, 548, 550, 551, 585, 641, 642, 649, 650, 651, 655, 657, 659, 660, 661, 670, 779, 781, 782, 783, 784, 785, 793, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 811, 838, 839, 862, 881, 882, 883, 886, 917, 918, 933, 935, 959, 960, 965, 972, 978, 979, 994, 999, 1001, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 63, 69, 71, 73, 128, 183, 257, 294, 295, 298, 311, 320, 341, 368, 374, 383, 389, 424, 427, 430, 432, 435, 437, 442, 445, 447, 450, 454, 455, 461, 514, 519, 520, 521, 522, 523, 526, 528, 529, 530, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 576, 577, 610, 613, 615, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 673, 675, 677, 747, 760, 777, 778, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 810, 812, 815, 830, 837, 838, 839, 840, 841, 842, 843, 878, 881, 882, 883, 884, 885, 886, 887, 930, 985, 1007, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1020], "n_instanc": [10, 616], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 78, 80, 81, 94, 97, 99, 108, 111, 112, 120, 122, 123, 127, 142, 161, 175, 182, 187, 189, 190, 195, 196, 197, 200, 201, 202, 206, 211, 214, 229, 232, 241, 245, 247, 253, 256, 261, 265, 266, 281, 298, 309, 310, 336, 342, 343, 346, 350, 356, 357, 365, 372, 376, 383, 393, 394, 395, 397, 400, 402, 403, 404, 405, 408, 435, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 470, 480, 491, 492, 506, 509, 510, 514, 515, 518, 520, 521, 522, 523, 525, 526, 530, 531, 535, 540, 541, 542, 543, 544, 545, 547, 548, 549, 564, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 594, 619, 622, 626, 627, 628, 633, 641, 642, 647, 648, 649, 651, 654, 659, 660, 661, 668, 669, 686, 692, 695, 696, 698, 699, 707, 711, 712, 716, 720, 722, 728, 765, 766, 767, 769, 776, 777, 794, 795, 798, 799, 810, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 844, 851, 853, 854, 856, 857, 858, 860, 861, 867, 868, 869, 870, 874, 881, 889, 890, 891, 892, 916, 950, 954, 960, 962, 963, 966, 967, 968, 974, 975, 976, 978, 979, 980, 990, 997, 999, 1005, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "atomic_benchmark": 10, "percentil": [10, 70, 121, 238, 298, 356, 575, 578, 579, 581, 582, 583, 586, 589, 615, 616, 730, 974, 1010, 1018], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 73, 119, 131, 161, 197, 234, 253, 260, 328, 346, 356, 368, 370, 381, 382, 396, 398, 402, 405, 432, 466, 521, 538, 539, 540, 541, 546, 547, 548, 549, 553, 668, 669, 779, 782, 783, 793, 805, 816, 817, 818, 819, 820, 953, 964, 974, 999, 1013, 1015], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 65, 78, 80, 120, 145, 148, 154, 155, 167, 172, 198, 251, 256, 257, 268, 317, 336, 342, 343, 372, 379, 383, 384, 392, 393, 394, 395, 400, 403, 404, 405, 571, 576, 590, 591, 598, 610, 617, 642, 784, 794, 795, 798, 907, 954, 963, 980, 1001, 1013, 1015], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 57, 63, 99, 111, 113, 117, 121, 137, 152, 156, 176, 179, 188, 205, 208, 214, 229, 251, 256, 263, 265, 321, 324, 326, 328, 329, 330, 332, 334, 342, 347, 365, 381, 383, 392, 393, 396, 399, 403, 405, 421, 424, 425, 429, 433, 440, 446, 454, 455, 461, 476, 491, 492, 565, 575, 578, 579, 581, 582, 583, 593, 596, 597, 598, 600, 602, 603, 605, 606, 608, 610, 615, 616, 626, 675, 683, 688, 689, 690, 698, 713, 722, 740, 741, 745, 748, 751, 752, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 768, 809, 821, 822, 896, 964, 965, 966, 967, 974, 980, 1005, 1017, 1018, 1020, 1021], "contain": [10, 19, 24, 27, 33, 40, 49, 55, 57, 69, 70, 111, 113, 116, 124, 154, 166, 167, 169, 172, 187, 214, 225, 234, 235, 238, 246, 254, 256, 262, 265, 266, 274, 282, 283, 285, 298, 311, 317, 320, 341, 342, 363, 364, 365, 367, 370, 372, 374, 375, 376, 377, 378, 379, 382, 383, 389, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 407, 409, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 479, 483, 485, 486, 487, 491, 492, 493, 497, 498, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 668, 669, 671, 672, 673, 674, 675, 679, 680, 681, 683, 684, 685, 692, 695, 717, 718, 719, 750, 754, 761, 762, 770, 774, 777, 778, 779, 782, 783, 785, 793, 797, 798, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 895, 896, 897, 900, 901, 902, 921, 922, 924, 927, 931, 933, 953, 954, 956, 962, 965, 968, 970, 974, 975, 977, 980, 990, 999, 1005, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "generate_dataset": 10, "coef": [10, 54, 104, 165, 166, 175, 180, 183, 187, 188, 190, 195, 199, 200, 201, 205, 212, 238, 269, 294, 337, 507, 629, 630, 632, 635, 636, 642, 643, 644, 645, 646, 652, 655, 657, 663, 664, 665, 666, 667, 668, 669, 670, 968], "random_se": [10, 91, 117], "x_scaler": 10, "y_scaler": 10, "ok": [10, 370, 970], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 289, 320, 356, 690, 696, 711, 712, 720, 765, 766, 769, 770, 964, 1005, 1013, 1014, 1020], "bp": [10, 122, 145, 184, 185, 367, 972], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 59, 79, 91, 94, 95, 96, 112, 128, 131, 157, 172, 175, 176, 186, 194, 222, 235, 251, 262, 289, 293, 299, 303, 304, 318, 328, 349, 368, 383, 395, 400, 965], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 57, 58, 59, 62, 63, 84, 90, 91, 96, 100, 127, 155, 156, 172, 184, 189, 191, 193, 194, 196, 198, 199, 211, 213, 218, 241, 243, 244, 251, 256, 258, 259, 260, 283, 298, 303, 318, 346, 370, 374, 403, 1013, 1015, 1016], "linestyl": [10, 11, 16, 33, 59, 72, 79, 102, 104, 109, 120, 130, 134, 137, 148, 151, 153, 155, 157, 168, 181, 183, 184, 185, 196, 197, 198, 202, 206, 208, 209, 214, 232, 234, 253, 255, 259, 260, 265, 281, 289, 293, 299, 326, 329, 330, 332, 333, 334, 995], "major": [10, 14, 263, 298, 302, 308, 309, 310, 311, 312, 313, 343, 356, 365, 369, 370, 373, 376, 381, 384, 395, 399, 401, 403, 405, 534, 552, 553, 677, 711, 712, 720, 765, 766, 769, 893, 895, 964, 967, 978, 985, 988, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 204, 377, 422, 559, 681, 683, 685, 900], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 647, 668, 669, 960, 964], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 204, 219, 222, 276], "1e2": [10, 148, 155, 231, 247, 328, 728], "randomforest": [10, 117, 356, 402, 889, 890, 1010], "0001": [10, 134, 204, 254, 372, 407, 427, 430, 442, 454, 455, 461, 516, 521, 523, 530, 532, 533, 542, 543, 629, 630, 631, 632, 635, 636, 641, 642, 643, 644, 645, 646, 651, 652, 655, 657, 659, 661, 663, 670, 672, 676, 838, 839, 881, 882, 953], "250": [10, 64, 121, 172, 217, 476, 675, 953, 976, 1012], "17": [10, 15, 19, 39, 52, 73, 79, 97, 121, 132, 149, 166, 195, 219, 229, 259, 264, 292, 302, 365, 368, 375, 386, 387, 388, 395, 399, 405, 428, 444, 470, 480, 506, 514, 519, 523, 530, 532, 533, 538, 542, 543, 552, 553, 580, 611, 632, 640, 641, 642, 649, 652, 655, 657, 670, 675, 711, 712, 722, 743, 748, 766, 769, 771, 797, 819, 830, 845, 850, 851, 859, 861, 867, 883, 886, 889, 890, 891, 892, 953, 954, 965, 967, 974, 982, 1003, 1005, 1006, 1007, 1008, 1011, 1014, 1019], "799": [10, 15, 157, 251, 272, 342], "plot_prediction_lat": [10, 15], "conserv": [11, 565, 572, 873, 874, 963, 976], "biologi": 11, "south": [11, 166, 289, 401], "american": [11, 12, 69, 80, 365, 395, 397, 401, 402, 403, 452, 457, 713, 861], "mammal": 11, "past": [11, 374, 375, 378, 381, 384, 399, 400, 402, 521, 538, 539, 661, 988, 991, 1021], "environment": [11, 214], "unsuccess": 11, "cast": [11, 53, 196, 218, 364, 383, 384, 403, 479, 627, 628, 629, 635, 639, 640, 643, 644, 645, 646, 647, 648, 656, 658, 929, 1012, 1013, 1014, 1015, 1018, 1020], "densiti": [11, 49, 59, 64, 74, 100, 104, 145, 163, 182, 196, 211, 214, 221, 225, 229, 240, 247, 248, 256, 262, 277, 282, 283, 290, 298, 328, 341, 367, 379, 383, 395, 402, 406, 414, 428, 431, 433, 435, 447, 450, 481, 485, 519, 524, 532, 533, 777, 778, 779, 821, 822, 826, 827, 874, 958, 960, 963, 967, 969, 970, 976, 984, 986, 990, 1000, 1001, 1007, 1009, 1013, 1014, 1020], "phillip": [11, 289, 481], "2006": [11, 289, 402, 405, 445, 481, 540, 541, 548, 549, 593, 594, 597, 602, 605, 632, 649, 650, 723, 770, 771, 777, 816, 874, 891, 892, 960, 964, 966, 969, 976, 977], "basemap": [11, 289], "coast": [11, 289], "line": [11, 17, 40, 43, 59, 69, 94, 99, 120, 147, 158, 160, 161, 163, 166, 167, 184, 185, 186, 188, 191, 192, 194, 197, 198, 199, 204, 205, 207, 208, 225, 229, 230, 232, 234, 253, 260, 262, 263, 286, 289, 299, 310, 327, 332, 333, 337, 338, 341, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 381, 400, 401, 402, 422, 470, 471, 472, 491, 492, 525, 536, 537, 538, 539, 593, 596, 597, 615, 653, 669, 684, 685, 785, 932, 958, 964, 968, 971, 978, 984, 987, 997, 999, 1007, 1016, 1018, 1021], "nation": [11, 79, 289, 365, 828], "boundari": [11, 13, 25, 26, 27, 31, 34, 57, 59, 107, 111, 117, 126, 132, 149, 152, 163, 167, 179, 197, 225, 230, 232, 259, 279, 284, 286, 287, 289, 292, 298, 300, 303, 315, 322, 325, 326, 328, 330, 337, 338, 347, 366, 393, 402, 403, 405, 433, 439, 487, 519, 532, 533, 552, 571, 572, 574, 614, 810, 823, 829, 831, 832, 833, 860, 877, 878, 885, 886, 889, 905, 958, 967, 970, 974, 977, 978, 979, 1005, 1007, 1009, 1018, 1019, 1020], "america": [11, 12, 79, 289, 828, 974], "bradypu": [11, 289, 481], "variegatu": [11, 289, 481], "brown": [11, 91, 289, 481, 611, 954, 1010, 1012, 1013, 1014, 1017], "throat": [11, 289, 481], "sloth": [11, 289, 481], "microryzomi": [11, 289, 481], "minutu": [11, 289, 481], "known": [11, 17, 25, 27, 39, 49, 56, 57, 80, 103, 104, 128, 153, 155, 161, 196, 197, 214, 225, 256, 258, 265, 285, 289, 299, 311, 316, 325, 342, 358, 367, 368, 370, 373, 378, 381, 383, 386, 391, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 405, 422, 446, 465, 467, 481, 491, 492, 527, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 571, 572, 574, 577, 592, 605, 616, 641, 642, 655, 665, 666, 677, 687, 693, 696, 701, 711, 725, 737, 739, 775, 810, 816, 817, 818, 819, 820, 823, 828, 831, 837, 865, 889, 890, 891, 892, 954, 956, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 974, 979, 980, 990, 995, 997, 998], "forest": [11, 27, 31, 107, 114, 117, 123, 124, 126, 128, 131, 132, 160, 163, 164, 170, 172, 225, 234, 253, 289, 310, 341, 352, 363, 382, 383, 393, 404, 446, 447, 474, 478, 479, 481, 498, 538, 539, 540, 541, 543, 546, 547, 548, 549, 613, 617, 807, 814, 841, 855, 885, 889, 890, 891, 953, 954, 965, 972, 984, 985, 986, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014], "rice": [11, 289, 481, 1018], "rat": [11, 289, 481], "rodent": [11, 289, 481], "live": [11, 69, 166, 289, 370, 395, 481, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "peru": [11, 289, 481], "colombia": [11, 289, 481], "ecuador": [11, 289, 481], "venezuela": [11, 289, 481], "entropi": [11, 236, 268, 289, 310, 316, 317, 352, 395, 402, 407, 481, 516, 540, 547, 590, 591, 641, 700, 718, 719, 723, 775, 889, 891, 960, 961, 964, 968, 1007, 1009, 1013, 1014, 1019], "anderson": [11, 289, 481, 1011, 1017], "schapir": [11, 289, 402, 481, 536, 537], "ecolog": [11, 289, 481], "190": [11, 120, 214, 245, 248, 265, 289, 376, 481], "231": [11, 289, 395, 406, 428, 481, 567], "259": [11, 219, 289, 402, 481, 550, 551], "________________________________________________________________________________": [11, 54, 341], "coastlin": [11, 289, 367], "coverag": [11, 121, 196, 214, 289, 373, 391, 481, 610, 703], "area": [11, 34, 124, 196, 214, 234, 253, 256, 263, 265, 266, 328, 333, 337, 367, 370, 374, 381, 395, 402, 403, 685, 689, 690, 691, 724, 770, 771, 961, 964, 967, 983, 1007], "roc": [11, 25, 114, 163, 224, 226, 234, 235, 239, 249, 272, 377, 393, 399, 487, 493, 547, 641, 685, 689, 690, 691, 709, 724, 764, 770, 771, 798, 807, 810, 848, 886, 970, 1002, 1007, 1008, 1010, 1011, 1015, 1017], "868443": 11, "993919": 11, "elaps": [11, 47, 66, 115, 116, 356, 447, 450, 552, 553, 840, 841, 842, 843], "astro": [11, 155, 217, 244], "washington": [11, 155, 217, 244, 281, 289], "bunch": [11, 363, 364, 365, 447, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 493, 550, 551, 552, 553, 615, 616, 617, 840, 841, 889, 890, 891, 892, 988, 999, 1010, 1012, 1015, 1017, 1021], "fetch_species_distribut": [11, 289, 1014], "ll": [11, 116, 251, 289, 370, 381, 515, 524, 967, 980, 990], "otherwis": [11, 55, 61, 111, 157, 161, 177, 198, 204, 289, 352, 358, 372, 374, 376, 383, 395, 397, 399, 403, 405, 418, 419, 420, 422, 424, 425, 426, 429, 434, 436, 437, 447, 450, 465, 466, 467, 468, 479, 509, 518, 519, 521, 523, 524, 530, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 571, 573, 574, 580, 585, 593, 594, 597, 614, 615, 616, 627, 628, 629, 635, 641, 642, 643, 645, 648, 649, 650, 651, 656, 658, 659, 660, 661, 668, 669, 673, 675, 679, 680, 681, 683, 685, 686, 690, 692, 696, 697, 706, 708, 709, 710, 711, 712, 720, 723, 734, 736, 737, 738, 748, 756, 760, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 783, 784, 785, 793, 797, 798, 805, 810, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 836, 838, 839, 845, 846, 848, 852, 861, 862, 863, 866, 867, 868, 870, 871, 872, 881, 883, 884, 885, 886, 887, 896, 902, 904, 917, 918, 925, 948, 950, 959, 960, 961, 964, 967, 968, 970, 971, 974, 976, 978, 979, 980, 984, 988, 990, 1007, 1013, 1014, 1015, 1018], "improvis": [11, 289], "mpl_toolkit": [11, 45, 66, 89, 100, 101, 167, 193, 217, 219, 289], "except": [11, 16, 44, 53, 97, 204, 211, 225, 264, 276, 289, 293, 294, 298, 300, 313, 359, 363, 370, 372, 373, 374, 375, 381, 383, 389, 392, 396, 399, 400, 402, 403, 405, 416, 443, 448, 465, 466, 467, 492, 537, 539, 540, 541, 543, 545, 547, 548, 551, 553, 594, 610, 613, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 670, 694, 760, 786, 814, 815, 821, 822, 824, 827, 832, 838, 839, 845, 859, 861, 882, 884, 887, 890, 892, 922, 950, 960, 964, 979, 990, 998, 999, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018], "importerror": [11, 16, 53, 97, 276, 289, 378, 479], "construct_grid": [11, 289], "object": [11, 13, 14, 19, 26, 44, 50, 61, 65, 69, 70, 97, 128, 134, 143, 144, 153, 163, 167, 192, 196, 212, 214, 224, 235, 237, 238, 239, 254, 268, 289, 304, 311, 312, 316, 342, 343, 352, 363, 364, 365, 370, 371, 373, 375, 376, 377, 379, 382, 383, 384, 389, 395, 396, 397, 400, 403, 404, 405, 409, 411, 415, 416, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 694, 701, 714, 715, 724, 740, 741, 763, 764, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 896, 901, 902, 903, 904, 905, 908, 912, 914, 924, 925, 927, 929, 930, 932, 949, 950, 952, 960, 961, 962, 963, 967, 970, 971, 974, 977, 978, 979, 984, 985, 990, 991, 993, 994, 997, 999, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "func": [11, 74, 114, 166, 176, 214, 289, 370, 396, 448, 682, 845, 974, 1009, 1011, 1013, 1014], "xgrid": [11, 289], "ygrid": [11, 289], "correspond": [11, 13, 16, 26, 32, 41, 53, 64, 77, 81, 96, 112, 115, 117, 124, 141, 144, 145, 149, 154, 157, 166, 185, 188, 196, 197, 205, 214, 226, 231, 238, 246, 255, 257, 259, 260, 265, 266, 289, 303, 310, 311, 312, 342, 346, 347, 352, 357, 364, 365, 366, 369, 370, 372, 374, 377, 378, 382, 383, 384, 392, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 410, 415, 421, 423, 425, 429, 431, 434, 436, 442, 444, 446, 447, 455, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 517, 524, 527, 528, 529, 532, 533, 535, 538, 540, 542, 543, 544, 547, 565, 567, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 600, 613, 615, 616, 618, 626, 627, 628, 629, 630, 631, 635, 641, 642, 643, 644, 645, 651, 652, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 670, 673, 674, 675, 677, 686, 693, 696, 706, 707, 716, 720, 734, 736, 756, 760, 764, 770, 771, 774, 776, 777, 778, 779, 782, 783, 785, 793, 802, 810, 813, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 830, 838, 839, 848, 852, 854, 855, 858, 862, 870, 883, 886, 889, 890, 891, 892, 906, 912, 939, 953, 954, 956, 957, 958, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 974, 975, 978, 979, 980, 983, 990, 996, 999, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "coordin": [11, 12, 13, 54, 99, 127, 152, 181, 217, 257, 289, 356, 400, 405, 427, 430, 431, 432, 444, 454, 455, 461, 514, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 533, 597, 629, 630, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 664, 665, 666, 667, 671, 672, 673, 676, 677, 689, 746, 751, 881, 960, 961, 979, 997, 1005, 1008, 1009, 1010, 1014, 1016, 1018, 1019, 1020], "corner": [11, 13, 26, 53, 165, 253, 257, 265, 266, 289, 370, 481, 893, 895, 964, 1019], "cell": [11, 12, 26, 32, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 289, 295, 304, 309, 310, 312, 313, 318, 350, 367, 375, 675, 964, 965, 1011, 1019], "xmin": [11, 77, 186, 188, 205, 206, 289], "x_left_lower_corn": [11, 289, 481], "grid_siz": [11, 60, 289, 481], "xmax": [11, 77, 186, 188, 205, 206, 289], "nx": [11, 34, 289, 481], "ymin": [11, 77, 183, 185, 188, 189, 197, 205, 256, 289], "y_left_lower_corn": [11, 289, 481], "ny": [11, 34, 255, 289, 367, 481, 954, 976], "create_species_bunch": 11, "species_nam": [11, 289], "record": [11, 95, 113, 168, 304, 343, 356, 370, 395, 397, 433, 440, 481, 603, 626, 675, 753, 756, 760, 761, 762, 763, 804, 827, 1018, 1019], "join": [11, 12, 19, 160, 214, 256, 300, 365, 384, 446, 999, 1005, 1013], "ascii": [11, 289, 403, 470, 571, 572, 574], "pt": [11, 365, 404, 857, 974], "desir": [11, 24, 111, 145, 161, 196, 198, 298, 302, 363, 370, 372, 374, 378, 389, 392, 395, 398, 399, 400, 404, 486, 521, 523, 527, 530, 550, 576, 585, 586, 647, 653, 668, 669, 691, 718, 821, 822, 826, 846, 848, 851, 852, 854, 855, 857, 858, 862, 865, 867, 869, 870, 905, 933, 956, 958, 961, 967, 974, 978, 979, 980, 990, 1005, 1013, 1014, 1015, 1018], "pts_": 11, "ix": [11, 265, 335], "searchsort": 11, "dd": [11, 12, 126, 289, 481], "ii": [11, 95, 167, 203, 251, 367, 403, 565, 566, 572, 621, 649, 650, 844, 853, 960, 974, 983], "lat": [11, 289, 481], "cov_": [11, 81], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 80, 91, 120, 161, 168, 220, 228, 233, 268, 310, 372, 375, 382, 783, 800, 816, 817, 818, 820, 953, 954], "land": [11, 289, 384, 402], "water": 11, "land_refer": [11, 289], "standard": [11, 12, 26, 32, 34, 60, 69, 70, 72, 79, 80, 85, 95, 109, 112, 114, 115, 116, 117, 124, 128, 145, 148, 153, 155, 157, 166, 175, 181, 185, 194, 196, 205, 217, 218, 219, 230, 246, 251, 254, 255, 256, 257, 259, 298, 303, 326, 341, 356, 357, 362, 363, 364, 366, 367, 368, 370, 372, 373, 375, 376, 379, 381, 383, 386, 389, 391, 395, 397, 398, 399, 403, 405, 451, 455, 471, 479, 484, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 507, 508, 513, 515, 518, 524, 535, 573, 577, 594, 617, 627, 628, 633, 634, 637, 638, 639, 647, 648, 655, 656, 657, 658, 659, 661, 670, 672, 676, 770, 785, 800, 818, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 845, 850, 851, 854, 857, 858, 859, 861, 869, 870, 871, 872, 879, 881, 882, 901, 953, 956, 960, 961, 964, 966, 967, 968, 970, 978, 979, 985, 988, 990, 995, 997, 998, 999, 1001, 1011, 1012, 1013, 1014, 1016, 1017, 1018], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 289], "llcrnrlat": [11, 289], "urcrnrlat": [11, 289], "llcrnrlon": [11, 289], "urcrnrlon": [11, 289], "drawcoastlin": [11, 289], "drawcountri": [11, 289], "9998": [11, 289], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 59, 62, 64, 67, 73, 74, 79, 89, 90, 91, 94, 101, 102, 108, 111, 117, 121, 124, 126, 127, 129, 130, 134, 137, 141, 142, 149, 151, 152, 156, 161, 163, 166, 167, 168, 178, 179, 181, 190, 193, 200, 208, 210, 229, 231, 232, 233, 241, 244, 256, 259, 260, 265, 266, 269, 276, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 299, 300, 301, 302, 308, 312, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 340, 341, 343, 344, 352, 357, 364, 365, 367, 370, 378, 379, 383, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 407, 424, 427, 430, 431, 432, 433, 434, 435, 436, 442, 443, 445, 452, 455, 471, 485, 487, 489, 495, 506, 514, 520, 524, 527, 528, 529, 532, 533, 536, 538, 540, 541, 542, 564, 572, 573, 574, 575, 577, 578, 579, 581, 582, 583, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 614, 622, 623, 631, 633, 634, 636, 637, 638, 639, 641, 642, 646, 647, 648, 649, 650, 652, 662, 663, 665, 666, 667, 668, 669, 671, 674, 678, 679, 687, 688, 691, 700, 708, 719, 725, 738, 740, 741, 743, 748, 751, 756, 757, 758, 759, 761, 773, 774, 775, 777, 778, 780, 784, 786, 787, 788, 791, 794, 795, 797, 798, 800, 805, 816, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 842, 846, 847, 848, 852, 853, 854, 856, 857, 861, 869, 874, 888, 896, 904, 913, 918, 938, 953, 954, 956, 957, 958, 960, 961, 962, 963, 966, 968, 969, 970, 972, 977, 978, 979, 980, 984, 987, 994, 1000, 1001, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "solid": [11, 16, 31, 33, 120, 151, 208, 209, 225, 289, 300, 988], "z": [11, 16, 34, 57, 100, 117, 137, 150, 152, 167, 206, 208, 209, 210, 217, 219, 225, 230, 245, 282, 289, 292, 300, 303, 321, 327, 328, 332, 333, 334, 338, 367, 392, 400, 402, 536, 537, 568, 622, 647, 654, 668, 669, 672, 676, 682, 706, 767, 861, 960, 961, 968, 969, 1020], "float64": [11, 13, 48, 53, 70, 120, 122, 123, 166, 167, 267, 312, 313, 357, 364, 370, 372, 383, 403, 454, 455, 461, 479, 480, 491, 492, 525, 564, 565, 572, 574, 624, 641, 656, 658, 720, 846, 854, 855, 883, 884, 886, 887, 890, 892, 899, 901, 935, 938, 940, 941, 942, 979, 990, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "idx": [11, 16, 19, 30, 45, 104, 111, 117, 129, 157, 167, 169, 180, 188, 195, 196, 205, 218, 234, 347, 396, 399], "9999": [11, 214, 289, 319, 481, 610, 1013], "coverages_land": 11, "contourf": [11, 16, 117, 210, 230, 282, 289, 292, 300, 301, 321, 327, 333, 338, 614, 615], "pts_train": 11, "pts_test": 11, "auc": [11, 25, 196, 214, 234, 253, 256, 260, 263, 265, 266, 393, 685, 691, 770, 964, 1010, 1013, 1017], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 34, 100, 104, 209, 210, 242, 263, 282, 283, 327, 333, 338, 395, 690, 964, 980], "fpr": [11, 226, 234, 253, 265, 266, 377, 575, 579, 681, 685, 689, 709, 771, 964, 1002, 1005], "tpr": [11, 226, 234, 253, 265, 266, 377, 685, 689, 771, 964, 1002, 1005], "threshold": [11, 25, 42, 64, 97, 104, 145, 163, 167, 169, 191, 226, 228, 253, 254, 255, 263, 274, 315, 322, 347, 350, 383, 395, 400, 402, 404, 425, 426, 429, 452, 483, 491, 492, 514, 520, 525, 531, 532, 533, 546, 571, 574, 576, 580, 585, 586, 627, 650, 654, 659, 661, 675, 681, 683, 685, 686, 689, 690, 703, 708, 709, 721, 722, 738, 764, 770, 771, 774, 777, 778, 798, 816, 827, 828, 844, 846, 848, 864, 876, 877, 878, 886, 893, 895, 938, 960, 964, 967, 968, 970, 974, 977, 979, 980, 985, 1005, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1021], "roc_curv": [11, 226, 253, 265, 685, 689, 709, 764, 770, 964, 1005, 1006, 1007, 1010, 1011, 1013, 1018], "roc_auc": [11, 256, 260, 265, 266, 377, 617, 685, 964, 1002], "ntime": [11, 267], "432": [11, 15, 256, 397], "plot_species_distribution_model": [11, 15, 481], "emploi": [12, 148, 231, 397, 403, 405, 433, 461, 565, 572, 972, 988, 998, 1011], "techniqu": [12, 69, 71, 96, 105, 110, 119, 136, 144, 161, 165, 204, 219, 221, 261, 280, 311, 317, 346, 358, 367, 381, 383, 393, 394, 395, 399, 400, 401, 402, 403, 404, 430, 431, 432, 433, 517, 537, 660, 672, 676, 677, 708, 738, 956, 960, 961, 963, 964, 967, 970, 972, 976, 978, 980, 985, 988, 993, 998, 999, 1018], "histor": [12, 196, 985], "quot": [12, 14, 69, 257, 341, 342, 357, 364, 365, 368, 374, 394, 471, 472, 479, 964, 976, 979, 999, 1020], "quantiti": [12, 118, 256, 263, 310, 356, 383, 395, 402, 704, 705, 706, 767, 837, 953, 955, 958, 960, 1010], "daili": [12, 988], "price": [12, 74, 118, 128, 304, 954, 960, 988, 995], "link": [12, 17, 166, 167, 175, 196, 214, 241, 259, 286, 346, 357, 368, 369, 370, 371, 374, 378, 383, 393, 395, 397, 400, 405, 544, 545, 593, 631, 652, 663, 671, 688, 900, 902, 960, 967, 980, 981, 984, 987, 993, 997, 999, 1003, 1005, 1008, 1009, 1012, 1013, 1016], "fluctuat": [12, 59, 196, 263, 1013], "normalesup": [12, 32, 46, 65, 230], "2003": [12, 392, 395, 400, 403, 434, 435, 445, 496, 498, 672, 676, 816, 818, 960, 961, 966, 976, 1013], "2008": [12, 397, 399, 400, 461, 517, 546, 573, 628, 647, 668, 669, 675, 699, 708, 738, 811, 816, 820, 837, 958, 961, 962, 964, 965, 966, 969, 970, 979], "calm": 12, "ago": [12, 985], "tech": [12, 367, 819], "firm": [12, 395], "crash": [12, 370, 451, 871, 872, 879, 974, 1009, 1013], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 378, 837, 969, 997], "msft": 12, "ibm": [12, 19, 320, 343, 365], "twx": 12, "warner": [12, 1020], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 999], "amzn": 12, "amazon": 12, "tm": [12, 967], "toyota": 12, "caj": 12, "canon": [12, 383, 393, 402, 465, 466, 468, 750, 985, 986, 1001], "sne": [12, 163, 216, 217, 218, 219, 221, 223, 497, 508, 675, 1000, 1001], "soni": [12, 1015, 1017], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 838, 839, 968], "boe": 12, "ko": [12, 26, 149], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 79, 80, 397, 452, 457], "mcdonald": 12, "pep": [12, 378, 1005], "pepsi": 12, "kellogg": 12, "un": [12, 370, 393, 403, 407, 516, 572, 775, 844, 853, 864, 868, 1014], "unilev": 12, "mar": [12, 982], "marriott": 12, "pg": [12, 376, 632, 960, 1010], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 955, 966, 1017], "electr": [12, 367, 395], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 988], "chase": [12, 1005], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 988], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 356, 368, 381, 965, 982], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 69], "instrument": [12, 69, 95, 165], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1015], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 131], "dynam": [12, 167, 538, 539, 546, 562, 563, 659, 660, 661, 980, 984, 988, 1011, 1017], "rtn": 12, "raytheon": 12, "cat": [12, 70, 167, 168, 311, 312, 313, 365, 403, 565, 695, 701, 736, 765, 862, 964, 974, 1014, 1015, 1017], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 343, 357, 372, 376, 397, 403, 482, 565, 571, 572, 574, 893, 895, 984], "fetch": [12, 17, 128, 166, 214, 363, 364, 365, 370, 374, 375, 378, 394, 400, 479, 538, 539, 546, 571, 572, 574, 1013], "histori": [12, 359, 529, 542, 543, 982, 1005], "stderr": [12, 810], "url": [12, 17, 145, 364, 367, 374], "githubusercont": 12, "master": [12, 16, 276, 313, 370, 374, 988, 1010], "financi": [12, 395, 402, 960], "csv": [12, 364, 367, 375, 987, 1013, 1018], "read_csv": [12, 375, 1020], "close_pric": 12, "vstack": [12, 26, 56, 64, 151, 152, 178, 241, 245, 276, 289, 333, 614, 965, 1013], "q": [12, 70, 84, 121, 196, 311, 392, 395, 400, 917, 960, 979], "open_pric": 12, "carri": [12, 31, 161, 256, 259, 264, 293, 300, 343, 384, 389, 403, 540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 988, 998], "invers": [12, 54, 76, 82, 163, 246, 265, 328, 342, 343, 362, 383, 394, 396, 398, 399, 400, 403, 407, 429, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 510, 516, 517, 518, 522, 524, 526, 540, 544, 547, 572, 573, 574, 611, 627, 628, 641, 642, 649, 651, 657, 658, 659, 660, 661, 663, 706, 725, 734, 777, 778, 823, 824, 831, 832, 838, 839, 841, 845, 848, 854, 855, 857, 873, 874, 881, 882, 883, 886, 887, 889, 891, 907, 958, 960, 964, 967, 968, 974, 978, 979, 997, 999, 1000, 1001, 1005, 1008, 1013, 1016, 1017, 1019], "correl": [12, 27, 81, 84, 85, 105, 125, 141, 144, 153, 163, 164, 165, 167, 168, 170, 185, 191, 214, 256, 274, 304, 309, 310, 336, 363, 366, 367, 375, 383, 385, 392, 397, 399, 404, 405, 433, 440, 465, 466, 468, 476, 477, 483, 507, 547, 589, 592, 610, 617, 618, 619, 665, 666, 725, 739, 760, 761, 762, 807, 821, 822, 858, 859, 861, 870, 955, 960, 965, 971, 974, 978, 980, 985, 986, 1001, 1005, 1006, 1007, 1018, 1019], "condition": [12, 27, 196, 393, 397, 740, 958], "connect": [12, 39, 44, 47, 51, 54, 61, 65, 66, 368, 370, 379, 383, 397, 425, 429, 435, 445, 446, 568, 569, 678, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 962, 967, 969, 977, 1009, 1018], "edge_model": 12, "graphicallassocv": [12, 81, 397, 454, 456, 457, 458, 459, 461, 1013, 1017, 1019, 1021], "seri": [12, 81, 115, 165, 168, 178, 196, 217, 234, 238, 261, 305, 312, 316, 362, 365, 375, 383, 395, 472, 473, 474, 475, 479, 483, 484, 485, 487, 488, 493, 524, 673, 677, 800, 897, 955, 960, 961, 965, 967, 978, 984, 1008, 1011, 1012, 1013, 1017, 1020], "rather": [12, 53, 81, 112, 160, 166, 196, 197, 210, 302, 303, 341, 342, 352, 357, 366, 370, 372, 375, 376, 378, 381, 382, 383, 384, 395, 399, 400, 402, 403, 405, 431, 444, 446, 548, 564, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 612, 629, 630, 635, 636, 643, 644, 645, 646, 763, 793, 812, 814, 815, 844, 881, 882, 893, 918, 958, 960, 961, 964, 966, 967, 971, 985, 994, 997, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1020], "former": [12, 343, 402, 403, 548, 781, 788, 797, 966, 1005, 1011, 1014], "recoveri": [12, 81, 195, 397], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350, 378], "trust": [12, 26, 70, 71, 80, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350, 374, 384, 389, 393, 994, 1019], "unabl": [12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 165, 166, 167, 168, 177, 196, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350, 358, 861, 974, 1014], "render": [12, 26, 53, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 191, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350, 370, 374, 375, 376, 383, 534, 572, 614, 685, 858, 870, 893, 895, 963, 980, 1018], "nbviewer": [12, 26, 70, 71, 108, 114, 115, 116, 124, 125, 128, 131, 142, 153, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 313, 318, 350], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 57, 59, 130, 167, 169, 196, 218, 247, 251, 304, 318, 342, 350, 365, 375, 383, 384, 395, 401, 402, 403, 418, 478, 571, 572, 574, 577, 701, 770, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 808, 854, 855, 891, 892, 960, 961, 963, 964, 965, 974, 980, 981, 982, 984, 990, 993, 994, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1021], "amongst": [12, 980], "indic": [12, 19, 25, 26, 27, 48, 58, 59, 65, 74, 85, 94, 114, 153, 156, 161, 165, 167, 193, 219, 229, 250, 258, 259, 262, 263, 276, 289, 316, 317, 320, 341, 342, 343, 350, 357, 365, 370, 371, 372, 374, 378, 379, 381, 383, 392, 393, 395, 397, 399, 400, 402, 403, 405, 406, 410, 421, 424, 428, 433, 434, 435, 436, 438, 439, 440, 443, 447, 450, 455, 470, 491, 492, 494, 495, 496, 506, 515, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 603, 610, 611, 612, 613, 615, 616, 622, 630, 633, 634, 636, 637, 638, 644, 646, 648, 656, 658, 665, 666, 673, 675, 677, 679, 686, 690, 695, 696, 701, 702, 703, 707, 710, 711, 712, 713, 716, 720, 721, 722, 723, 736, 753, 760, 761, 762, 763, 765, 766, 767, 769, 770, 772, 773, 774, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 812, 814, 815, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 845, 848, 852, 854, 862, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 897, 901, 902, 907, 922, 927, 928, 954, 959, 960, 961, 964, 965, 966, 967, 968, 971, 972, 974, 975, 978, 979, 985, 990, 994, 997, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1016, 1018, 1020, 1021], "reflect": [12, 40, 46, 47, 79, 91, 95, 118, 167, 168, 196, 214, 265, 280, 342, 366, 369, 374, 383, 385, 392, 433, 439, 961, 964, 970, 972, 998, 1006, 1014], "properti": [12, 25, 155, 156, 198, 213, 242, 278, 303, 350, 356, 359, 363, 370, 372, 386, 392, 393, 395, 397, 400, 402, 404, 405, 410, 426, 429, 434, 435, 436, 447, 448, 465, 466, 467, 525, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 573, 574, 576, 577, 580, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 615, 629, 635, 638, 643, 645, 657, 658, 682, 687, 688, 691, 779, 782, 783, 793, 809, 810, 840, 841, 854, 855, 856, 862, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 953, 956, 959, 960, 961, 964, 965, 967, 970, 974, 977, 979, 980, 981, 985, 990, 1010, 1014, 1015, 1019], "impact": [12, 25, 36, 37, 67, 74, 141, 163, 165, 166, 167, 198, 214, 238, 250, 303, 305, 313, 342, 352, 356, 357, 363, 381, 384, 393, 395, 400, 430, 432, 519, 523, 530, 573, 649, 650, 651, 655, 657, 659, 660, 661, 675, 774, 779, 782, 783, 793, 804, 821, 822, 858, 870, 904, 918, 935, 938, 953, 963, 971, 979, 1012, 1015, 1018], "affinity_propag": [12, 44], "covariance_": [12, 34, 79, 81, 452, 453, 454, 455, 456, 457, 458, 459, 532, 533, 958, 1012], "n_label": [12, 91, 232, 383, 470, 506, 696, 703, 708, 721, 722, 736, 738, 772, 773, 799, 964, 1011, 1013], "lai": [12, 303, 970], "canva": [12, 16], "manifold": [12, 39, 52, 66, 220, 221, 222, 223, 276, 308, 312, 313, 318, 359, 363, 383, 395, 400, 402, 485, 508, 513, 527, 532, 549, 830, 842, 851, 874, 904, 967, 1000, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1021], "dens": [12, 163, 174, 215, 312, 313, 320, 356, 379, 383, 395, 400, 402, 404, 427, 430, 432, 447, 450, 479, 506, 507, 517, 518, 527, 549, 568, 569, 590, 591, 612, 635, 640, 641, 642, 649, 651, 655, 656, 659, 660, 661, 670, 671, 672, 675, 676, 742, 743, 749, 761, 772, 838, 839, 846, 853, 854, 856, 858, 859, 861, 870, 871, 872, 873, 874, 881, 882, 883, 884, 886, 887, 919, 935, 938, 954, 957, 960, 961, 964, 965, 967, 970, 974, 976, 977, 978, 979, 980, 1005, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "eigen_solv": [12, 44, 46, 65, 217, 218, 400, 435, 445, 518, 671, 672, 674, 676, 678, 961, 1006, 1015, 1018, 1019, 1020], "arpack": [12, 19, 44, 46, 65, 218, 400, 434, 435, 436, 445, 518, 524, 527, 671, 672, 674, 676, 678, 961, 1011, 1012, 1017], "don": [12, 54, 69, 119, 166, 218, 232, 256, 276, 319, 325, 329, 336, 341, 342, 356, 364, 370, 372, 374, 376, 378, 381, 382, 396, 403, 629, 635, 809, 889, 890, 891, 892, 928, 953, 960, 963, 965, 968, 970, 978, 987, 999, 1009, 1014, 1021], "control": [12, 16, 60, 94, 98, 99, 134, 153, 155, 197, 204, 228, 229, 257, 259, 278, 309, 311, 346, 348, 349, 356, 357, 363, 366, 370, 372, 375, 378, 381, 383, 386, 389, 394, 395, 398, 399, 400, 401, 404, 405, 418, 424, 432, 437, 454, 455, 461, 514, 519, 520, 521, 522, 523, 526, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 576, 577, 579, 597, 602, 608, 610, 613, 615, 617, 622, 624, 625, 629, 630, 632, 633, 634, 635, 637, 638, 639, 655, 657, 659, 660, 665, 666, 670, 675, 684, 692, 777, 778, 779, 781, 782, 783, 784, 785, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 807, 808, 811, 812, 815, 838, 839, 860, 862, 873, 874, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 895, 930, 951, 953, 960, 961, 963, 964, 965, 967, 970, 971, 974, 976, 978, 979, 980, 984, 985, 986, 997, 1001, 1005, 1007, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "neighbor": [12, 31, 39, 44, 47, 59, 126, 129, 136, 160, 161, 218, 219, 221, 225, 233, 234, 280, 281, 282, 283, 285, 286, 287, 289, 290, 310, 312, 313, 341, 359, 362, 367, 379, 383, 395, 401, 402, 403, 406, 409, 417, 425, 428, 429, 431, 433, 435, 440, 441, 444, 446, 479, 485, 487, 546, 553, 585, 590, 591, 610, 611, 614, 671, 672, 673, 674, 675, 676, 679, 763, 779, 807, 841, 842, 861, 877, 885, 938, 965, 970, 985, 986, 993, 998, 1000, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "node": [12, 41, 118, 122, 308, 346, 350, 378, 379, 395, 397, 400, 402, 425, 426, 429, 446, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 633, 637, 639, 665, 666, 675, 821, 822, 889, 890, 891, 892, 893, 895, 923, 932, 967, 969, 970, 971, 980, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1018, 1019, 1020], "plane": [12, 208, 230, 282, 327, 330, 332, 333, 338, 367, 435, 445, 958, 960, 979, 997], "node_position_model": 12, "locallylinearembed": [12, 217, 218, 219, 312, 671, 673, 675, 961, 967, 1010, 1011, 1019, 1020, 1021], "n_neighbor": [12, 44, 61, 66, 129, 160, 217, 218, 219, 221, 225, 234, 276, 278, 279, 282, 283, 284, 285, 288, 303, 308, 310, 341, 402, 435, 585, 590, 591, 611, 671, 672, 674, 676, 679, 823, 824, 825, 827, 829, 830, 834, 876, 877, 954, 961, 967, 970, 977, 1012, 1019, 1021], "output": [12, 14, 16, 25, 27, 37, 53, 58, 97, 107, 112, 117, 118, 128, 132, 136, 137, 148, 156, 160, 161, 163, 166, 192, 224, 238, 239, 244, 250, 254, 256, 259, 263, 265, 266, 276, 299, 302, 304, 305, 308, 311, 312, 342, 343, 345, 350, 351, 363, 364, 365, 367, 370, 372, 376, 378, 381, 382, 383, 393, 394, 395, 396, 398, 399, 402, 403, 404, 411, 415, 417, 421, 425, 426, 427, 429, 430, 432, 433, 435, 442, 443, 445, 446, 447, 448, 449, 450, 451, 465, 466, 467, 468, 471, 474, 475, 476, 477, 478, 479, 480, 486, 488, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 614, 615, 616, 618, 621, 622, 623, 624, 625, 629, 630, 633, 635, 636, 637, 640, 641, 643, 644, 645, 646, 649, 650, 651, 654, 656, 657, 659, 661, 662, 664, 665, 666, 667, 671, 672, 673, 675, 677, 679, 682, 683, 696, 697, 704, 705, 706, 708, 710, 717, 724, 727, 728, 730, 732, 733, 734, 735, 736, 738, 743, 749, 754, 767, 770, 777, 778, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 802, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 824, 825, 826, 830, 831, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 869, 870, 873, 874, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 902, 904, 907, 918, 919, 931, 951, 953, 954, 956, 958, 960, 961, 964, 965, 966, 967, 968, 971, 974, 979, 986, 990, 991, 993, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "edg": [12, 26, 46, 65, 97, 118, 220, 263, 378, 383, 392, 395, 397, 436, 544, 545, 568, 569, 571, 572, 574, 777, 818, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 846, 894, 974, 977, 988, 1011, 1013, 1016, 1019], "displai": [12, 25, 27, 34, 37, 46, 48, 59, 70, 80, 81, 84, 85, 88, 94, 119, 124, 125, 128, 163, 166, 167, 181, 183, 200, 214, 224, 225, 234, 239, 245, 253, 257, 258, 263, 270, 286, 304, 309, 310, 332, 347, 356, 370, 373, 377, 379, 386, 396, 400, 403, 404, 422, 447, 450, 451, 479, 524, 547, 613, 614, 615, 641, 670, 680, 681, 683, 684, 685, 696, 701, 764, 771, 779, 785, 793, 807, 841, 842, 854, 856, 861, 879, 886, 893, 894, 895, 909, 930, 951, 964, 968, 984, 1001, 1014, 1016, 1017, 1019, 1020, 1021], "strength": [12, 128, 155, 196, 200, 257, 308, 356, 398, 402, 550, 551, 626, 631, 632, 635, 641, 642, 652, 655, 656, 657, 658, 659, 661, 663, 670, 765, 838, 839, 881, 882, 886, 887, 953, 960, 967, 970, 978, 979], "plan": [12, 364, 368, 370, 371, 384, 974, 1008], "fair": [12, 402, 673, 677, 810, 965, 988], "crucial": [12, 165, 251, 356, 369, 370, 384, 395, 405, 979], "challeng": [12, 128, 148, 167, 175, 214, 225, 358, 365, 366, 395, 397, 445, 455, 964, 970, 988, 990], "overlap": [12, 37, 109, 122, 144, 220, 243, 342, 368, 392, 395, 399, 402, 403, 570, 772, 773, 780, 784, 786, 787, 788, 789, 797, 961, 974, 1011], "heurist": [12, 14, 120, 341, 357, 395, 404, 432, 435, 444, 445, 491, 492, 520, 522, 529, 659, 660, 661, 674, 678, 782, 783, 883, 884, 885, 886, 887, 906, 961, 962, 967, 978, 980, 988, 997, 1005, 1006, 1010, 1014, 1017, 1018], "direct": [12, 84, 85, 89, 94, 96, 100, 103, 145, 202, 241, 247, 253, 285, 295, 303, 328, 333, 368, 370, 371, 374, 378, 384, 395, 398, 400, 403, 404, 435, 445, 454, 455, 461, 517, 524, 532, 571, 572, 574, 585, 624, 671, 830, 958, 960, 965, 967, 969, 980, 985, 998, 1005, 1008], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 57, 60, 81, 88, 94, 97, 152, 161, 187, 208, 212, 233, 280, 282, 285, 286, 290, 295, 327, 328, 332, 333, 334, 338, 359, 362, 367, 379, 383, 395, 401, 402, 406, 409, 417, 428, 431, 433, 435, 440, 444, 445, 479, 485, 487, 590, 591, 610, 611, 613, 614, 618, 671, 672, 674, 675, 679, 772, 773, 779, 807, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 841, 842, 846, 861, 938, 961, 970, 979, 985, 986, 993, 1001, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017], "along": [12, 13, 55, 58, 65, 85, 115, 121, 183, 196, 230, 260, 305, 308, 342, 343, 352, 374, 376, 378, 379, 383, 386, 389, 392, 400, 402, 403, 404, 405, 407, 516, 533, 570, 594, 595, 613, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 659, 661, 664, 665, 666, 667, 668, 669, 761, 762, 772, 779, 793, 850, 851, 854, 855, 858, 859, 860, 861, 866, 867, 868, 870, 871, 872, 897, 920, 939, 945, 953, 960, 967, 974, 977, 988, 1005, 1010, 1011, 1013, 1017, 1018], "linecollect": [12, 220, 228, 615], "facecolor": [12, 16, 26, 34, 45, 59, 94, 101, 111, 137, 156, 217, 232, 256, 283, 300, 326, 329, 332, 333, 335], "partial_correl": 12, "precision_": [12, 81, 452, 453, 454, 455, 456, 457, 458, 459], "sqrt": [12, 79, 80, 81, 97, 100, 104, 113, 134, 175, 177, 220, 222, 236, 241, 242, 243, 246, 247, 256, 333, 395, 402, 403, 405, 446, 452, 453, 454, 455, 456, 457, 458, 459, 521, 523, 530, 540, 541, 542, 543, 547, 548, 602, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 682, 713, 745, 746, 751, 861, 874, 889, 890, 891, 892, 956, 960, 961, 964, 966, 976, 1019], "diag": [12, 81, 156, 243, 246, 400, 405, 515, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 777, 778, 960, 1020], "newaxi": [12, 13, 19, 24, 42, 81, 104, 110, 149, 177, 186, 192, 197, 198, 199, 201, 202, 213, 228, 230, 270, 281, 288, 336, 348, 349, 392, 519, 960], "ab": [12, 17, 40, 74, 98, 105, 111, 118, 128, 141, 145, 169, 183, 187, 207, 209, 212, 214, 220, 256, 298, 326, 338, 395, 521, 523, 530, 610, 728, 821, 822, 856, 964], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 59, 60, 101], "start_idx": [12, 220], "end_idx": [12, 220], "sequenc": [12, 117, 184, 220, 372, 383, 396, 399, 400, 402, 403, 486, 495, 544, 545, 552, 553, 564, 565, 571, 572, 574, 629, 779, 782, 790, 807, 865, 921, 922, 927, 935, 938, 984, 1005, 1008, 1010, 1011], "line0": [12, 220], "linen": [12, 220], "x0": [12, 34, 188, 205, 220, 298, 325, 383, 415, 447, 550, 551, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862], "y0": [12, 220], "y1": [12, 90, 111, 220, 492, 699, 746, 965, 966], "xm": [12, 220], "ym": [12, 220], "segment": [12, 36, 47, 67, 163, 220, 228, 365, 378, 395, 403, 435, 445, 491, 492, 674, 837, 964, 984, 988, 1013, 1015, 1017], "stop": [12, 17, 44, 61, 94, 107, 132, 153, 155, 163, 167, 174, 198, 215, 309, 370, 372, 378, 379, 383, 395, 400, 402, 404, 424, 425, 427, 429, 430, 432, 435, 437, 445, 446, 454, 455, 461, 465, 466, 467, 479, 487, 491, 492, 498, 503, 515, 519, 520, 521, 522, 523, 526, 528, 529, 530, 536, 537, 540, 541, 542, 543, 544, 545, 547, 548, 554, 571, 572, 574, 585, 600, 610, 627, 628, 629, 631, 632, 635, 639, 641, 642, 649, 650, 651, 652, 654, 659, 660, 661, 663, 674, 675, 678, 697, 777, 778, 807, 838, 839, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 923, 938, 953, 960, 968, 969, 979, 980, 985, 986, 988, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021], "lc": [12, 220, 228], "zorder": [12, 34, 57, 96, 125, 137, 149, 157, 186, 194, 218, 220, 228, 231, 241, 309, 332, 333], "hot_r": [12, 298], "norm": [12, 13, 14, 17, 34, 40, 54, 97, 100, 151, 154, 175, 182, 187, 220, 241, 242, 243, 245, 247, 253, 257, 281, 298, 328, 342, 376, 379, 383, 395, 403, 404, 426, 427, 430, 442, 443, 447, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 472, 514, 517, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 572, 573, 574, 580, 626, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 655, 657, 659, 661, 664, 667, 668, 669, 673, 675, 676, 677, 752, 818, 853, 868, 881, 883, 886, 946, 947, 957, 960, 962, 964, 974, 978, 1008, 1010, 1012, 1016], "set_arrai": [12, 220, 228], "set_linewidth": [12, 220, 228], "add_collect": [12, 220, 228], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 57, 70, 71, 114, 115, 119, 142, 145, 153, 160, 165, 166, 167, 168, 196, 214, 235, 238, 242, 243, 247, 251, 254, 255, 256, 257, 259, 267, 268, 276, 298, 303, 304, 305, 312, 316, 317, 342, 343, 365, 367, 368, 370, 372, 374, 379, 381, 383, 392, 396, 399, 400, 402, 403, 410, 427, 430, 431, 432, 433, 434, 436, 437, 440, 442, 443, 447, 450, 486, 492, 540, 541, 542, 543, 547, 548, 549, 570, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 600, 615, 616, 623, 680, 687, 688, 695, 699, 701, 713, 720, 739, 761, 762, 768, 770, 774, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 807, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 854, 889, 890, 891, 892, 922, 935, 938, 943, 944, 964, 966, 967, 968, 978, 980, 984, 997, 999, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "dx": [12, 13, 509, 682], "dy": [12, 682], "this_dx": 12, "argmin": [12, 120, 255, 372, 397, 514, 520, 528, 529, 668, 761, 762, 980], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 61, 101, 225, 241, 292, 300], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 55, 59, 66, 89, 90, 91, 101, 111, 117, 124, 126, 127, 129, 130, 137, 140, 149, 150, 152, 156, 167, 179, 188, 198, 205, 208, 209, 210, 229, 230, 231, 232, 241, 244, 256, 259, 270, 279, 282, 283, 284, 287, 292, 300, 301, 303, 321, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 347, 348, 349, 614], "ptp": 12, "03": [12, 35, 52, 66, 67, 75, 79, 94, 132, 153, 158, 166, 170, 177, 214, 223, 229, 241, 247, 257, 272, 296, 306, 317, 367, 403, 730, 779, 960, 964], "plot_stock_market": [12, 15], "parallel": [13, 107, 113, 117, 132, 163, 167, 198, 257, 309, 310, 312, 333, 350, 355, 362, 370, 371, 373, 374, 381, 383, 396, 404, 406, 407, 421, 428, 431, 432, 433, 435, 440, 441, 444, 447, 450, 455, 478, 514, 516, 517, 518, 520, 522, 524, 525, 526, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 572, 577, 585, 593, 615, 617, 622, 641, 671, 672, 673, 674, 675, 676, 677, 756, 760, 763, 779, 782, 783, 785, 790, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 840, 843, 876, 877, 932, 934, 985, 994, 999, 1001, 1005, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1021], "acquir": [13, 116, 258, 1017], "angl": [13, 34, 97, 145, 241, 242, 243, 246, 247, 367, 400, 514, 520, 522, 525, 526, 528, 529, 531, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 661, 665, 666, 667, 668, 669, 675, 961, 962, 986, 1001, 1005], "Such": [13, 124, 148, 153, 165, 175, 185, 197, 259, 341, 383, 384, 399, 400, 402, 538, 539, 639, 954, 964, 967, 974, 980, 997, 1015, 1020], "ct": [13, 156, 238, 396, 447, 449, 450], "cellular": 13, "materi": [13, 384, 564, 871, 872, 983], "haar": 13, "wavelet": [13, 104, 400], "sparsiti": [13, 81, 163, 174, 189, 211, 212, 215, 231, 342, 356, 383, 397, 400, 402, 404, 484, 485, 510, 514, 520, 521, 522, 523, 526, 528, 529, 530, 629, 635, 640, 641, 659, 661, 704, 705, 706, 850, 856, 861, 866, 957, 960, 967, 974, 993, 998, 1007], "oper": [13, 19, 156, 163, 231, 249, 253, 263, 272, 343, 356, 357, 367, 368, 370, 373, 376, 381, 383, 384, 386, 389, 391, 399, 400, 402, 403, 404, 408, 431, 444, 451, 458, 465, 466, 467, 468, 487, 516, 517, 524, 534, 535, 549, 555, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 599, 604, 607, 613, 618, 626, 641, 672, 676, 685, 689, 690, 691, 709, 756, 763, 764, 770, 771, 798, 807, 810, 821, 822, 844, 848, 853, 864, 865, 879, 886, 889, 920, 932, 937, 960, 967, 974, 979, 984, 988, 997, 1009, 1011, 1012, 1013, 1015, 1016, 1021], "fidel": 13, "penal": [13, 30, 81, 128, 185, 189, 196, 212, 214, 303, 336, 395, 397, 400, 404, 452, 453, 454, 455, 456, 457, 458, 459, 461, 630, 635, 636, 644, 646, 659, 688, 698, 716, 768, 775, 854, 881, 888, 960, 964, 966, 968, 978, 979, 997], "account": [13, 96, 103, 153, 160, 166, 214, 256, 285, 336, 338, 342, 356, 366, 370, 383, 384, 389, 395, 398, 399, 400, 402, 403, 446, 550, 551, 610, 611, 613, 615, 616, 632, 656, 662, 687, 690, 710, 711, 712, 720, 725, 738, 765, 766, 769, 770, 780, 784, 797, 855, 956, 958, 962, 964, 965, 966, 967, 974, 978, 980, 1010, 1012, 1013, 1014, 1017, 1018, 1020], "call": [13, 17, 46, 48, 50, 54, 70, 91, 114, 120, 142, 148, 152, 154, 156, 165, 167, 184, 196, 197, 214, 235, 237, 238, 256, 257, 265, 270, 271, 276, 278, 303, 305, 310, 311, 341, 342, 343, 350, 356, 357, 358, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 393, 395, 396, 397, 398, 399, 400, 402, 403, 405, 407, 416, 424, 427, 430, 432, 433, 434, 435, 436, 437, 440, 443, 445, 447, 448, 451, 452, 457, 465, 466, 467, 471, 474, 475, 478, 480, 486, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 560, 565, 566, 568, 569, 571, 572, 574, 580, 585, 590, 591, 593, 594, 597, 600, 603, 610, 611, 612, 613, 614, 615, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 687, 714, 724, 737, 753, 756, 760, 761, 762, 763, 773, 777, 778, 779, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 830, 832, 837, 838, 839, 840, 841, 844, 845, 846, 848, 850, 851, 853, 858, 861, 862, 865, 870, 871, 872, 873, 874, 878, 881, 882, 883, 884, 886, 887, 890, 892, 908, 912, 917, 918, 930, 931, 932, 935, 938, 948, 953, 954, 956, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 972, 974, 976, 977, 979, 980, 984, 988, 990, 994, 997, 998, 999, 1001, 1002, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 55, 56, 60, 61, 65, 67, 78, 84, 94, 96, 108, 109, 110, 111, 163, 172, 183, 185, 199, 212, 219, 221, 224, 228, 234, 239, 242, 243, 244, 247, 253, 256, 265, 276, 282, 283, 285, 289, 298, 300, 303, 308, 309, 310, 313, 327, 341, 342, 352, 356, 358, 363, 364, 365, 366, 367, 370, 371, 372, 373, 378, 379, 382, 383, 385, 391, 392, 394, 395, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 452, 457, 458, 461, 465, 466, 467, 471, 486, 494, 495, 496, 497, 498, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 530, 531, 536, 537, 538, 539, 542, 543, 546, 574, 586, 587, 593, 594, 618, 620, 622, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 687, 688, 691, 700, 702, 717, 719, 725, 756, 760, 761, 773, 775, 777, 778, 809, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 837, 842, 846, 848, 861, 865, 877, 881, 882, 883, 884, 885, 886, 887, 889, 890, 901, 917, 918, 920, 929, 933, 939, 954, 956, 959, 961, 962, 964, 966, 969, 970, 974, 977, 978, 979, 983, 984, 985, 986, 988, 990, 993, 994, 996, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "computation": [13, 77, 94, 120, 128, 148, 276, 341, 355, 371, 394, 395, 396, 399, 400, 402, 405, 521, 615, 616, 654, 745, 779, 781, 782, 783, 793, 804, 960, 961, 963, 971, 972, 976, 998, 1001, 1009], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 67, 78, 93, 95, 96, 106, 121, 126, 131, 139, 146, 147, 158, 163, 168, 178, 182, 184, 187, 194, 211, 216, 219, 223, 224, 228, 239, 243, 249, 251, 253, 272, 274, 292, 300, 302, 303, 308, 310, 321, 325, 340, 342, 344, 352, 365, 367, 383, 393, 397, 398, 400, 404, 421, 422, 427, 430, 432, 471, 487, 495, 497, 498, 505, 508, 524, 532, 533, 536, 547, 564, 565, 571, 572, 573, 574, 589, 591, 593, 594, 598, 605, 608, 614, 622, 626, 641, 655, 671, 672, 673, 674, 675, 687, 720, 725, 761, 770, 779, 782, 785, 793, 795, 807, 816, 819, 823, 838, 842, 850, 851, 853, 857, 858, 859, 861, 866, 867, 868, 869, 870, 871, 872, 881, 883, 884, 886, 887, 889, 953, 958, 961, 964, 966, 967, 970, 979, 1002], "l2": [13, 30, 40, 81, 84, 163, 174, 181, 187, 196, 207, 211, 212, 214, 215, 257, 276, 298, 320, 341, 342, 372, 379, 381, 395, 397, 400, 403, 425, 429, 433, 440, 507, 521, 523, 530, 541, 544, 545, 548, 572, 573, 574, 626, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 655, 659, 661, 663, 664, 669, 670, 671, 717, 732, 743, 744, 760, 761, 762, 793, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 838, 839, 853, 861, 868, 881, 882, 886, 887, 888, 890, 892, 947, 953, 957, 960, 962, 967, 968, 974, 978, 980, 997, 999, 1007, 1009, 1010, 1012, 1014], "produc": [13, 25, 26, 44, 56, 69, 97, 121, 122, 123, 124, 262, 295, 319, 352, 365, 366, 370, 372, 375, 383, 384, 395, 396, 399, 400, 402, 424, 427, 435, 502, 519, 542, 546, 564, 571, 576, 577, 615, 616, 781, 782, 783, 791, 796, 799, 802, 846, 856, 883, 886, 955, 956, 960, 962, 963, 964, 967, 970, 971, 975, 977, 978, 979, 980, 990, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 59, 61, 65, 72, 79, 93, 94, 99, 106, 109, 111, 114, 116, 126, 161, 163, 167, 168, 172, 174, 197, 215, 218, 232, 243, 256, 259, 265, 266, 298, 300, 303, 310, 319, 323, 328, 332, 333, 339, 341, 352, 356, 366, 367, 372, 375, 378, 381, 383, 393, 395, 396, 397, 400, 402, 403, 405, 447, 495, 502, 516, 521, 523, 524, 530, 532, 564, 571, 572, 574, 593, 614, 621, 629, 630, 656, 659, 660, 673, 677, 707, 714, 727, 728, 730, 735, 772, 798, 813, 814, 840, 841, 883, 885, 886, 891, 892, 953, 954, 956, 958, 960, 961, 963, 970, 971, 974, 978, 979, 980, 995, 997, 998, 1005, 1008, 1010, 1011, 1015, 1017, 1018, 1021], "central": [13, 198, 395, 970, 984], "emmanuel": [13, 65, 1005, 1012, 1013, 1014], "gouillart": [13, 65, 1005], "nsup": 13, "ndimag": [13, 46, 47, 54, 295, 998], "_weight": [13, 214], "orig": [13, 283], "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 59, 61, 65, 80, 101, 118, 120, 137, 165, 186, 187, 214, 220, 231, 234, 267, 276, 305, 403, 954, 960, 1012], "hstack": [13, 33, 34, 42, 130, 141, 222, 233, 251, 331, 399, 840], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 137, 332], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 299, 331, 618], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 120, 130, 342, 821, 822], "mask": [13, 42, 65, 116, 196, 204, 254, 255, 320, 379, 383, 396, 402, 452, 457, 544, 545, 564, 568, 569, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 612, 613, 615, 616, 632, 654, 779, 782, 783, 793, 936, 954, 971, 1005, 1008, 1010, 1011, 1013, 1015], "logical_and": [13, 121], "proj_oper": 13, "coo_matrix": [13, 182, 435, 568, 569, 935, 938], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 57, 61, 102, 112, 125, 127, 140, 175, 219, 220, 225, 231, 270, 288, 309, 310, 320, 321, 335, 336, 342, 348, 349, 379, 527, 687, 688, 698, 739, 763, 768, 873, 874, 876, 877, 878, 976, 990, 1005, 1016, 1017], "gaussian_filt": [13, 46, 47, 54, 998], "sigma": [13, 46, 47, 54, 79, 102, 121, 254, 256, 392, 397, 400, 402, 597, 632, 958, 960, 962, 966, 969, 998], "logical_xor": [13, 152, 334], "binary_eros": 13, "128": [13, 14, 196, 342, 356, 519], "proj": [13, 632], "randn": [13, 33, 34, 39, 54, 64, 65, 79, 80, 97, 102, 124, 140, 148, 152, 165, 168, 180, 185, 190, 191, 195, 209, 210, 213, 242, 245, 246, 251, 263, 265, 266, 270, 282, 283, 305, 309, 310, 327, 333, 334, 336, 338, 372, 375, 626, 653, 655, 661, 800, 884, 887], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 57, 70, 73, 77, 81, 86, 102, 117, 118, 120, 121, 133, 138, 139, 143, 145, 146, 166, 167, 174, 184, 196, 198, 214, 215, 243, 244, 246, 249, 253, 256, 257, 258, 260, 262, 265, 270, 271, 272, 280, 295, 297, 299, 304, 306, 308, 310, 319, 328, 336, 359, 365, 372, 373, 379, 381, 382, 383, 389, 390, 393, 396, 397, 400, 402, 403, 404, 405, 421, 454, 455, 456, 457, 458, 459, 461, 465, 466, 467, 468, 476, 484, 485, 487, 498, 524, 550, 551, 558, 576, 577, 580, 585, 589, 592, 625, 626, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 655, 656, 657, 658, 659, 661, 662, 664, 665, 666, 667, 668, 669, 684, 685, 689, 696, 710, 723, 767, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 815, 841, 842, 846, 861, 862, 879, 881, 883, 886, 924, 963, 964, 967, 968, 972, 974, 979, 980, 984, 985, 986, 988, 990, 993, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "lassocv": [13, 128, 134, 166, 185, 402, 404, 634, 635, 637, 638, 639, 646, 667, 960, 994, 1005, 1008, 1012, 1015, 1016, 1018, 1019], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 57, 81, 88, 94, 97, 152, 155, 163, 174, 187, 212, 215, 228, 233, 265, 280, 288, 295, 317, 328, 334, 405, 618, 628, 636, 646, 655, 667, 683, 690, 824, 832, 842, 856, 860, 955, 960, 964, 974, 1012, 1017], "133": [13, 55, 109, 342], "wspace": [13, 14, 39, 44, 45, 61, 79, 94, 109, 111, 196, 214, 225, 241, 243, 244, 247, 281, 289, 317, 325], "873": [13, 15, 367], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 71, 376, 394, 403, 518, 521, 527, 530, 1000, 1001, 1005, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "latentdirichletalloc": [14, 358, 375, 400, 984, 1010, 1012, 1019, 1020], "corpu": [14, 342, 343, 365, 400, 571, 572, 573, 574, 999, 1006], "frobeniu": [14, 97, 427, 430, 442, 452, 453, 454, 455, 456, 457, 458, 459, 514, 520, 521, 523, 528, 529, 530, 960, 1012], "kullback": [14, 217, 400, 521, 523, 530, 675, 961, 1012], "leibler": [14, 217, 400, 521, 523, 530, 675, 961, 1012], "diverg": [14, 120, 217, 222, 281, 521, 523, 530, 675, 837, 961, 963, 964, 969, 971, 1012, 1013, 1018], "probabilist": [14, 27, 30, 81, 93, 106, 147, 148, 151, 155, 158, 163, 341, 383, 393, 401, 402, 421, 456, 459, 515, 517, 518, 524, 542, 571, 572, 593, 605, 626, 628, 659, 686, 723, 779, 803, 848, 883, 884, 886, 887, 957, 958, 960, 963, 964, 969, 974, 979, 980, 984, 988, 1005, 1008, 1012], "semant": [14, 341, 342, 383, 527, 999, 1000, 1001, 1007], "runnabl": [14, 374, 375], "coupl": [14, 52, 53, 218, 364, 365, 392, 393, 395, 404, 572, 887, 953, 979], "ten": [14, 19, 109, 145, 218, 247, 365, 367, 402, 503, 886, 1014], "polynomi": [14, 160, 163, 171, 173, 174, 196, 202, 215, 236, 256, 270, 310, 311, 325, 332, 335, 362, 366, 435, 474, 603, 622, 623, 624, 626, 655, 747, 756, 757, 807, 842, 851, 853, 856, 860, 881, 883, 884, 885, 886, 887, 959, 979, 986, 1001, 1017, 1018], "lda": [14, 33, 34, 93, 106, 163, 285, 352, 367, 391, 487, 519, 524, 532, 533, 830, 984, 986, 1000, 1001, 1010], "proport": [14, 26, 40, 144, 182, 196, 203, 209, 225, 259, 283, 286, 338, 356, 365, 393, 395, 397, 399, 400, 402, 403, 422, 423, 452, 457, 498, 532, 533, 538, 540, 542, 543, 544, 545, 546, 547, 566, 567, 571, 574, 610, 615, 641, 642, 649, 650, 651, 657, 658, 659, 661, 679, 684, 695, 780, 781, 782, 783, 796, 799, 807, 827, 838, 839, 855, 881, 882, 883, 886, 887, 889, 891, 893, 895, 907, 953, 963, 964, 967, 970, 978, 979, 980, 1010], "313": [14, 997], "tf": [14, 19, 229, 341, 342, 343, 365, 400, 504, 527, 571, 572, 573, 574, 820, 828, 853, 953, 962, 966, 974, 984, 999], "idf": [14, 19, 229, 341, 342, 343, 365, 400, 504, 527, 571, 572, 573, 574, 820, 828, 853, 953, 962, 966, 974, 999, 1005], "311": [14, 342], "303": [14, 214, 288, 290, 342, 618], "2000": [14, 26, 40, 50, 74, 95, 102, 119, 172, 244, 247, 256, 292, 312, 342, 365, 367, 395, 396, 402, 407, 435, 445, 516, 517, 542, 672, 674, 676, 725, 770, 777, 827, 857, 869, 961, 964, 970, 976, 990, 998], "094": [14, 121, 132, 308, 314, 455], "392": 14, "minibatchnmf": [14, 358, 400, 1019, 1021], "batch_siz": [14, 19, 42, 63, 94, 97, 98, 342, 400, 432, 517, 519, 520, 521, 522, 529, 837, 838, 839, 921, 922, 930, 1006, 1013, 1016, 1018, 1019], "365": [14, 342, 397, 456], "102": [14, 257, 272, 376, 997, 1007], "ensta": [14, 17, 37, 48, 60, 196, 214, 218, 257, 259, 341, 342, 343], "chyi": [14, 1008, 1009, 1010, 1011, 1012], "kwei": [14, 1008, 1009, 1010, 1011, 1012], "yau": [14, 1008, 1009, 1010, 1011, 1012], "chyikwei": 14, "tfidfvector": [14, 19, 69, 257, 341, 365, 400, 403, 472, 571, 572, 573, 1005, 1007, 1013, 1014, 1015, 1018, 1019], "countvector": [14, 320, 343, 365, 375, 396, 400, 403, 472, 519, 565, 572, 573, 574, 999, 1005, 1007, 1010, 1013, 1014, 1015, 1016, 1017, 1018], "fetch_20newsgroup": [14, 19, 69, 257, 320, 341, 342, 343, 365, 472, 999, 1010, 1015], "n_top_word": 14, "init": [14, 42, 45, 57, 58, 60, 63, 167, 176, 217, 218, 220, 221, 222, 242, 244, 276, 342, 373, 378, 395, 400, 402, 427, 430, 432, 434, 436, 442, 443, 521, 523, 530, 531, 542, 543, 615, 616, 673, 675, 677, 830, 961, 1005, 1014, 1017, 1019, 1020], "nndsvda": [14, 400, 521, 523, 530, 1014, 1017], "plot_top_word": 14, "feature_nam": [14, 19, 105, 115, 122, 125, 145, 166, 168, 169, 205, 235, 279, 298, 308, 309, 310, 325, 341, 347, 363, 365, 375, 396, 473, 474, 475, 479, 483, 484, 485, 487, 488, 493, 565, 614, 615, 616, 893, 894, 895, 972, 980], "flatten": [14, 32, 220, 230, 254, 302, 325, 337, 376, 485, 552, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 830], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 120, 122, 168, 169, 196, 214, 308, 316, 317, 341, 342, 365, 972], "top_featur": 14, "barh": [14, 122, 160, 161, 165, 166, 168, 169, 238, 305, 341, 342, 343], "fontdict": [14, 39], "invert_yaxi": [14, 161, 343], "labels": [14, 302], "set_vis": [14, 280, 286, 298], "filter": [14, 46, 47, 202, 214, 254, 256, 278, 341, 372, 376, 379, 394, 395, 403, 431, 471, 472, 486, 571, 574, 578, 579, 580, 581, 756, 816, 910, 929, 966, 967, 996, 999, 1015], "useless": [14, 117, 259, 376, 404, 498, 511, 641, 695, 960, 974, 1014], "earli": [14, 44, 61, 94, 107, 109, 117, 132, 163, 174, 215, 309, 383, 402, 425, 429, 432, 446, 479, 487, 498, 503, 519, 520, 521, 522, 529, 536, 537, 542, 543, 544, 545, 554, 610, 628, 639, 649, 650, 651, 659, 661, 675, 807, 838, 839, 938, 961, 967, 974, 983, 985, 988, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020], "strip": [14, 214, 342, 356, 364, 365, 479], "header": [14, 69, 257, 341, 342, 365, 368, 403, 471, 472, 779, 782, 783, 793], "footer": [14, 69, 257, 341, 342, 365, 471, 472], "repli": [14, 341, 369, 370, 373], "common": [14, 17, 19, 97, 142, 145, 163, 164, 170, 251, 263, 310, 341, 343, 350, 356, 359, 364, 370, 372, 378, 381, 382, 385, 386, 392, 393, 394, 395, 396, 399, 401, 404, 405, 448, 450, 479, 573, 615, 636, 655, 656, 684, 728, 735, 751, 794, 804, 807, 842, 844, 852, 853, 854, 859, 861, 866, 867, 869, 870, 871, 872, 920, 953, 954, 960, 967, 970, 974, 979, 980, 984, 985, 988, 990, 1001, 1005, 1013, 1015, 1016, 1020], "english": [14, 19, 69, 341, 342, 343, 375, 403, 571, 572, 574, 984, 985, 999, 1018], "occur": [14, 69, 196, 214, 352, 370, 372, 378, 384, 392, 395, 397, 399, 403, 491, 492, 555, 564, 571, 573, 574, 610, 654, 778, 779, 782, 783, 785, 793, 803, 804, 805, 808, 906, 964, 966, 974, 999, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 257, 320, 341, 342, 571, 574, 1016], "min_df": [14, 19, 69, 257, 320, 341, 342, 403, 571, 574, 1005, 1007, 1016], "max_featur": [14, 31, 113, 123, 233, 253, 268, 310, 402, 404, 538, 539, 540, 541, 542, 543, 546, 547, 548, 571, 574, 580, 889, 890, 891, 892, 953, 960, 1005, 1007, 1008, 1012, 1013, 1016, 1019], "stop_word": [14, 19, 341, 342, 403, 571, 572, 574], "tfidf": [14, 69, 320, 403, 574, 999], "tf_vector": 14, "beta_loss": [14, 521, 523, 530, 1012], "alpha_w": [14, 400, 521, 523, 530, 1018], "00005": 14, "alpha_h": [14, 400, 521, 523, 530, 1018], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 166, 168, 311, 341, 342, 343, 365, 372, 383, 396, 403, 411, 415, 417, 426, 427, 429, 430, 432, 447, 450, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 671, 672, 675, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 974, 1018, 1019, 1020, 1021], "solver": [14, 30, 33, 34, 46, 65, 163, 174, 185, 187, 188, 189, 196, 198, 211, 212, 214, 215, 292, 293, 294, 295, 305, 341, 376, 381, 383, 386, 391, 395, 407, 435, 445, 454, 455, 461, 485, 516, 518, 523, 524, 527, 530, 532, 629, 630, 631, 635, 636, 641, 642, 643, 644, 645, 646, 649, 651, 652, 653, 655, 657, 659, 663, 664, 667, 670, 671, 672, 674, 676, 678, 770, 793, 807, 812, 815, 838, 839, 883, 884, 885, 886, 887, 958, 961, 964, 968, 978, 979, 984, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "mu": [14, 79, 80, 256, 400, 408, 456, 458, 459, 462, 463, 464, 523, 530, 958, 960, 1012, 1015], "mbnmf": 14, "learning_method": [14, 375, 519], "learning_offset": [14, 519], "tf_feature_nam": 14, "459": [14, 15, 395, 426], "plot_topics_extraction_with_nmf_lda": [14, 15], "115": [15, 167, 972], "execut": [15, 22, 28, 35, 67, 75, 82, 86, 92, 106, 132, 138, 146, 158, 160, 162, 170, 173, 185, 215, 223, 231, 239, 248, 261, 272, 275, 290, 296, 306, 314, 322, 339, 344, 351, 357, 370, 376, 389, 395, 400, 406, 427, 444, 779, 785, 793, 802, 803, 804, 805, 808, 826, 930, 931, 974, 977, 991, 999, 1007, 1010, 1013], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 67, 75, 79, 82, 86, 92, 97, 106, 132, 138, 146, 153, 158, 162, 166, 167, 170, 173, 187, 214, 215, 223, 229, 239, 248, 254, 257, 272, 275, 290, 296, 306, 314, 316, 317, 322, 339, 344, 351, 364, 367, 376, 395, 402, 403, 696, 698, 770, 779, 793, 805, 890, 960, 964, 974, 976, 978, 998], "real": [15, 31, 56, 69, 73, 77, 79, 107, 132, 151, 166, 221, 234, 250, 262, 270, 280, 299, 300, 343, 356, 359, 363, 364, 367, 374, 376, 379, 381, 382, 383, 392, 393, 395, 397, 399, 400, 402, 403, 452, 472, 473, 476, 477, 478, 479, 480, 483, 484, 487, 493, 503, 534, 535, 536, 538, 539, 540, 541, 542, 543, 547, 548, 575, 577, 578, 579, 580, 581, 582, 583, 682, 687, 706, 710, 734, 737, 739, 767, 775, 776, 806, 807, 838, 839, 883, 884, 885, 886, 887, 889, 890, 892, 954, 955, 956, 961, 964, 966, 968, 969, 970, 980, 983, 1001, 1005, 1018], "svm_gui": [15, 16, 997], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 80, 167, 320, 341, 342, 343, 365, 376, 394, 395, 397, 400, 772, 773, 777, 811, 893, 964, 965, 971, 984, 999], "frontend": [16, 376], "mainli": [16, 27, 53, 112, 148, 265, 356, 372, 393, 594, 966, 971], "intend": [16, 56, 57, 98, 197, 341, 370, 371, 372, 377, 381, 399, 451, 565, 656, 682, 850, 851, 861, 879, 959, 960, 964, 968, 975], "didact": [16, 370, 985], "click": [16, 227, 236, 257, 309, 370, 378, 988, 990, 992], "region": [16, 25, 36, 47, 49, 53, 55, 65, 67, 129, 155, 163, 166, 196, 214, 225, 229, 230, 247, 301, 328, 367, 377, 383, 395, 402, 405, 431, 433, 439, 445, 570, 961, 964, 967, 970, 974, 978, 980, 998], "induc": [16, 26, 55, 166, 187, 189, 194, 197, 211, 231, 343, 392, 394, 400, 402, 405, 432, 522, 526, 536, 540, 541, 542, 543, 547, 548, 549, 626, 708, 738, 854, 889, 890, 891, 892, 957, 964, 978, 997], "mous": [16, 364], "button": [16, 370, 378, 997], "prettenho": 16, "tkagg": 16, "backend": [16, 357, 383, 451, 879, 930, 932, 934, 964, 1008, 1013, 1014, 1015, 1016], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 34, 311, 359, 373, 374, 379, 383, 407, 421, 425, 429, 430, 432, 433, 440, 442, 461, 509, 516, 519, 520, 522, 529, 536, 537, 538, 539, 552, 553, 562, 563, 565, 585, 610, 613, 615, 616, 621, 627, 628, 633, 634, 637, 638, 639, 641, 647, 648, 654, 675, 682, 723, 738, 750, 760, 761, 762, 782, 783, 816, 817, 818, 820, 828, 840, 846, 854, 883, 884, 885, 886, 887, 897, 912, 913, 915, 953, 954, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 1005, 1006, 1010, 1020], "y_min": [16, 31, 34, 57, 89, 111, 117, 126, 137, 150, 230, 292, 300, 321, 332, 333, 618, 620], "y_max": [16, 31, 34, 57, 89, 111, 117, 126, 137, 150, 214, 230, 292, 300, 321, 332, 333, 618, 620], "x_min": [16, 31, 34, 52, 57, 89, 111, 117, 121, 126, 137, 150, 185, 230, 292, 300, 321, 332, 333], "x_max": [16, 31, 34, 52, 57, 89, 111, 117, 126, 137, 150, 230, 292, 300, 321, 332, 333], "notifi": [16, 555, 556, 557, 987, 1003, 1015], "regist": [16, 34, 341, 376, 932, 934], "surfac": [16, 107, 132, 163, 188, 205, 324, 325, 345, 351, 402, 487, 536, 540, 547, 614, 746, 889, 895, 958, 963, 978, 979, 980], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 172, 335, 435, 518, 622, 623, 626, 757, 759, 883, 884, 885, 886, 887, 962, 979], "kernel_map": 16, "hasattr": [16, 44, 55, 61, 81, 117, 214, 229, 292, 300, 341, 383, 925, 1015], "decision_surfac": 16, "delta": [16, 398, 435], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 115, 134, 163, 249, 255, 257, 260, 272, 383, 399, 405, 485, 550, 610, 642, 648, 696, 779, 782, 783, 793, 807, 886, 953, 960, 964, 1012, 1013, 1014], "docstr": [16, 370, 372, 376, 383, 431, 444, 455, 682, 684, 908, 953, 964, 967, 968, 978, 1005, 1012, 1013, 1018, 1019], "set_xlim": [16, 31, 42, 59, 74, 79, 91, 114, 126, 161, 167, 194, 196, 201, 230, 241, 260, 262, 263, 281, 292, 298, 300, 301, 302, 303, 309, 337], "attributeerror": [16, 396, 542, 560, 925, 998, 1014, 1015, 1017], "get_tk_widget": 16, "pack": [16, 379, 1013], "fill": [16, 34, 117, 134, 168, 251, 281, 347, 383, 396, 400, 498, 510, 521, 523, 530, 570, 613, 893, 895, 954, 967, 980], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 65, 100, 104, 112, 121, 149, 180, 206, 281, 286, 289, 309, 310, 393, 395, 396, 401, 407, 435, 448, 504, 516, 519, 598, 599, 605, 624, 741, 748, 758, 838, 839, 857, 958, 960, 962, 966, 967, 968, 977, 978, 979, 997], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 214, 370, 376, 395, 519, 629, 635, 961, 985, 987, 1005, 1010, 1011, 1013, 1018, 1019, 1020], "isinst": [16, 117, 214, 383], "lineset": 16, "support_vector": [16, 326], "place": [16, 59, 226, 235, 280, 356, 368, 370, 371, 372, 375, 377, 384, 393, 403, 405, 425, 429, 465, 466, 467, 498, 564, 573, 611, 613, 614, 750, 763, 777, 943, 944, 980, 984, 1005, 1012, 1015, 1016, 1018], "circl": [16, 59, 99, 126, 127, 137, 222, 232, 283, 286, 293, 298, 300, 318, 349, 366, 374, 378, 395, 435, 445, 497, 505, 746, 979], "dash": [16, 33, 79, 109, 120, 130, 148, 151, 153, 166, 183, 188, 191, 197, 198, 205, 208, 209, 234, 256, 266, 330, 334, 978], "bone": [16, 209, 338], "rais": [16, 197, 232, 259, 302, 311, 370, 372, 374, 375, 376, 379, 381, 383, 389, 396, 399, 407, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 492, 516, 533, 542, 550, 556, 559, 560, 571, 572, 574, 586, 600, 612, 613, 615, 618, 619, 654, 679, 681, 682, 685, 692, 694, 695, 696, 697, 709, 711, 712, 720, 738, 760, 764, 765, 766, 769, 770, 771, 777, 778, 779, 782, 783, 785, 793, 803, 804, 805, 808, 813, 828, 830, 831, 836, 840, 845, 846, 854, 855, 859, 860, 861, 868, 884, 885, 886, 887, 896, 899, 901, 902, 904, 905, 922, 925, 948, 949, 950, 951, 964, 974, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "valueerror": [16, 232, 372, 376, 407, 451, 516, 560, 586, 600, 618, 654, 697, 813, 831, 840, 846, 860, 900, 904, 905, 949, 950, 951, 974, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 229, 356, 357, 368, 370, 374, 376, 378, 386, 403, 491, 984, 999, 1007], "anchor": [16, 267], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 163, 174, 188, 205, 215, 232, 259, 323, 325, 328, 333, 339, 495, 614, 641, 642, 649, 651, 657, 658, 659, 660, 881, 883, 885, 886, 978, 979], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 374, 641, 642, 649, 651, 659, 660, 661, 838, 839, 881, 974], "add_opt": 16, "action": [16, 311, 341, 369, 373, 374, 386, 974, 1015], "store": [16, 32, 53, 54, 69, 71, 80, 89, 142, 156, 172, 182, 185, 218, 226, 235, 246, 261, 265, 316, 343, 350, 356, 364, 365, 370, 372, 377, 378, 379, 381, 383, 396, 398, 400, 402, 403, 405, 406, 422, 424, 428, 433, 440, 452, 453, 456, 457, 458, 459, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 491, 517, 518, 524, 532, 533, 538, 539, 546, 552, 553, 572, 593, 594, 610, 614, 615, 618, 621, 632, 633, 637, 643, 644, 645, 646, 649, 650, 656, 658, 659, 660, 661, 671, 672, 673, 675, 680, 681, 683, 684, 685, 763, 777, 778, 779, 785, 793, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 836, 852, 859, 861, 862, 876, 877, 878, 901, 902, 935, 938, 954, 956, 960, 967, 976, 979, 980, 984, 990, 999, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "dest": [16, 313], "dump": [16, 17, 389, 470, 821, 822], "argv": [16, 229], "opt": [16, 27, 84, 94, 152, 154, 156, 157, 175, 242, 368, 372], "arg": [16, 293, 371, 383, 400, 402, 409, 554, 555, 556, 557, 558, 559, 560, 561, 600, 682, 845, 960, 966, 967], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 320, 381], "classic": [17, 191, 221, 234, 241, 247, 367, 374, 397, 399, 400, 427, 430, 432, 442, 475, 483, 487, 493, 615, 616, 891, 892, 958, 960, 966, 974, 993, 1005, 1006, 1010, 1019], "graph": [17, 25, 39, 44, 46, 65, 66, 156, 217, 253, 276, 278, 319, 356, 370, 373, 383, 392, 397, 406, 425, 428, 429, 435, 436, 440, 445, 446, 454, 455, 461, 494, 568, 569, 671, 674, 675, 678, 764, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 836, 877, 961, 964, 967, 969, 977, 980, 984, 988, 995, 998, 1005, 1012, 1013, 1015, 1018, 1020], "vertex": [17, 26, 436, 1018], "en": [17, 24, 378, 384, 514, 520, 578, 619, 647, 651, 654, 668, 669, 678, 688, 823, 824, 829, 830, 831, 832, 859, 875, 889, 890, 960, 964, 979, 980], "wiki": [17, 24, 376, 378, 578, 619, 651, 654, 678, 688, 823, 824, 829, 830, 831, 832, 859, 875, 889, 890, 960, 980], "eigenvector_centr": 17, "webpag": [17, 172, 370], "pagerank": 17, "insid": [17, 19, 26, 167, 198, 256, 318, 328, 358, 364, 365, 372, 376, 395, 403, 571, 572, 574, 860, 932, 971, 988], "accord": [17, 24, 26, 37, 49, 77, 120, 145, 149, 179, 196, 214, 229, 308, 342, 352, 370, 372, 381, 382, 383, 384, 392, 395, 397, 399, 400, 402, 403, 405, 421, 433, 435, 439, 443, 445, 448, 452, 487, 499, 500, 501, 508, 513, 515, 518, 519, 521, 523, 533, 536, 537, 544, 545, 546, 549, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 624, 625, 627, 628, 632, 641, 642, 653, 663, 674, 678, 717, 761, 762, 779, 780, 781, 782, 783, 786, 787, 788, 793, 802, 816, 817, 818, 819, 820, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 844, 851, 859, 871, 873, 874, 881, 882, 883, 884, 886, 887, 958, 960, 964, 966, 967, 974, 977, 978, 980, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "tradit": [17, 196, 211, 342, 358, 393, 402, 403, 615, 677, 960, 963, 974, 988], "power_iter": 17, "martinsson": [17, 518, 524, 918], "dbpedia": 17, "content": [17, 303, 341, 343, 365, 374, 376, 389, 394, 403, 469, 486, 491, 492, 571, 572, 574, 654, 895, 973, 988, 999, 1006, 1015], "bz2": [17, 491, 492], "bz2file": 17, "pprint": [17, 121, 257, 365, 913], "randomized_svd": [17, 379, 434, 436, 515, 524, 527, 529, 1005, 1006, 1011, 1018, 1019, 1020], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 121, 160, 196, 294, 310, 355, 359, 373, 382, 782, 783, 965, 982, 985, 988, 991, 1001, 1013, 1018, 1019], "wait": [17, 370, 374, 383, 649, 650, 651, 659, 661, 1017], "wb": 17, "index_map": 17, "setdefault": [17, 896], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 69, 257, 278, 308, 370, 374, 376, 378, 405, 411, 426, 427, 429, 430, 432, 447, 450, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 622, 623, 624, 625, 671, 672, 675, 785, 805, 825, 830, 833, 837, 841, 847, 873, 874, 1011, 1012, 1018, 1020], "get_redirect": 17, "transit": [17, 374, 1016], "malform": [17, 1009], "1000000": [17, 519], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 65, 81, 97, 104, 115, 121, 166, 167, 192, 221, 228, 293, 298, 328, 341, 365, 372, 374, 382, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 411, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 504, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 606, 610, 611, 612, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 939, 945, 953, 959, 967, 968, 974, 980, 988, 994, 995, 997, 998, 1017, 1018, 1019, 1020, 1021], "break": [17, 39, 46, 69, 80, 163, 185, 202, 243, 311, 317, 323, 339, 341, 343, 370, 372, 374, 376, 382, 395, 452, 495, 622, 756, 760, 763, 777, 854, 861, 866, 883, 886, 960, 963, 972, 974, 979, 985, 1005, 1006, 1012, 1013, 1015, 1017, 1021], "get_adjacency_matrix": 17, "resolv": [17, 369, 370, 374, 378, 384, 403, 435, 445, 674, 678, 918, 954, 964, 1012, 1014, 1015, 1018], "lil_matrix": 17, "float32": [17, 120, 220, 295, 313, 357, 365, 370, 372, 391, 540, 541, 542, 543, 546, 547, 548, 549, 576, 577, 623, 624, 641, 745, 846, 889, 890, 891, 892, 899, 940, 941, 942, 980, 990, 999, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "del": [17, 376, 1017, 1018], "convert": [17, 34, 46, 48, 65, 70, 97, 153, 169, 196, 217, 237, 242, 243, 246, 247, 289, 356, 364, 379, 381, 383, 389, 403, 424, 427, 428, 430, 432, 433, 434, 435, 442, 447, 448, 479, 517, 524, 536, 537, 540, 541, 542, 543, 546, 547, 548, 549, 555, 564, 565, 571, 572, 573, 574, 576, 577, 589, 610, 611, 612, 613, 629, 635, 641, 642, 643, 645, 649, 651, 653, 657, 659, 660, 661, 675, 682, 760, 836, 845, 846, 848, 852, 854, 855, 856, 858, 881, 889, 890, 891, 892, 899, 901, 902, 924, 949, 950, 953, 960, 961, 962, 964, 974, 975, 979, 980, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1015, 1016, 1017, 1020, 1021], "csr": [17, 343, 356, 364, 365, 379, 381, 383, 403, 406, 427, 430, 432, 433, 442, 480, 491, 506, 536, 537, 540, 541, 547, 548, 549, 613, 641, 675, 682, 697, 750, 772, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 836, 844, 848, 850, 852, 853, 856, 859, 861, 864, 865, 866, 868, 871, 874, 889, 890, 891, 892, 897, 901, 902, 924, 927, 939, 940, 941, 942, 943, 944, 945, 967, 974, 978, 1005, 1006, 1011, 1013, 1014, 1020, 1021], "tocsr": 17, "convers": [17, 121, 187, 341, 352, 358, 364, 370, 372, 378, 381, 389, 403, 555, 836, 845, 853, 901, 902, 950, 961, 985, 988, 1013, 1014, 1015, 1018, 1021], "5m": 17, "ram": [17, 53, 358, 402, 873, 874, 966, 979, 999, 1011, 1017, 1020], "5000000": 17, "strongest": [17, 189], "highest": [17, 19, 26, 81, 141, 145, 254, 256, 267, 310, 341, 370, 381, 393, 399, 402, 404, 421, 538, 540, 547, 575, 578, 579, 581, 582, 583, 586, 587, 589, 618, 620, 708, 738, 774, 777, 779, 782, 783, 793, 878, 889, 920, 953, 960, 964, 965, 968, 978, 980, 1017], "centrality_scor": 17, "networkx": [17, 379], "copyright": [17, 81], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 367], "dan": [17, 1005, 1009, 1010, 1011, 1013, 1014], "schult": 17, "dschult": 17, "pieter": [17, 1011, 1012, 1019], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 104, 195, 229, 260, 343, 392, 406, 428, 506, 507, 514, 520, 525, 531, 571, 574, 668, 669, 682, 823, 824, 827, 829, 831, 832, 960, 964], "indptr": [17, 276, 350, 1013], "dangl": 17, "isclos": 17, "guess": [17, 117, 399, 402, 403, 461, 515, 521, 523, 524, 530, 964, 978], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 56, 61, 77, 78, 79, 81, 84, 85, 95, 96, 97, 102, 104, 112, 148, 149, 155, 156, 166, 177, 180, 188, 190, 191, 203, 230, 242, 243, 245, 246, 260, 324, 326, 356, 372, 376, 379, 383, 392, 400, 403, 516, 521, 523, 530, 573, 574, 597, 629, 630, 633, 635, 636, 637, 640, 643, 644, 645, 646, 664, 665, 666, 667, 670, 743, 745, 853, 893, 919, 962, 966, 974, 978, 979, 998, 1014], "converg": [17, 56, 60, 77, 78, 109, 119, 121, 148, 154, 157, 189, 198, 200, 204, 212, 242, 244, 293, 294, 298, 303, 317, 358, 379, 383, 392, 395, 400, 403, 405, 407, 424, 427, 430, 431, 432, 435, 437, 442, 443, 444, 445, 454, 455, 461, 465, 466, 467, 516, 518, 519, 520, 521, 522, 529, 536, 554, 593, 627, 628, 629, 630, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 655, 657, 659, 661, 665, 666, 670, 671, 673, 674, 677, 678, 777, 778, 830, 838, 839, 876, 877, 883, 954, 959, 960, 961, 963, 968, 978, 1005, 1008, 1009, 1010, 1012, 1013, 1016, 1018, 1019, 1020, 1021], "l_inf": 17, "scores_max": 17, "err": [17, 84, 98], "6f": [17, 98, 261, 719, 775], "concern": [18, 36, 76, 83, 87, 93, 107, 139, 147, 159, 163, 171, 174, 216, 240, 246, 273, 277, 291, 297, 315, 323, 340, 345, 356, 372, 394, 961, 976], "modul": [18, 36, 37, 49, 53, 76, 83, 87, 93, 94, 107, 139, 147, 157, 159, 163, 164, 171, 174, 211, 216, 217, 240, 249, 273, 277, 291, 293, 294, 297, 315, 323, 340, 345, 348, 364, 365, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 381, 383, 385, 386, 389, 392, 393, 394, 395, 398, 402, 403, 404, 406, 428, 486, 518, 562, 563, 642, 876, 910, 953, 958, 960, 962, 964, 965, 968, 970, 971, 974, 976, 978, 980, 981, 988, 993, 994, 999, 1006, 1007, 1008, 1010, 1011, 1015, 1017, 1019], "demo": [18, 22, 36, 67, 124, 163, 202, 246, 257, 265, 303, 341, 342, 372, 392, 395, 403, 424, 425, 428, 430, 431, 433, 434, 436, 438, 441, 485, 494, 495, 496, 524, 687, 688, 700, 702, 719, 773, 775, 842, 861], "spectral": [18, 22, 36, 44, 46, 49, 67, 163, 218, 219, 370, 403, 432, 434, 435, 436, 445, 452, 453, 454, 455, 456, 457, 458, 459, 471, 494, 496, 574, 671, 672, 673, 674, 675, 678, 702, 775, 967, 977, 1000, 1001, 1005, 1006], "twenti": [19, 229, 367, 392, 395, 999], "comp": [19, 84, 85, 97, 105, 295, 320, 341, 342, 343, 365, 999], "window": [19, 320, 365, 370, 372, 373, 403, 984, 1005, 1008, 1012, 1016, 1018, 1019], "misc": [19, 53, 97, 257, 320, 341, 342, 343, 365, 998], "categori": [19, 44, 61, 69, 70, 118, 128, 166, 167, 196, 204, 211, 234, 257, 293, 294, 300, 304, 305, 310, 313, 320, 341, 342, 343, 364, 365, 379, 394, 395, 396, 402, 403, 405, 471, 479, 480, 486, 544, 545, 631, 641, 642, 652, 663, 725, 740, 741, 817, 854, 855, 862, 954, 960, 961, 962, 966, 972, 990, 999, 1011, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "noth": [19, 69, 341, 342, 375, 525, 571, 572, 574, 697, 844, 853, 902, 974], "frequenc": [19, 27, 148, 167, 190, 196, 229, 309, 310, 341, 342, 343, 365, 381, 393, 399, 400, 402, 403, 404, 534, 540, 542, 543, 544, 547, 571, 572, 573, 574, 587, 641, 642, 647, 649, 651, 657, 658, 659, 668, 669, 810, 845, 854, 855, 881, 883, 886, 889, 891, 907, 960, 961, 966, 974, 978, 980, 1007, 1009, 1010, 1016], "dhillon": [19, 392, 434, 436, 494], "cut": [19, 43, 46, 64, 65, 219, 374, 381, 392, 395, 435, 436, 445, 571, 574, 674, 678, 974], "minibatchkmean": [19, 36, 44, 50, 60, 67, 163, 342, 358, 395, 400, 424, 426, 430, 495, 761, 1006, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021], "coclust": [19, 392, 434, 496], "4415": 19, "3015": 19, "talk": [19, 69, 257, 341, 342, 343, 359, 365, 383, 389, 988, 991, 999], "polit": [19, 341, 365, 369, 960, 965], "mideast": [19, 365], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 303, 367], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 365], "sci": [19, 69, 341, 342, 343, 365, 381, 672, 676, 852, 961, 974, 999], "med": [19, 69, 265, 365, 974, 999], "geb": 19, "gordon": [19, 244, 1011, 1015, 1017, 1019], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 365, 999], "religion": [19, 257, 341, 342, 343, 365, 965, 999], "alt": [19, 257, 320, 341, 342, 343, 365, 378, 999], "atheism": [19, 257, 320, 341, 342, 343, 365, 999], "god": [19, 341, 342, 999], "jesu": [19, 341, 342], "kent": 19, "belief": [19, 256, 837, 969], "christ": 19, "faith": [19, 154, 333], "moral": [19, 70, 341, 641, 1013, 1017, 1018], "775": 19, "pc": [19, 320, 343, 365], "hardwar": [19, 320, 343, 356, 357, 365, 368, 982, 984, 1019, 1020], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 800], "s3": [19, 95, 145, 184, 185, 367, 998], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 304, 320, 365, 370, 691, 964, 980], "electron": [19, 365, 367, 521, 523, 530, 610], "voltag": 19, "ship": [19, 128, 161, 347, 357, 368, 386, 403, 960, 1005, 1014], "circuit": [19, 961], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 392, 434, 1007, 1012, 1016], "v_measure_scor": [19, 37, 38, 49, 57, 342, 395, 700, 718, 719, 739, 964, 1014], "number_norm": 19, "token": [19, 343, 356, 365, 374, 403, 519, 571, 572, 573, 574, 1005, 1013, 1017], "placehold": [19, 374, 610, 611, 612, 613, 794, 795, 798, 799, 954], "begin": [19, 148, 251, 258, 274, 311, 341, 352, 370, 375, 376, 383, 392, 395, 402, 536, 537, 542, 544, 545, 649, 650, 659, 660, 661, 953, 960, 964, 974, 976, 978, 980, 1013, 1019, 1020], "By": [19, 45, 94, 124, 125, 175, 265, 298, 308, 341, 357, 370, 376, 377, 383, 395, 396, 398, 399, 400, 401, 402, 404, 422, 425, 429, 433, 447, 450, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 507, 509, 532, 533, 540, 541, 542, 543, 547, 548, 568, 569, 571, 572, 574, 589, 592, 615, 616, 654, 656, 658, 660, 673, 675, 677, 680, 683, 685, 686, 701, 711, 712, 716, 720, 765, 766, 769, 774, 776, 782, 783, 827, 841, 842, 854, 855, 857, 859, 869, 871, 884, 885, 889, 890, 891, 892, 901, 902, 932, 953, 954, 956, 960, 964, 971, 974, 976, 980, 990, 994, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019], "isdigit": [19, 403], "numbernormalizingvector": 19, "build_token": [19, 403, 571, 572, 574], "super": [19, 25, 27, 372, 403, 1013], "forsal": [19, 343, 365], "rec": [19, 343, 365, 624], "auto": [19, 33, 44, 45, 48, 56, 57, 59, 91, 94, 152, 179, 217, 218, 219, 220, 222, 234, 236, 276, 279, 284, 309, 310, 311, 312, 313, 324, 325, 331, 334, 335, 343, 364, 365, 370, 372, 402, 405, 406, 425, 428, 429, 430, 432, 433, 435, 440, 442, 445, 479, 491, 492, 518, 524, 527, 532, 540, 541, 544, 545, 546, 547, 548, 550, 576, 577, 580, 585, 590, 591, 612, 614, 615, 616, 618, 629, 630, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 655, 656, 657, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 685, 723, 782, 783, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 838, 839, 854, 855, 862, 873, 874, 878, 883, 884, 885, 886, 887, 889, 890, 891, 892, 917, 918, 930, 933, 955, 958, 960, 961, 967, 974, 984, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "motorcycl": [19, 365], "sport": [19, 365], "basebal": [19, 365], "hockei": [19, 365], "crypt": [19, 365], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 94, 312, 342, 370, 383, 395, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 443, 444, 445, 446, 494, 496, 998, 1005, 1009, 1011, 1013, 1014, 1016, 1019], "svd_method": [19, 434, 436, 515, 1008], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 56, 57, 60, 67, 163, 244, 247, 301, 312, 342, 379, 395, 424, 427, 431, 432, 435, 445, 495, 772, 773, 777, 778, 846, 967, 974, 985, 998, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "20000": [19, 96], "n_init": [19, 42, 43, 44, 45, 48, 50, 56, 57, 59, 60, 63, 94, 217, 218, 219, 220, 309, 312, 342, 395, 427, 430, 432, 434, 435, 436, 442, 445, 673, 677, 777, 778, 998, 1005, 1013, 1019, 1020], "y_coclust": 19, "row_labels_": [19, 20, 21, 392, 434, 436], "y_kmean": 19, "fit_predict": [19, 55, 56, 59, 225, 283, 372, 383, 395, 413, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 452, 546, 660, 777, 778, 827, 833, 841, 885, 970, 1010, 1013, 1014, 1018, 1020], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 58, 62, 63, 69, 129, 217, 234, 337, 494, 496], "get_indic": [19, 410, 434, 436], "float_info": 19, "row_compl": 19, "logical_not": [19, 63, 104, 199], "rows_": [19, 392, 410, 434, 436], "col_compl": 19, "columns_": [19, 392, 410, 434, 436], "ident": [19, 63, 120, 191, 196, 214, 225, 229, 321, 341, 365, 372, 383, 392, 395, 396, 397, 399, 405, 408, 422, 423, 435, 447, 448, 456, 458, 459, 462, 463, 464, 471, 486, 534, 542, 543, 547, 548, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 626, 662, 663, 682, 687, 688, 718, 767, 775, 781, 784, 794, 795, 796, 798, 799, 823, 824, 830, 838, 839, 845, 846, 858, 870, 889, 890, 957, 958, 961, 964, 967, 968, 979, 1009, 1013, 1014, 1015, 1019], "most_common": 19, "counter": [19, 395, 659, 660, 661, 1018], "itemgett": 19, "revers": [19, 74, 145, 201, 256, 517, 524, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 594, 771, 841, 964, 1005, 1006, 1015, 1017, 1021], "best_idx": [19, 255], "get_shap": [19, 410, 434, 436], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 57], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "589": [19, 22], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 392, 434, 436, 494, 496], "make_checkerboard": [20, 494, 1007], "rearrang": [20, 21, 392], "outer": [20, 99, 261, 318, 434, 497, 623, 633, 634, 637, 956, 1006], "product": [20, 70, 94, 129, 148, 153, 167, 352, 356, 372, 373, 376, 379, 389, 392, 400, 402, 434, 521, 523, 530, 565, 572, 573, 574, 596, 597, 616, 623, 647, 648, 668, 669, 743, 745, 757, 759, 853, 856, 873, 874, 919, 953, 956, 960, 962, 974, 976, 978, 979, 984, 988, 1013], "consensu": [20, 21, 37, 369, 370, 384, 392, 395, 632, 654, 661, 662, 702, 964], "kemaleren": [20, 21], "spectralbiclust": [20, 392, 436, 1007, 1011, 1012, 1016], "consensus_scor": [20, 21, 392, 1007], "matshow": [20, 21, 65, 116, 143, 294, 485], "row_idx": [20, 21, 196], "permut": [20, 21, 37, 80, 116, 122, 137, 163, 164, 170, 212, 249, 272, 305, 385, 390, 395, 402, 447, 479, 483, 487, 542, 543, 547, 548, 610, 613, 617, 662, 687, 688, 700, 718, 719, 737, 739, 775, 796, 798, 806, 807, 841, 855, 886, 889, 890, 918, 933, 935, 938, 964, 978, 994, 997, 1001, 1005, 1011, 1018, 1020], "col_idx": [20, 21], "biclusters_": [20, 21, 410, 434, 436], "1f": [20, 30, 50, 53, 97, 176, 196, 229, 241, 243, 263, 308, 342, 343], "fit_data": [20, 21], "column_labels_": [20, 21, 392, 434, 436], "106": [20, 22, 238, 367, 857, 958, 1006], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 359, 403, 410, 432, 434, 436, 471, 494, 496, 574, 702, 775, 964, 1000, 1001, 1007, 1011, 1012], "make_biclust": [21, 496, 1007], "implant": 21, "600": [21, 22, 26, 50, 127, 128, 338, 339, 365, 663], "plot_spectral_coclust": [21, 22], "294": 22, "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 74, 91, 107, 108, 109, 129, 132, 140, 147, 148, 149, 150, 158, 163, 166, 217, 221, 226, 229, 256, 259, 262, 263, 266, 298, 302, 308, 310, 319, 321, 356, 359, 365, 366, 372, 376, 381, 383, 395, 399, 400, 403, 404, 405, 419, 420, 421, 422, 423, 430, 432, 487, 495, 498, 506, 510, 532, 533, 534, 536, 538, 540, 542, 544, 545, 547, 550, 552, 553, 576, 577, 593, 596, 597, 605, 610, 615, 616, 641, 642, 654, 659, 675, 681, 683, 685, 686, 689, 690, 692, 695, 699, 703, 708, 709, 711, 721, 722, 723, 724, 738, 764, 766, 769, 770, 771, 774, 777, 778, 779, 782, 783, 793, 806, 807, 810, 812, 813, 816, 817, 818, 819, 820, 823, 826, 831, 837, 838, 874, 875, 876, 877, 878, 881, 883, 886, 889, 891, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 974, 976, 977, 978, 980, 985, 986, 987, 999, 1001, 1005, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019], "confid": [24, 25, 26, 27, 153, 155, 242, 256, 259, 319, 384, 393, 405, 619, 641, 642, 649, 651, 654, 657, 658, 659, 681, 685, 690, 703, 708, 709, 721, 722, 738, 771, 809, 848, 881, 883, 886, 960, 963, 964, 965, 970, 977, 978, 979, 988, 999, 1015], "being": [24, 27, 45, 52, 81, 85, 89, 99, 113, 125, 148, 153, 166, 168, 172, 190, 250, 256, 302, 303, 328, 341, 343, 368, 369, 370, 372, 374, 375, 381, 383, 384, 389, 395, 397, 399, 402, 403, 404, 405, 406, 408, 425, 426, 428, 429, 433, 439, 452, 458, 476, 506, 552, 623, 632, 639, 655, 657, 670, 673, 677, 695, 701, 711, 716, 718, 765, 771, 777, 821, 822, 827, 829, 831, 832, 833, 856, 874, 919, 953, 954, 960, 963, 964, 967, 970, 971, 972, 974, 976, 978, 979, 980, 1005, 1006, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021], "postprocess": [24, 393, 518, 524], "brier": [24, 25, 393, 692], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 362, 402, 421, 435, 518, 544, 603, 622, 626, 747, 756, 759, 838, 839, 883, 884, 885, 886, 887, 969, 979, 997, 1001, 1018], "isoton": [24, 25, 163, 224, 239, 359, 421, 640, 904, 986, 1001, 1006, 1007, 1008, 1009, 1011, 1018, 1021], "belong": [24, 27, 59, 234, 256, 308, 318, 364, 365, 392, 393, 395, 398, 399, 402, 410, 424, 427, 430, 431, 432, 434, 436, 506, 695, 713, 786, 792, 802, 828, 848, 862, 960, 963, 964, 966, 967, 968, 970, 979, 980, 984, 990, 997], "mblondel": [24, 48, 187, 218, 257, 341, 364, 491], "telecom": [24, 25, 42, 225, 988], "balaz": [24, 1009], "kegl": [24, 1009], "jhm": [24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231], "informatik": [24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231, 964], "uni": [24, 25, 26, 27, 73, 113, 148, 149, 151, 152, 153, 154, 155, 157, 187, 230, 231, 318, 336], "bremen": [24, 25, 26, 27, 148, 149, 151, 152, 153, 154, 155, 157, 231], "style": [24, 26, 80, 121, 185, 204, 214, 260, 370, 377, 395, 403, 427, 430, 442, 683, 785, 901, 902, 1005, 1008, 1019], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 58, 59, 61, 62, 63, 90, 188, 208, 225, 244, 301, 309, 312, 326, 329, 330, 337, 366, 372, 373, 402, 498, 1013, 1016, 1019], "50000": 24, "n_bin": [24, 25, 27, 53, 196, 214, 299, 301, 305, 422, 423, 846, 974], "calibration_curv": [24, 393, 421, 422, 1014, 1019], "blob": [24, 33, 42, 44, 56, 61, 63, 90, 395, 431, 495, 1010], "sample_weight": [24, 177, 196, 209, 214, 309, 338, 370, 383, 395, 402, 406, 412, 416, 421, 427, 428, 430, 432, 442, 443, 448, 452, 465, 466, 467, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 593, 594, 617, 618, 620, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 680, 681, 683, 685, 686, 690, 691, 692, 695, 696, 699, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 716, 717, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 764, 765, 766, 767, 769, 770, 771, 774, 776, 779, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 826, 828, 831, 832, 838, 839, 841, 846, 860, 861, 876, 877, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 952, 964, 978, 979, 980, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "sw_train": [24, 309], "sw_test": [24, 309], "calibratedclassifiercv": [24, 25, 26, 352, 383, 393, 659, 953, 979, 985, 1009, 1011, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "brier_score_loss": [24, 25, 393, 964, 1013, 1014, 1015], "gaussiannb": [24, 25, 27, 31, 130, 258, 352, 393, 402, 421, 552, 816, 817, 818, 820, 842, 958, 965, 966, 1009, 1010, 1011, 1013, 1018, 1021], "With": [24, 34, 44, 66, 74, 99, 119, 141, 163, 167, 196, 198, 224, 226, 231, 232, 238, 239, 256, 280, 356, 359, 365, 370, 372, 383, 395, 396, 399, 402, 404, 421, 423, 484, 565, 615, 616, 641, 750, 839, 842, 844, 855, 861, 862, 888, 890, 957, 960, 961, 964, 965, 967, 968, 971, 978, 980, 990, 991, 998, 1002, 1008, 1012, 1013, 1015, 1017, 1019], "itself": [24, 49, 121, 124, 167, 194, 237, 265, 276, 305, 328, 342, 356, 358, 369, 370, 372, 374, 383, 394, 395, 406, 424, 425, 428, 429, 452, 453, 454, 455, 456, 457, 458, 459, 510, 514, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 534, 549, 552, 566, 575, 578, 579, 581, 582, 583, 585, 586, 622, 623, 624, 625, 626, 628, 638, 672, 674, 772, 773, 816, 817, 818, 819, 820, 821, 822, 826, 834, 835, 846, 847, 848, 876, 877, 956, 960, 961, 963, 967, 968, 972, 984, 1009, 1020], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 126, 130, 149, 150, 151, 152, 265, 292, 300, 303, 308, 310, 341, 372, 377, 383, 393, 394, 402, 421, 422, 532, 533, 534, 536, 538, 540, 542, 544, 547, 550, 552, 576, 577, 593, 602, 603, 605, 606, 614, 615, 616, 641, 642, 659, 681, 683, 685, 723, 724, 770, 777, 778, 779, 782, 783, 793, 802, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 823, 831, 838, 841, 848, 876, 877, 878, 883, 886, 889, 891, 960, 964, 966, 968, 971, 977, 978, 979, 980, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 111, 123, 188, 202, 204, 205, 317, 333, 336, 347, 367, 378, 381, 386, 395, 457, 542, 543, 573, 574, 618, 628, 647, 659, 661, 668, 669, 777, 960], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": 24, "109": [24, 53, 115, 208, 215, 965, 1007], "y_uniqu": 24, "rainbow": [24, 219], "this_i": [24, 202], "this_x": [24, 194, 202, 997], "this_sw": 24, "lexsort": 24, "51": [24, 42, 153, 214, 276, 395, 396, 763, 959, 960], "uncalibr": [24, 25, 26, 421], "gnb": [24, 25, 27, 130, 402, 552, 966], "474": [24, 28, 331, 339], "plot_calibr": [24, 28], "reliabl": [25, 27, 393, 399, 422, 423, 629, 980, 988], "diagram": [25, 27, 70, 236, 309, 393, 395, 422, 423, 451, 879, 974, 1016, 1017], "redund": [25, 27, 105, 144, 242, 247, 352, 366, 369, 370, 375, 383, 393, 498, 617, 985, 999, 1017], "uninform": [25, 27, 305, 366, 375, 403, 953, 960, 1013], "rest": [25, 30, 118, 122, 163, 174, 211, 215, 244, 308, 320, 325, 376, 383, 394, 405, 495, 593, 614, 627, 641, 642, 659, 736, 770, 809, 810, 811, 830, 881, 883, 886, 960, 964, 965, 968, 971, 979, 988, 1009, 1010, 1019, 1020, 1021], "make_classif": [25, 27, 31, 90, 113, 114, 115, 119, 142, 144, 253, 259, 267, 268, 286, 292, 300, 308, 310, 336, 352, 366, 373, 391, 421, 422, 495, 536, 538, 540, 547, 649, 680, 681, 683, 685, 805, 811, 838, 841, 881, 953, 964, 965, 974, 979, 1011, 1012, 1013, 1015], "100_000": [25, 27, 166], "n_inform": [25, 27, 31, 90, 113, 115, 142, 144, 175, 199, 253, 259, 269, 286, 292, 300, 308, 336, 372, 375, 498, 507, 536, 537, 538, 539, 547, 548, 648, 811, 965, 1013], "n_redund": [25, 27, 31, 90, 115, 142, 144, 253, 259, 286, 292, 300, 375, 421, 498, 536, 538, 547, 811], "logisticregress": [25, 27, 30, 70, 72, 114, 130, 136, 144, 179, 186, 187, 188, 189, 203, 211, 212, 226, 227, 236, 238, 259, 265, 274, 295, 300, 308, 309, 310, 311, 312, 341, 356, 370, 372, 376, 378, 382, 393, 396, 402, 404, 422, 550, 552, 580, 614, 617, 626, 635, 642, 655, 656, 657, 658, 659, 670, 683, 770, 793, 812, 813, 815, 866, 867, 869, 870, 871, 872, 888, 913, 960, 964, 965, 974, 978, 979, 995, 997, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "baselin": [25, 118, 121, 131, 145, 175, 214, 266, 274, 310, 342, 367, 395, 404, 534, 535, 617, 964, 967, 999, 1021], "regular": [25, 36, 67, 70, 72, 78, 99, 107, 132, 155, 160, 163, 174, 175, 176, 181, 183, 184, 185, 187, 196, 210, 214, 215, 231, 242, 250, 257, 260, 269, 281, 282, 291, 294, 295, 296, 303, 304, 323, 325, 327, 328, 329, 339, 341, 343, 346, 356, 370, 381, 382, 393, 395, 397, 398, 400, 401, 402, 405, 421, 427, 430, 454, 455, 459, 461, 462, 463, 464, 487, 495, 497, 498, 503, 505, 507, 511, 521, 522, 523, 526, 530, 531, 533, 542, 544, 545, 571, 572, 574, 621, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 676, 717, 723, 732, 777, 778, 796, 807, 808, 838, 839, 842, 861, 881, 882, 883, 884, 886, 887, 888, 953, 954, 956, 957, 958, 961, 963, 969, 970, 974, 977, 978, 979, 986, 988, 994, 995, 997, 1001, 1005, 1006, 1007, 1009, 1010, 1014, 1015, 1017, 1018], "logist": [25, 27, 30, 68, 70, 75, 114, 136, 163, 174, 215, 226, 238, 274, 295, 303, 312, 341, 383, 384, 393, 396, 402, 404, 405, 421, 472, 479, 485, 487, 495, 524, 542, 544, 554, 593, 614, 629, 640, 641, 642, 649, 651, 659, 723, 779, 793, 807, 837, 838, 839, 841, 861, 888, 904, 906, 964, 968, 969, 978, 979, 986, 988, 995, 1001, 1009, 1012, 1013, 1015, 1016], "guid": [25, 68, 94, 157, 163, 166, 167, 184, 217, 263, 282, 283, 286, 304, 308, 309, 310, 311, 312, 313, 359, 368, 369, 370, 375, 376, 377, 382, 383, 384, 394, 396, 402, 406, 407, 408, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 602, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 895, 914, 965, 992, 999, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1015], "gridspec": [25, 27, 64, 241, 377], "calibrationdisplai": [25, 27, 393, 1018, 1019], "lr": [25, 27, 114, 130, 131, 199, 211, 227, 228, 252, 259, 382, 402, 551, 552, 553, 695], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 333], "dark2": [25, 27, 218], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 196, 229, 262, 281, 298, 310, 393, 542, 543, 544, 545, 625, 740, 741, 956, 962, 974, 986, 1000, 1001, 1017, 1020], "grid_posit": [25, 27], "y_prob": [25, 27, 151, 422, 423, 692, 812, 838, 964, 1019], "poorli": [25, 61, 77, 85, 112, 123, 221, 357, 395, 402, 511, 613, 960, 961, 1011], "violat": [25, 328, 378, 381, 383, 618, 905, 971, 978, 980], "independ": [25, 27, 37, 46, 95, 96, 98, 114, 117, 155, 167, 233, 256, 259, 261, 265, 274, 298, 305, 308, 342, 352, 356, 357, 366, 372, 374, 382, 383, 386, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 407, 432, 447, 471, 486, 498, 499, 500, 501, 503, 515, 516, 518, 520, 522, 523, 529, 530, 534, 535, 587, 590, 591, 608, 623, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 655, 656, 657, 658, 687, 688, 700, 718, 719, 737, 739, 775, 781, 806, 810, 812, 814, 815, 853, 857, 858, 859, 861, 865, 866, 867, 868, 870, 871, 872, 875, 883, 884, 885, 886, 887, 912, 953, 956, 958, 960, 961, 964, 965, 966, 969, 971, 974, 979, 980, 1000, 1001, 1005, 1006, 1011, 1013, 1015, 1020], "overli": [25, 26, 185, 261, 352, 400, 964], "typic": [25, 27, 98, 109, 172, 196, 214, 231, 258, 259, 263, 265, 266, 282, 283, 310, 328, 342, 356, 363, 364, 365, 368, 372, 373, 379, 382, 383, 393, 394, 395, 396, 399, 400, 402, 403, 405, 427, 430, 432, 479, 534, 536, 538, 539, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 612, 621, 623, 626, 637, 638, 639, 654, 665, 666, 695, 848, 855, 859, 862, 917, 918, 949, 953, 957, 960, 961, 963, 964, 965, 966, 970, 972, 988, 999, 1014, 1018, 1021], "transpos": [25, 84, 256, 407, 509, 521, 523, 530, 643, 644, 645, 646, 770, 918, 950, 964, 976, 998, 1005, 1019], "nearli": [25, 259, 365, 383, 394, 746, 964, 967, 976, 999], "albeit": 25, "strongli": [25, 27, 81, 85, 97, 118, 122, 166, 178, 211, 262, 341, 370, 385, 386, 393, 402, 641, 718, 775, 960, 961, 1001, 1014], "plenti": 25, "greater": [25, 91, 111, 166, 213, 230, 244, 262, 274, 282, 283, 346, 356, 366, 375, 383, 393, 395, 398, 402, 425, 429, 432, 435, 446, 455, 519, 524, 540, 541, 542, 543, 544, 545, 547, 548, 549, 576, 577, 580, 593, 594, 611, 623, 625, 628, 647, 649, 650, 654, 659, 660, 661, 675, 692, 695, 703, 717, 718, 721, 724, 770, 775, 777, 778, 811, 823, 824, 831, 832, 838, 839, 844, 859, 871, 875, 878, 889, 890, 891, 892, 918, 933, 953, 959, 960, 961, 964, 965, 970, 974, 979, 980, 1008, 1013, 1016, 1018, 1019, 1020], "exploit": [25, 274, 965, 985, 1008], "precision_scor": [25, 263, 691, 769, 964, 1005, 1007, 1008, 1009, 1010, 1015, 1021], "recall_scor": [25, 263, 399, 691, 766, 964, 1005, 1007, 1008, 1009, 1010, 1015, 1021], "f1_score": [25, 263, 320, 365, 720, 964, 1005, 1007, 1008, 1009, 1010, 1014, 1015, 1021], "log_loss": [25, 26, 120, 123, 149, 303, 320, 341, 383, 393, 402, 540, 542, 544, 547, 629, 641, 659, 889, 891, 953, 960, 964, 978, 1007, 1009, 1011, 1019, 1020, 1021], "roc_auc_scor": [25, 256, 265, 308, 685, 689, 690, 691, 771, 964, 1007, 1008, 1013, 1015, 1019, 1020], "score_nam": [25, 37, 231, 258, 342, 785], "score_df": 25, "set_index": [25, 121, 153, 185, 214, 256, 304, 342], "decim": [25, 154, 454, 455, 894, 1012, 1013], "098921": 25, "323178": 25, "937457": 25, "872009": 25, "851408": 25, "861586": 25, "117608": 25, "782755": 25, "940374": 25, "857400": 25, "875941": 25, "866571": 25, "098332": 25, "370738": 25, "938613": 25, "883065": 25, "836224": 25, "859007": 25, "108880": 25, "368896": 25, "940201": 25, "861106": 25, "871277": 25, "866161": 25, "refin": [25, 81, 455, 692, 964, 999], "alter": [25, 161, 372, 383, 711, 712, 720, 765, 766, 769, 1010, 1014, 1017], "uncertainti": [25, 148, 155, 175, 258, 393, 395, 550, 551, 626, 841, 954, 976], "linearsvc": [25, 27, 69, 71, 141, 142, 163, 172, 230, 253, 255, 263, 300, 308, 323, 325, 336, 339, 341, 356, 372, 376, 393, 403, 404, 421, 495, 550, 560, 614, 622, 626, 635, 655, 656, 657, 658, 659, 670, 717, 724, 804, 809, 882, 883, 886, 888, 960, 964, 965, 1005, 1006, 1007, 1011, 1013, 1016], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 214, 228, 298, 328, 618, 659, 723, 851, 974, 1009, 1016, 1017], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 130, 421, 889, 891], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 66, 99, 166, 167, 185, 263, 383, 393, 397, 399, 404, 427, 430, 432, 452, 521, 523, 530, 546, 695, 827, 885, 1005], "behavior": [25, 27, 37, 39, 52, 160, 163, 166, 167, 196, 214, 247, 249, 259, 272, 294, 298, 300, 305, 328, 352, 357, 364, 367, 370, 372, 374, 378, 379, 383, 393, 395, 399, 403, 519, 534, 549, 649, 650, 651, 659, 660, 661, 684, 711, 712, 765, 766, 769, 780, 781, 784, 796, 797, 798, 799, 800, 818, 854, 953, 960, 965, 970, 974, 988, 990, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "hing": [25, 203, 206, 208, 264, 325, 326, 330, 383, 649, 659, 717, 881, 888, 960, 978, 979, 999], "focus": [25, 77, 185, 365, 381, 402, 961, 974, 984], "far": [25, 59, 81, 118, 149, 155, 166, 196, 214, 328, 341, 343, 370, 379, 405, 703, 861, 939, 969, 970, 979, 988, 997], "awai": [25, 26, 27, 59, 77, 117, 148, 149, 153, 199, 333, 365, 393, 405, 611, 823, 824, 831, 832, 963, 964, 979, 997], "shown": [25, 48, 56, 88, 109, 111, 121, 157, 165, 167, 186, 194, 214, 222, 225, 230, 243, 256, 259, 262, 265, 281, 293, 294, 298, 299, 300, 316, 341, 342, 370, 375, 384, 393, 395, 396, 399, 400, 401, 403, 405, 422, 443, 615, 681, 683, 684, 685, 696, 779, 793, 893, 895, 959, 960, 961, 964, 967, 972, 974, 978, 979, 980, 999, 1009, 1014, 1015, 1016, 1019], "varieti": [25, 160, 243, 304, 328, 378, 381, 394, 395, 397, 402, 403, 626, 967, 980, 984, 988, 1007, 1020], "niculescu": [25, 27, 393, 421, 423], "mizil": [25, 27, 393, 421, 423], "caruana": [25, 27, 393, 421, 423], "144944": 25, "465663": 25, "937596": 25, "872201": 25, "851772": 25, "861865": 25, "099827": 25, "377027": 25, "936467": 25, "853032": 25, "878041": 25, "865356": 25, "098760": 25, "321306": 25, "937530": 25, "873703": 25, "848723": 25, "861032": 25, "deal": [25, 56, 70, 160, 166, 221, 343, 370, 375, 394, 396, 403, 404, 405, 457, 479, 686, 691, 745, 769, 847, 918, 960, 988, 996, 1008, 1020], "situat": [25, 44, 56, 71, 165, 166, 202, 225, 259, 370, 378, 397, 399, 400, 402, 511, 517, 565, 854, 857, 869, 958, 960, 966, 967, 977, 980, 1013], "supervis": [25, 27, 37, 49, 54, 57, 85, 103, 114, 136, 137, 218, 232, 243, 256, 285, 310, 319, 322, 342, 356, 359, 365, 372, 382, 383, 393, 395, 398, 399, 400, 402, 403, 405, 421, 423, 447, 471, 486, 487, 536, 571, 573, 576, 577, 617, 659, 711, 780, 781, 784, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 807, 830, 840, 841, 845, 855, 862, 876, 877, 878, 886, 958, 961, 964, 966, 967, 970, 974, 975, 979, 980, 981, 984, 985, 987, 990, 991, 993, 999, 1001, 1005, 1011, 1017], "icml": [25, 27, 393, 395, 403, 421, 423, 816, 818, 837, 964, 966, 978, 983], "2005": [25, 27, 80, 367, 393, 421, 423, 830, 960, 967, 977], "165": [25, 28, 231, 965], "plot_calibration_curv": [25, 28], "simplex": [26, 653, 777, 856], "arrow": [26, 1019], "green": [26, 34, 80, 91, 112, 125, 130, 148, 172, 222, 293, 299, 303, 309, 383, 965, 1013, 1014, 1016, 1017], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 58, 59, 61, 62, 63, 208, 225, 244, 301, 330, 495], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 55, 113, 114, 115, 116, 117, 130, 168, 169, 236, 237, 253, 268, 308, 310, 341, 352, 382, 383, 393, 402, 404, 540, 541, 542, 544, 549, 550, 552, 782, 783, 811, 891, 953, 965, 988, 1002, 1009, 1010, 1013, 1014, 1015, 1018, 1019, 1020, 1021], "concaten": [26, 39, 50, 60, 68, 75, 80, 111, 124, 156, 163, 175, 178, 218, 225, 234, 241, 245, 246, 252, 263, 265, 266, 281, 295, 302, 305, 317, 341, 396, 447, 450, 487, 492, 514, 520, 524, 525, 582, 763, 779, 840, 841, 843, 846, 854, 886, 965, 994, 1006], "randomforestclassifierrandomforestclassifi": [26, 115, 116, 168, 236, 268], "cal_clf": 26, "prefit": [26, 383, 393, 404, 421, 550, 551, 580, 985, 1017, 1018, 1019], "x27": [26, 70, 71, 108, 114, 128, 131, 142, 166, 167, 168, 226, 227, 235, 236, 238, 246, 254, 256, 257, 263, 268, 295, 304, 309, 310, 312, 318], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "perfect": [26, 37, 69, 80, 97, 99, 192, 196, 341, 342, 370, 374, 395, 399, 536, 537, 673, 677, 687, 688, 691, 700, 708, 710, 713, 719, 725, 738, 739, 767, 768, 775, 960, 964, 967, 979, 988, 997, 1019], "ro": 26, "bo": [26, 1017], "unit": [26, 69, 79, 166, 172, 196, 214, 281, 294, 298, 342, 365, 370, 371, 372, 376, 378, 379, 400, 403, 407, 447, 472, 473, 502, 507, 515, 516, 517, 524, 525, 572, 573, 574, 594, 641, 642, 659, 668, 682, 752, 828, 837, 838, 839, 845, 851, 853, 857, 859, 861, 867, 868, 869, 871, 872, 881, 882, 960, 962, 963, 969, 974, 980, 984, 997, 1009, 1013, 1019, 1020], "mid": [26, 328, 964, 966], "frac": [26, 79, 80, 256, 263, 265, 311, 392, 393, 395, 397, 400, 401, 402, 403, 405, 416, 446, 448, 465, 466, 467, 537, 539, 541, 543, 545, 548, 551, 553, 594, 598, 602, 605, 606, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 652, 653, 655, 656, 661, 662, 663, 679, 737, 751, 814, 815, 824, 832, 839, 882, 884, 887, 890, 892, 956, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 971, 972, 974, 976, 978, 979, 980, 997], "shrink": [26, 81, 94, 122, 167, 191, 194, 217, 245, 298, 400, 542, 543, 659, 661, 828, 838, 839, 862, 883, 884, 885, 886, 887, 967, 979, 997], "perfectli": [26, 37, 259, 270, 385, 395, 402, 422, 550, 589, 687, 688, 698, 700, 718, 719, 739, 768, 775, 854, 959, 961, 964, 979, 980, 1018, 1019], "incur": [26, 602, 881, 979, 1013], "correct": [26, 27, 56, 80, 156, 166, 185, 196, 214, 241, 250, 256, 263, 265, 328, 330, 341, 352, 367, 370, 372, 374, 384, 393, 394, 395, 399, 400, 403, 433, 439, 452, 457, 471, 484, 486, 618, 650, 659, 661, 686, 687, 691, 695, 696, 701, 704, 705, 706, 710, 711, 712, 716, 720, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 765, 766, 767, 769, 774, 776, 809, 810, 811, 818, 826, 852, 949, 960, 964, 965, 979, 980, 990, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "decreas": [26, 39, 46, 57, 65, 74, 125, 144, 156, 166, 167, 180, 204, 228, 229, 258, 263, 269, 292, 300, 303, 308, 346, 356, 358, 370, 393, 395, 402, 425, 429, 446, 504, 517, 518, 524, 540, 541, 542, 543, 544, 545, 547, 548, 549, 585, 618, 619, 620, 659, 660, 661, 689, 695, 709, 764, 771, 838, 839, 889, 890, 891, 892, 953, 955, 960, 961, 964, 967, 968, 971, 972, 978, 979, 988, 997, 1007, 1012, 1015, 1018], "cal_scor": 26, "327": [26, 195, 215, 712, 997], "549": [26, 222, 223], "p1d": 26, "p0": 26, "p1": [26, 130], "p2": [26, 130, 214], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 393, 421], "this_p": 26, "sure": [26, 55, 189, 202, 232, 352, 356, 357, 364, 368, 369, 370, 371, 372, 374, 375, 378, 381, 393, 396, 403, 476, 506, 632, 901, 902, 912, 950, 954, 961, 978, 984, 985, 1012, 1013, 1015, 1020], "renorm": 26, "step": [26, 33, 42, 54, 57, 66, 69, 70, 71, 72, 73, 80, 85, 97, 102, 114, 117, 118, 128, 142, 143, 144, 150, 153, 166, 168, 196, 204, 214, 226, 227, 230, 235, 238, 247, 254, 257, 263, 265, 276, 278, 284, 292, 295, 300, 303, 304, 309, 312, 321, 324, 328, 342, 343, 346, 352, 356, 359, 365, 368, 369, 370, 372, 374, 375, 378, 381, 383, 392, 393, 395, 397, 398, 400, 402, 403, 404, 426, 430, 432, 519, 520, 521, 522, 529, 546, 571, 572, 574, 576, 577, 580, 589, 610, 627, 631, 649, 650, 652, 659, 661, 662, 663, 677, 683, 777, 778, 779, 782, 783, 793, 813, 814, 815, 837, 838, 839, 841, 842, 844, 881, 882, 883, 884, 886, 887, 917, 918, 935, 939, 954, 960, 963, 968, 969, 974, 978, 980, 981, 984, 987, 995, 999, 1005, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1021], "multiclass": [26, 30, 163, 174, 215, 232, 249, 263, 266, 272, 274, 325, 337, 359, 365, 366, 372, 373, 375, 383, 395, 402, 421, 435, 445, 472, 487, 542, 544, 550, 551, 554, 577, 585, 593, 614, 615, 616, 641, 642, 649, 651, 656, 657, 658, 659, 685, 689, 691, 711, 712, 716, 717, 720, 725, 736, 765, 766, 769, 770, 771, 774, 779, 780, 782, 783, 784, 785, 793, 797, 801, 802, 803, 804, 805, 806, 807, 808, 848, 862, 881, 883, 886, 958, 960, 975, 979, 980, 986, 987, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1020, 1021], "argmax": [26, 102, 255, 269, 372, 402, 552, 809, 889, 979, 1018], "435": [26, 28, 322], "plot_calibration_multiclass": [26, 28], "gave": [27, 393, 779, 782, 783, 793, 848], "four": [27, 141, 156, 172, 178, 197, 243, 244, 317, 325, 366, 370, 383, 540, 547, 702, 889, 891, 907, 960, 962, 963, 964, 974, 983], "naiv": [27, 31, 126, 256, 258, 341, 343, 359, 365, 393, 402, 403, 421, 527, 816, 817, 818, 819, 820, 958, 959, 967, 986, 1001, 1005, 1006, 1007, 1008, 1013, 1015, 1018, 1020], "bay": [27, 31, 112, 126, 148, 185, 246, 258, 341, 359, 365, 393, 400, 402, 403, 405, 519, 532, 533, 639, 816, 817, 818, 819, 820, 862, 958, 959, 960, 974, 986, 999, 1001, 1005, 1006, 1007, 1008, 1013, 1015, 1018, 1020], "train_sampl": [27, 211, 212], "against": [27, 37, 85, 104, 112, 122, 140, 172, 187, 188, 205, 213, 265, 304, 308, 328, 365, 370, 384, 393, 395, 399, 403, 422, 492, 525, 531, 534, 659, 661, 737, 739, 770, 781, 786, 788, 806, 810, 930, 956, 960, 964, 965, 967, 979, 983, 990], "rfc": [27, 237, 308, 1002], "hostedtoolcach": [27, 84, 94, 152, 154, 156, 157, 175, 242], "x64": [27, 84, 94, 152, 154, 156, 157, 175, 242, 368], "lib": [27, 84, 94, 152, 154, 156, 157, 175, 242, 357, 368, 386, 984], "python3": [27, 84, 94, 152, 154, 156, 157, 175, 242, 368, 386], "site": [27, 84, 94, 152, 154, 156, 157, 175, 242, 368, 370, 373, 378, 386, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 988, 1013], "1158": 27, "userwarn": [27, 44, 61, 111, 188, 205, 333, 347, 375, 695, 974, 1011, 1013, 1018], "redundantli": [27, 383], "keyword": [27, 341, 364, 370, 372, 375, 377, 383, 395, 406, 409, 422, 428, 429, 433, 435, 440, 447, 450, 486, 518, 521, 523, 542, 543, 550, 551, 552, 553, 603, 611, 614, 615, 622, 626, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 671, 675, 680, 681, 683, 684, 685, 756, 760, 761, 762, 763, 772, 773, 785, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 841, 845, 913, 915, 931, 953, 961, 964, 967, 977, 1005, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021], "argument": [27, 71, 197, 226, 229, 357, 364, 365, 370, 371, 373, 375, 376, 378, 379, 381, 383, 395, 396, 399, 400, 402, 404, 406, 407, 409, 422, 424, 427, 428, 429, 430, 431, 432, 433, 435, 437, 440, 442, 444, 446, 476, 486, 491, 516, 518, 519, 521, 523, 534, 542, 543, 550, 551, 552, 553, 560, 564, 565, 571, 572, 574, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 614, 622, 626, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 649, 651, 659, 664, 667, 671, 675, 679, 681, 682, 683, 684, 685, 697, 702, 717, 724, 745, 761, 762, 785, 809, 810, 813, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 838, 841, 845, 895, 899, 908, 913, 915, 931, 932, 933, 934, 948, 953, 956, 960, 961, 962, 964, 967, 971, 972, 979, 980, 990, 994, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021], "fmt": [27, 60, 207], "preced": [27, 274, 357, 370, 470, 964, 1005], "contrast": [27, 103, 167, 198, 231, 256, 258, 285, 303, 342, 383, 393, 395, 396, 398, 402, 405, 432, 435, 445, 602, 626, 793, 837, 954, 957, 959, 960, 964, 967, 969, 972, 974, 977, 978, 980, 1015], "push": [27, 370, 374, 393, 987], "equat": [27, 336, 370, 395, 400, 402, 540, 541, 542, 543, 547, 548, 549, 573, 610, 665, 666, 670, 745, 861, 889, 890, 891, 892, 954, 961, 964, 969, 1013], "twice": [27, 268, 341, 343, 372, 405, 602, 714, 920, 1014], "approx": [27, 94, 230, 400, 402, 403, 964, 971, 978], "rare": [27, 167, 304, 352, 374, 381, 383, 385, 393, 395, 399, 572, 631, 641, 642, 652, 663, 881, 906, 932, 960, 974, 988, 1012, 1013, 1014, 1018, 1020], "explan": [27, 85, 356, 369, 370, 393, 403, 953, 963, 965, 980, 988, 1008], "bag": [27, 69, 107, 113, 123, 132, 163, 168, 342, 343, 366, 393, 499, 500, 501, 538, 539, 540, 541, 542, 543, 546, 547, 548, 723, 784, 807, 890, 962, 965, 986, 1001, 1005, 1007, 1008, 1009, 1010, 1011, 1018, 1019, 1021], "underli": [27, 55, 79, 127, 145, 197, 199, 261, 280, 281, 349, 357, 381, 383, 385, 391, 393, 397, 399, 400, 401, 402, 404, 405, 421, 434, 435, 436, 445, 447, 448, 454, 455, 461, 507, 550, 551, 552, 553, 576, 577, 580, 585, 641, 651, 663, 674, 678, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 826, 881, 889, 890, 891, 892, 929, 960, 961, 965, 970, 977, 979, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021], "restrict": [27, 65, 66, 160, 163, 213, 291, 296, 372, 376, 381, 393, 395, 402, 403, 448, 476, 485, 515, 564, 593, 636, 637, 638, 639, 641, 665, 666, 690, 696, 764, 770, 771, 807, 829, 831, 832, 833, 835, 837, 838, 839, 841, 867, 964, 980, 1000, 1001, 1005, 1007, 1015, 1017], "interv": [27, 107, 132, 155, 163, 196, 197, 198, 214, 256, 305, 365, 383, 393, 399, 402, 405, 422, 423, 499, 500, 501, 540, 541, 543, 545, 547, 548, 618, 619, 621, 660, 724, 730, 732, 783, 800, 807, 844, 846, 860, 883, 884, 885, 905, 956, 960, 964, 974, 980, 1012, 1016], "move": [27, 117, 257, 295, 328, 369, 370, 374, 376, 393, 395, 532, 533, 554, 555, 556, 558, 560, 561, 931, 998, 1005, 1006, 1010, 1013, 1015, 1018, 1019], "characterist": [27, 44, 61, 145, 153, 163, 225, 249, 253, 272, 298, 352, 365, 367, 375, 393, 399, 405, 486, 487, 606, 621, 641, 685, 689, 691, 709, 764, 770, 771, 798, 807, 810, 848, 886, 960], "difficult": [27, 166, 204, 370, 378, 393, 400, 402, 536, 537, 542, 544, 545, 959, 961, 963, 967, 969, 971, 980, 988, 1005, 1019], "bayesian": [27, 54, 163, 174, 184, 215, 240, 242, 246, 247, 248, 400, 421, 507, 511, 515, 627, 628, 639, 640, 777, 778, 842, 844, 856, 861, 953, 984, 986, 1000, 1001, 1011, 1018], "domingo": [27, 770, 964], "pazzani": 27, "proc": [27, 78, 393, 403, 433, 672, 676, 816, 953, 961, 966, 970], "13th": 27, "intl": [27, 399], "1996": [27, 395, 402, 406, 428, 499, 500, 501, 538, 539, 974], "zadrozni": [27, 393, 421, 659], "bianca": 27, "charl": [27, 746, 1005, 1008, 1011, 1015, 1017, 1020], "elkan": [27, 309, 393, 421, 427, 430, 442, 659, 1011, 1015, 1016, 1018, 1019], "vol": [27, 156, 262, 367, 395, 457, 542, 543, 611, 618, 628, 647, 668, 669, 777, 806, 818, 954, 966, 967], "2001": [27, 153, 168, 255, 392, 395, 402, 421, 434, 435, 436, 445, 494, 542, 543, 547, 548, 611, 617, 622, 628, 674, 679, 717, 770, 862, 874, 906, 954, 960, 964, 970, 972, 974, 976, 979], "668": [27, 28], "plot_compare_calibr": [27, 28], "741": 28, "auto_examples_calibr": 28, "calibr": [28, 30, 214, 359, 383, 495, 498, 547, 552, 641, 659, 692, 711, 723, 766, 769, 770, 807, 819, 878, 881, 953, 960, 964, 977, 979, 986, 1001, 1002, 1009, 1011], "04": [28, 30, 40, 42, 46, 52, 54, 82, 84, 96, 104, 132, 146, 153, 158, 166, 177, 195, 214, 232, 239, 241, 247, 256, 257, 269, 289, 290, 335, 342, 367, 402, 404, 454, 455, 770, 779, 793, 960, 964, 968, 978], "discrimin": [29, 35, 103, 140, 142, 163, 172, 211, 218, 232, 285, 359, 367, 393, 402, 458, 495, 532, 533, 549, 765, 830, 953, 961, 964, 967, 978, 980, 986, 997, 1001, 1008], "ellipsoid": [29, 35, 163, 240, 241, 248, 532, 533, 777, 778, 958, 963], "ledoit": [29, 35, 76, 77, 81, 82, 163, 456, 458, 462, 463, 495, 532, 958], "wolf": [29, 35, 76, 77, 81, 82, 163, 456, 458, 462, 463, 495, 532, 958, 1012], "oa": [29, 35, 76, 82, 163, 397, 452, 453, 456, 457, 459, 460, 495, 532, 779, 958], "hand": [29, 35, 85, 88, 96, 99, 121, 140, 153, 163, 166, 167, 189, 203, 221, 228, 229, 231, 253, 258, 265, 328, 356, 364, 365, 367, 370, 372, 376, 378, 382, 389, 400, 401, 402, 404, 485, 626, 680, 696, 770, 807, 862, 886, 953, 957, 960, 964, 966, 968, 972, 977, 979, 988, 990, 993, 996, 997], "built": [30, 85, 110, 117, 119, 168, 204, 259, 289, 308, 347, 356, 368, 370, 371, 372, 374, 376, 378, 379, 381, 382, 383, 386, 389, 394, 395, 396, 399, 402, 404, 429, 486, 536, 537, 538, 539, 544, 545, 571, 572, 576, 580, 622, 623, 624, 625, 626, 629, 630, 635, 641, 643, 644, 645, 646, 655, 656, 657, 658, 664, 782, 783, 790, 812, 815, 821, 822, 891, 892, 948, 960, 964, 965, 977, 978, 980, 984, 988, 999, 1005, 1008, 1009, 1011, 1017], "enabl": [30, 50, 71, 119, 167, 204, 219, 300, 309, 311, 312, 337, 368, 370, 375, 378, 381, 383, 386, 391, 394, 395, 396, 400, 402, 403, 432, 517, 518, 524, 542, 543, 544, 545, 546, 562, 563, 573, 574, 585, 593, 777, 778, 779, 782, 841, 842, 854, 855, 878, 881, 882, 883, 884, 885, 886, 887, 896, 931, 954, 956, 961, 963, 964, 967, 974, 975, 978, 979, 985, 988, 1005, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "troubl": [30, 403], "ovr": [30, 188, 211, 274, 308, 337, 641, 642, 770, 810, 881, 883, 886, 960, 964, 965, 979, 1005, 1010, 1011, 1013, 1014, 1015, 1019, 1020], "gpc": [30, 147, 158, 163, 487, 593, 594, 596, 597, 602, 603, 605, 606, 686, 723, 986, 1001, 1015], "accuracy_scor": [30, 109, 149, 260, 303, 319, 341, 352, 382, 540, 547, 691, 711, 712, 716, 720, 724, 765, 766, 769, 774, 776, 953, 964, 1006, 1007, 1008, 1017], "gaussian_process": [30, 31, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 359, 383, 405, 626, 965, 1008, 1011, 1012], "gaussianprocessclassifi": [30, 31, 149, 150, 151, 152, 156, 383, 405, 594, 602, 603, 605, 606, 965, 1011, 1013, 1015, 1019], "iri": [30, 41, 45, 73, 87, 92, 93, 98, 105, 106, 107, 119, 129, 132, 137, 141, 147, 158, 163, 174, 179, 189, 215, 238, 243, 250, 261, 262, 265, 266, 279, 287, 293, 310, 315, 322, 323, 324, 328, 331, 339, 345, 350, 351, 363, 364, 382, 395, 396, 399, 400, 402, 479, 487, 524, 532, 536, 540, 547, 593, 605, 614, 659, 779, 793, 876, 877, 878, 881, 886, 889, 893, 894, 895, 953, 954, 958, 963, 964, 967, 971, 974, 977, 978, 979, 980, 990, 997, 998, 1001, 1018], "load_iri": [30, 41, 45, 73, 89, 98, 101, 103, 105, 117, 119, 129, 137, 141, 150, 179, 189, 205, 238, 243, 250, 261, 262, 263, 265, 266, 279, 284, 287, 293, 308, 310, 313, 321, 324, 325, 328, 331, 347, 350, 382, 389, 395, 396, 399, 402, 404, 544, 550, 585, 593, 602, 603, 605, 606, 614, 641, 642, 770, 779, 782, 783, 785, 793, 809, 830, 876, 877, 878, 889, 891, 893, 894, 895, 954, 959, 964, 965, 966, 967, 971, 974, 980, 990, 996, 997, 998, 1011, 1013, 1016], "saga": [30, 187, 211, 212, 641, 642, 655, 657, 670, 793, 960, 1012, 1014], "multi_class": [30, 188, 211, 265, 308, 552, 593, 641, 642, 770, 815, 881, 960, 965, 979, 1005, 1009, 1013, 1018, 1020], "n_classifi": [30, 552, 553], "xx": [30, 34, 42, 57, 79, 117, 121, 126, 137, 150, 151, 152, 167, 183, 203, 206, 207, 208, 209, 210, 222, 225, 232, 245, 282, 292, 300, 301, 321, 327, 328, 332, 333, 334, 337, 338, 374], "yy": [30, 34, 42, 57, 79, 117, 126, 137, 150, 152, 167, 203, 207, 208, 209, 210, 222, 225, 232, 282, 292, 300, 301, 321, 327, 328, 332, 333, 334, 337, 338], "xfull": 30, "imshow_handl": 30, "cax": [30, 151, 267], "orient": [30, 94, 166, 217, 298, 383, 893, 961], "horizont": [30, 94, 217, 230, 298, 301, 375, 383, 447, 498, 680, 684], "795": [30, 35, 631], "plot_classification_prob": [30, 35], "salt": [31, 230, 300, 1019], "convei": [31, 222, 300, 997], "particularli": [31, 69, 70, 73, 104, 126, 197, 227, 256, 300, 309, 338, 352, 356, 370, 379, 383, 395, 396, 398, 401, 403, 479, 785, 818, 918, 932, 933, 960, 961, 964, 966, 985, 988, 998, 1005, 1010, 1012, 1013, 1019], "linearli": [31, 99, 111, 166, 175, 210, 218, 225, 265, 266, 300, 303, 332, 341, 356, 367, 381, 400, 402, 498, 625, 690, 964, 967, 970, 979, 997, 1012, 1021], "semi": [31, 232, 300, 310, 322, 359, 365, 383, 471, 487, 518, 571, 573, 659, 711, 807, 841, 845, 876, 877, 878, 886, 962, 967, 970, 986, 1001, 1005, 1017, 1020], "transpar": [31, 300, 949, 988], "ga\u00ebl": [31, 45, 51, 72, 88, 89, 101, 179, 193, 194, 300, 332, 333, 384, 988], "modifi": [31, 45, 51, 72, 74, 88, 89, 179, 193, 194, 206, 217, 218, 219, 243, 333, 338, 368, 370, 372, 374, 383, 402, 405, 427, 430, 437, 442, 451, 465, 466, 467, 468, 478, 493, 564, 593, 594, 596, 602, 659, 661, 672, 676, 711, 712, 750, 765, 766, 769, 899, 960, 977, 978, 985, 996, 1000, 1001, 1005, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1020], "listedcolormap": [31, 117, 279, 284, 287, 292, 300], "make_moon": [31, 44, 61, 225, 256, 292, 293, 300, 366, 953, 1012, 1016], "make_circl": [31, 44, 61, 99, 126, 222, 292, 293, 300, 318, 366, 1006, 1013, 1016], "neural_network": [31, 163, 167, 235, 291, 292, 293, 294, 295, 358, 359, 381, 965, 968, 1007], "mlpclassifi": [31, 163, 291, 292, 294, 296, 358, 485, 487, 497, 505, 554, 837, 839, 851, 965, 968, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "kneighborsclassifi": [31, 129, 136, 278, 279, 284, 285, 303, 310, 312, 341, 402, 585, 824, 828, 829, 830, 831, 832, 965, 967, 997, 1005, 1015, 1017, 1018, 1019, 1020, 1021], "decisiontreeclassifi": [31, 108, 109, 111, 117, 129, 260, 346, 347, 350, 383, 402, 536, 538, 540, 542, 544, 547, 614, 785, 805, 890, 891, 893, 894, 895, 954, 965, 980, 1006, 1007, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "adaboostclassifi": [31, 108, 109, 111, 117, 402, 537, 542, 544, 1007, 1008, 1011, 1012, 1014, 1015, 1018, 1020], "discriminant_analysi": [31, 33, 34, 103, 218, 285, 352, 359, 391, 519, 830, 958, 965, 1005, 1008, 1009, 1010, 1011, 1012], "quadraticdiscriminantanalysi": [31, 34, 532, 958, 965, 967, 1005, 1010, 1012, 1020], "decisionboundarydisplai": [31, 55, 111, 124, 129, 179, 188, 205, 259, 279, 284, 287, 303, 324, 325, 326, 329, 330, 347, 1019, 1020], "net": [31, 163, 174, 187, 207, 215, 269, 376, 394, 399, 454, 455, 461, 484, 507, 540, 541, 542, 543, 547, 548, 549, 629, 630, 635, 640, 641, 642, 643, 644, 645, 646, 651, 659, 661, 664, 667, 767, 837, 889, 890, 891, 892, 953, 964, 969, 978, 986, 988, 1001, 1005, 1010, 1014, 1015, 1017], "adaboost": [31, 107, 117, 132, 163, 502, 503, 536, 537, 542, 614, 686, 776, 807, 889, 890, 986, 1001, 1007], "qda": [31, 34, 367, 532, 533, 986, 1001, 1010], "025": [31, 198, 253, 673, 677], "n_clusters_per_class": [31, 90, 113, 142, 144, 253, 286, 292, 300, 375, 498], "uniform": [31, 37, 53, 120, 121, 124, 141, 149, 154, 157, 175, 176, 210, 222, 225, 228, 264, 279, 282, 283, 288, 292, 299, 301, 302, 305, 312, 327, 372, 375, 395, 422, 423, 534, 552, 553, 593, 594, 611, 622, 632, 633, 637, 651, 659, 660, 661, 682, 704, 705, 710, 727, 728, 730, 732, 733, 735, 767, 783, 791, 793, 816, 817, 820, 823, 824, 831, 832, 846, 858, 860, 870, 906, 920, 953, 954, 963, 964, 967, 1011, 1013, 1015, 1019], "linearly_separ": [31, 292], "ds_cnt": [31, 300, 301], "rdbu": [31, 94, 212, 292, 328, 333], "cm_bright": [31, 292, 300], "ff0000": [31, 284, 292], "0000ff": [31, 284, 292], "ep": [31, 44, 46, 49, 64, 179, 181, 220, 229, 381, 395, 406, 428, 433, 438, 454, 455, 461, 614, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 664, 665, 666, 667, 673, 677, 697, 723, 833, 873, 874, 875, 976, 1020, 1021], "lstrip": [31, 44, 61, 225, 292, 300], "plot_classifier_comparison": [31, 35, 300], "8x8": [32, 88, 187, 229, 285, 295, 367, 485, 996], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 57, 71, 72, 88, 135, 136, 143, 187, 203, 218, 229, 230, 254, 255, 258, 264, 271, 278, 280, 285, 293, 295, 316, 317, 376, 396, 429, 515, 516, 517, 518, 582, 583, 621, 622, 651, 671, 672, 673, 674, 990, 994, 995, 996, 997, 998, 1011, 1016], "set_axis_off": 32, "gray_r": [32, 88, 97, 151, 218, 295, 316, 317, 996], "entir": [32, 160, 196, 204, 295, 298, 309, 350, 352, 364, 371, 372, 383, 389, 395, 399, 401, 403, 455, 475, 517, 571, 572, 573, 574, 630, 634, 636, 638, 641, 642, 644, 646, 648, 649, 651, 659, 665, 666, 716, 776, 809, 810, 813, 838, 840, 841, 854, 866, 867, 869, 870, 871, 872, 933, 953, 954, 964, 974, 978, 980, 997, 1014, 1015], "97": [32, 104, 169, 232, 247, 295, 317, 328, 367, 376, 382, 399, 641, 965, 974, 1005], "98": [32, 34, 42, 44, 54, 61, 63, 81, 97, 225, 254, 292, 295, 300, 317, 367, 374, 399, 402, 642, 816, 959, 966, 994, 999], "86": [32, 69, 142, 187, 300, 316, 317, 770, 889, 964, 995], "899": [32, 144, 146, 254, 320], "confus": [32, 163, 249, 265, 272, 316, 317, 341, 383, 487, 614, 635, 680, 696, 698, 701, 711, 712, 720, 736, 766, 769, 807, 886, 999, 1005, 1006, 1010, 1014, 1015, 1017, 1018, 1019, 1020], "figure_": [32, 167, 235, 308, 310, 377, 422, 614, 615, 680, 681, 683, 684, 685, 785], "confusion_matrix": [32, 226, 250, 316, 317, 680, 696, 736, 804, 964, 999, 1006, 1011, 1012, 1015, 1016, 1018], "ground": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 97, 124, 156, 180, 190, 196, 197, 247, 259, 342, 383, 394, 395, 686, 687, 688, 691, 695, 696, 697, 698, 700, 701, 704, 705, 706, 710, 711, 712, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 765, 766, 767, 768, 769, 775, 776, 964, 977, 990, 998, 1013], "truth": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 97, 102, 124, 156, 180, 190, 196, 197, 247, 259, 342, 383, 394, 395, 686, 687, 688, 691, 695, 696, 697, 698, 700, 701, 704, 705, 706, 708, 710, 711, 712, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 765, 766, 767, 768, 769, 775, 776, 964, 990, 998, 1013, 1019], "gt": [32, 70, 71, 114, 128, 166, 246, 254, 268, 368, 370, 374], "rebuilt": [32, 821, 822], "689": [32, 35], "plot_digits_classif": [32, 35], "oracl": [33, 196, 214, 408, 452, 453, 456, 457, 458, 459, 958, 1005], "shrinkag": [33, 76, 78, 81, 82, 102, 123, 163, 287, 408, 452, 453, 456, 457, 458, 459, 460, 462, 463, 464, 522, 526, 532, 544, 545, 779, 960, 974, 986, 1001, 1005, 1009, 1010, 1012], "lineardiscriminantanalysi": [33, 34, 103, 218, 285, 352, 391, 519, 533, 830, 958, 965, 967, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1017, 1019, 1020, 1021], "200": [33, 34, 44, 50, 54, 59, 74, 97, 111, 119, 121, 127, 152, 182, 191, 197, 200, 201, 202, 208, 213, 218, 236, 241, 257, 263, 265, 266, 298, 301, 318, 320, 327, 328, 349, 352, 365, 372, 381, 400, 402, 407, 424, 437, 451, 454, 455, 516, 517, 518, 521, 522, 523, 526, 530, 567, 632, 634, 654, 662, 675, 793, 838, 839, 879, 883, 884, 885, 886, 887, 979], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 129, 130, 402, 552], "lsqr": [33, 305, 532, 655, 657, 670, 958, 1006, 1012, 1019], "clf2": [33, 129, 130, 372, 389, 402, 552], "store_precis": [33, 78, 452, 453, 456, 457, 458, 459], "assume_cent": [33, 78, 397, 408, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463], "clf3": [33, 129, 130, 372, 402, 552], "covariance_estim": [33, 532, 958, 1017], "features_samples_ratio": 33, "gold": [33, 190, 197, 199, 202, 206, 210, 213, 242, 247, 263, 282, 327, 376], "navi": [33, 69, 78, 98, 103, 104, 127, 175, 199, 207, 220, 242, 243, 244, 247, 263, 265, 271, 281, 288, 318, 349], "539": [33, 35], "plot_lda": [33, 35], "doubl": [34, 268, 370, 383, 400, 521, 523, 530, 682, 821, 822, 832, 948, 954, 979, 980, 1005, 1015, 1016], "deviat": [34, 60, 79, 112, 115, 116, 117, 145, 148, 153, 155, 157, 166, 175, 202, 253, 254, 255, 256, 257, 259, 282, 283, 298, 303, 362, 366, 367, 375, 379, 383, 399, 402, 433, 455, 484, 494, 495, 496, 497, 499, 500, 501, 505, 507, 508, 513, 535, 577, 594, 617, 627, 628, 654, 706, 734, 785, 827, 850, 851, 861, 870, 871, 872, 960, 964, 970, 974, 997, 1011, 1012, 1013, 1016, 1017, 1018], "own": [34, 214, 246, 276, 278, 318, 342, 357, 364, 373, 374, 375, 378, 379, 386, 394, 395, 407, 411, 424, 437, 516, 540, 547, 629, 777, 778, 823, 824, 825, 827, 829, 831, 832, 833, 855, 889, 891, 907, 912, 932, 960, 966, 967, 970, 974, 979, 988, 998, 999, 1012, 1013, 1015], "mpl": [34, 241, 242, 243, 247, 298], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "plot_lda_qda": [34, 35], "matplotlibdeprecationwarn": 34, "minor": [34, 259, 263, 365, 373, 384, 479, 964, 1005, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "dataset_fixed_cov": 34, "dim": [34, 205, 229, 279, 284, 285, 287, 324, 325, 510, 682], "dataset_cov": 34, "matric": [34, 40, 79, 81, 94, 201, 242, 243, 245, 246, 247, 276, 289, 309, 320, 341, 342, 362, 364, 372, 373, 381, 382, 383, 394, 395, 396, 397, 398, 400, 403, 404, 410, 433, 434, 436, 447, 456, 465, 466, 467, 517, 518, 521, 523, 524, 527, 530, 532, 533, 538, 539, 546, 549, 564, 565, 572, 626, 641, 647, 655, 657, 670, 736, 742, 750, 756, 760, 761, 762, 763, 772, 777, 778, 807, 825, 828, 833, 844, 848, 850, 853, 856, 858, 859, 861, 864, 866, 868, 870, 871, 872, 873, 874, 883, 884, 886, 887, 897, 918, 924, 928, 935, 937, 938, 954, 958, 961, 962, 963, 965, 967, 968, 976, 978, 979, 984, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "linalg": [34, 54, 77, 78, 81, 100, 102, 104, 182, 241, 242, 243, 246, 247, 370, 376, 400, 434, 435, 436, 445, 515, 518, 524, 527, 640, 655, 657, 670, 674, 678, 916], "plot_data": 34, "fig_index": 34, "splot": [34, 242, 247], "tp": [34, 395, 695, 701, 713, 764, 765, 766, 769, 893, 964], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 112, 166, 328, 365], "000099": 34, "pcolormesh": [34, 126, 137, 179, 279, 284, 324, 328, 332, 614], "white": [34, 57, 59, 94, 153, 166, 210, 217, 282, 295, 300, 321, 327, 400, 403, 405, 608, 980, 1005, 1008, 1011, 1015, 1019], "means_": [34, 241, 242, 243, 244, 246, 247, 532, 533, 777, 778], "yellow": [34, 91, 328, 965], "markers": [34, 49, 57, 60, 62, 63, 121, 151, 155, 228, 312], "markeredgecolor": [34, 49, 60, 62, 63], "plot_ellips": [34, 241], "cov": [34, 81, 85, 111, 246, 370, 383, 386, 388, 398, 408, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 502, 515, 517, 524, 531], "eigh": [34, 241, 242, 243, 246, 247, 400, 407, 516, 518, 1020], "arctan": [34, 242, 247, 366, 501], "180": [34, 241, 242, 243, 246, 247, 285, 289, 342, 376, 405, 485], "ell": [34, 241, 242, 243, 247, 392], "patch": [34, 50, 241, 242, 243, 246, 247, 251, 365, 374, 381, 400, 402, 538, 539, 566, 567, 570, 1005, 1013], "ellips": [34, 225, 241, 242, 243, 246, 247, 970], "set_clip_box": [34, 241, 242, 243, 246, 247], "set_alpha": [34, 108, 241, 242, 243, 246, 247], "add_artist": [34, 218, 241, 242, 243, 246, 247], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 100, 102, 126, 218, 342, 379, 391, 398, 407, 434, 436, 465, 466, 468, 515, 516, 517, 518, 522, 523, 524, 527, 529, 532, 533, 647, 655, 656, 657, 668, 669, 670, 840, 918, 958, 999, 1007, 1011, 1012, 1018, 1020], "store_covari": [34, 532, 533, 1010, 1012], "tight": [34, 40, 104, 111, 117, 137, 141, 181, 183, 188, 189, 190, 200, 201, 205, 208, 210, 213, 219, 222, 245, 276, 282, 283, 287, 288, 324, 327, 328, 331, 332, 333, 347, 565, 675, 1017], "409": [34, 35], "auto_examples_classif": 35, "handwritten": [36, 67, 163, 216, 221, 223, 229, 254, 294, 295, 316, 317, 363, 395, 402, 430, 485, 524, 527, 532, 549, 671, 672, 673, 674, 675, 687, 688, 700, 719, 773, 775, 830, 842, 851, 861, 874, 961, 967, 990, 1001], "hierarch": [36, 40, 54, 67, 163, 169, 312, 383, 403, 425, 427, 429, 487, 495, 497, 505, 513, 530, 713, 834, 861, 981, 985, 1000, 1001, 1005, 1008, 1009], "coin": [36, 67, 163, 395, 403, 425, 445, 976, 998], "shift": [36, 44, 67, 163, 175, 220, 246, 281, 295, 298, 397, 401, 424, 431, 441, 444, 452, 495, 498, 672, 676, 827, 850, 974, 1000, 1001, 1005, 1009, 1013], "chanc": [36, 49, 67, 163, 196, 204, 211, 214, 256, 262, 265, 266, 304, 342, 352, 369, 395, 399, 685, 687, 688, 691, 699, 737, 739, 768, 775, 806, 964, 972, 980, 1021], "agglom": [36, 44, 47, 67, 163, 395, 425, 429, 485, 674, 760, 834, 1008], "bisect": [36, 67, 163, 427, 430, 495, 1019], "quantiz": [36, 67, 163, 364, 365, 395, 427, 430, 432, 489, 761, 846, 938, 974], "birch": [36, 44, 67, 163, 312, 358, 383, 432, 495, 1000, 1001, 1009, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021], "toi": [36, 49, 53, 56, 67, 85, 98, 112, 124, 129, 130, 163, 178, 186, 210, 224, 239, 241, 293, 325, 335, 363, 376, 381, 402, 403, 424, 425, 426, 428, 431, 432, 433, 435, 441, 452, 495, 497, 505, 546, 622, 660, 708, 738, 778, 827, 834, 842, 861, 885, 961, 963, 964, 970, 974, 1001], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 66, 67, 163, 169, 424, 425, 429, 446, 495, 497, 505, 861, 984, 998, 1008, 1013, 1016], "dbscan": [36, 44, 64, 67, 163, 381, 383, 433, 435, 438, 495, 687, 688, 700, 719, 773, 775, 833, 861, 967, 1000, 1001, 1005, 1007, 1009, 1010, 1012, 1013, 1014], "optic": [36, 44, 67, 163, 312, 363, 406, 428, 438, 439, 440, 485, 1000, 1001, 1014, 1018, 1019, 1020, 1021], "affin": [36, 44, 67, 163, 298, 362, 372, 383, 394, 400, 424, 425, 429, 435, 437, 445, 495, 518, 674, 678, 687, 688, 700, 719, 773, 775, 877, 958, 961, 964, 1000, 1001, 1005, 1006, 1009, 1015, 1016, 1018, 1020], "propag": [36, 67, 163, 315, 322, 365, 394, 424, 437, 485, 495, 497, 680, 687, 688, 696, 697, 700, 701, 719, 773, 775, 841, 855, 876, 877, 878, 930, 931, 968, 986, 1000, 1001, 1005, 1017, 1020], "agglomer": [36, 67, 163, 362, 395, 403, 429, 485, 583, 589, 628, 779, 784, 841, 1001], "unstructur": [36, 67, 163, 294, 395, 425, 429, 446, 486, 513, 834, 976, 988, 1009], "dendrogram": [36, 67, 163, 169, 395, 425, 429, 487, 1017], "pictur": [36, 67, 163, 229, 247, 365, 384, 395, 400, 403, 445, 476, 477, 504, 985], "greek": [36, 67, 163, 395, 445], "silhouett": [36, 38, 49, 56, 57, 67, 163, 342, 370, 430, 495, 772, 773, 1005, 1009], "embed": [36, 44, 46, 67, 114, 148, 163, 216, 219, 221, 223, 224, 239, 276, 285, 376, 383, 394, 395, 425, 435, 445, 472, 485, 527, 532, 549, 565, 622, 671, 672, 673, 674, 675, 676, 677, 678, 679, 830, 842, 851, 873, 874, 875, 956, 967, 970, 976, 981, 1000, 1001, 1005, 1006, 1016, 1017, 1019], "explor": [37, 112, 113, 221, 222, 257, 258, 264, 265, 305, 310, 328, 342, 352, 364, 367, 369, 376, 389, 395, 402, 455, 779, 782, 790, 862, 953, 960, 961, 963, 969, 971, 972, 974, 988, 993, 999, 1011], "uniformli": [37, 121, 140, 225, 241, 308, 372, 499, 500, 501, 534, 625, 783, 791, 793, 860, 953, 954, 964, 967, 974, 1009, 1014], "divid": [37, 43, 48, 90, 94, 142, 153, 196, 241, 352, 366, 367, 392, 395, 399, 400, 452, 453, 454, 455, 456, 457, 458, 459, 495, 502, 517, 524, 633, 634, 637, 638, 639, 647, 648, 659, 660, 661, 702, 708, 716, 720, 738, 774, 776, 838, 839, 883, 886, 918, 921, 922, 953, 961, 963, 964, 967, 974, 978, 999, 1005, 1012, 1013, 1016], "randomli": [37, 48, 50, 60, 70, 87, 92, 112, 124, 160, 163, 167, 200, 213, 229, 232, 246, 251, 262, 274, 316, 352, 357, 379, 381, 382, 395, 399, 402, 405, 432, 441, 495, 498, 502, 506, 514, 520, 528, 529, 534, 542, 543, 546, 547, 548, 593, 594, 654, 662, 673, 677, 699, 777, 778, 837, 875, 889, 890, 891, 892, 963, 965, 967, 970, 972, 976, 980, 997, 999, 1016, 1020], "quiroz": [37, 56, 175, 257, 259, 303, 341, 342, 343], "fundament": [37, 49, 80, 342, 368, 382, 398, 479, 521, 523, 530, 691, 960, 964], "homogen": [37, 38, 39, 44, 46, 49, 57, 342, 365, 381, 383, 397, 402, 405, 597, 687, 700, 713, 718, 719, 739, 775, 961, 962, 964, 1014], "frequent": [37, 161, 259, 265, 266, 342, 359, 367, 370, 403, 534, 573, 613, 831, 854, 855, 858, 870, 954, 956, 964, 978, 982, 985], "ari": [37, 57, 342, 395, 688, 1010, 1016], "mutual": [37, 38, 49, 57, 139, 146, 163, 402, 404, 575, 578, 579, 582, 583, 589, 590, 591, 592, 687, 688, 698, 737, 739, 768, 775, 953, 960, 964, 965, 1005, 1011, 1021], "mi": [37, 140, 395, 590, 591, 687, 737, 739, 954, 964, 978], "theoret": [37, 56, 148, 394, 395, 402, 536, 537, 622, 687, 708, 738, 881, 953, 961, 963, 964, 966, 976, 978, 979, 987, 988], "nmi": [37, 395, 700, 718, 719, 739], "ami": [37, 49, 57, 395, 687], "score_func": [37, 70, 71, 575, 578, 579, 581, 582, 583, 724, 1005, 1007], "rand_scor": [37, 395, 698, 964, 1017], "adjusted_rand_scor": [37, 38, 49, 57, 342, 395, 687, 698, 724, 739, 768, 964, 1018], "mutual_info_scor": [37, 395, 687, 964, 1013, 1016, 1017], "normalized_mutual_info_scor": [37, 395, 718, 737, 775, 964, 1013, 1019], "adjusted_mutual_info_scor": [37, 38, 49, 57, 395, 688, 698, 737, 739, 768, 964, 1005, 1013, 1017, 1021], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 60, 172, 342], "clase": [37, 303], "seaborn": [37, 108, 110, 165, 166, 175, 246, 256, 279, 370, 386, 388, 984], "sn": [37, 108, 110, 165, 166, 175, 246, 256, 279], "color_palett": [37, 108, 110, 246], "colorblind": [37, 108, 110], "vx": 37, "errorbar": [37, 60, 78, 80, 144, 154, 155, 278, 319, 331, 785], "refer": [37, 38, 59, 62, 70, 122, 128, 145, 157, 214, 263, 286, 298, 308, 309, 310, 311, 312, 313, 342, 357, 359, 368, 370, 371, 372, 374, 375, 376, 377, 378, 381, 382, 383, 384, 386, 389, 396, 406, 407, 408, 421, 422, 423, 424, 426, 428, 430, 431, 433, 434, 435, 436, 437, 440, 445, 446, 447, 450, 452, 455, 456, 457, 458, 481, 486, 494, 496, 498, 499, 500, 501, 502, 503, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 527, 530, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 573, 576, 577, 578, 585, 590, 591, 593, 594, 597, 602, 605, 606, 610, 611, 614, 615, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 630, 632, 634, 636, 638, 639, 641, 644, 646, 648, 649, 650, 651, 654, 656, 658, 659, 661, 662, 665, 666, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 687, 688, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 716, 717, 718, 719, 720, 722, 723, 725, 738, 740, 741, 751, 765, 767, 768, 770, 771, 772, 773, 775, 777, 778, 779, 781, 782, 783, 785, 793, 801, 802, 803, 804, 805, 806, 808, 811, 812, 816, 817, 818, 820, 826, 827, 828, 830, 837, 838, 839, 847, 848, 857, 858, 862, 869, 874, 875, 876, 877, 878, 881, 883, 884, 886, 887, 889, 890, 891, 892, 906, 918, 930, 975, 985, 990, 994, 998, 999, 1005, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "satur": [37, 166, 298], "uniform_labelings_scor": 37, "nwith": [37, 56, 60, 144, 342], "constantli": [37, 196, 988], "unbound": [37, 963, 1019], "cardin": [37, 115, 116, 122, 168, 304, 305, 395, 402, 446, 536, 537, 540, 541, 542, 543, 547, 548, 549, 662, 854, 855, 862, 889, 890, 891, 892, 964, 965, 972, 974, 1019, 1020], "why": [37, 52, 94, 166, 168, 172, 185, 253, 256, 341, 342, 370, 378, 383, 395, 397, 400, 406, 428, 430, 434, 964, 966, 979, 994, 997, 1008], "chart": [37, 261, 965, 992, 1008], "henc": [37, 59, 71, 166, 200, 229, 265, 328, 341, 342, 356, 365, 372, 374, 376, 383, 395, 399, 402, 403, 470, 491, 522, 524, 525, 526, 546, 573, 626, 629, 635, 643, 645, 655, 670, 687, 688, 692, 698, 713, 739, 768, 775, 798, 799, 816, 817, 818, 819, 820, 856, 961, 963, 964, 965, 970, 971, 974, 985, 1012, 1013, 1016, 1017, 1019], "safe": [37, 166, 185, 342, 370, 372, 395, 396, 418, 491, 492, 571, 574, 756, 760, 875, 930, 936, 967, 1011, 1012, 1013, 1018, 1019], "stabil": [37, 113, 166, 200, 218, 261, 298, 342, 383, 392, 633, 637, 653, 819, 838, 839, 857, 869, 917, 954, 960, 963, 974, 985, 990, 1005, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "mislead": [37, 115, 116, 122, 166, 371, 385, 402, 536, 537, 540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 1001, 1018], "meaning": [37, 222, 285, 343, 392, 399, 403, 404, 405, 531, 711, 712, 720, 765, 766, 769, 830, 968, 978, 979, 1005, 1021], "plot_adjusted_for_chance_measur": [37, 67], "brendan": [38, 424, 437], "frei": [38, 424, 437, 1015], "delbert": [38, 424, 437], "dueck": [38, 424, 437], "messag": [38, 44, 61, 69, 94, 341, 342, 365, 368, 369, 370, 374, 375, 378, 379, 395, 424, 437, 522, 526, 531, 557, 610, 695, 779, 782, 783, 785, 793, 805, 808, 810, 830, 838, 839, 900, 901, 902, 905, 908, 927, 948, 964, 974, 1005, 1009, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "feb": [38, 424, 437], "affinitypropag": [38, 44, 312, 395, 1005, 1008, 1009, 1013, 1016, 1018, 1019, 1020, 1021], "labels_tru": [38, 49, 63, 395, 687, 688, 697, 698, 700, 713, 718, 719, 737, 739, 768, 775], "af": 38, "prefer": [38, 44, 247, 265, 298, 352, 356, 357, 358, 368, 370, 371, 372, 383, 395, 399, 400, 402, 403, 424, 437, 454, 455, 461, 470, 491, 492, 610, 615, 616, 637, 641, 642, 684, 708, 710, 739, 740, 830, 856, 881, 882, 923, 930, 953, 956, 958, 960, 964, 969, 979, 980, 984, 997, 1006, 1012, 1014, 1018, 1019], "cluster_centers_indic": [38, 437], "cluster_centers_indices_": [38, 424], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 57, 60, 61, 62, 64, 66, 312, 342, 370, 383, 395, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 438, 998, 1010], "n_clusters_": [38, 49, 62, 425, 429], "homogeneity_scor": [38, 49, 57, 342, 395, 700, 718, 775, 964], "completeness_scor": [38, 49, 57, 309, 342, 395, 718, 719, 775, 964], "silhouette_scor": [38, 49, 57, 59, 342, 370, 395, 1005, 1009, 1011, 1013, 1015, 1019], "sqeuclidean": [38, 433, 440, 760, 761, 762], "872": [38, 972], "912": 38, "871": [38, 79, 80, 128, 132, 397, 457], "753": [38, 112, 132], "cycler": 38, "viridi": [38, 276, 680], "class_memb": 38, "cluster_cent": [38, 60, 62, 63, 444], "497": [38, 67], "plot_affinity_propag": [38, 67, 424, 437], "impos": [39, 56, 125, 190, 304, 381, 395, 400, 402, 403, 510, 640, 960], "simpli": [39, 85, 126, 148, 156, 221, 232, 265, 289, 310, 311, 356, 365, 370, 372, 375, 381, 383, 397, 398, 399, 400, 402, 403, 468, 678, 744, 747, 848, 920, 956, 964, 965, 966, 967, 978, 991, 999, 1012, 1013, 1014], "There": [39, 46, 148, 214, 221, 234, 247, 251, 253, 256, 341, 363, 365, 367, 370, 371, 372, 375, 381, 383, 384, 386, 392, 394, 395, 400, 402, 403, 404, 435, 445, 517, 536, 537, 542, 543, 571, 572, 574, 589, 628, 954, 960, 961, 962, 963, 964, 967, 971, 974, 978, 979, 980, 983, 987, 998, 1005, 1013], "singl": [39, 48, 52, 53, 57, 60, 61, 71, 107, 110, 117, 118, 119, 127, 132, 145, 148, 154, 160, 163, 167, 169, 172, 196, 198, 235, 237, 246, 252, 265, 294, 312, 328, 341, 342, 343, 347, 349, 352, 356, 357, 364, 365, 370, 375, 377, 378, 379, 381, 382, 383, 393, 394, 396, 398, 399, 400, 402, 403, 404, 418, 421, 424, 425, 429, 430, 432, 437, 447, 449, 450, 476, 477, 479, 489, 492, 517, 536, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 565, 575, 582, 583, 585, 589, 610, 615, 617, 626, 649, 650, 656, 659, 660, 661, 673, 675, 677, 693, 704, 705, 706, 707, 718, 719, 720, 723, 756, 767, 777, 778, 779, 782, 783, 793, 800, 803, 804, 806, 807, 810, 818, 821, 822, 826, 838, 839, 840, 850, 851, 854, 855, 856, 861, 862, 876, 877, 889, 890, 891, 892, 897, 928, 932, 951, 953, 959, 960, 961, 964, 965, 967, 969, 971, 972, 974, 978, 979, 980, 984, 988, 990, 997, 999, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021], "unstabl": [39, 65, 166, 395, 397, 398, 672, 676, 917, 918, 980, 1009, 1010, 1012, 1017, 1019], "quickli": [39, 235, 293, 308, 367, 370, 371, 399, 402, 675, 960, 967, 968, 988, 999, 1016], "fight": [39, 988], "percol": 39, "distanc": [39, 40, 56, 59, 60, 64, 66, 76, 80, 82, 99, 160, 163, 169, 182, 197, 217, 219, 222, 229, 276, 278, 279, 284, 286, 288, 289, 298, 303, 308, 312, 313, 341, 342, 356, 367, 379, 381, 383, 392, 395, 397, 400, 401, 405, 406, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 438, 439, 440, 441, 442, 444, 445, 446, 451, 452, 453, 454, 455, 456, 457, 458, 459, 521, 523, 530, 590, 591, 598, 602, 603, 605, 606, 611, 641, 642, 649, 651, 657, 658, 659, 660, 661, 671, 672, 673, 675, 676, 677, 678, 679, 682, 686, 707, 716, 740, 742, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 760, 761, 762, 763, 772, 773, 776, 810, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 860, 875, 879, 881, 883, 885, 886, 887, 889, 890, 891, 892, 954, 958, 961, 962, 964, 970, 974, 976, 978, 979, 985, 997, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "merg": [39, 41, 46, 51, 311, 368, 370, 373, 378, 381, 384, 395, 424, 425, 426, 429, 446, 799, 998, 1005, 1012], "exagger": [39, 166, 675, 961], "behaviour": [39, 99, 197, 198, 214, 330, 370, 383, 395, 402, 542, 543, 547, 548, 585, 879, 889, 890, 937, 953, 954, 964, 974, 1013, 1016, 1017, 1020], "shortest": [39, 375, 379, 671, 923, 961, 1018], "mechan": [39, 337, 341, 357, 372, 395, 403, 447, 840, 962, 980, 988], "resembl": 39, "brittl": [39, 395], "pronounc": [39, 40, 52, 153], "kneighbors_graph": [39, 44, 61, 66, 276, 383, 395, 425, 429, 823, 824, 825, 827, 829, 831, 832, 833, 835, 967, 1005, 1009, 1014], "geometri": [39, 395, 961, 967], "instabl": [39, 166, 286, 435, 518, 522, 526, 678, 1012, 1015, 1018], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 55, 61, 66, 383, 395, 424, 426, 429, 998, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1020], "1500": [39, 50, 56, 61, 66, 91, 217, 221, 241], "knn_graph": 39, "include_self": [39, 44, 66, 834, 835, 1009], "328": [39, 67, 712], "plot_agglomerative_clust": [39, 67], "waveform": 40, "euclidean": [40, 56, 57, 182, 229, 276, 284, 308, 313, 342, 392, 394, 395, 400, 401, 402, 403, 405, 424, 425, 428, 429, 433, 435, 440, 443, 446, 514, 520, 572, 598, 602, 605, 606, 659, 661, 673, 675, 678, 679, 682, 744, 745, 751, 752, 753, 754, 760, 761, 762, 763, 772, 773, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 875, 954, 958, 962, 965, 967, 976, 985, 1009, 1012, 1013, 1014, 1015, 1021], "cityblock": [40, 44, 395, 433, 440, 744, 760, 761, 762, 967], "invari": [40, 367, 383, 395, 405, 597, 672, 729, 797, 798, 960, 961, 964, 979, 985, 1013, 1016, 1017, 1018], "ie": [40, 65, 95, 424, 687, 750, 960, 974], "inter": [40, 115, 352, 402, 699, 924], "character": [40, 214, 346, 395, 399, 961, 980], "ill": [40, 81, 201, 454, 455, 461, 633, 634, 637, 638, 639, 665, 666, 960, 963, 998, 1015], "recov": [40, 64, 81, 95, 96, 102, 118, 148, 165, 195, 196, 217, 343, 397, 401, 404, 407, 443, 516, 542, 960, 961, 963, 985, 998, 1011], "put": [40, 57, 137, 148, 150, 230, 236, 241, 292, 300, 312, 321, 332, 333, 338, 358, 372, 374, 375, 378, 405, 427, 430, 442, 498, 597, 630, 644, 777, 858, 862, 870, 883, 884, 885, 886, 887, 908, 954, 961, 963, 964, 965, 971, 974, 987, 991, 993, 999, 1017], "cc": [40, 368], "patheffect": 40, "pairwise_dist": [40, 383, 395, 406, 425, 428, 429, 433, 440, 671, 679, 744, 753, 761, 762, 772, 773, 825, 827, 829, 833, 962, 1005, 1009, 1011, 1013, 1014, 1016, 1017], "sqr": 40, "sign": [40, 78, 85, 95, 98, 111, 180, 246, 292, 336, 370, 395, 400, 403, 527, 565, 572, 589, 618, 619, 641, 642, 649, 651, 657, 658, 659, 660, 717, 724, 881, 885, 916, 918, 929, 960, 964, 969, 974, 978, 979, 998, 1005, 1009, 1014, 1018, 1020], "phi": [40, 400, 725, 847, 956, 964, 974, 979], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 61, 62, 225], "f781bf": [40, 44, 61, 62], "set_label": [40, 151, 229], "avg_dist": [40, 763], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 65], "cividi": 40, "vmin": [40, 81, 94, 97, 105, 151, 154, 175, 187, 212, 230, 245, 251, 294, 328], "45": [40, 63, 72, 84, 141, 153, 168, 185, 196, 214, 263, 267, 268, 317, 328, 352, 399, 402, 403, 547, 548, 610, 617, 770, 777, 885, 954, 964, 972, 983, 995, 1005, 1008], "interclass": 40, "472": [40, 67, 343], "plot_agglomerative_clustering_metr": [40, 67], "hierarchi": [41, 169, 433, 439, 446, 969, 998], "plot_dendrogram": 41, "kwarg": [41, 97, 372, 377, 409, 422, 447, 518, 521, 523, 600, 614, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 681, 682, 683, 685, 724, 821, 822, 840, 841, 845, 896, 915, 1012, 1016, 1018], "children_": [41, 425, 429, 446], "current_count": 41, "child_idx": 41, "leaf": [41, 114, 124, 126, 346, 350, 395, 402, 406, 425, 426, 427, 428, 429, 433, 440, 446, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 889, 890, 891, 892, 893, 894, 967, 980, 1008, 1010, 1012, 1016, 1019], "linkage_matrix": 41, "column_stack": [41, 292, 300], "distances_": [41, 425, 429, 1017], "distance_threshold": [41, 425, 429, 1014, 1017], "truncate_mod": 41, "parenthesi": [41, 370], "147": [41, 67, 184, 215, 965], "plot_agglomerative_dendrogram": [41, 67], "scalabl": [42, 44, 61, 163, 171, 173, 249, 272, 313, 342, 370, 395, 402, 403, 431, 474, 485, 572, 623, 785, 796, 805, 807, 819, 842, 851, 853, 881, 883, 886, 887, 956, 959, 961, 964, 977, 979, 988, 1005, 1008, 1009, 1015, 1016, 1019, 1020], "hundr": [42, 120, 218, 302, 365, 399, 402, 544, 545, 961, 1016], "thousand": [42, 229, 231, 302, 342, 365, 395, 402, 838, 839, 886, 961, 999, 1014, 1016], "million": [42, 55, 153, 172, 403, 405, 675, 961, 979, 988, 1019, 1020], "chose": [42, 166, 994], "usag": [42, 53, 70, 73, 84, 98, 119, 142, 166, 167, 226, 230, 250, 279, 285, 287, 294, 324, 343, 356, 369, 370, 372, 373, 377, 378, 380, 383, 384, 395, 399, 400, 405, 406, 428, 433, 472, 544, 545, 592, 631, 641, 642, 643, 649, 651, 652, 659, 660, 661, 662, 663, 760, 763, 772, 773, 881, 889, 890, 891, 892, 918, 953, 956, 963, 964, 965, 967, 979, 986, 990, 994, 1001, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "enjoi": 42, "edit": [42, 367, 369, 370, 373, 374, 378, 381, 386, 513, 517, 811, 958, 960, 965, 971, 999], "158": [42, 296, 402, 652], "06": [42, 52, 67, 97, 138, 146, 157, 158, 162, 166, 187, 195, 196, 256, 257, 275, 290, 295, 296, 300, 335, 339, 342, 344, 376, 465, 466, 467, 627, 628, 672, 676, 777, 778, 779, 793, 890, 960, 974, 976], "manojkumarsivaraj334": 42, "joblib": [42, 54, 71, 276, 309, 365, 368, 370, 373, 379, 381, 383, 386, 388, 389, 394, 396, 406, 421, 425, 428, 429, 431, 433, 435, 440, 441, 444, 447, 450, 455, 491, 514, 518, 519, 520, 522, 525, 526, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 577, 585, 593, 615, 617, 622, 630, 634, 636, 638, 640, 641, 642, 644, 646, 648, 649, 651, 659, 662, 671, 672, 673, 674, 675, 676, 677, 756, 760, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 823, 824, 827, 829, 831, 832, 834, 835, 840, 841, 842, 843, 876, 877, 930, 931, 932, 934, 949, 964, 985, 1005, 1006, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1020], "cpu_count": [42, 276, 932], "n_center": [42, 495], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 56, 57, 163, 277, 290, 301, 312, 342, 366, 395, 426, 427, 430, 431, 432, 435, 442, 443, 445, 487, 532, 614, 828, 986, 1001, 1005, 1009, 1012, 1017, 1021], "subcluster_centers_": [42, 426], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 63], "256": [42, 48, 53, 120, 149, 158, 252, 272, 304, 357, 365, 395, 402, 432, 451, 520, 529, 546, 837, 869, 879, 999, 1019], "max_no_improv": [42, 60, 63, 432, 520, 521, 522, 529, 1019, 1020], "t_mini_batch": [42, 63], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 57, 59, 60, 62, 63, 94, 312, 342, 424, 427, 430, 431, 432, 998], "345": [42, 67, 367], "plot_birch_vs_minibatchkmean": [42, 67], "bisectingkmean": [43, 395, 1019, 1020, 1021], "__doc__": [43, 74, 153, 234, 244, 383], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 61], "variant": [43, 94, 159, 162, 163, 256, 311, 312, 342, 343, 376, 395, 398, 400, 403, 405, 432, 443, 473, 476, 477, 495, 498, 526, 542, 543, 548, 598, 602, 605, 606, 610, 613, 621, 622, 624, 628, 655, 687, 780, 784, 786, 787, 788, 797, 803, 824, 842, 878, 954, 960, 961, 962, 963, 964, 966, 967, 978, 985, 999, 1005, 1013], "algorithm_nam": 43, "algo": [43, 104], "hide": [43, 378, 816, 817, 818, 819, 820, 1008, 1013], "flat": [43, 94, 100, 167, 217, 218, 219, 254, 395, 403, 424, 431, 444, 492, 971, 998, 1005, 1006], "label_out": 43, "598": [43, 57, 67, 102, 149, 524], "plot_bisect_kmean": [43, 67], "null": [44, 70, 166, 167, 168, 256, 262, 399, 631, 652, 663, 687, 713, 739, 775, 806, 960, 961, 964, 979, 1015], "mismatch": [44, 963, 1014], "warn": [44, 61, 71, 196, 211, 259, 276, 293, 294, 302, 356, 359, 370, 373, 374, 375, 383, 389, 403, 407, 430, 432, 442, 479, 516, 533, 536, 537, 540, 541, 542, 543, 547, 548, 549, 554, 555, 556, 557, 558, 559, 561, 585, 613, 619, 653, 673, 676, 677, 695, 696, 711, 712, 720, 765, 766, 769, 816, 817, 818, 820, 845, 846, 884, 885, 886, 887, 889, 890, 891, 892, 901, 902, 908, 918, 930, 932, 934, 950, 951, 953, 964, 974, 997, 1005, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "noisy_circl": [44, 61], "noisy_moon": [44, 61], "no_structur": [44, 61], "anisotropicli": [44, 61], "170": [44, 56, 57, 61, 376], "x_aniso": [44, 56, 61], "aniso": [44, 61], "plot_num": [44, 61, 225], "default_bas": [44, 61], "quantil": [44, 53, 62, 90, 109, 111, 163, 174, 215, 298, 301, 302, 381, 402, 422, 423, 441, 502, 535, 543, 545, 640, 653, 705, 727, 730, 732, 804, 846, 858, 859, 860, 870, 871, 964, 974, 986, 1001, 1005, 1009, 1012, 1014, 1018, 1019, 1021], "damp": [44, 395, 424, 437], "min_sampl": [44, 49, 64, 381, 383, 395, 406, 428, 433, 439, 440, 654, 960, 1014, 1018], "xi": [44, 64, 367, 395, 398, 403, 433, 439, 492, 978, 1016], "min_cluster_s": [44, 64, 433, 439, 1014], "220": [44, 1005], "i_dataset": [44, 61, 225], "algo_param": [44, 61], "param": [44, 60, 61, 70, 120, 122, 123, 217, 231, 254, 256, 264, 268, 280, 293, 370, 372, 383, 402, 405, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 791, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 953, 1011, 1015, 1016, 1018, 1019], "estimate_bandwidth": [44, 62, 395, 431, 444], "symmetr": [44, 121, 169, 198, 383, 393, 395, 435, 445, 446, 457, 502, 510, 512, 673, 677, 678, 687, 688, 698, 699, 700, 706, 710, 718, 719, 737, 739, 745, 767, 775, 777, 778, 950, 953, 960, 964, 967], "meanshift": [44, 312, 395, 424, 1008, 1009, 1010, 1013, 1015, 1016, 1019, 1020, 1021], "bin_seed": [44, 62, 431, 444, 1016], "two_mean": 44, "spectralclust": [44, 312, 395, 424, 967, 1005, 1006, 1015, 1017, 1018, 1019, 1020, 1021], "nearest_neighbor": [44, 435, 674], "average_linkag": 44, "gmm": [44, 163, 240, 242, 245, 246, 247, 248, 487, 495, 778, 798, 963, 1005, 1006, 1009, 1010, 1011], "gaussianmixtur": [44, 56, 242, 243, 244, 245, 246, 247, 401, 777, 1011, 1013, 1014, 1018, 1019], "covariance_typ": [44, 242, 243, 245, 246, 247, 777, 778], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 61, 294, 378, 379], "catch_warn": [44, 61, 293, 294], "filterwarn": [44, 61, 211, 293, 294, 370, 974], "fulli": [44, 115, 121, 356, 364, 365, 383, 401, 402, 404, 427, 430, 540, 541, 547, 548, 889, 890, 891, 892, 893, 895, 953, 954, 960, 969, 977, 984, 1018, 1019], "t1": [44, 46, 61, 211, 219, 222, 225], "ff7f00": [44, 61, 225], "4daf4a": [44, 61], "a65628": [44, 61], "984ea3": [44, 61], "999999": [44, 61], "e41a1c": [44, 61], "dede00": [44, 61, 62], "000000": [44, 166, 185, 214, 256, 302, 719], "transax": [44, 61, 221, 225, 243, 284, 300], "742": [44, 67], "plot_cluster_comparison": [44, 67], "bad": [45, 59, 60, 149, 166, 341, 352, 370, 395, 405, 675, 728, 953, 960, 961, 966, 972, 998, 1005], "eight": [45, 999], "deliv": [45, 356, 988], "though": [45, 145, 172, 175, 262, 281, 300, 302, 342, 343, 352, 356, 364, 367, 370, 372, 382, 383, 395, 400, 401, 402, 403, 404, 682, 786, 788, 881, 953, 954, 956, 961, 964, 967, 974, 978, 999, 1013], "3d": [45, 48, 66, 89, 100, 101, 193, 217, 219, 221, 403, 489, 569, 927, 1012, 1013, 1015], "mplot3d": [45, 66, 89, 100, 101, 167, 193, 217, 219], "noqa": [45, 66, 89, 100, 101, 121, 160, 161, 167, 193, 217, 219, 267, 268, 310, 374, 562, 563, 610, 782, 783, 953, 1014], "f401": [45, 66, 89, 100, 101, 167, 193, 217, 219], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 128, 166, 233, 300, 310, 352, 389, 402, 545, 717, 846, 953, 964, 974, 978, 1016, 1017], "elev": [45, 66, 89, 100, 101, 167, 193, 217, 221], "azim": [45, 66, 89, 100, 101, 167, 193, 217, 221], "134": [45, 53, 101, 120, 256, 1008], "xaxi": [45, 89, 100, 101, 193, 217, 219, 222, 276, 281, 341], "set_ticklabel": [45, 89, 100, 101, 193, 341], "zaxi": [45, 89, 100, 101, 193, 217], "petal": [45, 89, 103, 105, 117, 238, 310, 313, 367, 396, 894, 980, 996, 997], "sepal": [45, 89, 103, 105, 117, 150, 179, 238, 310, 313, 325, 367, 974, 996, 997], "length": [45, 69, 88, 89, 91, 103, 105, 117, 148, 149, 150, 153, 154, 156, 172, 179, 232, 235, 238, 310, 313, 325, 343, 363, 367, 370, 378, 379, 383, 396, 400, 402, 403, 405, 429, 473, 491, 492, 495, 498, 506, 534, 546, 564, 565, 572, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 615, 629, 630, 633, 634, 635, 636, 637, 639, 640, 643, 644, 645, 646, 664, 667, 763, 779, 782, 783, 793, 807, 809, 812, 813, 815, 823, 824, 825, 827, 829, 868, 894, 901, 903, 907, 923, 924, 935, 938, 963, 970, 974, 980, 990, 996, 997, 1005, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1021], "set_zlabel": [45, 89, 193], "setosa": [45, 89, 101, 103, 265, 266, 367, 487, 990, 997], "versicolour": [45, 89, 101, 103, 367, 997], "virginica": [45, 89, 101, 103, 265, 266, 367, 487, 964, 997], "text3d": [45, 101], "reorder": [45, 101, 383, 680, 701, 985, 1013], "447": [45, 67], "plot_cluster_iri": [45, 67], "voxel": [46, 65, 568], "multipl": [46, 68, 75, 91, 104, 116, 117, 163, 166, 190, 230, 256, 268, 278, 308, 356, 357, 358, 364, 366, 367, 370, 372, 373, 374, 375, 381, 383, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 428, 443, 447, 449, 450, 452, 457, 471, 474, 475, 478, 479, 480, 486, 487, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 534, 536, 537, 538, 539, 542, 543, 544, 545, 546, 564, 582, 590, 591, 593, 594, 610, 615, 617, 622, 623, 624, 625, 629, 630, 633, 635, 636, 637, 640, 643, 644, 645, 646, 649, 650, 651, 654, 656, 659, 661, 662, 672, 673, 675, 676, 677, 704, 705, 710, 727, 728, 730, 732, 733, 735, 767, 770, 773, 777, 778, 779, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 803, 804, 805, 807, 811, 812, 813, 814, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 843, 846, 858, 862, 870, 873, 874, 881, 882, 883, 886, 897, 912, 917, 918, 935, 938, 956, 959, 960, 961, 965, 966, 967, 971, 972, 974, 977, 978, 980, 984, 985, 990, 999, 1005, 1006, 1008, 1011, 1012, 1015, 1016, 1017, 1018, 1020, 1021], "partli": [46, 751], "procedur": [46, 55, 121, 145, 176, 184, 246, 258, 301, 305, 328, 341, 352, 370, 372, 381, 382, 383, 384, 393, 394, 397, 399, 400, 402, 404, 514, 520, 521, 523, 528, 529, 530, 536, 537, 538, 539, 542, 543, 576, 578, 585, 592, 627, 655, 657, 670, 710, 767, 838, 839, 858, 870, 935, 953, 960, 966, 972, 974, 977, 978, 979, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "solut": [46, 175, 185, 187, 200, 201, 210, 225, 231, 311, 328, 368, 372, 383, 392, 395, 397, 399, 400, 403, 404, 405, 432, 434, 436, 514, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 593, 629, 631, 633, 635, 637, 638, 639, 641, 643, 645, 647, 648, 649, 650, 651, 652, 655, 657, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 777, 778, 793, 830, 838, 839, 957, 958, 960, 961, 963, 968, 970, 978, 979, 983, 988, 994, 997, 999, 1005, 1008, 1018, 1019, 1020], "closest": [46, 63, 372, 395, 424, 426, 427, 430, 431, 432, 442, 636, 761, 762, 811, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 955, 958, 965, 967, 997], "partit": [46, 65, 69, 124, 126, 256, 294, 392, 393, 395, 399, 402, 432, 434, 436, 445, 494, 540, 541, 542, 543, 546, 547, 548, 687, 688, 698, 768, 829, 889, 890, 891, 892, 963, 967, 970, 974, 980, 999], "cluster_qr": [46, 395, 435, 445, 1019], "qr": [46, 198, 517, 524, 527, 917, 918, 961, 1011], "pivot": [46, 267, 268], "cheung": [46, 1006], "andrew": [46, 395, 445, 674, 678, 700, 719, 775, 856, 968, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "knyazev": [46, 395, 435, 445, 678, 1015, 1018, 1019], "ucdenv": 46, "skimag": [46, 47, 364, 998], "spectral_clust": [46, 65, 1013, 1015, 1017, 1018, 1019, 1020], "orig_coin": [46, 47], "speed": [46, 47, 56, 69, 97, 161, 167, 182, 185, 189, 234, 276, 310, 317, 341, 343, 358, 359, 370, 373, 379, 381, 383, 393, 395, 400, 403, 406, 427, 428, 430, 431, 432, 433, 435, 440, 442, 443, 444, 445, 514, 515, 593, 610, 615, 616, 617, 622, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 664, 667, 675, 777, 778, 785, 805, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 856, 918, 953, 961, 963, 965, 978, 988, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "down": [46, 47, 80, 211, 212, 219, 229, 230, 259, 295, 298, 352, 364, 373, 378, 397, 400, 427, 433, 439, 573, 576, 577, 622, 632, 756, 760, 763, 856, 859, 860, 871, 883, 886, 893, 960, 980, 990, 998, 1013], "alias": [46, 47, 368, 370, 373, 430, 442, 1005, 1009, 1019], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 998], "anti_alias": [46, 47, 998], "img_to_graph": [46, 65, 403, 1008, 1018], "exponenti": [46, 74, 148, 153, 281, 286, 401, 402, 405, 432, 519, 537, 542, 597, 602, 605, 622, 626, 740, 741, 821, 822, 826, 838, 839, 856, 956, 960, 964, 979, 997, 1012, 1018], "beta": [46, 84, 165, 376, 393, 395, 398, 519, 521, 523, 530, 627, 711, 712, 718, 724, 765, 775, 777, 964, 997, 1007, 1010, 1012, 1014, 1015], "voronoi": [46, 65, 395], "n_region": 46, "extra": [46, 117, 233, 276, 343, 368, 369, 371, 374, 383, 402, 403, 422, 427, 430, 442, 447, 515, 540, 541, 549, 573, 574, 683, 684, 685, 802, 825, 891, 892, 908, 963, 967, 1005, 1008, 1010, 1011, 1013, 1018, 1020], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 435, 445, 671, 674, 678, 1015, 1018, 1019, 1020], "amg": [46, 65, 395, 435, 445, 674, 678, 1015, 1019, 1020], "pyamg": [46, 386, 388, 395, 435, 445, 674, 678], "toler": [46, 72, 160, 187, 189, 212, 213, 343, 365, 372, 379, 395, 407, 427, 430, 435, 442, 445, 454, 455, 461, 465, 466, 467, 514, 515, 516, 518, 519, 523, 524, 525, 526, 527, 528, 530, 531, 542, 543, 544, 545, 610, 629, 630, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 659, 661, 662, 664, 665, 666, 667, 671, 672, 673, 674, 676, 677, 678, 821, 822, 826, 830, 838, 839, 876, 877, 881, 882, 883, 884, 885, 886, 887, 950, 960, 964, 978, 979, 995, 1017, 1018, 1019, 1020], "eigen_tol": [46, 435, 445, 674, 678, 1006, 1019, 1020], "todo": [46, 229, 374, 378, 383, 395, 1021], "21243": 46, "assign_label": [46, 395, 435, 445], "individu": [46, 59, 79, 107, 112, 128, 132, 140, 157, 163, 164, 170, 196, 214, 226, 259, 261, 308, 336, 357, 371, 374, 377, 379, 383, 385, 392, 396, 399, 402, 403, 421, 435, 445, 447, 479, 484, 486, 492, 538, 539, 542, 543, 545, 546, 548, 550, 551, 552, 553, 586, 592, 593, 615, 616, 626, 628, 640, 641, 642, 651, 654, 655, 656, 657, 658, 659, 660, 661, 670, 695, 702, 710, 716, 732, 733, 767, 779, 793, 809, 813, 814, 816, 817, 818, 819, 820, 839, 842, 850, 851, 853, 854, 855, 858, 860, 861, 866, 867, 868, 881, 882, 964, 965, 974, 979, 994, 999, 1001, 1006, 1009, 1011, 1017, 1019], "comment": [46, 341, 368, 369, 370, 371, 373, 374, 378, 470, 562, 964], "paus": 46, "21194": [46, 1018], "41": [46, 196, 365, 367, 405, 452, 475, 514, 604, 607, 618, 641, 647, 668, 669, 763, 816, 966, 970], "075": [46, 67, 97], "plot_coin_segment": [46, 67], "spatial": [47, 49, 169, 213, 294, 365, 383, 395, 406, 428, 433, 435, 440, 662, 675, 682, 742, 745, 760, 761, 762, 763, 772, 773, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 960, 967, 974, 1007, 1011, 1018], "constrain": [47, 94, 118, 125, 167, 187, 292, 309, 326, 328, 363, 383, 394, 395, 400, 402, 492, 544, 545, 618, 641, 673, 677, 806, 960, 963, 1009], "piec": [47, 197, 357, 963], "grid_to_graph": [47, 51, 54, 395, 403, 998, 1018], "st": [47, 66, 256, 313, 1008, 1011, 1013], "212": [47, 91, 92, 120, 261, 319, 367, 452, 483, 970, 997], "4697": 47, "573": [47, 67, 403], "plot_coin_ward_segment": [47, 67], "vq": [48, 57], "palac": 48, "china": [48, 395, 489, 490, 567], "615": 48, "literatur": [48, 153, 256, 342, 367, 370, 376, 378, 381, 382, 395, 398, 400, 402, 427, 430, 432, 484, 519, 521, 523, 530, 538, 539, 571, 574, 691, 777, 953, 956, 960, 964, 1015], "codebook": [48, 549, 811], "palett": [48, 166, 256, 279], "byte": [48, 53, 403, 470, 486, 491, 492, 565, 571, 572, 574, 929, 997, 999, 1005, 1012, 1013, 1020], "wherea": [48, 53, 66, 79, 108, 124, 200, 210, 257, 258, 259, 265, 303, 337, 358, 384, 399, 402, 548, 641, 642, 781, 797, 809, 956, 963, 965, 967, 974, 980, 1018], "rgb": [48, 365, 403, 476, 477, 566, 567, 570], "gif": 48, "pick": [48, 59, 169, 232, 264, 312, 316, 365, 370, 374, 395, 402, 427, 443, 506, 656, 891, 892, 953, 960, 961, 963, 978, 1016], "029": [48, 342, 972], "031": [48, 367], "054": 48, "robertlayton": 48, "pairwise_distances_argmin": [48, 63, 312, 762, 1013, 1019, 1020, 1021], "load_sample_imag": [48, 566, 567, 1014], "n_color": 48, "photo": 48, "jpg": [48, 489, 567], "255": [48, 97, 276, 294, 304, 311, 365, 476, 477, 544, 545], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 235], "book": [48, 69, 427, 430, 432, 811, 816, 820, 960, 961, 962, 965, 982, 1017], "alongsid": [48, 370, 376, 383, 386, 404, 964, 971, 984, 985], "596": [48, 67, 699], "plot_color_quant": [48, 67], "750": [49, 116, 256], "math": [49, 69, 234, 256, 257, 367, 370, 386, 746], "db": [49, 395], "n_noise_": 49, "come": [49, 66, 69, 79, 85, 99, 100, 148, 230, 308, 336, 341, 342, 356, 358, 363, 367, 370, 371, 374, 378, 381, 383, 386, 395, 399, 402, 403, 423, 433, 439, 455, 533, 688, 775, 800, 883, 886, 953, 954, 958, 961, 963, 967, 970, 979, 990, 1005, 1016, 1019, 1021], "handi": [49, 70, 342, 343, 371, 1021], "883": 49, "917": 49, "916": 49, "626": [49, 182], "asign": [49, 342], "unique_label": [49, 342, 372, 379], "core_samples_mask": 49, "zeros_lik": [49, 198, 265], "bool": [49, 65, 80, 161, 214, 350, 370, 407, 408, 409, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 502, 505, 506, 507, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 683, 685, 686, 690, 691, 692, 694, 695, 696, 697, 708, 709, 710, 711, 712, 713, 720, 723, 724, 732, 733, 736, 738, 743, 745, 749, 750, 751, 756, 760, 764, 765, 766, 767, 769, 771, 774, 776, 777, 778, 779, 782, 783, 784, 785, 793, 797, 798, 801, 804, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 912, 918, 919, 926, 929, 935, 937, 945, 950, 951, 952, 954, 1014, 1017, 1018], "core_sample_indices_": [49, 428], "class_member_mask": 49, "markerfacecolor": [49, 60, 62, 63], "248": [49, 67], "plot_dbscan": [49, 67, 406, 428], "constitut": [50, 383, 399, 402, 433, 439, 571, 572, 574, 968], "standpoint": 50, "proce": [50, 142, 177, 368, 374, 398, 399, 402, 424, 960], "reassign": [50, 370, 430, 432, 1006, 1010], "success": [50, 163, 249, 263, 272, 352, 390, 395, 399, 400, 402, 498, 547, 562, 779, 782, 783, 800, 886, 967, 980, 988, 994, 998, 1001, 1017], "becom": [50, 56, 71, 79, 198, 258, 276, 299, 303, 328, 341, 352, 364, 370, 372, 374, 378, 383, 384, 395, 397, 402, 403, 405, 424, 433, 437, 438, 440, 564, 571, 572, 574, 585, 602, 610, 641, 642, 659, 661, 855, 881, 882, 888, 959, 960, 961, 963, 967, 974, 979, 997, 999, 1006, 1013, 1014, 1017, 1018, 1019, 1020], "fetch_olivetti_fac": [50, 94, 116, 233, 365, 1013, 1014, 1015], "olivetti": [50, 94, 116, 363, 400, 478, 1001, 1005, 1013], "ndownload": 50, "figshar": 50, "5976027": 50, "extract_patches_2d": [50, 97, 403, 1013], "patch_siz": [50, 97, 403, 566, 567], "buffer": [50, 1018], "max_patch": [50, 403, 566, 567, 1013], "4i": 50, "dt": [50, 97, 108, 129, 402, 403, 980], "2400": 50, "700": [50, 310], "800": [50, 119, 311, 365, 567, 675], "900": [50, 73, 74, 177, 215], "1100": 50, "1200": [50, 120, 298, 402], "1300": 50, "1400": [50, 457], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 311], "2200": [50, 365, 476], "2300": [50, 185], "ntrain": 50, "631": [50, 67, 102, 106, 157], "plot_dict_face_patch": [50, 67], "agglo": [51, 429, 998], "featureagglomer": [51, 54, 424, 425, 981, 998, 1008, 1014, 1015, 1018, 1019], "x_reduc": [51, 89, 126, 429, 998], "x_restor": 51, "images_restor": 51, "vmax": [51, 81, 94, 97, 105, 151, 154, 175, 187, 212, 230, 245, 251, 294, 328], "288": [51, 67, 518, 524], "plot_digits_agglomer": [51, 67], "rich": [52, 378, 381, 395, 423, 988, 1016, 1019], "richer": [52, 104, 395], "uneven": [52, 251, 395, 399], "patholog": [52, 963, 1011], "clean": [52, 70, 195, 352, 362, 368, 401, 970, 974, 1015], "fring": [52, 395], "sensibl": [52, 160, 342, 372, 960, 974], "resampl": [52, 121, 153, 166, 214, 280, 379, 381, 538, 539, 938, 985, 1014, 1018], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 217, 218, 219, 671, 672, 673, 675, 961, 1006, 1011, 1015, 1019, 1020], "791": [52, 67, 157], "plot_digits_linkag": [52, 67], "raccoon": [53, 97, 400], "addition": [53, 71, 111, 166, 196, 214, 309, 311, 342, 370, 381, 393, 403, 593, 594, 629, 635, 654, 858, 953, 954, 964, 972, 984, 1011], "adapt": [53, 108, 120, 121, 151, 241, 242, 300, 357, 368, 369, 370, 379, 402, 405, 498, 499, 500, 501, 659, 660, 661, 838, 839, 960, 966, 968, 974, 978, 984, 985, 1013, 1014], "pooch": [53, 370, 386, 388], "instal": [53, 238, 276, 308, 309, 310, 311, 312, 313, 356, 357, 359, 370, 371, 373, 374, 376, 378, 381, 382, 388, 391, 395, 403, 435, 445, 479, 674, 678, 932, 980, 982, 999, 1012, 1013, 1014, 1018, 1019], "raccoon_fac": [53, 97], "nbyte": [53, 229], "768": [53, 343], "1024": [53, 104, 432, 451, 521, 879, 1018], "uint8": [53, 97, 364, 480, 489, 490, 1017], "786432": 53, "unsign": [53, 98, 365, 565, 929], "786": [53, 70], "kilobyt": 53, "shade": [53, 179, 279, 284, 324, 400], "behind": [53, 79, 372, 374, 378, 394, 397, 402, 963, 967, 976], "simplest": [53, 399, 961, 964, 997, 998], "certainli": [53, 69, 342], "compressed_raccoon_uniform": 53, "spot": [53, 227, 395], "leav": [53, 114, 122, 167, 169, 214, 263, 303, 350, 352, 356, 367, 369, 375, 383, 395, 402, 405, 425, 426, 429, 446, 486, 540, 541, 542, 543, 544, 545, 547, 548, 549, 656, 658, 781, 786, 787, 788, 789, 797, 798, 821, 822, 870, 889, 890, 891, 892, 953, 961, 967, 971, 980, 994, 997, 1005, 1012, 1014, 1016, 1017], "bin_edg": 53, "bin_edges_": [53, 299, 846], "bin_cent": [53, 196], "625": [53, 196, 691], "875": [53, 149, 652], "375": [53, 342, 432, 732, 964], "140": [53, 189, 215, 324, 339, 402, 493, 499, 500, 501, 538, 539, 965], "171": [53, 367, 376, 770, 964], "203": 53, "234": [53, 136, 138, 816, 820, 838, 839, 966], "axvlin": [53, 59, 72, 81, 102, 120, 130, 166, 168, 185, 262, 995], "get_ybound": 53, "state": [53, 56, 69, 71, 79, 198, 229, 236, 242, 262, 310, 352, 357, 358, 370, 372, 376, 378, 381, 383, 384, 394, 403, 408, 424, 427, 430, 432, 437, 442, 458, 527, 572, 662, 782, 783, 791, 793, 795, 821, 822, 828, 876, 877, 904, 953, 954, 960, 966, 969, 976, 984, 985, 988, 1007, 1009, 1011, 1013, 1015, 1018], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "79431128": 53, "185": [53, 157, 205, 215, 367, 376, 838, 839], "18557327": 53, "224": [53, 84, 126, 151, 158, 395, 707], "01945707": 53, "save": [53, 69, 71, 295, 369, 370, 374, 376, 377, 378, 383, 389, 399, 407, 451, 517, 518, 610, 821, 822, 879, 960, 964, 980, 988, 999, 1005, 1008, 1012, 1015], "verifi": [53, 59, 166, 196, 370, 375, 948, 967], "6291456": 53, "surpris": [53, 167, 960, 984, 1007], "x8": 53, "ndarrai": [53, 57, 89, 196, 238, 254, 255, 256, 370, 371, 372, 376, 377, 391, 403, 406, 407, 410, 411, 413, 415, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 698, 701, 704, 705, 706, 709, 710, 720, 727, 728, 730, 732, 733, 735, 736, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 771, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 899, 900, 901, 906, 907, 917, 918, 919, 920, 923, 924, 926, 928, 929, 933, 936, 937, 939, 940, 941, 942, 945, 950, 951, 964, 979, 985, 1008, 1012, 1015, 1016, 1019, 1020, 1021], "practic": [53, 70, 79, 85, 97, 118, 148, 165, 166, 172, 198, 225, 231, 257, 264, 282, 283, 310, 328, 357, 359, 370, 372, 373, 376, 378, 382, 383, 395, 397, 399, 400, 401, 402, 403, 405, 430, 435, 445, 504, 507, 572, 615, 616, 653, 777, 820, 874, 881, 953, 954, 958, 963, 964, 965, 966, 967, 970, 971, 974, 984, 985, 986, 988, 990, 999, 1000, 1001, 1007, 1011, 1013, 1015, 1017], "gain": [53, 219, 263, 276, 278, 317, 341, 342, 350, 369, 376, 378, 381, 402, 515, 540, 544, 545, 547, 708, 738, 777, 778, 810, 889, 891, 965, 969, 977, 980, 1008, 1012, 1015], "347": [53, 67], "plot_face_compress": [53, 67], "anova": [54, 139, 146, 163, 323, 339, 396, 487, 498, 575, 578, 579, 581, 582, 583, 587, 588, 589, 592, 696, 803, 807, 841, 842, 861, 881, 886, 979], "bayesianridg": [54, 160, 175, 176, 310, 610, 627, 960, 1012, 1013, 1014, 1015, 1018, 1019, 1021], "shutil": [54, 71, 396], "tempfil": [54, 278, 308, 396, 967], "feature_select": [54, 70, 71, 73, 139, 140, 141, 142, 143, 144, 145, 163, 238, 310, 312, 331, 352, 359, 383, 396, 404, 564, 953, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "kfold": [54, 120, 134, 251, 261, 352, 399, 421, 455, 550, 551, 577, 585, 630, 634, 636, 638, 644, 646, 648, 656, 779, 782, 783, 785, 787, 789, 793, 798, 800, 801, 802, 803, 804, 805, 806, 808, 812, 815, 862, 994, 1006, 1007, 1008, 1010, 1011, 1013, 1015], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 77, 267, 405, 984], "cachedir": [54, 71, 379, 396], "mkdtemp": [54, 396], "mem": [54, 376, 491], "n_x": [54, 568], "n_y": [54, 568, 966, 974], "parcel": [54, 66, 395], "ward__n_clust": 54, "n_job": [54, 71, 72, 115, 116, 121, 122, 128, 135, 144, 160, 166, 167, 168, 218, 220, 236, 255, 257, 258, 260, 271, 276, 308, 309, 310, 313, 357, 370, 383, 402, 406, 421, 428, 431, 433, 435, 440, 441, 444, 447, 450, 455, 514, 518, 519, 520, 522, 525, 526, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 577, 585, 593, 615, 617, 622, 630, 634, 636, 638, 640, 641, 642, 644, 646, 648, 649, 651, 659, 662, 671, 672, 673, 674, 675, 676, 677, 756, 760, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 840, 843, 876, 877, 930, 932, 953, 964, 965, 967, 994, 995, 999, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 425, 429, 1005, 1009], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 94, 108, 112, 113, 123, 227, 250, 255, 263, 265, 309, 342, 346, 350, 359, 367, 369, 370, 372, 379, 384, 392, 394, 395, 399, 400, 402, 403, 406, 428, 435, 447, 470, 491, 495, 497, 503, 505, 509, 510, 514, 520, 521, 523, 533, 540, 541, 542, 543, 547, 548, 549, 550, 551, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 600, 615, 641, 642, 649, 651, 659, 660, 661, 690, 700, 709, 716, 718, 728, 745, 751, 760, 764, 770, 771, 811, 821, 822, 823, 824, 825, 827, 829, 831, 832, 836, 838, 839, 844, 860, 861, 864, 868, 881, 886, 889, 890, 891, 892, 920, 921, 922, 935, 937, 938, 958, 960, 964, 965, 968, 971, 974, 975, 976, 980, 988, 990, 1010, 1011, 1013, 1015, 1016, 1017, 1019], "return_dist": [54, 446, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 967, 1009], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 140, 404, 575, 578, 579, 581, 582, 583, 587, 588, 592, 1008, 1012, 1019], "cach": [54, 163, 257, 276, 277, 290, 356, 357, 365, 383, 425, 429, 433, 451, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 491, 779, 823, 825, 841, 842, 879, 883, 884, 885, 886, 887, 949, 967, 979, 1008, 1012, 1013, 1014, 1015, 1017, 1018, 1020], "selectpercentil": [54, 70, 238, 331, 404, 575, 578, 579, 581, 582, 586, 589, 1006, 1011, 1021], "percentag": [54, 103, 118, 187, 214, 251, 259, 262, 399, 404, 517, 524, 527, 532, 576, 577, 631, 652, 663, 686, 716, 728, 797, 798, 799, 811, 893, 895, 965, 980, 1007, 1011, 1017, 1018], "anova__percentil": [54, 331], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 329, 339, 365, 367, 1007], "638768": 54, "rdbu_r": [54, 81, 105, 328], "temporari": [54, 69, 71, 356, 451, 670, 763, 879, 967, 1008, 1009, 1012, 1018, 1019], "worri": [54, 961, 991], "rmtree": [54, 71, 396], "ignore_error": 54, "794": [54, 67, 129, 132], "plot_feature_agglomeration_vs_univariate_select": [54, 67], "recomput": [55, 235, 237, 278, 308, 452, 457, 960, 976, 1010], "intract": [55, 400, 961, 969], "unlik": [55, 166, 167, 217, 219, 246, 298, 326, 370, 372, 376, 381, 383, 397, 399, 400, 403, 433, 518, 633, 634, 637, 638, 639, 665, 666, 767, 800, 821, 822, 861, 872, 884, 960, 963, 964, 971, 979, 1005, 1011], "inferenti": 55, "capabl": [55, 85, 153, 221, 372, 383, 386, 965, 968, 979, 980, 988, 1005, 1014], "meta": [55, 69, 107, 131, 132, 163, 196, 265, 352, 364, 368, 372, 374, 381, 383, 391, 393, 394, 404, 405, 448, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 553, 558, 580, 586, 807, 814, 953, 965, 985, 986, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1020], "extend": [55, 66, 197, 245, 263, 328, 367, 368, 381, 383, 393, 394, 395, 400, 402, 614, 703, 810, 813, 814, 846, 848, 865, 896, 956, 964, 965, 979, 985, 986, 1001, 1010, 1011, 1012, 1013, 1015, 1020], "chirag": 55, "nagpal": 55, "christo": [55, 1014, 1015, 1017, 1019], "arida": [55, 1014, 1015, 1017, 1019], "baseestim": [55, 276, 370, 382, 383, 417, 615, 616, 910, 1005, 1012, 1015, 1017, 1019, 1020], "clone": [55, 121, 156, 167, 295, 352, 368, 370, 373, 374, 376, 378, 383, 393, 396, 405, 421, 448, 552, 553, 580, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 785, 805, 808, 812, 815, 841, 842, 878, 985, 1005, 1011, 1013, 1017, 1021], "metaestim": [55, 383, 878, 1009, 1018, 1019], "available_if": [55, 383, 1018, 1019], "check_is_fit": [55, 372, 379, 383, 1015, 1018, 1019], "5000": [55, 182, 211, 212, 214, 310, 862], "_classifier_ha": 55, "deleg": [55, 376, 418, 894, 1009, 1011, 1017], "unfit": [55, 396, 418, 447, 552, 553, 585, 594, 1013, 1015], "classifier_": 55, "inductivecluster": 55, "clusterer_": 55, "plot_scatt": 55, "cluster_label": [55, 59], "x_new": [55, 396, 400, 404, 417, 426, 427, 429, 430, 432, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 532, 550, 552, 553, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 611, 613, 618, 621, 622, 623, 624, 625, 671, 672, 673, 674, 675, 830, 837, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 873, 874, 976, 990], "y_new": 55, "declar": [55, 218, 352, 370, 371, 372, 376, 383, 427, 430, 442, 454, 455, 461, 673, 677, 1012, 1016], "membership": [55, 384, 392, 394, 395, 494, 495, 496, 497, 498, 502, 505, 979], "inductive_learn": 55, "probable_clust": 55, "response_method": [55, 111, 124, 129, 179, 188, 205, 259, 279, 284, 287, 303, 324, 325, 347, 614, 615, 616, 681, 683, 685], "141": [55, 67, 241, 248, 517, 881, 965], "plot_inductive_clust": [55, 67], "meant": [56, 145, 365, 372, 379, 457, 476, 660, 827, 930, 931, 954, 968, 970, 974, 1006], "unintuit": 56, "possibli": [56, 85, 145, 196, 211, 342, 367, 369, 378, 389, 395, 402, 403, 434, 436, 572, 816, 817, 818, 819, 820, 886, 887, 889, 890, 891, 892, 953, 956, 961, 967, 974, 1020], "undesir": [56, 149, 405], "phil": [56, 1010], "roth": [56, 1010, 1013, 1020], "mr": [56, 313, 1006, 1009, 1019], "isotrop": [56, 60, 99, 150, 152, 217, 219, 395, 397, 405, 495, 502, 515, 598, 602, 603, 605, 606], "spheric": [56, 84, 124, 219, 243, 245, 246, 289, 366, 746, 777, 778, 960, 963, 967, 984], "anisotrop": [56, 150, 405, 600, 602, 605], "ellipt": [56, 960], "60834549": 56, "63667341": 56, "40887718": 56, "85253229": 56, "x_vari": 56, "y_vari": 56, "unequ": [56, 1013], "x_filter": 56, "unevenli": [56, 196, 251], "y_filter": 56, "set_i": 56, "scenario": [56, 69, 148, 172, 259, 352, 377, 399, 402, 520, 526, 528, 529, 958, 964, 974, 1015], "appropri": [56, 102, 153, 166, 265, 336, 346, 352, 368, 370, 372, 378, 383, 394, 395, 399, 401, 402, 406, 428, 433, 440, 472, 473, 474, 479, 483, 484, 485, 487, 488, 493, 560, 565, 574, 575, 578, 579, 581, 582, 583, 655, 657, 670, 692, 823, 824, 825, 827, 829, 831, 832, 833, 948, 960, 963, 964, 974, 980, 1009, 1012, 1018, 1021], "criteria": [56, 163, 174, 185, 204, 215, 246, 256, 378, 395, 404, 449, 465, 466, 467, 484, 540, 541, 542, 543, 547, 548, 629, 635, 639, 641, 642, 654, 675, 842, 861, 881, 882, 889, 890, 891, 892, 954, 963, 968, 978, 998, 1008, 1013, 1016], "knowledg": [56, 116, 166, 213, 234, 256, 359, 365, 370, 373, 376, 382, 383, 395, 399, 402, 406, 428, 494, 538, 539, 546, 703, 718, 722, 765, 810, 964, 965, 976, 999], "consequ": [56, 102, 214, 256, 257, 298, 325, 352, 400, 402, 544, 545, 549, 638, 639, 954, 960, 964, 980, 1014, 1016, 1021], "likelihood": [56, 76, 78, 79, 80, 82, 102, 148, 149, 150, 152, 153, 154, 155, 157, 163, 184, 214, 245, 249, 256, 262, 272, 295, 298, 372, 383, 393, 397, 400, 402, 405, 421, 452, 453, 454, 455, 456, 457, 458, 459, 460, 498, 515, 519, 524, 532, 533, 534, 593, 594, 614, 628, 641, 695, 723, 777, 778, 779, 804, 807, 826, 837, 857, 869, 883, 884, 886, 887, 960, 963, 966, 974, 979, 1008, 1009, 1014, 1020], "inertia": [56, 57, 60, 342, 395, 427, 430, 432, 435, 442, 443, 445, 446, 1016], "common_param": [56, 121, 167, 231, 258, 259], "unexpect": [56, 352, 370, 375, 378, 389, 518, 679, 964, 979, 1007, 1013, 1014, 1017, 1019, 1021], "suffic": [56, 57, 372, 999], "detail": [56, 110, 112, 115, 117, 122, 128, 167, 184, 185, 222, 227, 230, 231, 236, 238, 247, 254, 263, 282, 283, 304, 308, 309, 310, 311, 312, 313, 346, 348, 349, 352, 356, 357, 358, 362, 363, 364, 365, 368, 370, 372, 374, 375, 376, 378, 381, 382, 383, 384, 386, 389, 394, 395, 398, 399, 400, 402, 404, 405, 406, 417, 418, 421, 427, 428, 430, 431, 433, 435, 440, 441, 442, 444, 445, 447, 449, 450, 451, 455, 479, 507, 514, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 531, 532, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 577, 585, 593, 597, 602, 605, 614, 615, 616, 617, 622, 628, 630, 634, 636, 638, 639, 640, 641, 642, 644, 646, 648, 649, 651, 655, 657, 659, 661, 662, 670, 671, 672, 673, 674, 675, 676, 677, 678, 684, 696, 756, 760, 761, 762, 763, 778, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 819, 823, 824, 826, 827, 829, 831, 832, 834, 835, 840, 843, 845, 846, 858, 862, 870, 876, 877, 879, 883, 886, 889, 890, 891, 892, 912, 930, 953, 954, 958, 962, 963, 964, 965, 967, 968, 970, 977, 986, 987, 988, 990, 996, 999, 1001, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "propos": [56, 77, 78, 276, 365, 370, 372, 381, 383, 395, 397, 402, 407, 408, 433, 458, 518, 590, 591, 659, 660, 661, 838, 839, 960, 963, 967, 978, 982, 1012], "constraint": [56, 66, 94, 107, 132, 163, 191, 251, 293, 294, 295, 309, 370, 381, 400, 403, 470, 491, 492, 544, 545, 615, 618, 797, 798, 933, 953, 955, 960, 961, 978, 1009, 1012, 1013, 1016, 1018, 1020], "inflat": [56, 165, 166, 168, 395, 399, 964, 974], "allevi": [56, 175, 395, 966], "fastest": [56, 254, 343, 430, 653, 655, 657, 670, 917, 918, 963], "lost": [56, 81, 365, 371, 381, 961, 964], "restart": [56, 373, 378, 430, 514, 520, 521, 526, 528, 529, 593, 594, 961, 1018], "583": [56, 67, 167, 395, 997], "plot_kmeans_assumpt": [56, 67], "judg": [57, 202, 395, 994], "definit": [57, 80, 184, 196, 263, 276, 342, 370, 371, 372, 383, 385, 395, 397, 398, 400, 510, 512, 518, 594, 611, 675, 691, 701, 710, 740, 777, 778, 953, 956, 958, 960, 962, 964, 967, 978, 983, 1001, 1009, 1013, 1020], "shorthand": [57, 383, 396, 450, 544, 545, 842, 843, 1008], "homo": 57, "compl": 57, "mea": 57, "context": [57, 234, 238, 276, 356, 357, 364, 369, 371, 382, 383, 395, 396, 401, 402, 403, 405, 406, 421, 428, 431, 433, 435, 440, 441, 444, 447, 450, 451, 455, 514, 518, 519, 520, 522, 525, 526, 527, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 577, 585, 593, 609, 610, 613, 615, 617, 622, 630, 634, 636, 638, 640, 641, 642, 644, 646, 648, 649, 651, 659, 662, 671, 672, 673, 674, 675, 676, 677, 756, 760, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 823, 824, 827, 829, 831, 832, 834, 835, 840, 843, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 954, 960, 964, 970, 974, 978, 985, 988, 997, 1005, 1012, 1013, 1018], "n_digit": 57, "1797": [57, 88, 254, 295, 316, 367, 429, 485, 515, 516, 517, 518, 582, 583, 671, 672, 673, 674, 967, 996], "bench_k_mean": 57, "tabl": [57, 214, 256, 370, 371, 374, 379, 395, 403, 565, 641, 663, 779, 793, 818, 929, 960, 964, 965, 970, 984, 1006], "fit_tim": [57, 118, 185, 204, 258, 399, 804, 805], "inertia_": [57, 60, 63, 427, 430, 432, 1016], "clustering_metr": 57, "sample_s": [57, 230, 342, 773], "formatter_result": 57, "determinist": [57, 121, 357, 366, 372, 383, 395, 427, 430, 432, 434, 435, 436, 441, 442, 445, 534, 542, 543, 547, 548, 566, 567, 674, 678, 790, 791, 837, 889, 890, 956, 960, 1006, 1009, 1011, 1013, 1014, 1017, 1020], "ttime": 57, "tinertia": 57, "thomo": 57, "tcompl": 57, "tv": 57, "tari": 57, "tami": 57, "tsilhouett": 57, "__________________________________________________________________________________": 57, "162": [57, 367], "69545": 57, "645": 57, "621": [57, 751], "469": 57, "617": [57, 259, 395, 751], "152": [57, 376], "135": [57, 313, 367], "69735": 57, "681": [57, 376], "723": [57, 231], "701": 57, "574": [57, 517, 524], "698": 57, "023": [57, 882, 972], "72686": 57, "636": [57, 342, 376], "658": [57, 85, 185, 215], "647": [57, 320], "521": [57, 168, 170], "643": [57, 254, 343], "reduced_data": 57, "mesh": [57, 117, 126, 150, 230, 284, 292, 300, 321, 324], "169": [57, 295], "mark": [57, 91, 140, 161, 260, 267, 362, 370, 372, 374, 378, 379, 383, 395, 518, 590, 591, 594, 615, 641, 834, 835, 876, 877, 894, 908, 913, 918, 960, 988, 1001, 1005, 1006, 1011, 1013, 1014], "plot_kmeans_digit": [57, 67], "kmeans_plusplu": [58, 395, 1017], "4000": [58, 123, 244], "centers_init": 58, "4eacc5": [58, 63], "ff9c34": [58, 63], "4e9a06": [58, 63], "cluster_data": 58, "095": [58, 67], "plot_kmeans_plusplu": [58, 67], "wrong": [59, 196, 282, 341, 352, 367, 370, 372, 403, 487, 708, 738, 773, 964, 970, 979, 1008, 1010, 1012, 1013, 1014, 1015, 1018], "wide": [59, 60, 112, 229, 299, 381, 395, 400, 403, 953, 960, 984, 988, 999, 1005, 1007], "ambival": 59, "thick": [59, 286, 967], "ow": 59, "7049787496083262": 59, "5882004012129721": 59, "6505186632729437": 59, "561464362648773": 59, "4857596147013469": 59, "silhouette_sampl": [59, 773, 1009, 1011, 1013, 1021], "distinct": [59, 256, 318, 341, 343, 365, 372, 375, 383, 384, 399, 402, 403, 572, 780, 789, 797, 855, 856, 876, 877, 953, 960, 967, 970, 980, 999, 1013], "center_box": [59, 495], "range_n_clust": 59, "set_size_inch": [59, 134, 235], "lie": [59, 84, 144, 166, 230, 298, 318, 326, 328, 400, 402, 589, 829, 831, 832, 833, 958, 961, 964, 974, 979], "insert": [59, 166, 196, 381, 395, 470, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 896], "blank": [59, 375, 954, 980], "demarc": 59, "perspect": [59, 196, 356, 365, 381, 384, 513, 626, 881, 957], "silhouette_avg": 59, "sample_silhouette_valu": 59, "y_lower": [59, 121], "aggreg": [59, 113, 214, 259, 265, 305, 312, 395, 402, 517, 538, 539, 704, 705, 710, 727, 728, 730, 732, 733, 735, 767, 965, 967, 974], "ith_cluster_silhouette_valu": 59, "size_cluster_i": 59, "y_upper": [59, 121], "fill_betweenx": 59, "2nd": [59, 89, 156, 303, 395, 406, 428, 513, 974, 1020], "lw": [59, 77, 78, 80, 98, 103, 104, 190, 197, 199, 202, 206, 213, 220, 244, 251, 266, 271, 281, 298, 318, 335], "fontweight": [59, 191], "bold": [59, 121, 185, 191, 370], "526": [59, 67, 881], "plot_kmeans_silhouette_analysi": [59, 67], "reach": [60, 145, 196, 198, 212, 214, 258, 312, 328, 350, 375, 384, 386, 395, 400, 404, 433, 440, 491, 492, 576, 577, 610, 627, 628, 629, 630, 635, 636, 637, 638, 639, 643, 644, 645, 646, 649, 650, 651, 659, 660, 661, 662, 664, 665, 666, 667, 711, 712, 765, 777, 778, 838, 839, 878, 953, 964, 968, 978, 980, 988, 1016, 1020, 1021], "optimum": [60, 154, 166, 172, 269, 400, 455, 960, 963], "stuck": [60, 675, 961], "check_random_st": [60, 212, 219, 228, 233, 372, 379, 383], "trade": [60, 77, 168, 255, 257, 258, 328, 341, 394, 395, 397, 536, 537, 542, 543, 617, 639, 675, 779, 782, 783, 793, 804, 961, 968, 976, 978, 979, 985], "n_init_rang": 60, "n_samples_per_cent": 60, "make_data": 60, "n_clusters_tru": 60, "init_s": [60, 342, 432], "factori": [60, 256, 403, 724, 934, 964], "empti": [60, 69, 104, 208, 319, 356, 365, 372, 374, 395, 407, 466, 516, 544, 545, 613, 614, 790, 846, 888, 896, 901, 902, 908, 954, 979, 980, 997, 1007, 1009, 1013, 1014, 1016, 1017, 1019, 1020, 1021], "run_id": 60, "km": [60, 312, 342], "my_memb": [60, 62, 63], "368": [60, 67], "plot_kmeans_stability_low_dim_dens": [60, 67], "fast": [61, 172, 185, 211, 212, 230, 231, 299, 343, 356, 365, 370, 379, 395, 397, 399, 400, 402, 403, 405, 407, 430, 452, 457, 491, 515, 516, 518, 521, 523, 527, 530, 549, 571, 572, 574, 615, 616, 623, 641, 642, 655, 657, 670, 682, 779, 793, 802, 803, 813, 814, 821, 822, 826, 837, 918, 933, 956, 960, 963, 966, 967, 969, 970, 980, 984, 988, 999, 1005, 1006, 1011, 1012, 1015, 1016], "globular": [61, 395], "cleanli": [61, 1005], "412": [61, 67, 479, 960], "plot_linkage_comparison": [61, 67], "dorin": [62, 431], "comaniciu": [62, 395, 431], "meer": [62, 395, 431], "ieee": [62, 78, 80, 367, 395, 397, 404, 408, 431, 458, 517, 546, 647, 668, 669, 707, 751, 960, 964, 970], "transact": [62, 367, 395, 397, 406, 408, 428, 431, 458, 517, 521, 523, 530, 546, 627, 647, 668, 669, 707, 708, 738, 751, 960, 964], "intellig": [62, 341, 367, 395, 402, 431, 538, 539, 621, 679, 707, 811, 838, 839, 965, 976, 985, 988], "2002": [62, 393, 395, 402, 421, 431, 576, 577, 708, 738, 828, 876, 956, 964], "603": [62, 211, 215, 431], "619": [62, 431], "labels_uniqu": 62, "734": [62, 67], "plot_mean_shift": [62, 67, 444], "3000": [63, 109, 220, 873, 874], "k_mean": [63, 379, 383, 998, 1013], "t_batch": 63, "pairwis": [63, 165, 166, 229, 265, 308, 312, 313, 341, 356, 362, 372, 383, 395, 400, 405, 441, 444, 445, 451, 470, 491, 492, 518, 544, 545, 603, 621, 622, 623, 624, 625, 626, 671, 673, 675, 677, 679, 682, 760, 763, 770, 772, 773, 809, 825, 827, 829, 833, 847, 879, 964, 967, 976, 979, 1001, 1005, 1006, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021], "k_means_cluster_cent": 63, "mbk_means_cluster_cent": 63, "k_means_label": 63, "mbk_means_label": 63, "ninertia": 63, "bbbbbb": 63, "plot_mini_batch_kmean": [63, 67], "reachabl": [64, 395, 433, 438, 439, 440, 827, 923], "shane": [64, 1014, 1017, 1020], "grigsbi": 64, "refug": 64, "rocktalu": 64, "cluster_optics_dbscan": [64, 395], "n_points_per_clust": 64, "c1": [64, 118, 156, 228, 304], "c2": [64, 118, 156, 228, 304], "c3": [64, 118, 304], "c4": [64, 304, 986, 1001], "c5": [64, 986, 1001], "c6": 64, "clust": [64, 433, 440], "labels_050": 64, "reachability_": [64, 395, 433, 438, 439, 440], "core_dist": [64, 438], "core_distances_": [64, 433, 438, 440], "ordering_": [64, 395, 433, 438, 439, 440], "labels_200": 64, "ax3": [64, 319], "ax4": 64, "klass": 64, "xk": [64, 533], "rk": 64, "full_lik": 64, "epsilon": [64, 178, 220, 231, 335, 400, 438, 626, 632, 650, 659, 661, 728, 838, 839, 882, 884, 887, 957, 960, 964, 968, 978, 979, 997, 1005], "noptic": 64, "ndbscan": 64, "plot_opt": [64, 67], "tri": [65, 103, 217, 285, 357, 372, 375, 381, 384, 393, 402, 432, 434, 436, 614, 615, 616, 653, 675, 681, 683, 685, 793, 932, 969, 987, 990, 1007, 1013, 1017], "intens": [65, 97, 276, 367, 371, 400, 427, 430, 442, 590, 591, 615, 616, 781, 953, 971, 988, 1013], "weakli": 65, "outlin": [65, 117, 370, 372, 383, 384, 385, 953, 1001], "center1": 65, "center2": 65, "center3": 65, "center4": 65, "radius1": 65, "radius2": 65, "radius3": 65, "radius4": 65, "circle1": 65, "circle2": 65, "circle3": 65, "circle4": 65, "label_im": 65, "cleaner": 65, "069": [65, 67, 219, 254], "plot_segmentation_toi": [65, 67], "swiss": [66, 163, 216, 223, 395, 513, 675, 676, 1019], "roll": [66, 163, 216, 223, 373, 395, 513, 675, 676, 912, 988, 1015, 1020], "sole": [66, 381, 395], "respect": [66, 99, 113, 117, 125, 156, 172, 175, 185, 198, 210, 213, 217, 219, 226, 229, 231, 246, 265, 282, 283, 295, 303, 312, 325, 356, 357, 365, 366, 370, 393, 395, 398, 400, 402, 403, 405, 447, 450, 453, 454, 455, 456, 457, 458, 459, 517, 523, 524, 530, 536, 544, 545, 580, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 619, 626, 654, 673, 677, 695, 710, 764, 767, 777, 778, 817, 827, 838, 839, 893, 895, 953, 957, 958, 960, 961, 964, 967, 968, 969, 970, 974, 979, 984, 988, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "oppos": [66, 370, 374, 391, 395, 877, 967, 979, 990, 1005], "make_swiss_rol": [66, 221, 1019], "thinner": 66, "fig1": 66, "set_posit": [66, 100, 101, 207, 298], "jet": 66, "fig2": 66, "121": [66, 111, 161, 200, 230, 652, 974], "462": [66, 67], "plot_ward_structured_vs_unstructur": [66, 67], "433": [67, 367], "auto_examples_clust": 67, "07": [67, 84, 104, 138, 158, 166, 170, 192, 214, 265, 272, 296, 303, 322, 352, 365, 395, 514, 544, 545, 675, 964, 978], "chain": [68, 75, 163, 273, 275, 276, 352, 359, 362, 381, 383, 394, 405, 479, 485, 524, 594, 610, 641, 720, 779, 807, 810, 812, 813, 814, 815, 841, 842, 861, 953, 954, 965, 969, 981, 984, 988, 999, 1001], "raster": 69, "caption": 69, "serv": [69, 98, 154, 259, 396, 529, 534, 621, 956, 1019], "matt": [69, 1008, 1009, 1010, 1015, 1016, 1020], "terri": [69, 1009], "truncatedsvd": [69, 126, 218, 342, 400, 517, 518, 522, 523, 524, 675, 840, 843, 961, 1007, 1012, 1016, 1017, 1019], "dictvector": [69, 163, 340, 342, 344, 365, 403, 471, 565, 571, 572, 573, 574, 854, 1005, 1006, 1009, 1015, 1017, 1018, 1021], "compris": [69, 121, 254, 341, 342, 343, 365, 381, 400, 402, 498, 786, 961], "subject": [69, 125, 247, 259, 341, 365, 370, 372, 374, 381, 383, 384, 393, 394, 397, 399, 400, 478, 641, 642, 668, 844, 881, 882, 932, 934, 955, 960, 979, 983, 999, 1014, 1015, 1018, 1020], "mccall": 69, "mksol": 69, "dseg": 69, "ti": [69, 196, 243, 246, 254, 337, 356, 393, 582, 583, 618, 703, 708, 738, 777, 778, 883, 886, 889, 963, 964, 979, 1006, 1008, 1009, 1013, 1015, 1019, 1020], "fred": [69, 1005, 1018], "575": [69, 196], "3539": 69, "1993apr6": 69, "131900": 69, "8407": 69, "perhap": [69, 117, 367, 369, 378, 383, 401, 985], "militari": 69, "slug": 69, "school": [69, 367, 395, 770, 964], "physic": [69, 357, 488, 929, 960, 1021], "teacher": 69, "ex": [69, 368, 371, 386, 1009, 1010], "fighter": 69, "jock": 69, "wasn": [69, 1014], "poundal": 69, "flink": 69, "funni": 69, "propon": 69, "si": 69, "insist": 69, "safeti": [69, 381, 396, 930, 985, 1015], "ball": [69, 281, 289, 395, 401, 431, 675, 821, 822, 826, 829, 831, 832, 833, 1005, 1007, 1010, 1016], "world": [69, 73, 166, 221, 234, 341, 356, 359, 363, 367, 395, 400, 403, 954, 964, 966, 983, 985, 988, 993, 1001, 1005], "mari": [69, 1013, 1014, 1015, 1016, 1019], "shafer": 69, "nasa": [69, 341, 342, 367], "am": [69, 74, 79, 128, 167, 341, 375, 397, 457, 476, 1012], "dryden": 69, "stateless": [69, 342, 358, 372, 383, 403, 565, 566, 572, 621, 844, 845, 853, 974, 1021], "subject_body_extractor": 69, "startswith": [69, 218, 289], "subject_body_transform": 69, "sentenc": [69, 341, 343, 365, 384, 403], "text_stat": 69, "num_sent": 69, "text_stats_transform": 69, "subjectbodyextractor": 69, "subjectbodi": 69, "union": [69, 166, 396, 720, 736, 840, 1012], "body_bow": 69, "pull": [69, 311, 357, 368, 373, 383, 384, 1015], "body_stat": 69, "transformer_weight": [69, 447, 450, 840, 1010, 1017], "dual": [69, 71, 336, 341, 403, 404, 454, 455, 461, 594, 629, 630, 635, 636, 641, 642, 643, 644, 645, 646, 664, 667, 821, 822, 881, 882, 883, 886, 979, 1007, 1016, 1019], "396": [69, 182, 215, 367, 999], "394": [69, 157], "117": [69, 75, 1006], "plot_column_transform": [69, 75], "imput": [70, 128, 162, 168, 227, 236, 238, 309, 312, 359, 362, 374, 382, 383, 396, 402, 473, 484, 548, 563, 622, 628, 655, 803, 824, 842, 900, 902, 984, 985, 1001, 1007, 1008], "miss": [70, 128, 162, 168, 227, 236, 256, 276, 309, 313, 352, 356, 359, 362, 365, 367, 369, 370, 372, 374, 375, 383, 394, 395, 396, 397, 455, 473, 479, 481, 484, 544, 545, 548, 549, 610, 611, 612, 613, 622, 628, 655, 673, 677, 709, 751, 803, 824, 842, 850, 851, 855, 857, 858, 861, 862, 866, 869, 870, 872, 960, 961, 964, 980, 984, 985, 988, 1001, 1007, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "chi": [70, 79, 109, 302, 362, 404, 502, 575, 578, 579, 581, 582, 583, 587, 588, 589, 592, 621, 622, 623, 624, 625, 740, 741, 1001, 1005, 1010, 1011], "dispatch": [70, 359, 391, 451, 779, 793, 802, 803, 804, 879, 930, 931, 994, 1001, 1020], "processor": [70, 128, 166, 359, 406, 421, 428, 431, 433, 435, 440, 441, 444, 447, 450, 455, 514, 518, 519, 520, 522, 525, 526, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 577, 585, 593, 615, 617, 622, 630, 634, 636, 638, 640, 641, 642, 644, 646, 648, 649, 651, 659, 662, 671, 672, 673, 674, 675, 676, 677, 756, 760, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 823, 824, 827, 829, 831, 832, 834, 835, 840, 843, 876, 877], "pedro": [70, 1006, 1008, 1009, 1013], "simpleimput": [70, 128, 160, 161, 168, 227, 236, 238, 309, 312, 352, 383, 610, 611, 612, 954, 974, 1013, 1014, 1016, 1017, 1019, 1020, 1021], "chi2": [70, 403, 404, 435, 564, 575, 578, 579, 581, 582, 583, 588, 589, 592, 603, 621, 622, 623, 624, 625, 626, 741, 747, 756, 1005, 1012, 1019], "40945": 70, "titan": [70, 168, 238, 308, 312, 313], "surviv": [70, 168, 953, 984], "ag": [70, 145, 166, 168, 184, 185, 196, 214, 235, 236, 238, 298, 311, 312, 313, 365, 367, 988, 990, 997], "fare": [70, 168, 238, 312, 313, 1009, 1010], "embark": [70, 168, 238, 308, 312, 313], "sex": [70, 145, 166, 168, 184, 185, 238, 313, 367, 972, 997], "femal": [70, 166, 313, 375, 854, 855, 974], "male": [70, 166, 313, 375, 854, 855, 974], "pclass": [70, 168, 238, 308, 312, 313], "numeric_featur": [70, 312], "numeric_transform": [70, 312], "categorical_transform": 70, "selector": [70, 141, 142, 378, 403, 449, 564, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 1007, 1015, 1017, 1021], "preprocessor": [70, 128, 166, 196, 227, 236, 304, 309, 311, 312, 313, 396, 403, 571, 572, 574, 984, 999, 1005, 1008, 1013, 1015], "798": [70, 402], "lt": [70, 71, 114, 128, 166, 246, 254, 268, 368, 370], "0x7fd1aacc18b0": 70, "pipelinepipelin": [70, 71, 114, 128, 142, 166, 168, 226, 227, 235, 236, 238, 257, 263, 304, 309, 312], "columntransformercolumntransform": [70, 128, 166, 167, 168, 227, 236, 304, 309, 312], "simpleimputersimpleimput": [70, 128, 168, 227, 236, 309, 312], "standardscalerstandardscal": [70, 128, 166, 226, 227, 235, 236, 238, 263, 309, 312], "onehotencoderonehotencod": [70, 114, 128, 166, 167, 227, 236, 309, 312], "selectpercentileselectpercentil": [70, 238], "logisticregressionlogisticregress": [70, 114, 226, 227, 236, 238, 295, 309, 312], "make_column_selector": [70, 118, 128, 396, 447, 450, 1015], "subset_featur": 70, "Then": [70, 108, 110, 114, 116, 128, 131, 142, 166, 172, 184, 196, 221, 226, 237, 258, 259, 341, 364, 370, 374, 376, 378, 386, 392, 393, 395, 398, 400, 403, 404, 553, 576, 702, 738, 779, 793, 841, 954, 963, 964, 970, 979, 999, 1014], "1047": 70, "1118": 70, "684": [70, 79, 110, 132, 341], "1045": 70, "841": 70, "1046": [70, 246], "kb": [70, 166, 167], "numerical_transform": 70, "yourself": [70, 369, 370, 371, 375, 378, 968], "dtype_exclud": [70, 449], "dtype_includ": [70, 118, 128, 396, 449], "_column_transform": [70, 128], "0x7fd182d970d0": 70, "0x7fd182d97c40": 70, "exactli": [70, 165, 175, 189, 196, 247, 264, 299, 341, 370, 372, 392, 395, 399, 400, 403, 408, 436, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 498, 509, 573, 574, 598, 659, 661, 686, 688, 745, 780, 797, 802, 956, 960, 961, 962, 964, 965, 980, 998, 999, 1005, 1011, 1012, 1018], "hyperparamet": [70, 108, 148, 149, 155, 156, 160, 163, 167, 175, 185, 210, 214, 225, 249, 254, 259, 261, 272, 278, 295, 341, 372, 383, 399, 400, 402, 405, 485, 518, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 626, 636, 642, 648, 656, 659, 710, 767, 779, 793, 953, 958, 959, 960, 963, 964, 966, 968, 970, 978, 985, 999, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "cartesian": [70, 392, 616, 967, 1020], "preprocessor__num__imputer__strategi": 70, "preprocessor__cat__selector__percentil": 70, "classifier__c": 70, "search_cv": 70, "param_distribut": [70, 148, 257, 264, 268, 310, 382, 783, 791, 793], "randomizedsearchcvrandomizedsearchcv": 70, "trigger": [70, 71, 374, 396, 838, 839, 841, 842, 901, 902, 918, 960, 999, 1013, 1019, 1020], "best_params_": [70, 72, 121, 148, 231, 246, 254, 260, 310, 328, 382, 779, 782, 783, 793, 953, 995, 999], "best_score_": [70, 72, 231, 257, 260, 261, 328, 656, 658, 779, 782, 783, 793, 994, 995, 999, 1016], "cv_results_": [70, 71, 72, 81, 134, 144, 246, 254, 255, 256, 257, 260, 264, 267, 268, 278, 328, 455, 577, 779, 782, 783, 793, 999, 1011, 1015, 1017, 1018], "sort_valu": [70, 168, 238, 246, 256, 267, 304, 305], "mean_test_scor": [70, 71, 72, 81, 134, 144, 246, 255, 256, 257, 264, 267, 268, 278, 328, 455, 577, 779, 793, 953, 1011, 1018], "ascend": [70, 168, 304, 402, 433, 439, 610, 618, 893, 894, 895, 978, 1015, 1021], "std_test_scor": [70, 72, 134, 144, 255, 256, 257, 264, 278, 455, 577, 779, 793, 1011, 1018], "param_preprocessor__num__imputer__strategi": 70, "param_preprocessor__cat__selector__percentil": 70, "param_classifier__c": 70, "786015": 70, "031020": 70, "785063": 70, "030498": 70, "783149": 70, "030462": 70, "932": [70, 75], "plot_column_transformer_mixed_typ": [70, 75], "instanti": [71, 151, 311, 373, 402, 433, 550, 551, 585, 613, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 908, 970, 996, 1005, 1013, 1017, 1021], "memoiz": [71, 365, 383], "costli": [71, 77, 115, 160, 257, 337, 357, 371, 376, 395, 427, 610, 787, 789, 873, 874, 918, 964, 967, 976, 985], "mcgibbon": [71, 1007, 1008, 1011], "selectkbest": [71, 73, 141, 142, 312, 352, 370, 396, 404, 564, 575, 578, 579, 581, 583, 589, 953, 1006, 1011, 1021], "mutual_info_classif": [71, 404, 575, 578, 579, 582, 583, 1011, 1017, 1020], "pipe": [71, 72, 118, 236, 255, 304, 310, 311, 382, 396, 403, 573, 841, 866, 867, 869, 870, 871, 872, 953, 974, 995], "reduce_dim": [71, 236, 255, 396], "popul": [71, 77, 79, 166, 196, 259, 298, 365, 379, 383, 397, 424, 695, 701, 823, 824, 825, 827, 829, 831, 832, 833, 933, 964, 970, 974, 980], "n_features_opt": 71, "c_option": 71, "iterated_pow": [71, 515, 518, 524, 1011], "reduce_dim__n_compon": [71, 255, 396], "classify__c": 71, "reduce_dim__k": 71, "reducer_label": 71, "kbest": [71, 575], "0x7fd1aacd8310": 71, "gridsearchcvgridsearchcv": [71, 236, 246, 254, 256], "minmaxscalerminmaxscal": 71, "passthroughpassthroughlinearsvclinearsvc": 71, "mean_scor": [71, 265, 268, 342, 1018], "alphabet": [71, 383, 723], "eas": [71, 246, 303, 370, 373, 376, 960, 978, 984, 985, 988, 1016, 1017, 1019], "sometim": [71, 128, 165, 256, 294, 342, 352, 357, 358, 370, 372, 374, 376, 382, 383, 386, 395, 397, 400, 402, 403, 432, 517, 518, 521, 523, 524, 846, 847, 848, 896, 959, 960, 961, 964, 969, 974, 975, 979, 990, 998, 1002, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1021], "worthwhil": [71, 383], "slower": [71, 97, 118, 160, 231, 265, 343, 402, 403, 404, 434, 436, 521, 523, 530, 538, 539, 541, 546, 548, 571, 572, 574, 614, 615, 616, 626, 642, 655, 657, 670, 675, 687, 809, 813, 814, 957, 961, 962, 963, 965, 967, 980, 999, 1009, 1016], "constructor": [71, 228, 357, 372, 383, 394, 396, 403, 447, 450, 532, 533, 538, 550, 551, 552, 553, 564, 565, 571, 572, 580, 651, 659, 660, 823, 824, 825, 827, 828, 829, 831, 832, 833, 840, 841, 842, 843, 932, 953, 965, 974, 979, 985, 990, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1020], "folder": [71, 365, 368, 370, 374, 378, 386, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 486, 967, 999], "cached_pip": [71, 396], "delet": [71, 317, 319, 374, 375, 452, 457, 469], "exit": [71, 276, 374, 378, 451], "benefici": [71, 73, 77, 94, 126, 298, 299, 368, 961], "842": [71, 75], "plot_compare_reduct": [71, 75], "924": 72, "logistic__c": [72, 995], "046415888336127774": 72, "pca__n_compon": [72, 995], "truncat": [72, 126, 218, 379, 517, 518, 522, 523, 524, 527, 659, 661, 708, 738, 777, 830, 894, 918, 953, 963, 964, 978, 995, 999, 1000, 1001, 1011, 1013], "x_digit": [72, 136, 293, 396, 994, 995, 997], "y_digit": [72, 136, 293, 396, 994, 995, 997], "__": [72, 257, 383, 396, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 953, 995, 1013, 1014], "spectrum": [72, 507, 527, 678, 918, 988, 995, 1013], "ax0": [72, 74, 196, 228, 342, 995], "n_components_": [72, 102, 383, 425, 429, 517, 521, 522, 523, 524, 525, 526, 873, 874, 995, 1014, 1016], "explained_variance_ratio_": [72, 103, 342, 400, 517, 524, 527, 532, 995, 1008, 1011], "named_step": [72, 85, 396, 576, 577, 580, 841, 842, 881, 882, 960, 995, 1012, 1014], "components_col": 72, "param_pca__n_compon": 72, "best_clf": 72, "nlargest": 72, "yerr": [72, 78, 80, 115, 118, 144, 278, 304, 319], "val": [72, 208, 256, 920], "498": [72, 75], "plot_digits_pip": [72, 75], "candid": [73, 246, 254, 257, 264, 310, 358, 370, 374, 395, 402, 431, 433, 779, 782, 783, 791, 793, 960, 967, 980, 1011], "features__pca__n_compon": 73, "features__univ_select__k": 73, "svm__c": 73, "933": [73, 399], "867": 73, "967": [73, 964, 968], "transformer_list": [73, 396, 840, 843, 954, 1016, 1017], "univ_select": 73, "amuel": [73, 113, 187, 230, 318, 336], "ai": [73, 113, 187, 230, 318, 336, 399], "bonn": [73, 113, 187, 230, 318, 336], "mayb": [73, 294, 383, 403, 979, 985], "combined_featur": 73, "x_featur": [73, 623, 624, 625, 956], "grid_search": [73, 236, 246, 254, 264, 396, 1007, 1008, 1009, 1010, 1011, 1012], "652": [73, 75], "plot_feature_union": [73, 75], "overview": [74, 371, 373, 382, 383, 716, 725, 966, 978, 1000, 1001], "transformedtargetregressor": [74, 166, 196, 381, 396, 576, 577, 580, 1013, 1015, 1018], "hous": [74, 128, 160, 161, 298, 310, 363, 473, 1001], "translat": [74, 372, 405, 510, 597, 850, 851, 867, 961, 964, 982, 988], "lowest": [74, 85, 167, 246, 364, 395, 399, 618, 620, 782, 783, 786, 888, 889, 961, 964, 980, 1020], "logarithm": [74, 128, 166, 229, 257, 328, 383, 404, 443, 573, 641, 642, 659, 687, 708, 723, 733, 737, 738, 739, 785, 821, 822, 916, 980, 994, 1012], "log1p": [74, 228, 845, 964, 974], "expm1": 74, "y_tran": 74, "At": [74, 201, 268, 316, 319, 356, 357, 374, 384, 386, 391, 398, 402, 421, 424, 448, 571, 572, 574, 585, 809, 811, 848, 928, 953, 960, 963, 965, 969, 978, 988], "meda": [74, 166, 964], "median_absolute_error": [74, 166, 964, 1009, 1015, 1017], "r2_score": [74, 165, 180, 191, 192, 402, 416, 448, 465, 466, 467, 537, 539, 541, 543, 545, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 706, 710, 814, 815, 824, 832, 839, 882, 884, 887, 890, 892, 953, 964, 1006, 1008, 1014, 1018, 1019], "compute_scor": [74, 102, 175, 176, 627, 628, 1014], "r2": [74, 110, 128, 165, 167, 191, 231, 372, 396, 402, 537, 553, 656, 804, 839, 964, 972, 1014], "ridge_cv": 74, "y_pred_ridg": 74, "ridge_cv_with_trans_target": 74, "inverse_func": [74, 166, 396, 448, 845, 974, 1013], "y_pred_ridge_with_trans_target": 74, "sell": 74, "quantile_transform": [74, 858, 869, 974, 1012, 1013, 1014], "house_pric": [74, 128], "select_dtyp": [74, 118, 313, 449], "nan": [74, 118, 160, 161, 166, 214, 236, 251, 259, 304, 308, 313, 356, 362, 372, 379, 383, 402, 451, 479, 538, 539, 540, 544, 545, 547, 576, 577, 580, 586, 589, 592, 610, 611, 612, 613, 618, 695, 696, 697, 704, 705, 706, 710, 711, 712, 751, 760, 765, 766, 767, 769, 779, 782, 783, 785, 793, 803, 804, 805, 808, 850, 851, 855, 857, 858, 861, 862, 866, 869, 870, 872, 899, 900, 901, 902, 939, 953, 964, 974, 1001, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "inf": [74, 151, 286, 379, 395, 405, 433, 440, 444, 454, 455, 461, 536, 537, 542, 543, 576, 577, 580, 589, 590, 591, 602, 610, 618, 620, 631, 632, 633, 635, 652, 654, 655, 659, 663, 670, 710, 712, 728, 760, 767, 837, 846, 853, 899, 901, 902, 916, 964, 974, 1012, 1014, 1015, 1016, 1017, 1019, 1020], "lotfrontag": 74, "garageyrblt": 74, "masvnrarea": [74, 128], "to_fram": 74, "n_quantil": [74, 167, 302, 858, 870, 1014], "output_distribut": [74, 298, 302, 396, 857, 858, 869, 870, 974], "squeez": [74, 154, 155, 276, 298, 998], "quantiletransform": [74, 167, 302, 396, 448, 857, 870, 954, 974, 1012, 1013, 1014, 1015, 1016, 1021], "weaker": 74, "residu": [74, 94, 192, 198, 252, 416, 448, 465, 466, 467, 535, 537, 539, 541, 543, 545, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 654, 655, 656, 657, 661, 662, 668, 669, 684, 726, 767, 814, 815, 824, 832, 839, 882, 884, 887, 890, 892, 960, 964, 997, 1017, 1018, 1020], "smile": [74, 365, 1019], "088": [74, 75, 652, 972], "plot_transformed_target": [74, 75, 448], "130": [75, 376], "auto_examples_compos": 75, "mahalanobi": [76, 82, 163, 395, 397, 433, 440, 452, 453, 454, 455, 456, 457, 458, 459, 682, 760, 761, 762, 828, 958, 970, 1013, 1016, 1017], "ledoitwolf": [76, 78, 82, 102, 163, 397, 452, 453, 457, 458, 459, 460, 779, 1009], "empiricalcovari": [77, 79, 80, 397, 452, 456, 457, 458, 459, 970], "unbias": [77, 393, 397, 400, 421, 533, 639, 655, 657, 670, 960, 994], "shrunk": [77, 102, 298, 408, 456, 458, 459, 462, 463, 464, 532, 958, 978, 1000, 1001], "base_x_train": 77, "base_x_test": 77, "coloring_matrix": [77, 78], "shrunkcovari": [77, 102, 397, 452, 453, 456, 457, 458], "empirical_covari": [77, 397], "log_likelihood": [77, 593, 594, 777, 778], "span": [77, 121, 230, 253, 365, 403, 532, 619, 779, 782, 964, 998], "negative_loglik": 77, "real_cov": [77, 78, 453, 456, 457, 458, 459], "emp_cov": [77, 79, 81, 461, 464], "loglik_r": 77, "inv": [77, 81, 293], "formula": [77, 78, 392, 395, 397, 408, 456, 458, 499, 500, 501, 573, 626, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 659, 661, 687, 711, 737, 746, 953, 958, 960, 964, 969, 970, 974, 978, 1010, 1012, 1014], "asymptot": [77, 78, 185, 356, 397, 457, 519, 960, 963, 1015], "criterion": [77, 78, 169, 184, 204, 246, 268, 309, 372, 379, 383, 395, 400, 425, 429, 432, 435, 442, 445, 515, 520, 522, 529, 536, 537, 540, 541, 542, 543, 547, 548, 549, 589, 610, 627, 628, 631, 639, 649, 650, 651, 652, 654, 655, 657, 659, 660, 661, 663, 674, 678, 693, 778, 878, 883, 884, 885, 886, 887, 889, 890, 891, 892, 960, 963, 964, 972, 977, 980, 986, 998, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1021], "chen": [77, 78, 397, 402, 408, 458, 708, 738, 956, 964, 1008, 1011, 1012, 1013, 1015, 1018, 1019, 1020], "Its": [77, 108, 254, 258, 366, 372, 383, 400, 405, 521, 959, 960, 969, 972, 978, 984, 988, 1008], "tuned_paramet": [77, 134, 254], "loglik_lw": 77, "loglik_oa": 77, "unseen": [77, 119, 142, 185, 204, 269, 282, 358, 362, 372, 382, 383, 395, 399, 827, 858, 870, 955, 964, 970, 972, 974, 980, 990, 1008, 1013, 1017], "loglog": [77, 229], "lik_max": 77, "amax": [77, 119], "lik_min": 77, "amin": 77, "vline": [77, 96, 183, 184, 185, 197, 256, 269, 299], "shrinkage_": [77, 78, 456, 458], "magenta": [77, 123], "purpl": [77, 91, 221], "cyan": [77, 112, 166, 279, 287], "realli": [77, 168, 185, 374, 375, 376, 964, 970, 988, 1019], "interestingli": [77, 145, 974], "outperform": [77, 85, 128, 303, 381, 399, 402, 435, 445, 966, 974], "674": [77, 82, 157, 295, 296, 343], "plot_covariance_estim": [77, 82], "whose": [78, 79, 80, 145, 153, 196, 326, 365, 378, 379, 383, 393, 395, 397, 402, 404, 405, 408, 421, 422, 423, 431, 444, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 498, 517, 521, 523, 524, 527, 530, 532, 555, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 623, 654, 678, 701, 779, 786, 793, 806, 827, 846, 873, 874, 917, 943, 944, 958, 965, 969, 970, 971, 979, 980, 1008, 1013, 1014, 1016, 1019], "inspir": [78, 125, 167, 214, 370, 381, 402, 544, 545, 906, 954, 984, 1014], "mmse": [78, 397, 408, 458], "tran": 78, "octob": [78, 365, 1005, 1012, 1018, 1019], "toeplitz": 78, "choleski": [78, 196, 214, 379, 454, 455, 461, 510, 594, 631, 633, 634, 637, 638, 639, 641, 642, 652, 655, 657, 663, 665, 666, 670, 777, 778, 960, 1008, 1012, 1014, 1017, 1020], "simul": [78, 96, 166, 190, 232, 256, 988], "n_samples_rang": [78, 229], "lw_mse": 78, "oa_ms": 78, "lw_shrinkag": 78, "oa_shrinkag": 78, "error_norm": [78, 80, 452, 453, 454, 455, 456, 457, 458, 459], "darkorang": [78, 98, 103, 104, 197, 207, 220, 242, 243, 244, 247, 263, 265, 271, 279, 281, 287, 288, 318, 348], "706": [78, 82], "plot_lw_vs_oa": [78, 82], "x_i": [79, 113, 140, 166, 197, 311, 336, 395, 400, 401, 402, 405, 597, 598, 602, 605, 606, 608, 816, 817, 820, 955, 956, 960, 966, 967, 968, 974, 978, 979, 980], "d_": [79, 395, 400, 631, 652, 663, 760, 961, 966], "mle": [79, 102, 524, 1013, 1016], "resist": [79, 80, 370], "erron": [79, 80, 400, 960, 1006, 1013, 1017], "breakdown": [79, 80, 213, 662, 960], "n_": [79, 80, 256, 311, 395, 400, 402, 629, 635, 668, 679, 956, 960, 964, 966, 967, 971, 974, 976, 979, 980], "smallest": [79, 80, 196, 276, 346, 365, 395, 397, 404, 510, 524, 613, 637, 638, 639, 665, 666, 673, 677, 678, 779, 782, 783, 793, 798, 980, 1018], "pure": [79, 80, 85, 196, 383, 395, 456, 462, 479, 540, 541, 542, 543, 547, 548, 549, 688, 698, 768, 775, 889, 890, 891, 892, 974], "rousseuw": [79, 80], "rousseeuw": [79, 80, 395, 397, 452, 457, 772, 773, 970], "ass": [79, 80, 397, 457], "1984": [79, 80, 397, 457, 889, 890, 980], "wilson": [79, 367, 1005, 1008], "hilferti": 79, "1931": 79, "proceed": [79, 365, 367, 395, 406, 423, 428, 494, 679, 691, 708, 738, 828, 878, 964, 976, 977, 978], "academi": [79, 828], "688": 79, "n_outlier": [79, 80, 124, 199, 225, 283], "gen_cov": 79, "ey": [79, 80, 243, 247, 328, 365, 517, 524, 533], "outliers_cov": 79, "mincovdet": [79, 80, 397, 452, 453, 456, 458, 459, 970, 1005, 1012], "robust_cov": 79, "nmcd": 79, "nmle": 79, "26253567e": 79, "06695631e": 79, "22747343e": 79, "23773583": 79, "24640578": 79, "51963999": 79, "inlier": [79, 124, 199, 225, 234, 298, 383, 397, 452, 546, 654, 660, 827, 858, 870, 884, 885, 887, 960, 970, 1012, 1013, 1018], "inlier_plot": 79, "outlier_plot": 79, "get_xlim": [79, 191, 201, 298], "zz": 79, "mahal_emp_cov": 79, "emp_cov_contour": 79, "pubu_r": 79, "mahal_robust_cov": 79, "robust_contour": 79, "ylorbr_r": 79, "dist": [79, 218, 229, 374, 452, 453, 454, 455, 456, 457, 458, 459, 682, 745, 751, 821, 822], "borderaxespad": 79, "cubic": [79, 405], "suggest": [79, 97, 112, 115, 166, 169, 256, 328, 356, 369, 370, 377, 383, 399, 400, 402, 452, 457, 548, 628, 806, 958, 960, 961, 969, 979, 999, 1009, 1016, 1019], "emp_mah": 79, "markeredgewidth": [79, 260], "rm": [79, 151, 374, 378, 397], "mahal": 79, "robust_mah": 79, "location_": [79, 80, 452, 453, 454, 455, 456, 457, 458, 459], "448": [79, 82, 276], "plot_mahalanobis_dist": [79, 82], "aim": [80, 161, 284, 318, 358, 365, 368, 370, 383, 389, 395, 397, 403, 431, 682, 960, 964, 967, 974, 979, 984, 990, 998, 1019], "compens": [80, 165, 167, 172, 196, 214, 257, 397, 400], "soon": [80, 383, 997], "5n_": 80, "johanna": 80, "hardin": 80, "rock": 80, "decemb": [80, 153, 365, 647, 668, 669, 1005, 1013, 1015, 1017, 1020], "928": [80, 421], "zoubir": 80, "koivunen": 80, "chakhchoukh": 80, "muma": 80, "signal": [80, 94, 95, 96, 104, 121, 148, 153, 154, 163, 174, 195, 197, 215, 247, 311, 394, 395, 397, 403, 404, 405, 408, 458, 486, 504, 509, 514, 517, 520, 524, 608, 629, 635, 636, 646, 647, 667, 668, 669, 767, 855, 960, 964, 981, 988, 993, 1000, 1001], "tutori": [80, 134, 135, 136, 137, 185, 198, 214, 256, 359, 370, 371, 376, 378, 382, 389, 395, 435, 445, 674, 979, 997, 1008], "treatment": [80, 165, 364, 400, 452, 457], "concept": [80, 119, 265, 359, 370, 381, 394, 395, 401, 403, 956, 964, 967, 980, 988], "magazin": [80, 404], "29": [80, 91, 149, 153, 187, 196, 204, 213, 215, 222, 239, 313, 317, 344, 367, 368, 386, 387, 388, 402, 542, 543, 673, 677, 763, 777, 833, 960, 961, 978], "61": [80, 167, 214, 364, 367, 376, 396, 524, 543, 696], "range_n_outli": 80, "err_loc_mcd": 80, "err_cov_mcd": 80, "err_loc_emp_ful": 80, "err_cov_emp_ful": 80, "err_loc_emp_pur": 80, "err_cov_emp_pur": 80, "outliers_index": 80, "outliers_offset": 80, "inliers_mask": 80, "pure_x": 80, "pure_loc": 80, "pure_emp_cov": 80, "font_prop": 80, "hat": [80, 104, 252, 256, 281, 311, 368, 393, 397, 401, 402, 955, 960, 961, 964, 966, 968], "_2": [80, 153, 400, 403, 514, 520, 528, 529, 629, 635, 960, 968, 978, 979], "x_size": 80, "210": [80, 82, 167], "plot_robust_vs_empirical_covari": [80, 82], "graphicallasso": [81, 397, 452, 453, 455, 456, 457, 458, 459, 461, 1013, 1021], "largest": [81, 96, 198, 367, 395, 397, 400, 427, 510, 524, 540, 541, 542, 543, 547, 548, 571, 692, 777, 778, 798, 819, 889, 890, 891, 892, 918, 961, 964, 974, 979, 980], "invert": [81, 99, 142, 218, 342, 343, 381, 397, 403, 613, 672, 676, 974, 1014], "fairli": [81, 120, 219, 271, 293, 378, 395, 542, 543, 682, 965, 997], "tweak": [81, 399, 930, 963, 999, 1016], "readabl": [81, 257, 311, 375, 376, 378, 389, 517, 1014, 1017, 1018, 1019, 1020], "neighborhood": [81, 163, 217, 277, 290, 367, 383, 395, 400, 406, 428, 433, 440, 485, 487, 498, 524, 532, 611, 614, 679, 807, 823, 824, 827, 829, 830, 831, 832, 833, 835, 841, 842, 861, 961, 970, 986, 1001, 1014], "make_sparse_spd_matrix": [81, 512], "prng": 81, "prec": [81, 226, 510, 964], "smallest_coef": [81, 510], "largest_coef": [81, 510], "multivariate_norm": [81, 85, 241, 452, 453, 454, 455, 456, 457, 458, 459], "ledoit_wolf": [81, 397, 1018], "prec_": 81, "lw_cov_": 81, "lw_prec_": 81, "this_cov": 81, "this_prec": 81, "ma": [81, 304, 328, 960, 1011, 1016], "masked_equ": 81, "set_facecolor": [81, 241], "set_axis_bgcolor": 81, "alpha_": [81, 134, 166, 176, 184, 185, 455, 594, 627, 628, 630, 634, 636, 638, 639, 644, 646, 656, 658, 960, 980, 994, 1005, 1012], "898": [81, 82], "plot_sparse_cov": [81, 82], "935": [82, 1012], "auto_examples_covari": 82, "cross_decomposit": [83, 84, 85, 163, 232, 359, 1009, 1010, 1012, 1013, 1014], "plscanon": [84, 465, 467, 468, 986, 1001, 1009, 1013, 1015, 1017, 1019], "plsregress": [84, 85, 986, 1001, 1012, 1015, 1017, 1019], "share": [84, 126, 166, 246, 341, 350, 352, 356, 357, 372, 378, 395, 400, 403, 532, 651, 687, 691, 777, 778, 782, 783, 958, 971, 1005, 1007, 1013, 1015, 1017, 1020], "appar": [84, 966, 988], "scatterplot": [84, 175, 256, 279], "maxim": [84, 85, 94, 105, 121, 175, 246, 247, 257, 261, 265, 266, 286, 303, 310, 328, 346, 350, 367, 383, 392, 395, 398, 400, 404, 405, 532, 593, 594, 627, 628, 631, 652, 662, 663, 703, 779, 782, 783, 793, 850, 856, 866, 958, 960, 964, 967, 969, 979, 994, 997, 1008, 1010, 1015, 1018, 1020], "weak": [84, 108, 119, 122, 214, 262, 399, 540, 541, 542, 547, 548, 549, 613, 967, 988], "var": [84, 85, 100, 112, 145, 176, 256, 367, 371, 404, 624, 628, 883, 884, 885, 886, 887, 964, 1013], "corr": [84, 169, 256], "corrcoef": [84, 105], "plsca": [84, 466], "x_train_r": 84, "y_train_r": 84, "x_test_r": 84, "y_test_r": 84, "221": [84, 126, 1008], "222": [84, 126, 979], "223": [84, 126, 228, 239, 367], "yj": [84, 302], "noiz": 84, "xb": [84, 860], "_pl": 84, "503": 84, "futurewarn": [84, 175, 370, 378, 1012, 1013, 1014, 1016, 1018, 1021], "n_target": [84, 383, 398, 465, 466, 467, 468, 507, 539, 594, 626, 629, 630, 633, 634, 635, 636, 637, 639, 640, 643, 644, 645, 646, 647, 648, 654, 655, 656, 657, 658, 664, 665, 666, 667, 668, 669, 670, 965, 1017, 1019], "futur": [84, 153, 197, 237, 311, 370, 372, 374, 381, 383, 384, 389, 399, 403, 479, 517, 613, 618, 932, 934, 964, 965, 979, 980, 988, 1002, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "11693539": 84, "19803308": 84, "12190903": 84, "77322639": 84, "77777215": 84, "04995982": 84, "34990341": 84, "37257991": 84, "27597342": 84, "95433992": 84, "9403917": 84, "02818216": 84, "06880943": 84, "08604995": 84, "05216586": 84, "72295655": 84, "70432034": 84, "79769376": 84, "exce": [84, 274, 309, 405, 426, 498, 585, 632, 641, 1014, 1017, 1019], "336": [84, 86, 349, 351, 376, 974], "plot_compare_cross_decomposit": [84, 86], "pcr": [85, 398], "pl": [85, 200, 367, 398, 465, 466, 467, 468, 1010], "greedili": [85, 145, 399, 404, 443], "despit": [85, 194, 196, 214, 231, 285, 383, 397, 610, 611, 613, 960, 967, 988, 1013, 1014], "suffer": [85, 116, 168, 276, 298, 342, 356, 395, 402, 405, 527, 745, 959, 960, 964, 967, 998, 1014], "mention": [85, 214, 309, 352, 356, 370, 374, 375, 381, 383, 679, 873, 874, 953, 958, 960, 985, 988, 999, 1012, 1013, 1014], "dive": [85, 370, 376], "explained_variance_": [85, 517, 524, 527, 998, 1012], "onto": [85, 218, 219, 230, 298, 381, 400, 403, 407, 431, 444, 516, 522, 526, 610, 611, 613, 671, 958, 962, 967], "recommend": [85, 116, 160, 213, 226, 252, 265, 302, 310, 356, 357, 359, 364, 368, 370, 372, 376, 378, 381, 386, 398, 399, 400, 402, 404, 422, 430, 432, 434, 443, 479, 491, 518, 521, 527, 532, 544, 545, 552, 565, 566, 572, 589, 594, 614, 615, 621, 653, 659, 675, 680, 681, 683, 685, 785, 791, 793, 837, 844, 846, 853, 860, 861, 866, 867, 869, 870, 871, 872, 874, 883, 886, 918, 932, 953, 961, 964, 966, 968, 971, 974, 976, 978, 979, 980, 983, 988, 1001, 1007, 1008, 1014, 1015, 1016, 1017, 1019], "linearregress": [85, 131, 165, 175, 186, 191, 192, 193, 194, 199, 202, 213, 228, 233, 252, 270, 299, 352, 370, 381, 382, 396, 402, 448, 553, 615, 618, 629, 632, 635, 637, 654, 655, 670, 960, 964, 974, 997, 1009, 1010, 1014, 1017, 1018, 1019, 1021], "retriev": [85, 166, 200, 263, 342, 350, 374, 383, 396, 400, 403, 404, 451, 479, 573, 576, 577, 609, 636, 646, 667, 708, 712, 714, 715, 738, 763, 816, 820, 853, 879, 930, 960, 962, 964, 966, 984, 985, 998, 1010, 1015, 1017, 1019], "026": [85, 311, 314, 342], "remark": [85, 145, 358, 370, 974], "predit": 85, "pca_2": 85, "673": [85, 306, 376], "732": [85, 86, 198, 259, 272], "plot_pcr_vs_pl": [85, 86], "auto_examples_cross_decomposit": 86, "multilabel": [87, 92, 163, 224, 239, 263, 274, 365, 372, 373, 383, 390, 465, 470, 480, 491, 492, 498, 506, 524, 540, 547, 550, 657, 658, 686, 690, 696, 708, 711, 712, 716, 717, 720, 721, 736, 738, 765, 766, 769, 770, 774, 776, 810, 814, 838, 845, 848, 852, 854, 865, 886, 889, 891, 907, 926, 927, 928, 975, 986, 987, 999, 1001, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1018, 1019, 1020], "089": [88, 92, 337, 339, 342], "plot_digits_last_imag": [88, 92], "iris": [89, 262, 263, 996], "150x4": 89, "unus": [89, 100, 101, 167, 193, 217, 219, 446, 562, 745, 753, 953, 961, 1005, 1013, 1015, 1016, 1018, 1020], "plai": [89, 95, 122, 150, 179, 205, 250, 279, 287, 324, 325, 356, 381, 999], "set1": [89, 256, 285, 286], "getter": [89, 452, 453, 454, 455, 456, 457, 458, 459, 576, 577, 580], "110": [89, 175, 193, 203, 228, 304, 421, 958, 959], "3rd": [89, 156, 816, 859, 966, 974], "208": [89, 92, 276, 367], "plot_iris_dataset": [89, 92], "easi": [90, 167, 204, 214, 244, 254, 256, 328, 341, 352, 365, 376, 378, 381, 382, 395, 402, 483, 487, 493, 848, 953, 959, 963, 971, 974, 984, 985, 988, 999, 1015, 1020], "make_gaussian_quantil": [90, 109, 111, 366, 453, 457, 458, 459, 503], "321": 90, "323": [90, 156, 158], "y2": [90, 111, 699, 746, 965], "324": [90, 365], "multi": [90, 107, 108, 132, 163, 174, 212, 215, 216, 219, 223, 224, 225, 232, 235, 239, 249, 253, 265, 272, 274, 291, 296, 308, 313, 341, 345, 351, 357, 365, 367, 372, 373, 379, 383, 386, 395, 402, 403, 405, 412, 421, 435, 445, 452, 457, 478, 479, 487, 488, 493, 497, 498, 502, 503, 505, 524, 532, 533, 534, 536, 538, 540, 541, 542, 544, 547, 548, 550, 552, 593, 614, 616, 626, 629, 630, 635, 636, 640, 641, 643, 644, 645, 646, 649, 651, 655, 656, 657, 658, 659, 664, 667, 673, 686, 696, 703, 711, 716, 722, 724, 765, 779, 793, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 828, 829, 831, 837, 838, 839, 842, 848, 861, 865, 876, 877, 881, 883, 886, 889, 890, 891, 893, 894, 895, 901, 904, 907, 953, 965, 967, 971, 974, 978, 984, 985, 986, 990, 996, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1021], "325": 90, "326": 90, "505": [90, 92], "plot_random_dataset": [90, 92], "make_multilabel_classif": [91, 232, 366, 498, 519, 770, 812, 813, 964, 1007, 1008, 1010, 1016], "star": [91, 131, 370], "degener": [91, 242, 407, 424, 437, 516, 703, 960, 964, 1014, 1018, 1019], "vocabulari": [91, 211, 341, 342, 381, 403, 571, 572, 573, 574, 966, 990, 999, 1005, 1007, 1010, 1013, 1016, 1018], "73": [91, 260, 317, 382, 779, 793, 827, 890, 974, 995, 1005, 1007], "w0": 91, "w1": [91, 402, 640], "38": [91, 167, 187, 195, 250, 257, 265, 272, 281, 295, 402, 615, 712, 862, 964, 974, 1005, 1006, 1007], "54": [91, 97, 106, 172, 196, 199, 365, 367, 395, 474, 1006, 1007], "make_ml_clf": 91, "ff3333": 91, "0198e1": 91, "bf5fff": 91, "fcd116": 91, "ff7216": 91, "4dbd33": 91, "87421f": 91, "plot_2d": [91, 217], "p_c": [91, 506], "p_w_c": [91, 506], "allow_unlabel": [91, 232, 506], "return_distribut": [91, 506], "sep": [91, 265], "p_w": 91, "plot_random_multilabel_dataset": [91, 92], "auto_examples_dataset": 92, "blind": [93, 106, 163, 341, 400, 516, 524], "fastica": [93, 106, 163, 400, 515, 518, 524, 998, 1005, 1007, 1013, 1019, 1020], "increment": [93, 106, 163, 259, 374, 376, 426, 430, 446, 487, 516, 517, 518, 519, 522, 524, 527, 585, 629, 641, 649, 785, 805, 813, 814, 816, 817, 818, 819, 820, 850, 851, 861, 881, 882, 939, 960, 966, 1008, 1009], "fa": [93, 105, 106, 163, 376, 400, 456, 459, 515, 524, 779, 803], "precomput": [93, 106, 163, 174, 215, 220, 276, 278, 372, 379, 381, 383, 395, 403, 406, 416, 424, 425, 428, 429, 433, 435, 440, 448, 454, 465, 466, 467, 507, 514, 518, 520, 523, 525, 531, 537, 539, 541, 543, 545, 548, 551, 553, 593, 594, 603, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 664, 665, 667, 668, 671, 673, 674, 675, 679, 756, 760, 763, 772, 773, 814, 815, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 839, 882, 883, 884, 885, 886, 887, 890, 892, 940, 941, 942, 956, 962, 967, 979, 985, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021], "chapter": [94, 352, 372, 395, 400, 402, 405, 513, 515, 517, 597, 602, 605, 626, 954, 957, 960, 979, 980], "decompos": [94, 98, 112, 300, 394, 517, 521, 692, 802, 918, 959, 960, 964, 981, 1000, 1001], "basicconfig": 94, "asctim": 94, "levelnam": 94, "faces_cent": 94, "image_shap": [94, 233], "constrained_layout": [94, 167, 217, 304, 305, 313], "set_constrained_layout_pad": 94, "w_pad": [94, 117, 347], "h_pad": [94, 117, 347], "set_edgecolor": 94, "vec": [94, 403, 521, 523, 530], "im": [94, 105, 267, 280, 980, 987], "pad": [94, 117, 160, 167, 217, 234, 341, 347, 403, 571, 572, 574], "initialis": [94, 521, 523, 530, 1005, 1013, 1014], "mathbb": [94, 112, 151, 398, 964, 971, 979], "4096": [94, 365, 400, 478], "human": [94, 167, 341, 389, 395, 400, 838, 839, 964, 971, 1014], "friendli": [94, 357, 370, 378, 400, 874, 976, 977, 984, 985], "visualis": [94, 97, 105, 232, 527, 967, 985], "64x64": [94, 365, 400], "singular": [94, 379, 392, 395, 398, 434, 436, 465, 466, 467, 468, 504, 507, 517, 521, 523, 524, 527, 530, 532, 533, 640, 655, 656, 657, 670, 918, 960, 961, 963, 1000, 1001, 1011, 1012], "scalar": [94, 311, 376, 383, 396, 405, 407, 447, 450, 507, 516, 598, 599, 600, 605, 606, 610, 611, 720, 724, 897, 905, 956, 968, 970, 974, 978, 984, 1015, 1016, 1019, 1021], "noise_variance_": [94, 184, 515, 517, 524, 639, 1012, 1019], "pixelwis": 94, "pca_estim": 94, "nmf_estim": 94, "multivari": [94, 166, 362, 397, 400, 403, 456, 499, 500, 501, 610, 611, 612, 613, 632, 654, 661, 662, 816, 817, 818, 819, 820, 958, 960, 963, 966, 984, 990, 998, 1001], "subcompon": [94, 400], "ica_estim": 94, "15e": 94, "sparsepca": [94, 514, 516, 517, 518, 520, 522, 523, 524, 525, 528, 529, 1005, 1012, 1013, 1015, 1016, 1018, 1019, 1020], "batch_pca_estim": 94, "minibatchdictionarylearn": [94, 97, 358, 400, 514, 521, 525, 528, 529, 1006, 1008, 1015, 1016, 1018, 1019, 1020, 1021], "batch_dict_estim": 94, "That": [94, 145, 185, 225, 256, 260, 342, 343, 357, 364, 378, 383, 399, 404, 405, 427, 430, 540, 547, 576, 797, 889, 890, 953, 961, 962, 964, 970, 980, 1014, 1015], "enhanc": [94, 369, 370, 374, 381, 383, 395, 964, 982, 1003, 1004, 1005, 1006, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "consum": [94, 352, 364, 372, 383, 395, 399, 402, 432, 782, 783, 841, 842, 960, 988, 1010], "kmeans_estim": 94, "heteroscedast": [94, 102, 121, 198, 400, 857, 869], "fa_estim": 94, "factoranalysi": [94, 102, 105, 400, 527, 1006, 1008, 1017, 1019], "wrap": [94, 114, 121, 276, 364, 372, 383, 417, 491, 568, 569, 640, 659, 724, 807, 865, 954, 964, 967, 979, 984, 1005, 1010, 1013, 1015, 1016, 1018, 1020], "suit": [94, 126, 166, 196, 197, 225, 246, 311, 312, 341, 357, 370, 372, 375, 376, 378, 381, 386, 398, 400, 402, 405, 433, 435, 486, 660, 818, 862, 912, 953, 956, 961, 964, 966, 967, 978, 984, 985, 988, 992, 1012, 1019], "colormap": [94, 111, 156, 188, 205, 328, 333, 347, 680, 1018], "uv": [94, 400], "x_1": [94, 140, 151, 193, 197, 398, 400, 402, 405, 596, 608, 640, 854, 960, 966, 968, 974, 978], "x_n": [94, 400, 966, 968, 978], "dict_pos_dict_estim": 94, "positive_dict": [94, 514, 520, 528, 529], "_least_angl": 94, "677": 94, "convergencewarn": [94, 152, 154, 156, 157, 204, 211, 242, 293, 294, 300, 379, 383, 777, 778, 1013, 1014, 1017], "136e": 94, "027e": 94, "dict_pos_code_estim": 94, "fit_algorithm": [94, 514, 520, 1020, 1021], "cd": [94, 367, 368, 370, 374, 376, 400, 454, 455, 461, 514, 520, 522, 523, 526, 528, 529, 530, 960, 999, 1010, 1020], "positive_cod": [94, 514, 520, 525, 528, 529], "dict_pos_estim": 94, "927": [94, 106, 421], "plot_faces_decomposit": [94, 106], "imagin": [95, 148, 399, 400, 403, 960], "simultan": [95, 260, 264, 349, 362, 392, 953, 964, 965, 980, 988, 1012], "microphon": 95, "s1": [95, 145, 156, 184, 185, 367, 998], "sinusoid": [95, 110, 121, 231, 405, 957, 998], "s2": [95, 145, 156, 184, 185, 367, 533, 998], "sawtooth": [95, 998], "saw": [95, 197, 998], "tooth": [95, 998], "s_": [95, 260, 961, 972, 998], "a_": [95, 392, 395, 521, 523, 530, 960, 998], "mixing_": [95, 96, 516, 998], "prove": [95, 988], "revert": [95, 613, 615, 616, 1012, 1017], "unmix": [95, 407, 516], "allclos": [95, 125, 976, 998], "mean_": [95, 260, 515, 516, 517, 522, 524, 526, 861, 974, 998, 1013], "orthogon": [95, 96, 97, 163, 174, 215, 394, 400, 509, 514, 520, 522, 525, 526, 531, 647, 648, 668, 669, 976, 986, 1001, 1005], "steelblu": [95, 96, 130], "sig": 95, "487": [95, 106, 706], "plot_ica_blind_source_separ": [95, 106], "ica": [96, 394, 407, 980, 1000, 1001], "geometr": [96, 395, 671, 687, 713, 739, 961, 1013], "identifi": [96, 103, 121, 122, 165, 166, 196, 199, 244, 246, 254, 259, 265, 285, 305, 310, 341, 342, 364, 365, 369, 370, 374, 375, 383, 395, 396, 399, 402, 403, 433, 440, 470, 479, 491, 492, 538, 539, 546, 589, 626, 632, 682, 695, 756, 806, 827, 846, 876, 877, 953, 960, 964, 970, 977, 988, 997, 1012, 1014, 1019, 1020], "standard_t": 96, "s_pca_": 96, "s_ica_": 96, "plot_sampl": [96, 247], "axis_list": 96, "x_axi": [96, 204, 260], "y_axi": [96, 204], "quiver": 96, "hline": 96, "set_zord": 96, "09": [96, 104, 166, 170, 215, 229, 232, 269, 296, 342, 395, 717, 819, 964, 974, 978], "415": [96, 106, 229], "plot_ica_vs_pca": [96, 106], "fragment": 97, "firstli": [97, 356, 381, 640, 999], "undistort": 97, "noiseless": [97, 962], "pursuit": [97, 163, 174, 215, 400, 457, 509, 514, 520, 525, 531, 647, 648, 668, 669, 986, 1001, 1005], "omp": [97, 104, 195, 400, 514, 520, 525, 531, 647, 648, 668, 669, 986, 1001, 1005, 1013], "promin": [97, 383], "reminisc": 97, "downsampl": [97, 234], "show_with_diff": 97, "puor": 97, "22692": 97, "dico": 97, "n_iter_": [97, 204, 244, 383, 424, 430, 431, 432, 454, 455, 465, 466, 467, 514, 515, 516, 519, 520, 521, 522, 523, 526, 544, 545, 610, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 659, 660, 661, 662, 663, 673, 675, 777, 778, 830, 838, 839, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 1009, 1012, 1013, 1015, 1018, 1019, 1021], "n_steps_": [97, 432, 520, 521, 1018], "reconstruct_from_patches_2d": [97, 403, 566], "intercept": [97, 188, 205, 213, 337, 383, 465, 466, 467, 532, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 856, 860, 863, 881, 882, 888, 960, 962, 964, 969, 978, 979, 1008, 1010, 1014, 1015], "transform_algorithm": [97, 104, 514, 520, 525, 1021], "n1": 97, "atom": [97, 104, 400, 514, 520, 522, 525, 526, 528, 529, 636, 646, 667, 960, 1005, 1018], "transform_n_nonzero_coef": [97, 104, 514, 520, 525], "n2": 97, "n4": 97, "transform_alpha": [97, 104, 514, 520, 525, 1018], "set_param": [97, 105, 113, 118, 121, 167, 168, 176, 184, 185, 189, 200, 204, 230, 269, 308, 331, 342, 373, 383, 395, 396, 402, 405, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 954, 970, 990, 997, 1005, 1011, 1012, 1013, 1018, 1019], "282": [97, 106, 995, 1005], "plot_image_denois": [97, 106], "ipca": [98, 516, 517], "flip": [98, 565, 724, 918, 966, 1009, 1018], "incrementalpca": [98, 358, 400, 516, 518, 522, 524, 527, 1009, 1012, 1013, 1015, 1016, 1019], "x_ipca": 98, "x_pca": 98, "turquois": [98, 103, 104, 123, 202, 213, 220, 243, 244, 263], "x_transform": [98, 126, 468, 514, 515, 516, 517, 518, 520, 522, 526, 549, 621, 622, 671, 672, 673, 674], "nmean": 98, "shadow": [98, 103, 104, 220, 318, 335, 343, 403], "scatterpoint": [98, 103, 220, 243, 318], "353": [98, 106, 214, 215, 999], "plot_incremental_pca": [98, 106], "kernal": 99, "nest": [99, 109, 163, 185, 249, 272, 357, 376, 383, 386, 395, 399, 405, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 445, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 487, 502, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 784, 793, 803, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 932, 953, 964, 967, 1005, 1006, 1009, 1011, 1012, 1013, 1019], "train_ax": 99, "test_ax": 99, "straight": [99, 186, 192, 194, 253, 356], "inner": [99, 121, 257, 261, 318, 356, 403, 427, 497, 529, 565, 572, 631, 652, 663, 757, 759, 956, 964, 974, 979, 1006, 1009, 1019], "x_test_kernel_pca": 99, "orig_data_ax": 99, "pca_proj_ax": 99, "kernel_pca_proj_ax": 99, "unfold": [99, 373, 961], "untangl": 99, "mind": [99, 165, 166, 167, 214, 302, 303, 341, 342, 352, 370, 389, 397, 399, 402, 629, 630, 687, 960, 979, 984, 990, 997], "investig": [99, 105, 161, 336, 370, 960], "pca_back_proj_ax": 99, "kernel_pca_back_proj_ax": 99, "reli": [99, 118, 145, 169, 184, 185, 276, 309, 313, 341, 356, 357, 372, 375, 378, 379, 381, 383, 391, 392, 395, 400, 402, 403, 532, 568, 569, 576, 580, 590, 591, 805, 808, 846, 930, 953, 956, 958, 960, 964, 967, 974, 979, 988, 1013, 1014, 1015, 1019, 1021], "analyt": [99, 400, 405, 515, 603, 691, 954, 958, 964, 983, 988], "kernelridg": [99, 148, 231, 655, 957, 1009], "relianc": 99, "965": [99, 106, 964], "plot_kernel_pca": [99, 106], "aid": [100, 253, 395, 772, 773, 961, 988, 1005, 1017], "kevin": [100, 626, 1007, 1009, 1011, 1012, 1015, 1016, 1017, 1019, 1020], "hugh": [100, 856, 1007, 1018], "pdf": [100, 145, 256, 281, 298, 367, 370, 395, 404, 426, 432, 514, 517, 520, 524, 624, 627, 632, 641, 647, 649, 650, 654, 659, 662, 665, 666, 668, 669, 675, 818, 819, 830, 837, 874, 876, 960, 977, 980, 987, 1005], "30000": [100, 365], "pdf_z": 100, "plot_fig": [100, 193], "fig_num": [100, 193], "pca_scor": [100, 102], "vt": [100, 533], "full_matric": 100, "x_pca_axi": 100, "y_pca_axi": 100, "z_pca_axi": 100, "x_pca_plan": 100, "y_pca_plan": 100, "z_pca_plan": 100, "plot_surfac": [100, 167, 193], "237": [100, 106, 997], "plot_pca_3d": [100, 106], "cla": 101, "120": [101, 106, 124, 183, 215, 218, 404, 573, 1005], "plot_pca_iri": [101, 106], "homoscedast": [102, 228, 302, 964, 1013], "succe": 102, "subspac": [102, 398, 402, 435, 498, 538, 539, 674, 678, 918, 958, 967, 970, 976, 988, 998], "overestim": [102, 352, 399], "circumst": [102, 214, 967, 984], "nip": [102, 367, 498, 524, 549, 624, 964], "604": [102, 524], "minka": [102, 524, 960], "deni": [102, 1007, 1008, 1012, 1013, 1014, 1020], "engemann": [102, 1007, 1008, 1012], "x_homo": 102, "x_hetero": 102, "cross_val_scor": [102, 135, 160, 161, 163, 249, 252, 261, 270, 272, 331, 352, 370, 372, 381, 399, 402, 503, 558, 686, 724, 779, 802, 804, 889, 890, 953, 964, 994, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1017, 1018], "fa_scor": 102, "shrunk_cov_scor": 102, "lw_score": 102, "n_components_pca": 102, "n_components_fa": 102, "n_components_pca_ml": 102, "axhlin": [102, 134, 186, 255, 259], "violet": 102, "plot_pca_vs_fa_model_select": [102, 106], "flower": [103, 265, 489, 490, 964, 984], "92461872": 103, "05306648": 103, "x_r": [103, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "x_r2": 103, "plot_pca_vs_lda": [103, 106], "ricker": 104, "sparsecod": [104, 400, 514, 520, 523, 531, 1012, 1013, 1015, 1017, 1019], "mexican": 104, "piecewis": [104, 311, 392, 955, 960, 974, 980], "matter": [104, 247, 352, 395, 402, 550, 651, 659, 661, 960, 1009], "motiv": [104, 370, 372, 383, 402, 956, 964, 974, 988, 1018], "heavier": [104, 397, 960], "subsampl": [104, 120, 123, 167, 196, 213, 214, 252, 310, 441, 542, 543, 544, 545, 546, 615, 662, 684, 782, 783, 807, 846, 858, 870, 897, 907, 956, 960, 985, 987, 1005, 1015, 1019], "ricker_funct": 104, "ricker_matrix": 104, "d_fix": 104, "d_multi": 104, "first_quart": 104, "transform_n_nozero_coef": 104, "lasso_lar": [104, 514, 520, 525, 531, 1015], "n_nonzero": 104, "coder": [104, 525, 699], "flatnonzero": [104, 184, 255, 264, 265, 763], "soft": [104, 129, 130, 370, 383, 552, 553, 877, 885, 978, 988, 1010], "debias": 104, "lstsq": [104, 370, 640, 653], "rcond": 104, "465": [104, 106], "plot_sparse_cod": [104, 106], "uncov": [105, 678], "inher": [105, 191, 352, 395, 400, 954, 956, 958, 959, 961, 965], "varimax": [105, 400, 515, 1017], "jona": [105, 1017], "sassenhagen": [105, 1017], "set_yticklabel": [105, 151, 160, 161, 169, 267, 343], "n_comp": [105, 172], "unrot": 105, "52106591": 105, "37741762": 105, "26934744": 105, "92329566": 105, "5804131": 105, "02449161": 105, "56485654": 105, "06694199": 105, "88096009": 105, "4472869": 105, "41691605": 105, "55390036": 105, "99918858": 105, "01915283": 105, "96228895": 105, "05840206": 105, "98633022": 105, "05752333": 105, "16052385": 105, "67443065": 105, "90809432": 105, "41726413": 105, "85857475": 105, "43847489": 105, "552": [105, 106], "plot_varimax_fa": [105, 106], "758": 106, "auto_examples_decomposit": 106, "predictor": [107, 132, 163, 196, 214, 372, 382, 383, 396, 398, 399, 402, 405, 449, 450, 465, 466, 467, 479, 499, 500, 501, 538, 539, 545, 548, 551, 585, 593, 613, 615, 616, 631, 636, 640, 652, 656, 663, 684, 802, 804, 813, 814, 842, 854, 855, 861, 938, 960, 965, 1006, 1012, 1015], "stack": [107, 132, 163, 281, 350, 369, 378, 381, 383, 401, 447, 449, 450, 479, 498, 545, 548, 550, 551, 595, 610, 611, 613, 636, 656, 684, 802, 804, 842, 846, 854, 855, 861, 938, 954, 984, 985, 986, 987, 1001, 1008, 1012, 1013, 1014, 1015, 1016], "versu": [107, 128, 132, 163, 166, 174, 205, 211, 215, 231, 244, 249, 272, 284, 315, 322, 395, 399, 402, 405, 487, 503, 517, 536, 539, 593, 622, 641, 642, 649, 651, 657, 658, 659, 660, 765, 776, 779, 784, 803, 807, 813, 842, 877, 878, 885, 886, 889, 890, 953, 960, 964, 965, 970, 977, 978, 979, 997, 1013], "isolationforest": [107, 132, 163, 225, 234, 614, 807, 885, 970, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1021], "oob": [107, 120, 132, 163, 402, 498, 547, 985, 1007, 1018], "votingclassifi": [107, 132, 163, 487, 547, 553, 614, 641, 819, 823, 886, 889, 953, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019], "vote": [107, 129, 130, 132, 163, 274, 383, 384, 484, 538, 539, 540, 543, 547, 548, 552, 553, 640, 809, 823, 824, 829, 831, 965, 967, 986, 997, 1001, 1008, 1010, 1015], "hasti": [108, 109, 112, 113, 119, 123, 145, 184, 255, 367, 399, 402, 502, 503, 536, 542, 543, 611, 639, 704, 705, 706, 811, 828, 874, 889, 890, 954, 958, 960, 965, 971, 976, 978, 980], "2009": [108, 109, 112, 113, 123, 395, 399, 400, 402, 403, 502, 503, 511, 514, 520, 521, 523, 524, 527, 530, 536, 542, 543, 618, 654, 662, 679, 812, 889, 890, 917, 918, 960, 964, 965, 971, 980], "tibshirani": [108, 112, 113, 123, 145, 184, 255, 367, 399, 402, 503, 542, 543, 611, 639, 704, 705, 706, 811, 828, 889, 890, 954, 958, 960, 965, 971, 980], "friedman": [108, 112, 113, 123, 255, 397, 399, 402, 461, 499, 500, 501, 503, 541, 542, 543, 548, 576, 577, 811, 889, 890, 892, 958, 960, 965, 971, 980], "ed": [108, 113, 123, 402, 503, 542, 543, 976, 1005, 1012], "springer": [108, 112, 113, 123, 255, 393, 399, 400, 402, 503, 518, 542, 543, 673, 677, 679, 688, 703, 708, 722, 723, 738, 777, 889, 890, 961, 964, 965, 971, 980], "zhu": [108, 109, 402, 502, 536, 641, 876], "zou": [108, 109, 184, 402, 502, 536, 639, 960, 978], "rosset": [108, 109, 402, 502, 536], "make_hastie_10_2": [108, 119, 123, 260, 366, 402, 542, 971], "12_000": 108, "Be": [108, 142, 157, 341, 370, 397, 550, 551, 631, 637, 638, 639, 641, 642, 652, 663, 687, 797, 798, 856, 974, 1002, 1006], "stump": [108, 111, 402, 542, 1016], "2_000": 108, "dt_stump": 108, "min_samples_leaf": [108, 120, 121, 168, 308, 311, 346, 402, 540, 541, 542, 543, 544, 545, 547, 548, 549, 889, 890, 891, 892, 980, 1011], "dt_stump_err": 108, "dt_err": 108, "ada_discret": 108, "adaboostclassifieradaboostclassifi": 108, "decisiontreeclassifierdecisiontreeclassifi": [108, 350], "ada_r": 108, "zero_one_loss": [108, 370, 686, 716, 964, 1006, 1007, 1008], "ada_discrete_err": 108, "staged_predict": [108, 109, 122, 402, 536, 537, 542, 543, 544, 545, 1005, 1017], "ada_discrete_err_train": 108, "ada_real_err": 108, "ada_real_err_train": 108, "leg": 108, "fancybox": [108, 335], "get_fram": 108, "994": [108, 123, 125, 132, 276], "plot_adaboost_hastie_10_2": [108, 132], "sphere": [109, 163, 216, 217, 223, 342, 401, 502, 572, 671, 672, 673, 674, 675, 746, 904, 958, 962, 967], "roughli": [109, 121, 185, 247, 266, 276, 303, 356, 383, 400, 403, 502, 961, 1005], "samm": [109, 111, 402, 536], "13000": 109, "bdt_real": 109, "bdt_discret": 109, "real_test_error": 109, "discrete_test_error": 109, "real_test_predict": 109, "discrete_test_predict": 109, "n_trees_discret": 109, "n_trees_real": 109, "termin": [109, 357, 375, 376, 378, 386, 395, 431, 444, 536, 537, 541, 542, 543, 546, 548, 649, 650, 651, 659, 661, 838, 839, 890, 892, 970, 980], "alwai": [109, 118, 121, 175, 196, 214, 222, 229, 259, 262, 266, 305, 325, 342, 352, 356, 357, 364, 370, 371, 372, 376, 382, 383, 386, 393, 395, 396, 399, 402, 403, 404, 405, 416, 427, 432, 447, 448, 450, 452, 465, 466, 467, 471, 479, 491, 492, 527, 532, 534, 535, 537, 539, 541, 542, 543, 544, 545, 547, 548, 551, 553, 564, 571, 572, 574, 577, 594, 610, 611, 613, 615, 616, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 654, 655, 656, 659, 661, 662, 675, 678, 688, 692, 698, 704, 705, 706, 714, 716, 717, 721, 764, 767, 768, 777, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 814, 815, 824, 825, 832, 833, 839, 846, 854, 859, 861, 874, 882, 883, 884, 886, 887, 889, 890, 892, 919, 953, 954, 956, 958, 960, 963, 964, 967, 970, 972, 976, 977, 979, 980, 988, 990, 997, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "crop": [109, 378, 1020], "discrete_estimator_error": 109, "estimator_errors_": [109, 536, 537], "real_estimator_error": 109, "discrete_estimator_weight": 109, "estimator_weights_": [109, 536, 537], "62": [109, 167, 172, 214, 250, 295, 313, 317, 352, 365, 395, 476, 477, 821, 822, 1008], "778": [109, 132], "plot_adaboost_multiclass": [109, 132], "1d": [110, 112, 163, 167, 197, 229, 277, 290, 335, 348, 370, 377, 379, 382, 383, 396, 401, 447, 450, 600, 616, 636, 640, 643, 646, 667, 686, 695, 696, 702, 711, 712, 716, 720, 724, 765, 766, 769, 776, 823, 824, 825, 826, 827, 829, 831, 832, 833, 846, 897, 901, 902, 927, 951, 965, 990, 997, 1005, 1010, 1011, 1012, 1014, 1018, 1019], "299": [110, 141, 146, 663], "drucker": [110, 402, 537], "1997": [110, 365, 400, 402, 405, 518, 537, 673, 677, 960, 961, 964], "dummi": [110, 196, 214, 259, 359, 372, 375, 390, 854, 863, 974, 980, 1001, 1006, 1008, 1009, 1010, 1012], "decisiontreeregressor": [110, 112, 235, 299, 308, 348, 349, 375, 537, 539, 541, 542, 543, 545, 548, 615, 616, 889, 892, 894, 913, 980, 1006, 1007, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "adaboostregressor": [110, 402, 536, 545, 1007, 1008, 1011, 1014, 1015, 1018, 1020], "regr_1": [110, 348, 349], "regr_2": [110, 348, 349], "y_1": [110, 348, 349, 398, 964, 968, 978], "y_2": [110, 348, 349, 968], "plot_adaboost_regress": [110, 132], "puriti": [111, 893, 895, 980], "plot_adaboost_twoclass": [111, 132], "bdt": 111, "plot_color": [111, 347], "br": 111, "plot_step": [111, 117, 347], "class_nam": [111, 250, 893, 894, 895, 980, 1021], "xx0": [111, 614], "twoclass_output": 111, "plot_rang": 111, "897": [111, 132], "irreduc": [112, 964], "light": [112, 365], "beam": [112, 1005], "pointwis": [112, 155, 406, 428], "offset": [112, 172, 381, 397, 400, 452, 491, 492, 546, 615, 616, 624, 625, 627, 628, 660, 710, 757, 759, 827, 885, 964, 978, 997, 1013], "narrow": [112, 121, 298, 300, 375, 821, 822], "tradeoff": [112, 163, 230, 249, 263, 264, 272, 341, 356, 378, 401, 498, 547, 681, 685, 709, 771, 807, 842, 861, 881, 961, 997, 1014, 1017], "bootstrap": [112, 113, 120, 160, 259, 268, 310, 399, 402, 537, 538, 539, 540, 541, 546, 547, 548, 907, 935, 960, 1005, 1006, 1008, 1010, 1013, 1015, 1018], "stem": [112, 168, 180, 195, 247, 399, 403, 956, 966], "0255": 112, "0003": 112, "0152": 112, "0098": 112, "0196": 112, "0004": [112, 303], "0092": 112, "baggingregressor": [112, 402, 538, 892, 1008, 1011, 1013, 1016, 1020, 1021], "n_repeat": [112, 115, 122, 144, 166, 168, 169, 256, 308, 399, 498, 617, 794, 795, 972], "knn": [112, 129, 136, 160, 284, 285, 288, 303, 310, 318, 341, 402, 585, 830, 876, 877, 967, 977, 997, 1011], "y_predict": [112, 372, 1005], "y_error": [112, 202], "y_nois": 112, "y_bia": 112, "y_var": 112, "plot_bias_vari": [112, 132], "z_i": [113, 968], "y_i": [113, 311, 336, 393, 402, 955, 956, 960, 964, 968, 978, 979, 980], "whilst": [113, 219], "practition": 113, "suitabl": [113, 121, 182, 293, 343, 364, 365, 376, 379, 395, 400, 403, 435, 445, 451, 470, 488, 491, 610, 618, 816, 817, 820, 855, 856, 879, 929, 933, 958, 960, 963, 974, 976, 978, 984, 987, 999, 1019, 1020], "p592": 113, "593": [113, 294, 296], "kian": [113, 1010, 1020], "ho": [113, 402, 538, 539, 964, 1010, 1013, 1014, 1019], "hui": [113, 184, 521, 523, 530, 639, 960], "ordereddict": 113, "123": [113, 130, 352, 402, 499, 500, 501, 538, 539, 814, 965, 972], "warm_start": [113, 152, 189, 311, 372, 376, 383, 402, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 593, 629, 631, 632, 635, 641, 643, 645, 649, 650, 651, 652, 659, 660, 661, 663, 777, 778, 830, 838, 839, 970, 986, 1001, 1005, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1019, 1021], "disabl": [113, 305, 341, 368, 370, 403, 432, 443, 520, 521, 522, 529, 542, 543, 544, 545, 840, 901, 902, 974, 1011, 1014, 1018, 1020], "track": [113, 120, 317, 370, 373, 374, 386, 391, 517, 933, 965, 984, 985, 1012, 1015], "trajectori": 113, "ensemble_clf": 113, "oob_scor": [113, 402, 538, 539, 540, 541, 547, 548, 1010, 1012], "log2": [113, 206, 236, 540, 541, 542, 543, 547, 548, 889, 890, 891, 892, 965], "error_r": 113, "min_estim": 113, "max_estim": 113, "oob_error": 113, "oob_score_": [113, 538, 539, 540, 541, 542, 543, 547, 548, 1007, 1021], "clf_err": 113, "263": [113, 132, 193, 215], "plot_ensemble_oob": [113, 132], "betatim": [114, 127, 1020], "leak": [114, 261, 341, 352, 396, 399, 841, 866, 867, 869, 870, 871, 872, 974, 1005, 1012, 1015], "80_000": 114, "x_full_train": 114, "y_full_train": 114, "x_train_ensembl": 114, "x_train_linear": 114, "y_train_ensembl": 114, "y_train_linear": 114, "gradientboostingclassifi": [114, 119, 120, 123, 300, 352, 381, 402, 536, 544, 615, 616, 965, 971, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021], "random_forest": 114, "gradient_boost": [114, 1006, 1007, 1008, 1014], "histgradientboostingclassifi": [114, 308, 309, 310, 311, 313, 357, 402, 542, 615, 616, 954, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "randomtreesembed": [114, 126, 218, 402, 891, 1006, 1013, 1014, 1018, 1019, 1020], "random_tree_embed": 114, "rt_model": 114, "randomtreesembeddingrandomtreesembed": 114, "rf_appli": 114, "rf_leaves_yield": 114, "kw_arg": [114, 845, 974, 1011], "rf_model": 114, "0x7fd19818e0d0": 114, "functiontransformerfunctiontransform": 114, "gbdt_appli": 114, "gbdt_leaves_yield": 114, "gbdt_model": 114, "0x7fd183b80a60": 114, "roccurvedisplai": [114, 234, 237, 253, 265, 266, 308, 377, 770, 771, 970, 1002, 1015, 1021], "rt": 114, "rf": [114, 127, 130, 131, 168, 308, 352, 402, 550, 552, 553], "gbdt": [114, 167, 308, 309, 375, 402], "model_displai": 114, "630": [114, 132, 706], "plot_feature_transform": [114, 132], "artifici": [115, 118, 125, 161, 217, 231, 295, 341, 365, 366, 367, 375, 392, 394, 395, 399, 400, 405, 518, 679, 811, 838, 839, 957, 961, 963, 965, 971, 976, 980, 985, 988, 1005], "feature_importances_": [115, 116, 122, 145, 168, 169, 383, 402, 404, 536, 537, 540, 541, 542, 543, 547, 548, 549, 576, 577, 580, 889, 890, 891, 892, 1007, 1010, 1014], "estimators_": [115, 117, 232, 308, 383, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 809, 810, 811, 812, 813, 814, 815, 1006, 1012, 1019], "forest_import": 115, "mdi": [115, 122, 163, 164, 169, 170, 402, 447, 479, 547, 613, 617, 807, 841, 855, 972], "overcom": [115, 356, 403], "permutation_import": [115, 116, 122, 168, 169, 308, 402, 536, 537, 540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 972, 1015, 1017, 1018], "importances_mean": [115, 122, 168, 169, 308, 617, 972], "importances_std": [115, 617, 972], "omit": [115, 165, 166, 321, 375, 408, 458, 517, 649, 651, 659, 786, 788, 809, 810, 813, 816, 817, 818, 819, 820, 838, 962, 969], "815": [115, 132], "plot_forest_import": [115, 132], "hotter": 116, "job": [116, 244, 370, 374, 378, 402, 406, 421, 428, 431, 433, 435, 440, 441, 444, 447, 450, 451, 455, 514, 518, 519, 520, 522, 525, 526, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 585, 593, 617, 622, 640, 671, 672, 673, 674, 675, 676, 677, 756, 760, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 840, 843, 876, 877, 879, 930, 988, 992], "five": [116, 242, 317, 320, 365, 514, 522, 528, 961, 967, 979, 988, 1005], "drawback": [116, 213, 956, 959], "img_shap": 116, "imp_reshap": 116, "225": [116, 402], "met": [116, 372, 404, 517, 524, 610, 654, 960, 964, 1013], "197": [116, 132, 405], "plot_forest_importances_fac": [116, 132], "third": [117, 122, 140, 145, 156, 214, 225, 247, 281, 300, 357, 365, 369, 381, 384, 403, 517, 571, 572, 573, 574, 781, 782, 783, 788, 823, 824, 825, 827, 829, 859, 871, 932, 953, 975, 982, 1005, 1016], "fourth": [117, 990], "descend": [117, 610, 980, 1015], "extratreesclassifi": [117, 126, 402, 404, 541, 547, 549, 891, 892, 965, 1008, 1009, 1013, 1014, 1015, 1018, 1019, 1020, 1021], "decisiontre": [117, 1010], "consol": [117, 368, 991], "worth": [117, 167, 196, 370, 378, 988], "extratre": [117, 126, 356, 1008], "sequenti": [117, 139, 146, 163, 190, 257, 310, 368, 400, 402, 403, 484, 517, 576, 580, 585, 586, 588, 589, 629, 630, 635, 636, 643, 644, 645, 646, 656, 841, 954, 972, 978, 984, 986, 1001, 1005, 1014, 1017], "9266666666666666": 117, "8666666666666667": 117, "9933333333333333": 117, "rdylbu": [117, 347], "plot_step_coars": 117, "plot_idx": 117, "model_titl": 117, "model_detail": 117, "blend": [117, 128, 304, 383, 399, 984], "estimator_alpha": 117, "coarser": [117, 121], "regularli": [117, 381, 966], "xx_coarser": 117, "yy_coars": 117, "z_points_coars": 117, "cs_point": 117, "831": [117, 132], "plot_forest_iri": [117, 132], "equidist": [118, 675], "lowa": 118, "sale": [118, 256, 964, 988], "42165": 118, "categorical_columns_subset": 118, "bldgtype": 118, "garagefinish": 118, "lotconfig": 118, "masvnrtyp": [118, 128], "housestyl": [118, 128], "fireplacequ": 118, "extercond": 118, "exterqu": [118, 128], "poolqc": 118, "numerical_columns_subset": 118, "3ssnporch": 118, "fireplac": 118, "bsmthalfbath": 118, "halfbath": 118, "garagecar": [118, 128], "totrmsabvgrd": 118, "bsmtfinsf1": [118, 128], "bsmtfinsf2": 118, "grlivarea": 118, "screenporch": 118, "n_categorical_featur": [118, 544, 545, 615, 616], "n_numerical_featur": 118, "1460": [118, 128], "make_column_transform": [118, 128, 166, 227, 309, 396, 447, 449, 1013], "dropper": 118, "hist_drop": 118, "hist_one_hot": 118, "etc": [118, 196, 214, 251, 260, 261, 352, 356, 358, 370, 372, 374, 375, 381, 382, 383, 392, 396, 399, 403, 472, 486, 540, 541, 547, 548, 651, 659, 675, 701, 753, 779, 793, 812, 815, 845, 856, 889, 890, 891, 892, 893, 895, 901, 902, 912, 953, 954, 958, 964, 967, 984, 985, 988, 1005, 1012, 1014, 1015], "use_encoded_valu": [118, 128, 168, 304, 855, 974, 1017], "unknown_valu": [118, 128, 168, 304, 855, 974, 1017, 1019, 1020], "hist_ordin": 118, "n_unique_categori": [118, 304], "hist_n": 118, "mean_absolute_percentage_error": [118, 964, 1017, 1019], "neg_mean_absolute_percentage_error": [118, 964, 972], "n_cv_fold": [118, 304, 785, 805, 808], "dropped_result": 118, "one_hot_result": 118, "ordinal_result": 118, "native_result": 118, "plot_result": [118, 241, 242, 247], "figure_titl": 118, "plot_info": 118, "test_scor": [118, 120, 122, 204, 255, 258, 271, 304, 336, 346, 382, 399, 785, 804, 805, 808], "y_limit": 118, "mape_cv_mean": 118, "mape_cv_std": 118, "c0": [118, 228, 304], "slowest": [118, 917, 918], "theori": [118, 231, 246, 336, 367, 394, 395, 399, 402, 673, 677, 708, 738, 873, 874, 918, 953, 960, 961, 963, 964, 965, 979, 980], "poorer": [118, 352, 400], "slight": [118, 201, 310, 402, 432, 1015], "acf": 118, "bde": 118, "isol": [118, 124, 225, 234, 342, 368, 370, 376, 386, 546, 827, 885, 1014, 1015], "bcde": 118, "histgradientboostingregressor__max_depth": 118, "histgradientboostingregressor__max_it": 118, "altogeth": [118, 376, 1013], "656": [118, 132, 365], "plot_gradient_boosting_categor": [118, 132], "suffici": [119, 128, 204, 270, 328, 356, 383, 395, 404, 515, 529, 640, 665, 666, 798, 799, 965, 967, 985, 1014, 1020], "validation_fract": [119, 204, 311, 402, 542, 543, 544, 545, 649, 650, 651, 659, 661, 838, 839, 978, 1013, 1019], "denot": [119, 379, 383, 386, 393, 399, 402, 571, 572, 574, 779, 785, 793, 854, 855, 949, 953, 956, 960, 962, 964, 965, 974, 977, 990], "kept": [119, 246, 276, 336, 364, 374, 389, 405, 479, 518, 521, 523, 524, 529, 530, 580, 593, 594, 602, 603, 627, 678, 777, 778, 902, 974, 1013, 1014], "asid": [119, 204, 389, 542, 543, 544, 545, 649, 650, 651, 659, 661, 838, 839], "until": [119, 145, 204, 268, 310, 312, 375, 383, 384, 392, 395, 399, 404, 405, 491, 492, 540, 541, 542, 543, 547, 548, 549, 576, 629, 630, 635, 636, 641, 642, 643, 644, 645, 646, 649, 651, 654, 659, 660, 661, 677, 777, 778, 782, 783, 838, 839, 878, 881, 889, 890, 891, 892, 939, 953, 960, 961, 969, 977, 980, 999, 1008, 1012, 1013, 1019], "n_estimators_": [119, 542, 543], "vighnesh": [119, 1010, 1011, 1013], "birodkar": [119, 1010, 1011, 1013], "vighneshbirodkar": 119, "rvraghav93": [119, 260, 298], "data_list": 119, "n_gb": 119, "score_gb": 119, "time_gb": 119, "n_gbe": 119, "gbe": 119, "gb": [119, 131, 402, 536, 616], "bar_width": 119, "bar1": 119, "crimson": 119, "bar2": 119, "coral": 119, "n_est": 119, "max_i": [119, 232, 966], "592": [119, 132, 594, 597, 608, 971], "plot_gradient_boosting_early_stop": [119, 132], "fly": [120, 375, 378, 491, 492, 565, 1005, 1007, 1014], "pessimist": [120, 402], "cumul": [120, 196, 214, 395, 708, 717, 738, 858, 870, 974, 978, 1012, 1014, 1015], "demand": [120, 403, 779, 793, 802, 803], "6840": 120, "special": [120, 166, 186, 214, 286, 304, 328, 364, 366, 372, 376, 381, 383, 395, 398, 400, 447, 450, 536, 538, 542, 802, 893, 953, 958, 960, 962, 963, 964, 965, 967, 980, 1012, 1015, 1017, 1019], "expit": [120, 186, 402, 544, 960, 1012], "ridgewai": [120, 402], "gbm": [120, 402, 1008], "x3": [120, 234, 396, 998], "binomi": [120, 123, 402, 536, 542, 544, 960, 1019], "acc": 120, "heldout_scor": 120, "devianc": [120, 123, 196, 214, 402, 536, 541, 542, 544, 545, 548, 631, 652, 663, 704, 705, 706, 729, 731, 734, 890, 892, 960, 980, 1006, 1015, 1016, 1018, 1019, 1021], "y_proba": [120, 123, 303, 383, 841], "staged_predict_proba": [120, 123, 536, 542, 544, 1005], "cv_estim": 120, "cv_clf": 120, "val_scor": 120, "cv_score": 120, "cumsum": [120, 196, 214, 1012], "oob_improvement_": [120, 402, 542, 543, 1007], "oob_best_it": 120, "test_best_it": 120, "cv_best_it": 120, "brew": [120, 368, 386, 980], "oob_color": 120, "174": [120, 178, 215, 229, 295, 376, 567], "test_color": 120, "127": [120, 1005], "201": [120, 367, 567], "cv_color": 120, "253": [120, 517], "192": [120, 376, 1005], "oob_lin": 120, "test_lin": 120, "cv_line": 120, "dashdot": [120, 148, 151], "xticks_po": 120, "tolist": [120, 160, 169, 255, 310, 365], "xticks_label": 120, "156": [120, 132, 166, 367], "plot_gradient_boosting_oob": [120, 132], "atleast_2d": [121, 372], "expected_i": 121, "amplitud": [121, 153, 155, 190, 405, 960], "lognorm": [121, 154, 177, 245, 302, 974], "tail": [121, 161, 166, 196, 198, 256, 298, 504, 507, 960], "imposs": [121, 343, 985], "mean_pinball_loss": [121, 311, 960, 964, 1018], "all_model": 121, "min_samples_split": [121, 122, 123, 260, 268, 299, 310, 402, 540, 541, 542, 543, 547, 548, 549, 782, 783, 889, 890, 891, 892, 953, 980, 1011], "gbr": 121, "gbr_l": 121, "5th": [121, 156], "95th": [121, 730], "y_med": 121, "fill_between": [121, 134, 148, 153, 155, 157, 175, 176, 214, 256, 258, 259, 260, 266, 271, 785], "unfortun": [121, 165, 166, 214, 378, 381, 402, 491, 492], "sinoisoid": 121, "highlight_min": [121, 185], "font": [121, 185, 210, 230, 893, 895], "pbl": 121, "nbsp": [121, 185], "715413": 121, "750348": 121, "127128": 121, "253445": 121, "379763": 121, "933253": 121, "305438": 121, "622811": 121, "940184": 121, "827917": 121, "909909": 121, "145957": 121, "382005": 121, "667219": 121, "asymmetr": [121, 198, 383, 1010], "signficiantli": 121, "nor": [121, 259, 341, 352, 356, 375, 381, 403, 421, 577, 905, 968, 980, 1016], "917281": 121, "767498": 121, "617715": 121, "692901": 121, "144204": 121, "245961": 121, "347717": 121, "648026": 121, "412021": 121, "607752": 121, "803483": 121, "874771": 121, "354394": 121, "355445": 121, "356497": 121, "852774": 121, "underestim": [121, 167, 196, 214, 256, 370], "extrem": [121, 196, 198, 233, 298, 305, 319, 342, 370, 373, 395, 400, 540, 541, 547, 548, 549, 615, 616, 662, 706, 734, 891, 892, 893, 895, 964, 966], "coverage_fract": 121, "y_low": 121, "y_high": 121, "868": [121, 141], "hypothesi": [121, 256, 262, 336, 399, 673, 677, 806, 961], "pinbal": [121, 311, 545, 653, 705, 730, 960, 1018, 1019], "experiment": [121, 160, 161, 196, 267, 268, 310, 311, 359, 370, 372, 373, 380, 381, 383, 399, 479, 532, 610, 679, 782, 783, 932, 934, 953, 954, 960, 963, 964, 984, 985, 993, 1001, 1013, 1014, 1017, 1018, 1019, 1020, 1021], "enable_halving_search_cv": [121, 267, 268, 310, 374, 782, 783, 953], "halvingrandomsearchcv": [121, 268, 310, 562, 782, 953, 1017, 1019, 1020], "make_scor": [121, 260, 399, 779, 803, 804, 964, 1014], "neg_mean_pinball_loss_05p_scor": 121, "greater_is_bett": [121, 724, 964], "search_05p": 121, "max_resourc": [121, 782, 783, 953], "min_resourc": [121, 782, 783], "redefin": [121, 166], "neg_mean_pinball_loss_95p_scor": 121, "search_95p": 121, "estimator__alpha": 121, "did": [121, 148, 166, 169, 196, 204, 214, 242, 365, 610, 695, 798, 883, 998, 1006, 1007, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020], "untun": 121, "joint": [121, 163, 167, 174, 215, 217, 396, 594, 635, 645, 675, 816, 817, 818, 819, 820, 881, 960, 961, 965, 969, 971, 975, 1005], "9026666666666666": 121, "796": 121, "sadli": 121, "plot_gradient_boosting_quantil": [121, 132], "tackl": [122, 256, 357, 370, 395, 818, 966, 988, 993], "katrina": [122, 1016], "ni": [122, 1011, 1016], "nilichen": 122, "reg": [122, 166, 176, 299, 309, 333, 402, 541, 543, 551, 633, 634, 636, 637, 638, 639, 640, 646, 647, 648, 653, 654, 661, 662, 672, 676, 892, 960, 1010], "3025": 122, "7877": 122, "train_score_": [122, 402, 542, 543, 544, 545], "impur": [122, 350, 385, 402, 404, 536, 537, 540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 893, 895, 980, 1001, 1010, 1011, 1012, 1013], "feature_import": 122, "sorted_idx": [122, 308], "po": [122, 220, 403], "align": [122, 161, 217, 241, 267, 343, 383, 672, 676, 967, 978, 1000, 1001, 1021], "vert": [122, 168, 169, 308, 978], "838": [122, 132], "plot_gradient_boosting_regress": [122, 132], "consider": [123, 149, 152, 251, 257, 263, 370, 405, 602, 779, 793, 953, 966, 970, 978, 988], "return_invers": [123, 372], "original_param": 123, "max_leaf_nod": [123, 196, 311, 350, 402, 540, 541, 542, 543, 544, 545, 547, 548, 549, 889, 890, 891, 892, 1008, 1014, 1016], "test_devi": 123, "plot_gradient_boosting_regular": [123, 132], "anomali": [124, 163, 224, 234, 239, 282, 283, 365, 394, 452, 495, 505, 546, 622, 660, 827, 842, 885, 970, 1011, 1012], "recurs": [124, 139, 146, 163, 346, 372, 394, 395, 399, 424, 425, 426, 429, 446, 485, 498, 546, 576, 577, 580, 585, 615, 616, 641, 798, 886, 964, 967, 970, 971, 980, 986, 998, 1001, 1005, 1015, 1016], "deform": [124, 246, 338], "notat": [124, 383, 396, 400, 403, 573, 695, 960, 964, 990, 1014, 1021], "cluster_1": 124, "cluster_2": 124, "legend_el": [124, 209, 259], "nuniformli": 124, "max_sampl": [124, 160, 402, 538, 539, 540, 541, 546, 547, 548, 617, 1015, 1018, 1021], "isolationforestisolationforest": 124, "ax_": [124, 250, 259, 263, 303, 308, 377, 422, 614, 680, 681, 683, 684, 685, 785], "nof": 124, "664": [124, 132, 367], "plot_isolation_forest": [124, 132], "trend": [125, 153, 167, 228, 293, 405, 988, 1012], "xgboost": [125, 402, 984], "partialdependencedisplai": [125, 167, 235, 309, 310, 311, 313, 377, 616, 971, 1015, 1016, 1017, 1018, 1019, 1020], "f_0": 125, "f_1": [125, 263, 964], "gbdt_no_cst": [125, 309], "histgradientboostingregressorhistgradientboostingregressor": [125, 128, 304, 313], "gbdt_with_monotonic_cst": 125, "monotonic_cst": [125, 309, 311, 402, 544, 545, 1020], "line_kw": [125, 235, 258, 309, 615, 785], "unconstrain": [125, 167, 309, 365, 978], "axes_": [125, 235, 309, 377, 615], "f_idx": 125, "oscil": [125, 167, 201, 395, 424], "specifii": 125, "x_df": 125, "gbdt_with_monotonic_cst_df": 125, "plot_monotonic_constraint": [125, 132], "excel": [126, 364, 370, 673, 677, 960, 988], "bernoullinb": [126, 358, 817, 818, 819, 820, 965, 966, 1006, 1007, 1009, 1012, 1017, 1018, 1020], "hasher": [126, 343, 403], "transformed_grid": 126, "y_grid_pr": 126, "461": [126, 132, 376], "plot_random_forest_embed": [126, 132], "multioutput": [127, 265, 274, 359, 372, 383, 416, 448, 465, 466, 467, 534, 537, 539, 540, 541, 543, 545, 547, 548, 551, 553, 594, 615, 616, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 704, 705, 710, 727, 728, 730, 732, 733, 735, 767, 770, 802, 810, 824, 832, 839, 848, 882, 884, 887, 889, 890, 891, 892, 907, 927, 928, 964, 986, 1001, 1005, 1006, 1007, 1011, 1012, 1018, 1019], "multioutputregressor": [127, 416, 448, 465, 466, 467, 537, 539, 541, 543, 545, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 813, 815, 824, 832, 839, 882, 884, 887, 890, 892, 1011, 1012, 1014, 1016, 1017], "nativ": [127, 160, 357, 365, 383, 402, 544, 545, 813, 814, 932, 960, 964, 984, 1015, 1017], "ever": [127, 379, 402, 988], "centr": 127, "regr_multirf": 127, "regr_rf": 127, "y_multirf": 127, "y_rf": 127, "cornflowerblu": [127, 190, 199, 206, 242, 244, 247, 263, 265, 279, 281, 287, 348, 349], "856": [127, 132], "plot_random_forest_regression_multioutput": [127, 132], "compil": [128, 276, 343, 356, 357, 370, 371, 372, 373, 378, 379, 381, 984, 1005], "dean": [128, 1013, 1019], "cock": [128, 1014], "becam": [128, 384, 1013], "kaggl": [128, 382], "residenti": 128, "iowa": 128, "won": [128, 294, 342, 374, 395, 451, 479, 610, 611, 613, 670, 687, 700, 718, 719, 737, 739, 775, 963, 974, 1010, 1011, 1016], "load_ames_h": 128, "yrsold": 128, "heatingqc": 128, "street": [128, 367], "yearremodadd": 128, "heat": [128, 328, 395, 435, 445, 678], "bsmtunfsf": 128, "mssubclass": 128, "condition2": 128, "garagetyp": 128, "overallqu": 128, "totalbsmtsf": 128, "miscfeatur": 128, "mosold": 128, "cat_selector": 128, "num_selector": 128, "besid": [128, 228, 370, 375, 572, 953, 1013], "cat_tree_processor": 128, "encoded_missing_valu": [128, 168, 855, 974, 1019, 1020], "num_tree_processor": 128, "add_ind": [128, 161, 610, 611, 613, 954, 1014, 1017], "tree_preprocessor": [128, 196], "0x7fd1a8bd52b0": 128, "0x7fd1a8bd5970": 128, "ordinalencoderordinalencod": [128, 167, 168, 304], "cat_linear_processor": 128, "num_linear_processor": 128, "linear_preprocessor": 128, "tediou": 128, "wrote": [128, 365], "lasso_pipelin": 128, "lassocvlassocv": 128, "rf_pipelin": 128, "randomforestregressorrandomforestregressor": 128, "gbdt_pipelin": 128, "stackingregressor": [128, 308, 402, 550, 1015, 1016, 1017, 1018, 1019], "stacking_regressor": 128, "final_estim": [128, 308, 402, 550, 551], "unknown_v": 128, "stackingregressorstackingregressor": 128, "forestcolumntransform": 128, "lassocolumntransform": 128, "boostingcolumntransform": 128, "final_estimatorridgecvridgecv": 128, "cross_val_predict": [128, 252, 308, 393, 399, 402, 421, 550, 551, 803, 804, 1009, 1010, 1011, 1012, 1014, 1016, 1018], "scorer": [128, 214, 260, 372, 383, 399, 402, 544, 545, 577, 585, 617, 642, 656, 658, 694, 714, 715, 724, 779, 782, 783, 785, 793, 803, 804, 805, 808, 953, 960, 964, 972, 985, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "test_": [128, 399], "line_kwarg": [128, 684], "nevalu": 128, "plot_stack_predictor": [128, 132], "exemplari": 129, "eclf": [129, 130, 402], "axarr": [129, 298], "tt": [129, 251, 448], "plot_voting_decision_region": [129, 132], "examplari": 130, "class1_1": 130, "class2_1": 130, "lightgreen": [130, 202, 213], "p3": 130, "p4": 130, "nweight": 130, "542": [130, 132, 367], "plot_voting_proba": [130, 132], "votingregressor": [131, 402, 552, 1014, 1015, 1016, 1019], "cohort": 131, "reg1": [131, 402], "reg2": [131, 402], "reg3": [131, 402], "ereg": [131, 402], "votingregressorvotingregressor": 131, "gbgradientboostingregressorgradientboostingregressor": 131, "rfrandomforestregressorrandomforestregressor": 131, "lrlinearregressionlinearregress": 131, "xt": [131, 276, 383, 610, 612, 779, 782, 783, 793, 825, 833, 841, 846, 851, 858, 870, 899], "pred1": 131, "pred2": 131, "pred3": 131, "pred4": 131, "labelbottom": [131, 256], "285": [131, 132, 266, 272, 317, 706], "plot_voting_regressor": [131, 132], "639": 132, "auto_examples_ensembl": 132, "n_fold": [134, 630, 634, 636, 638, 642, 644, 646, 1006, 1007, 1011], "scores_std": [134, 135, 994], "semilogx": [134, 135, 185, 269, 271], "std_error": 134, "transluc": 134, "31622776601683794": 134, "answer": [134, 165, 256, 370, 381, 708, 738, 964, 980, 988], "extern": [134, 148, 358, 359, 363, 367, 370, 372, 375, 381, 383, 392, 395, 403, 404, 405, 576, 593, 594, 700, 719, 775, 960, 963, 964, 967, 980, 985, 991, 997, 1001, 1013, 1017], "lasso_cv": 134, "k_fold": [134, 994], "maximis": [134, 242, 284, 958, 967], "5f": [134, 312], "Not": [134, 167, 356, 370, 381, 395, 413, 414, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 452, 453, 454, 455, 456, 457, 458, 459, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 546, 549, 552, 553, 564, 565, 566, 571, 572, 574, 610, 611, 612, 613, 660, 671, 672, 673, 674, 676, 750, 774, 777, 778, 779, 782, 783, 793, 818, 821, 822, 825, 826, 827, 829, 833, 845, 853, 856, 857, 859, 873, 874, 885, 964, 970, 984, 1014], "moreov": [134, 154, 300, 312, 352, 374, 395, 399, 405, 874, 934, 964, 988, 1013, 1019, 1020], "substanti": [134, 278, 282, 283, 299, 370, 827, 970, 1009, 1012], "05968": 134, "54209": 134, "04520": 134, "15521": 134, "07880": 134, "45192": 134, "861": [134, 138, 367, 770, 771, 964], "plot_cv_diabet": [134, 138], "this_scor": [135, 331], "892": [135, 138], "plot_cv_digit": [135, 138], "961111": 136, "933333": [136, 830], "plot_digits_classification_exercis": [136, 138], "200j": [137, 332], "354": [137, 138, 242, 248], "plot_iris_exercis": [137, 138], "341": 138, "auto_examples_exercis": 138, "exercis": [138, 358, 359, 367, 370, 484, 485, 487, 488, 635, 636, 641, 779, 784, 803, 823, 886, 991, 1008], "elimin": [139, 146, 163, 394, 395, 399, 431, 485, 498, 576, 577, 580, 585, 641, 782, 783, 798, 886, 950, 964, 986, 988, 1001, 1005], "x_2": [140, 151, 193, 400, 402, 403, 405, 596, 608, 960, 968, 974], "x_3": [140, 974], "irrelev": [140, 352, 376, 397, 402, 404, 587, 722, 964], "agre": [140, 378, 384, 394, 395, 768, 990], "percept": [140, 167, 971], "correctli": [140, 144, 196, 214, 263, 265, 270, 286, 305, 318, 328, 370, 379, 400, 402, 412, 421, 452, 476, 532, 533, 534, 536, 538, 540, 542, 544, 547, 550, 552, 593, 641, 649, 651, 657, 658, 659, 686, 774, 776, 809, 810, 811, 812, 816, 817, 818, 819, 820, 823, 828, 831, 838, 861, 876, 877, 881, 883, 884, 885, 886, 887, 889, 891, 919, 961, 964, 967, 968, 974, 979, 980, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "mutual_info_regress": [140, 312, 404, 575, 578, 579, 582, 583, 592, 1011, 1012, 1017, 1019, 1020, 1021], "f_test": 140, "x_": [140, 149, 247, 256, 308, 372, 398, 400, 610, 618, 876, 877, 960, 966, 971, 1011], "350": [140, 146, 166], "plot_f_test_vs_mi": [140, 146], "examin": [141, 376, 378, 395, 830], "f_classif": [141, 142, 331, 404, 575, 578, 579, 581, 582, 583, 587, 589, 592], "log10": [141, 154, 166, 181, 189, 257, 328], "pvalues_": [141, 575, 578, 579, 581, 582, 583, 1005], "x_indic": 141, "p_": [141, 964, 967, 980], "svm_weight": 141, "789": [141, 344, 402], "clf_select": 141, "svm_weights_select": 141, "get_support": [141, 145, 310, 564, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 1007], "plot_feature_select": [141, 146], "mistak": [142, 317, 352, 395, 399, 717, 852, 866, 867, 869, 870, 871, 872, 960, 965], "anova_filt": 142, "anova_svm": 142, "selectkbestselectkbest": [142, 312], "linearsvclinearsvc": [142, 263], "75790919": 142, "27158706": 142, "26109741": 142, "021": [142, 146], "plot_feature_selection_pipelin": [142, 146], "rfe": [143, 144, 404, 577, 580, 585, 1005, 1009, 1015, 1016, 1017, 1018, 1019, 1021], "n_features_to_select": [143, 145, 310, 404, 576, 585, 1017, 1019], "ranking_": [143, 576, 577], "182": [143, 146, 148, 295, 376, 402], "plot_rfe_digit": [143, 146], "introduct": [144, 214, 254, 359, 370, 399, 400, 403, 573, 770, 771, 816, 820, 960, 962, 964, 966, 983, 991, 997, 1000, 1001], "class_sep": [144, 286, 498], "rfecv": [144, 404, 576, 580, 585, 1009, 1011, 1013, 1015, 1016, 1017, 1018, 1021], "stratifiedkfold": [144, 243, 251, 262, 266, 319, 399, 421, 550, 551, 577, 585, 642, 656, 779, 780, 782, 783, 784, 785, 787, 789, 793, 797, 799, 801, 802, 803, 804, 805, 806, 808, 862, 994, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1018], "min_features_to_select": [144, 577, 1013], "n_features_": [144, 524, 576, 577, 1018, 1020], "n_score": 144, "plateau": [144, 254, 258], "plot_rfe_with_cross_valid": [144, 146], "selectfrommodel": [145, 383, 576, 585, 586, 986, 1001, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1021], "sequentialfeatureselect": 145, "greedi": [145, 402, 404, 430, 432, 443, 542, 543, 585, 960, 980], "442": [145, 161, 342, 367, 484, 997], "descript": [145, 166, 304, 363, 364, 369, 370, 374, 375, 378, 383, 395, 403, 435, 445, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 490, 493, 527, 613, 659, 744, 747, 760, 964, 978, 979, 980, 985, 987, 999, 1015, 1016, 1017, 1018, 1019, 1020], "descr": [145, 363, 364, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 490, 493, 996, 1013], "_diabetes_dataset": 145, "mass": [145, 235, 367, 777, 960, 971], "blood": [145, 226, 367, 997], "pressur": [145, 367, 997], "six": [145, 197, 218, 302, 367, 1014], "serum": [145, 367], "bmi": [145, 184, 185, 235, 367, 972], "tc": [145, 367, 384], "cholesterol": [145, 367], "ldl": [145, 367], "lipoprotein": [145, 367], "hdl": [145, 367], "s4": [145, 184, 185, 367], "tch": [145, 367], "s5": [145, 184, 185, 367, 972], "ltg": [145, 367, 484], "triglycerid": [145, 367], "s6": [145, 184, 185, 367], "glu": [145, 367], "sugar": [145, 367], "www4": [145, 367], "ncsu": [145, 367], "boo": [145, 367], "bradlei": [145, 367, 960], "efron": [145, 367, 665, 666, 960], "trevor": [145, 184, 313, 367, 611, 639, 704, 705, 706, 954, 960, 976, 1009, 1010, 1013, 1014, 1015, 1017], "iain": [145, 367, 960], "johnston": [145, 367, 960, 1014], "annal": [145, 184, 367, 402, 457, 499, 500, 501, 542, 543, 639, 960], "407": [145, 367], "499": [145, 255, 272, 367, 376], "web": [145, 364, 365, 367, 370, 373, 378, 395, 402, 403, 504, 874, 964, 974, 1005], "stanford": [145, 367, 632, 665, 666, 816, 819, 820, 874, 962], "leastangle_2002": [145, 367], "pitfal": [145, 163, 164, 168, 170, 310, 359, 382, 383, 385, 399, 448, 450, 479, 636, 655, 656, 684, 735, 794, 804, 807, 842, 854, 861, 960, 1001], "accept": [145, 148, 253, 308, 328, 341, 343, 352, 356, 357, 364, 370, 372, 379, 381, 382, 383, 384, 389, 391, 395, 400, 403, 421, 425, 428, 429, 431, 444, 447, 450, 491, 492, 538, 539, 544, 545, 552, 553, 564, 565, 576, 577, 580, 611, 618, 622, 626, 662, 709, 724, 760, 777, 778, 782, 783, 823, 824, 831, 832, 845, 899, 901, 902, 905, 960, 962, 964, 967, 972, 974, 979, 980, 984, 985, 994, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "tic": [145, 167, 267, 966], "sfm": 145, "toc": 145, "sequentialfeatureselector": [145, 404, 576, 580, 586, 1017, 1018, 1019, 1020, 1021], "sf": [145, 234, 256, 310, 365, 404, 475, 585], "backward": [145, 310, 373, 383, 404, 479, 560, 585, 597, 598, 601, 602, 603, 605, 606, 894, 897, 964, 968, 985, 1005, 1008, 1013, 1014, 1015, 1017, 1019, 1021], "tic_fwd": 145, "sfs_forward": 145, "toc_fwd": 145, "tic_bwd": 145, "sfs_backward": 145, "toc_bwd": 145, "276": [145, 256], "765": 145, "isn": [145, 308, 341, 343, 352, 357, 370, 378, 498, 544, 545, 577, 774, 782, 783, 854, 967, 979, 1015], "sound": [145, 352], "finish": [145, 244, 961], "expos": [145, 311, 313, 357, 363, 367, 383, 393, 402, 404, 405, 421, 447, 536, 537, 550, 551, 552, 553, 576, 577, 585, 594, 779, 782, 783, 793, 810, 811, 812, 813, 814, 815, 896, 932, 960, 964, 966, 994, 996, 998, 1002, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "172": [145, 146, 376, 476, 477, 632, 960], "plot_select_from_model_diabet": [145, 146], "923": [146, 335, 339], "auto_examples_feature_select": 146, "basic": [147, 158, 161, 163, 194, 305, 333, 356, 358, 359, 370, 372, 374, 381, 383, 395, 399, 400, 402, 594, 605, 877, 889, 890, 891, 892, 953, 954, 967, 978, 983, 984, 985, 988, 997], "introductori": [147, 158, 163, 224, 594, 605, 988], "gpr": [147, 157, 158, 163, 479, 593, 594, 596, 597, 598, 599, 604, 605, 606, 607, 608, 986, 1001, 1015], "mauna": [147, 158, 163, 479, 594, 598, 605, 606, 608], "loa": [147, 158, 163, 479, 594, 598, 605, 606, 608], "co2": [147, 158, 163, 479, 594, 598, 605, 606, 608, 1012], "xor": [147, 158, 163, 334, 593, 597, 605, 960, 980, 1012], "posterior": [147, 148, 149, 158, 163, 175, 256, 400, 405, 532, 533, 535, 593, 594, 596, 597, 598, 602, 605, 606, 610, 627, 628, 691, 777, 958, 984, 1011, 1014], "iso": [147, 158, 163, 219, 593, 596, 597], "trick": [148, 231, 286, 343, 355, 358, 359, 373, 381, 396, 405, 565, 572, 626, 655, 956, 957, 968, 978, 979, 997, 998, 1001, 1006, 1014], "drastic": [148, 229, 264, 395, 399, 967, 977], "theorem": [148, 394, 405, 966], "period": [148, 153, 157, 374, 383, 384, 393, 405, 598, 800, 860, 1013, 1018, 1020], "reus": [148, 189, 257, 308, 343, 372, 383, 395, 396, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 617, 629, 631, 632, 635, 641, 643, 645, 649, 650, 651, 652, 659, 660, 661, 663, 838, 839, 972, 976, 988, 1012], "training_sample_indic": 148, "training_data": 148, "training_noisy_target": 148, "newer": [148, 369, 386, 400], "expsinesquar": [148, 153, 157, 405], "emb": [148, 218, 229, 285, 363, 364, 445, 678, 961], "kernel_ridg": [148, 231, 359, 1009], "length_scal": [148, 149, 152, 153, 154, 155, 157, 405, 595, 598, 602, 604, 605, 606, 607], "tell": [148, 166, 167, 256, 328, 333, 357, 365, 395, 403, 546, 562, 953, 958, 971, 999], "1e0": [148, 231, 247, 264, 953], "kernel__length_scal": 148, "kernel__period": 148, "1e1": [148, 154, 196, 231, 328], "kernel_ridge_tun": 148, "217": [148, 518, 524], "9915849773450223": 148, "7986499491396728": 148, "607275806426108": 148, "predictions_kr": 148, "gaussianprocessregressor": [148, 153, 154, 155, 156, 157, 405, 593, 596, 597, 598, 599, 600, 604, 607, 608, 626, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "whitekernel": [148, 153, 154, 405, 594, 595, 597, 1016], "periodicity_bound": [148, 153, 157, 598], "047": [148, 376], "kernel_": [148, 149, 150, 151, 152, 153, 154, 155, 157, 593, 594], "675": [148, 197, 215], "57": [148, 166, 212, 223, 265, 295, 367, 368, 386, 387, 388, 396, 688, 763, 814, 964, 974, 1005], "noise_level": [148, 153, 154, 405, 595, 608], "mean_predictions_gpr": 148, "std_predictions_gpr": 148, "return_std": [148, 153, 154, 155, 157, 175, 176, 383, 535, 550, 551, 594, 596, 597, 598, 599, 608, 610, 627, 628, 841, 1012, 1013, 1017], "007": [148, 225, 239, 241, 264, 276, 342], "formul": [148, 157, 265, 370, 397, 400, 403, 405, 408, 458, 532, 533, 540, 547, 633, 634, 637, 638, 639, 641, 642, 648, 653, 745, 751, 778, 883, 886, 889, 891, 964, 965, 974, 986, 1001], "forc": [148, 181, 276, 302, 341, 364, 368, 374, 390, 399, 402, 433, 440, 479, 589, 592, 629, 630, 635, 636, 640, 643, 644, 645, 646, 655, 656, 657, 664, 667, 670, 736, 760, 763, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 883, 884, 885, 886, 887, 899, 901, 902, 974, 1001, 1010, 1013, 1014, 1015, 1017, 1018, 1019], "capac": [148, 168], "length_scale_bound": [148, 154, 155, 157, 405, 594, 598, 602, 605, 606], "attenu": 148, "228": [148, 158], "plot_compare_gpr_krr": [148, 158], "arbitrarili": [149, 242, 247, 341, 383, 405, 416, 448, 465, 466, 467, 535, 537, 539, 541, 543, 545, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 652, 653, 655, 656, 661, 662, 663, 704, 705, 706, 728, 767, 771, 814, 815, 824, 832, 839, 862, 882, 884, 887, 890, 892, 964, 967, 974, 980], "lml": [149, 150, 154, 405], "exhibit": [149, 201, 341, 385, 399, 400, 402, 405, 972], "steep": [149, 167, 265, 266, 395, 399, 405, 433, 439], "laplac": [149, 405, 593, 594, 816, 817, 818, 820, 966], "214": [149, 405, 567], "319": [149, 999], "gp_fix": 149, "gp_opt": 149, "log_marginal_likelihood": [149, 150, 152, 154, 157, 405, 593, 594, 1015], "theta": [149, 150, 152, 154, 156, 157, 232, 400, 405, 506, 519, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 675, 966, 980], "landscap": [149, 405], "theta0": 149, "theta1": 149, "pcolor": 149, "xscale": [149, 154, 231], "yscale": [149, 154, 196, 231, 341], "plot_gpc": [149, 158], "gpc_rbf_isotrop": 150, "gpc_rbf_anisotrop": 150, "m_max": 150, "555": [150, 158, 699], "plot_gpc_iri": [150, 158], "0256": 151, "dotproduct": [151, 152, 157, 405, 594, 608], "sigma_0": [151, 152, 157, 405, 597], "constantkernel": [151, 157, 405, 594, 600, 604, 607], "lim": [151, 517], "experi": [151, 155, 165, 166, 167, 168, 172, 198, 303, 336, 342, 343, 357, 364, 370, 373, 394, 399, 498, 710, 767, 960, 965, 976, 982, 983, 984, 988, 997, 999], "61611719": 151, "00099547": 151, "10469096": 151, "32782448": 151, "00000000": 151, "50000000": 151, "17289014": 151, "6984743": 151, "3109306": 151, "93271427": 151, "03823144": 151, "10584743": 151, "87600388": 151, "74310541": 151, "21301203": 151, "26386883": 151, "gp": [151, 156, 405, 593, 594, 605, 1011], "cb": [151, 229, 245], "widehat": 151, "mathbf": [151, 400, 960, 964, 968, 969, 978], "leq": [151, 400, 402, 960, 964, 967, 978, 979, 980], "clim": 151, "666": [151, 823, 954], "clabel": [151, 207], "334": [151, 238, 303, 306], "plot_gpc_isoprob": [151, 158], "stationari": [152, 405, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "coincid": [152, 198, 405], "430": [152, 154, 407, 516], "k1__constant_valu": 152, "bound": [152, 154, 156, 163, 198, 214, 224, 239, 255, 368, 377, 395, 400, 403, 405, 406, 428, 472, 485, 495, 506, 519, 578, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 615, 618, 620, 633, 637, 641, 660, 688, 717, 777, 778, 821, 822, 858, 870, 873, 874, 875, 883, 884, 885, 888, 905, 932, 960, 963, 964, 967, 976, 978, 979, 981, 1013, 1016, 1017, 1019], "100000": [152, 231, 241, 370, 596, 597, 598, 602, 603, 605, 606, 608, 870, 957, 997, 999], "puor_r": [152, 334], "749": [152, 158], "plot_gpc_xor": [152, 158], "rw2006": [153, 405, 593, 594], "ascent": [153, 405], "monthli": [153, 384, 405, 964], "atmospher": [153, 405], "ppm": 153, "observatori": [153, 405], "hawaii": [153, 405], "1958": [153, 400, 402, 405, 515], "air": [153, 746], "41187": 153, "flag": [153, 368, 370, 371, 373, 447, 593, 594, 610, 656, 658, 710, 767, 979, 1011, 1015, 1016, 1018, 1019, 1020], "station": 153, "mlo": 153, "316": [153, 157, 270, 272, 342, 594, 597, 608, 857], "317": 153, "co2_data": 153, "to_datetim": 153, "timestamp": 153, "march": [153, 708, 738, 964, 1005, 1009, 1013, 1015, 1020], "dropna": 153, "nfrom": 153, "upcom": [153, 368], "to_numpi": 153, "rise": [153, 405], "irregular": [153, 395, 405, 967], "long_term_trend_kernel": 153, "decai": [153, 405, 527, 838, 839, 918, 964, 978, 1009], "seasonal_kernel": 153, "ration": [153, 606, 962], "diffus": [153, 405], "accommod": [153, 405, 1013], "rationalquadrat": [153, 157, 405, 599], "irregularities_kernel": 153, "shall": [153, 405], "phenomena": [153, 405], "noise_kernel": 153, "noise_level_bound": [153, 154, 608], "co2_kernel": 153, "subtract": [153, 166, 398, 400, 405, 427, 430, 442, 517, 627, 628, 633, 634, 637, 638, 639, 647, 648, 1012], "normalize_i": [153, 405, 594, 1019], "y_mean": [153, 154, 157, 594, 627, 628], "gaussianprocessregressorgaussianprocessregressor": 153, "todai": [153, 381, 999], "current_month": 153, "mean_y_pr": 153, "std_y_pr": 153, "536": [153, 276], "968": [153, 165, 254], "188": [153, 302, 306, 367, 376, 567], "0367": 153, "6ppm": 153, "572": [153, 158], "plot_gpr_co2": [153, 158], "target_gener": 154, "add_nois": 154, "minima": [154, 184, 400, 430, 675, 961, 998, 1013], "y_std": [154, 157, 535, 594, 627, 628, 1018], "k1__k2__length_scal": [154, 405], "noptimum": 154, "nlog": 154, "length_scale_grid": 154, "noise_level_grid": 154, "newshap": 154, "278": [154, 158, 220, 223, 232, 239, 367, 821, 822], "plot_gpr_noisi": [154, 158], "principl": [155, 281, 303, 343, 370, 381, 383, 384, 399, 402, 405, 918, 953, 963, 967, 978, 980, 1012], "tikhonov": [155, 405, 655], "training_indic": 155, "n_restarts_optim": [155, 405, 593, 594], "43": [155, 193, 229, 234, 239, 256, 276, 367, 375, 779, 793, 862], "mean_predict": 155, "std_predict": 155, "whenev": [155, 165, 352, 364, 378, 383, 386, 393, 465, 466, 467, 479, 611, 613, 955, 963, 985, 1015], "noise_std": 155, "y_train_noisi": 155, "764": [155, 158, 704, 964], "plot_gpr_noisy_target": [155, 158], "gene": [156, 364, 392, 434, 496, 576, 577, 828, 861], "letter": [156, 365, 367, 374, 403, 770, 771, 964], "among": [156, 167, 172, 196, 246, 274, 350, 358, 365, 372, 383, 384, 393, 394, 398, 430, 432, 495, 502, 774, 806, 824, 829, 831, 883, 886, 889, 890, 891, 892, 953, 956, 964, 965, 971, 974, 979, 980, 1005, 1011, 1012, 1015], "brighter": 156, "4th": [156, 367], "6th": 156, "haussler": 156, "1999": [156, 365, 393, 395, 397, 400, 402, 421, 433, 440, 452, 457, 517, 524, 538, 539, 542, 543, 705, 875, 883, 884, 886, 887, 970, 976], "646": 156, "technic": [156, 197, 218, 312, 365, 367, 370, 383, 402, 635, 647, 668, 669, 876, 960, 961, 967], "depart": [156, 395], "california": [156, 160, 161, 298, 304, 310, 363, 367, 473, 1001], "santa": [156, 1020], "cruz": 156, "generickernelmixin": [156, 1015], "sequencekernel": 156, "baseline_similar": 156, "baseline_similarity_bound": 156, "hyperparameter_baseline_similar": 156, "_f": [156, 960], "_g": 156, "__call__": [156, 328, 383, 403, 405, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 1012], "eval_gradi": [156, 405, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "is_stationari": [156, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "clone_with_theta": [156, 405, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "agct": 156, "agc": 156, "aact": 156, "taa": 156, "aaa": 156, "gaaca": 156, "training_idx": 156, "cga": 156, "taac": 156, "tcg": 156, "cttt": 156, "tgct": 156, "atag": 156, "ctc": 156, "420": [156, 320], "plot_gpr_on_structured_data": [156, 158], "plot_gpr_sampl": 157, "gpr_model": 157, "y_sampl": [157, 594], "sample_i": [157, 405, 594, 1019], "single_prior": 157, "pm": [157, 167, 266, 402, 964], "dev": [157, 166, 214, 261, 266, 368, 370, 374, 376, 378, 964, 988, 1012, 1017, 1020], "594": [157, 196], "279": [157, 960], "067": 157, "alpha_bound": [157, 606], "1e15": 157, "01e": 157, "sigma_0_bound": [157, 597], "_gpr": 157, "lbfg": [157, 292, 372, 631, 632, 641, 642, 652, 655, 657, 663, 670, 812, 815, 838, 839, 960, 968, 1009, 1010, 1012, 1013, 1018, 1019, 1020], "statu": [157, 364, 374, 386, 479, 821, 822], "abnormal_termination_in_lnsrch": 157, "7957695978": 157, "947": 157, "matern": [157, 405, 1016, 1020], "609": [157, 342, 376], "484": 157, "063": [157, 158, 254, 256, 421], "plot_gpr_prior_posterior": [157, 158], "auto_examples_gaussian_process": 158, "iterativeimput": [159, 161, 162, 163, 473, 548, 563, 611, 612, 613, 622, 628, 655, 803, 824, 842, 1014, 1015, 1016, 1017, 1019, 1020, 1021], "robin": [160, 161, 610, 954, 1011, 1014, 1019, 1020], "kneighborsregressor": [160, 233, 288, 312, 402, 553, 823, 829, 831, 832, 967, 1005, 1007, 1009, 1015, 1017, 1018, 1019, 1020, 1021], "mimic": [160, 196, 341, 797], "missforest": [160, 954], "popular": [160, 221, 365, 368, 375, 378, 381, 383, 394, 401, 402, 403, 405, 435, 445, 954, 956, 960, 962, 969, 978, 985, 994, 999], "enable_iterative_imput": [160, 161, 374, 610, 954, 1014], "fetch_california_h": [160, 161, 298, 310, 365, 382, 396, 1014, 1016], "x_full": [160, 161, 298], "y_full": [160, 161, 298], "2k": 160, "br_estim": 160, "score_full_data": 160, "neg_mean_squared_error": [160, 161, 198, 231, 270, 804, 964, 972, 1011], "x_miss": [160, 161], "y_miss": [160, 161], "missing_sampl": [160, 161], "missing_featur": [160, 161], "score_simple_imput": 160, "missing_valu": [160, 161, 236, 383, 610, 611, 612, 613, 751, 954, 1013, 1014], "score_iterative_imput": 160, "stricter": 160, "impute_estim": 160, "__class__": [160, 196, 198, 258, 300, 341, 342, 343, 377], "xerr": [160, 161, 342], "510": [160, 162, 997], "plot_iterative_imputer_variants_comparison": [160, 162], "ness": [161, 214], "auxiliari": [161, 368, 988], "district": [161, 365], "neither": [161, 166, 308, 341, 352, 381, 421, 577, 611, 905, 967, 980], "20640": [161, 365, 473], "feel": [161, 298, 369, 370, 378, 395, 980], "x_diabet": [161, 994], "y_diabet": [161, 994], "x_california": 161, "y_california": 161, "add_missing_valu": 161, "missing_r": 161, "n_missing_sampl": 161, "x_miss_california": 161, "y_miss_california": 161, "x_miss_diabet": 161, "y_miss_diabet": 161, "knnimput": [161, 308, 610, 613, 954, 1015, 1016, 1019, 1020, 1021], "get_scores_for_imput": 161, "impute_scor": 161, "x_label": 161, "mses_california": 161, "stds_california": 161, "mses_diabet": 161, "stds_diabet": 161, "get_full_scor": 161, "full_scor": 161, "get_impute_zero_scor": 161, "fill_valu": [161, 227, 236, 309, 610, 613, 974, 1013, 1021], "zero_impute_scor": 161, "unweight": [161, 209, 446, 630, 636, 661, 690, 696, 711, 712, 720, 765, 766, 769, 770, 816, 817, 818, 819, 820, 954], "get_impute_knn_scor": 161, "knn_impute_scor": 161, "get_impute_mean": 161, "mean_impute_scor": 161, "obvious": [161, 356, 999], "get_impute_it": 161, "n_nearest_featur": [161, 610], "sample_posterior": [161, 610, 954], "iterative_impute_scor": 161, "n_bar": 161, "xval": 161, "domin": [161, 196, 201, 265, 303, 365, 376, 393, 861, 966, 974, 980], "380": [161, 162, 999], "plot_missing_valu": [161, 162], "890": [162, 254], "auto_examples_imput": 162, "prune": [163, 345, 351, 404, 483, 540, 541, 542, 543, 547, 548, 576, 627, 807, 889, 890, 891, 892, 967, 986, 1001, 1005, 1008, 1015, 1016], "elast": [163, 174, 187, 207, 215, 269, 394, 454, 455, 461, 484, 507, 629, 630, 635, 640, 641, 642, 643, 644, 645, 646, 651, 659, 661, 664, 667, 767, 953, 964, 978, 986, 1001, 1005, 1010, 1014, 1015], "gram": [163, 174, 215, 372, 400, 403, 472, 507, 531, 571, 572, 573, 574, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 647, 648, 664, 665, 666, 667, 668, 669, 749, 757, 759, 953, 974, 999, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1018, 1019], "huberregressor": [163, 174, 202, 215, 507, 653, 654, 655, 661, 662, 960, 1011, 1012, 1013, 1014], "aic": [163, 174, 184, 215, 246, 484, 634, 636, 637, 638, 639, 778, 842, 861, 953, 960, 1005, 1012, 1018, 1019], "bic": [163, 174, 184, 215, 404, 484, 634, 636, 637, 638, 639, 778, 842, 861, 953, 960, 963, 1005, 1012, 1018, 1019], "mnist": [163, 174, 204, 215, 276, 291, 296, 479, 554, 641, 807, 838, 861, 904, 960, 968], "20newgroup": [163, 174, 215, 472, 554, 641, 807, 960], "ordinari": [163, 174, 175, 198, 199, 201, 213, 215, 311, 618, 629, 635, 637, 638, 639, 640, 655, 661, 665, 666, 670, 978, 986, 1001], "spline": [163, 174, 215, 499, 500, 501, 655, 842, 856, 860, 984, 1018], "ransac": [163, 174, 202, 213, 215, 507, 632, 640, 654, 661, 662], "convex": [163, 174, 215, 217, 337, 342, 395, 397, 400, 408, 435, 445, 456, 458, 459, 462, 463, 464, 641, 659, 675, 960, 961, 967, 968, 978, 1018], "theil": [163, 174, 202, 215, 632, 640, 654, 661, 662], "sen": [163, 174, 202, 215, 632, 640, 654, 661, 662], "tweedi": [163, 174, 215, 447, 479, 535, 631, 652, 663, 689, 706, 727, 729, 731, 732, 734, 807, 842, 845, 846, 854, 861, 960, 1015, 1016, 1018], "insur": [163, 174, 196, 215, 447, 479, 535, 631, 652, 663, 689, 727, 732, 734, 807, 842, 845, 846, 854, 861, 960], "claim": [163, 174, 215, 370, 447, 479, 535, 631, 652, 663, 689, 727, 732, 734, 807, 842, 845, 846, 854, 861, 960], "failur": [163, 164, 166, 170, 370, 378, 640, 767, 807, 901, 902, 987, 988, 1018, 1019], "infer": [163, 164, 166, 170, 242, 246, 247, 256, 347, 364, 372, 381, 394, 399, 400, 479, 491, 492, 498, 517, 519, 532, 533, 536, 542, 543, 615, 618, 640, 692, 705, 723, 767, 777, 778, 807, 817, 855, 862, 876, 877, 889, 890, 891, 892, 927, 954, 960, 964, 969, 974, 977, 980, 984, 985, 993, 1006, 1010, 1011, 1016, 1019], "causal": [163, 164, 170, 640, 767, 807], "multicollinear": [163, 164, 170, 398, 483, 547, 617, 638, 807, 960, 972], "isomap": [163, 216, 219, 223, 308, 312, 402, 485, 527, 532, 549, 672, 673, 674, 675, 830, 842, 851, 874, 967, 1000, 1001, 1013, 1015, 1018, 1019, 1020, 1021], "And": [163, 216, 223, 256, 341, 378, 389, 395, 399, 403, 513, 571, 572, 574, 675, 676, 960, 964, 982, 1012], "hole": [163, 216, 223, 513, 675, 676, 1019], "perplex": [163, 216, 217, 221, 223, 276, 497, 508, 519, 675, 961, 1010, 1012, 1019], "johnson": [163, 224, 239, 298, 302, 362, 394, 472, 485, 857, 869, 873, 874, 875, 974, 981, 1001, 1013, 1019], "lindenstrauss": [163, 224, 239, 362, 394, 472, 485, 873, 874, 875, 981, 1001], "halv": [163, 249, 272, 390, 498, 547, 562, 779, 782, 783, 886, 1001, 1017], "custom": [163, 235, 249, 257, 272, 278, 283, 308, 323, 328, 339, 341, 343, 362, 365, 368, 372, 377, 378, 379, 381, 382, 383, 394, 395, 396, 399, 405, 451, 472, 476, 477, 485, 487, 521, 523, 530, 532, 540, 541, 547, 548, 554, 556, 585, 614, 673, 696, 779, 807, 845, 879, 886, 948, 953, 958, 964, 967, 984, 985, 988, 999, 1001, 1005, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1020, 1021], "det": [163, 249, 272, 397, 498, 547, 681, 685, 709, 771, 807, 842, 861, 881, 916, 1017], "tsne": [163, 217, 218, 219, 221, 222, 277, 290, 312, 383, 409, 417, 479, 671, 672, 673, 825, 829, 842, 938, 961, 967, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "novelti": [163, 225, 277, 283, 290, 327, 827, 986, 1000, 1001, 1005, 1013], "lof": [163, 225, 234, 277, 290, 546, 827, 885, 970], "boltzmann": [163, 291, 296, 485, 641, 696, 807, 837, 838, 839, 841, 867, 1000, 1001, 1007], "mlp": [163, 167, 235, 291, 293, 296, 479, 554, 807, 838, 839, 968], "semi_supervis": [163, 310, 312, 315, 316, 317, 318, 319, 320, 321, 359, 965, 977, 1006, 1011, 1012, 1019, 1020], "tie": [163, 323, 339, 381, 402, 495, 809, 886, 965, 979, 1006, 1021], "unbalanc": [163, 259, 323, 339, 399, 495, 614, 886, 906, 907, 953, 978], "featurehash": [163, 340, 342, 344, 358, 365, 403, 447, 471, 564, 571, 572, 573, 574, 854, 1006, 1011, 1012, 1013, 1019, 1020], "auto_examples_python": 163, "auto_examples_jupyt": 163, "great": [165, 166, 194, 352, 370, 381, 400, 746, 985, 988, 1005, 1012], "unless": [165, 242, 247, 370, 372, 373, 381, 383, 393, 395, 398, 406, 421, 428, 431, 433, 435, 440, 441, 444, 447, 450, 455, 472, 479, 491, 492, 514, 518, 519, 520, 522, 525, 526, 528, 529, 530, 531, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 577, 585, 593, 594, 615, 617, 622, 629, 630, 634, 635, 636, 638, 640, 641, 642, 644, 646, 648, 649, 651, 659, 662, 671, 672, 673, 674, 675, 676, 677, 692, 697, 756, 760, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 823, 824, 827, 829, 831, 832, 834, 835, 838, 839, 840, 843, 866, 867, 869, 870, 871, 872, 876, 877, 889, 890, 891, 892, 897, 901, 902, 918, 932, 960, 963, 965, 1005, 1007, 1011, 1013, 1016, 1017], "willing": [165, 253], "econom": [165, 166, 256], "educ": [165, 166, 370, 699, 965], "earn": [165, 166, 384], "polici": [165, 166, 196, 214, 383, 518, 524, 960, 1020], "maker": [165, 166], "ovb": [165, 166], "parent_hourly_wag": 165, "college_degre": 165, "true_coef": [165, 191], "hourly_wag": 165, "stori": [165, 256, 365, 963], "pairplot": [165, 166], "diag_kind": [165, 166], "kde": [165, 166, 280, 281, 289, 401, 826], "features_nam": [165, 1012], "regressor_with_": 165, "y_pred_with_": 165, "r2_with_abl": 165, "975": [165, 342, 344, 979], "model_coef": 165, "intellectu": 165, "proxi": [165, 166, 400, 837, 994, 1010], "inadvert": [165, 383], "iq": 165, "regressor_without_": 165, "y_pred_without_": 165, "r2_without_": 165, "incorrect": [165, 263, 319, 352, 370, 395, 590, 591, 615, 616, 716, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018], "brought": [165, 536, 537, 540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "unobserv": [165, 166, 400], "confound": [165, 166], "conduct": [165, 256, 405, 984, 1019], "prohibit": [165, 399, 402, 610, 969, 977, 1012], "uneth": 165, "iv": [165, 964], "864": [165, 170], "plot_causal_interpret": [165, 170], "hint": [166, 356, 371, 375, 389, 431, 964, 997], "aris": [166, 259, 336, 357, 375, 395, 698, 960, 961, 1017], "mathemat": [166, 184, 213, 259, 362, 367, 370, 383, 385, 394, 397, 400, 401, 532, 533, 540, 547, 618, 629, 639, 772, 773, 778, 839, 883, 886, 889, 891, 964, 974, 976, 986, 988, 997, 1001, 1019], "survei": [166, 398], "1985": [166, 395, 688, 698, 768], "534": [166, 211], "race": [166, 365, 1008], "occup": [166, 298], "sector": 166, "marr": 166, "not_memb": 166, "marri": 166, "freq": [166, 343], "378": [166, 402, 999, 1005], "289": 166, "438": [166, 972], "440": 166, "411": [166, 397, 407, 456, 516], "018727": 166, "822097": 166, "833333": 166, "615373": 166, "379710": 166, "726573": 166, "55": [166, 172, 191, 196, 205, 214, 219, 317, 375, 395, 399, 474, 580, 779, 785, 793, 805, 964, 1005], "thereaft": [166, 175], "hispan": 166, "manufactur": 166, "unmarri": 166, "dollar": [166, 365], "exploratori": [166, 988], "emul": [166, 378], "train_dataset": [166, 364], "rangeindex": 166, "533": 166, "normalis": [166, 594, 999], "numerical_column": [166, 168, 450], "if_binari": [166, 238, 854, 974, 1016], "prepend": [166, 1005], "exp10": 166, "ufunc": 166, "passthroughpassthroughtransformedtargetregressor": 166, "transformedtargetregressortransformedtargetregressor": 166, "ridgeridg": 166, "mae_train": 166, "mae_test": 166, "learnt": [166, 352, 383, 399, 953], "obviou": [166, 352, 356, 392, 400], "regressor_": [166, 448, 576, 577, 580], "race_hispan": 166, "013555": 166, "race_oth": 166, "009111": 166, "race_whit": 166, "022558": 166, "occupation_cler": 166, "000056": 166, "occupation_manag": 166, "090538": 166, "occupation_oth": 166, "025091": 166, "occupation_profession": 166, "071974": 166, "occupation_sal": 166, "046625": 166, "occupation_servic": 166, "091042": 166, "sector_construct": 166, "000176": 166, "sector_manufactur": 166, "031277": 166, "sector_oth": 166, "031004": 166, "marr_unmarri": 166, "032405": 166, "union_not_memb": 166, "117154": 166, "sex_mal": 166, "090808": 166, "south_y": 166, "033823": 166, "054699": 166, "035005": 166, "030867": 166, "adimension": 166, "Their": [166, 365, 367, 384, 395, 627, 1005], "visibl": [166, 167, 198, 338, 364, 370, 395, 837, 969, 1010, 1020], "gaug": 166, "decad": [166, 985], "x_train_preprocess": 166, "multipli": [166, 214, 256, 356, 379, 383, 400, 402, 403, 408, 447, 458, 498, 521, 523, 524, 530, 540, 544, 547, 629, 631, 635, 637, 641, 642, 643, 645, 651, 652, 653, 655, 659, 660, 661, 663, 669, 670, 672, 676, 746, 883, 884, 885, 886, 887, 889, 891, 907, 940, 941, 942, 953, 960, 964, 978, 1016], "coef_i": 166, "std_i": 166, "emphas": [166, 338, 376, 400, 964], "perturb": [166, 213, 295, 400, 402, 963], "caution": [166, 374, 424, 437, 1013], "repeatedkfold": [166, 399, 784, 795, 1012], "cv_model": 166, "return_estim": [166, 399, 804, 1013], "train_idx": [166, 383], "stripplot": 166, "whi": [166, 168], "collinear": [166, 169, 201, 214, 402, 550, 631, 652, 663, 854, 960, 1005], "teas": 166, "apart": [166, 311, 328, 381, 383, 396, 398, 404, 707, 979, 988, 1013], "vice": [166, 253, 341, 395, 405, 426, 590, 591, 810, 1009], "versa": [166, 253, 341, 395, 405, 426, 590, 591, 810, 1009], "column_to_drop": 166, "said": [166, 225, 257, 365, 370, 772, 962, 970, 980, 990, 997], "unchang": [166, 214, 263, 402, 417, 426, 427, 429, 430, 432, 447, 451, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 565, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 671, 672, 675, 745, 816, 817, 818, 820, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 870, 873, 874, 879, 967, 990, 1013, 1019], "neglig": [166, 967, 1008], "littl": [166, 167, 168, 169, 225, 365, 403, 445, 627, 779, 793, 918, 954, 961, 963, 979, 980, 997, 1006, 1017], "ridgecvridgecv": 166, "alon": [166, 262, 328, 383, 389, 393, 631, 652, 663, 724, 980, 1012, 1014], "suppress": [166, 356, 378, 675, 967, 1012], "themselv": [166, 298, 366, 378, 383, 392, 395, 402, 403, 405, 598, 772, 980, 999, 1015], "bring": [166, 298, 400, 659, 661, 961, 988], "certain": [166, 201, 213, 256, 276, 302, 352, 365, 366, 374, 385, 395, 400, 404, 621, 632, 636, 641, 646, 667, 846, 881, 953, 956, 960, 961, 964, 965, 968, 974, 979, 984, 990, 994, 1010, 1014, 1017, 1020], "entic": 166, "pursu": 166, "tempt": 166, "conclud": [166, 176, 214, 256, 343, 352, 384], "deflat": [166, 398, 407, 516], "presum": [166, 274, 395, 403, 816], "must": [166, 167, 169, 177, 213, 214, 225, 235, 251, 282, 299, 304, 341, 352, 365, 369, 370, 371, 372, 374, 376, 378, 383, 384, 391, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 415, 422, 425, 428, 429, 430, 432, 433, 434, 438, 440, 442, 444, 445, 447, 449, 450, 452, 457, 470, 491, 492, 495, 506, 514, 520, 521, 522, 523, 524, 526, 527, 530, 536, 537, 542, 543, 544, 545, 550, 551, 564, 565, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 593, 594, 600, 603, 610, 611, 612, 613, 615, 616, 621, 625, 626, 631, 632, 635, 641, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 682, 686, 689, 692, 717, 728, 746, 753, 756, 760, 763, 770, 772, 773, 774, 776, 777, 778, 779, 780, 782, 783, 784, 786, 788, 789, 791, 793, 794, 795, 797, 798, 800, 805, 807, 808, 816, 817, 818, 819, 820, 823, 824, 825, 827, 829, 830, 831, 832, 833, 836, 837, 838, 839, 841, 844, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 881, 882, 883, 884, 885, 886, 887, 888, 894, 932, 939, 948, 950, 953, 954, 960, 961, 962, 964, 967, 968, 970, 971, 978, 979, 980, 990, 999, 1005, 1008, 1012, 1016, 1018, 1019], "respond": [166, 370, 395], "628": [166, 170, 342], "plot_linear_model_coefficient_interpret": [166, 170], "complement": [167, 266, 341, 615, 616, 781, 796, 799, 807, 816, 817, 818, 819, 820, 971, 986, 1001, 1013], "molnar": [167, 971], "christoph": [167, 400, 405, 515, 593, 594, 597, 602, 605, 777, 960, 965, 1006, 1010, 1013, 1016, 1017, 1018, 1019, 1020], "goldstein": [167, 971], "kapeln": [167, 971], "bleich": [167, 971], "pitkin": [167, 971], "peek": [167, 370, 971], "settingwithcopywarn": 167, "2284": 167, "904": [167, 254, 396], "287": [167, 201, 215, 976], "1747": 167, "1729": 167, "mask_train": [167, 214], "accordingli": [167, 370, 374, 375, 1012, 1013, 1020], "8640": 167, "nomin": [167, 364, 383, 384, 402, 403, 564, 565, 699, 974, 985], "numerical_featur": [167, 304], "xtick_start": 167, "xtick_period": 167, "average_bike_rent": 167, "numeric_onli": 167, "decor": [167, 308, 370, 371, 372, 379, 785, 908, 912, 913, 925, 931, 1015, 1018, 1021], "strike": 167, "mlp_preprocessor": 167, "quantiletransformerquantiletransform": 167, "catindex": 167, "hgbdt_preprocessor": 167, "sparse_threshold": [167, 447, 450, 1013], "passthroughpassthrough": 167, "mlp_model": 167, "hidden_layer_s": [167, 235, 292, 294, 838, 839, 968], "learning_rate_init": [167, 293, 294, 838, 839], "early_stop": [167, 204, 292, 311, 341, 383, 402, 544, 545, 649, 650, 651, 659, 660, 661, 838, 839, 978, 1013, 1016, 1019, 1020], "999": [167, 214, 256, 374, 402, 700, 838, 839], "forget": [167, 352, 357, 364, 374, 381, 400, 961, 987], "poor": [167, 172, 262, 271, 319, 393, 399, 400, 673, 677, 720, 818, 821, 822, 958, 959, 961, 966, 985, 990, 1012, 1013, 1014, 1016, 1018], "grid_resolut": [167, 310, 326, 614, 615, 616], "features_info": 167, "757": [167, 254, 276, 367], "hgbdt_model": 167, "cheaper": [167, 395, 405, 656, 956, 960], "399": 167, "temperatur": [167, 403, 971], "wind": [167, 965], "earlier": [167, 364, 370, 398, 812, 815, 974, 980, 982, 1003, 1006, 1018, 1020], "meaningless": [167, 403, 883, 886, 1008], "celsiu": [167, 971], "interaction_cst": [167, 313, 402, 544, 545, 1020], "hgbdt_model_without_interact": 167, "histgradientboostingregressor__interaction_cst": 167, "heatmap": [167, 169, 175, 267, 313, 328, 615, 971], "705": 167, "slope": [167, 194, 198, 213, 395, 705, 730, 962, 964], "dry": 167, "wetter": 167, "280": [167, 317], "spike": 167, "degrad": [167, 225, 298, 342, 401], "somehow": 167, "forbidden": [167, 402], "noisili": 167, "422": [167, 342, 576, 577, 708, 738, 964], "partial_depend": [167, 615, 971, 1006, 1014, 1015, 1016, 1017, 1020, 1021], "grid_valu": [167, 616, 1021], "add_ax": [167, 221, 267], "surf": 167, "rstride": 167, "cstride": 167, "bupu": 167, "nthe": [167, 254, 350], "pretti": [167, 221, 254, 341, 356, 370, 381, 838, 839, 968, 1014], "view_init": [167, 217, 219, 221], "clb": 167, "ndepend": 167, "853": [167, 170], "plot_partial_depend": [167, 170, 308, 309, 310, 1010, 1014, 1015, 1016, 1017, 1018, 1019], "mitig": [168, 305, 357, 358, 961, 980, 997, 998, 1017], "breiman": [168, 399, 402, 499, 500, 501, 538, 539, 547, 548, 617, 889, 890, 972, 980], "random_num": 168, "random_cat": 168, "sibsp": [168, 313], "parch": [168, 313], "categorical_encod": 168, "numerical_pip": 168, "memor": 168, "814": [168, 997], "mdi_import": 168, "sorted_importances_idx": 168, "retri": [168, 479, 1013, 1019], "classifier__min_samples_leaf": 168, "anymor": [168, 196, 258, 308, 309, 328, 352, 374, 396, 653, 1011, 1014, 1017, 1018, 1019, 1021], "810": 168, "832": [168, 402, 538, 539], "train_result": 168, "test_result": 168, "train_import": 168, "test_import": 168, "plot_permutation_import": [168, 170], "wisconsin": [169, 363, 483, 1001, 1010], "spearman": [169, 618, 619, 955], "spearmanr": 169, "squareform": 169, "load_breast_canc": [169, 319, 346, 375, 575, 578, 579, 581, 657, 658, 770, 964, 1010, 1011, 1016], "contradict": [169, 985], "perm_sorted_idx": 169, "tree_importance_sorted_idx": 169, "tree_indic": 169, "fill_diagon": [169, 220], "distance_matrix": 169, "dist_linkag": 169, "dendro": 169, "leaf_rot": 169, "dendro_idx": 169, "ivl": 169, "cluster_id": [169, 342], "fcluster": 169, "cluster_id_to_feature_id": 169, "selected_featur": 169, "x_train_sel": 169, "x_test_sel": 169, "clf_sel": 169, "485": [169, 170, 679], "plot_permutation_importance_multicollinear": [169, 170], "352": [170, 256, 257, 376], "auto_examples_inspect": 170, "polynomialcountsketch": [172, 622, 624, 956, 1017, 1019], "covtyp": 172, "tensor": [172, 362, 391, 400, 521, 523, 530, 622, 623, 624, 1001, 1017], "sketch": [172, 358, 362, 379, 394, 622, 623, 624, 929, 1001, 1017], "daniel": [172, 313, 356, 862, 974, 988, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1019], "lopez": 172, "sanchez": [172, 1013, 1014], "lope": 172, "usal": 172, "581": 172, "cartograph": 172, "remot": [172, 317, 370, 373], "fetch_covtyp": [172, 234, 310, 365, 1014, 1017, 1019], "5_000": 172, "mm": 172, "lsvm": 172, "lsvm_time": 172, "lsvm_score": 172, "thumb": [172, 356, 370, 371, 381, 395, 641, 642, 649, 651, 659, 660, 661, 881, 964], "condens": 172, "compact": [172, 298, 356, 367, 821, 822, 980, 1007], "ps_lsvm_time": 172, "ps_lsvm_score": 172, "ksvm": 172, "ksvm_time": 172, "ksvm_score": 172, "pham": [172, 956, 1012], "ninh": 172, "rasmu": [172, 1012], "pagh": [172, 956], "kdd": [172, 365, 393, 421, 976], "doi": [172, 196, 214, 370, 395, 659], "1145": [172, 395, 659], "2487575": 172, "2487591": 172, "csie": [172, 364, 470, 491, 492, 641], "ntu": [172, 364, 470, 491, 492, 641], "tw": [172, 364, 470, 491, 492, 641, 979], "cjlin": [172, 364, 470, 491, 492, 641, 1008], "libsvmtool": [172, 364, 470, 491, 492], "848": [172, 173], "plot_scalable_poly_kernel": [172, 173], "auto_examples_kernel_approxim": 173, "ard": [175, 627, 628], "ol": [175, 186, 191, 193, 194, 202, 213, 311, 639, 960], "true_weight": 175, "ardregress": [175, 628, 960, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021], "olr": 175, "brr": 175, "_bay": 175, "renam": [175, 246, 257, 370, 374, 395, 425, 429, 430, 442, 454, 455, 461, 519, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 854, 1005, 1006, 1007, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "symlognorm": 175, "linthresh": 175, "10e": 175, "cbar_kw": 175, "seismic_r": 175, "stabilis": 175, "sparser": [175, 187, 400, 454, 461, 522, 526, 960, 967, 978], "retain": [175, 383, 395, 398, 399, 403, 477, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 678, 679, 797, 854, 953, 977, 1005], "ard_scor": 175, "scores_": [175, 176, 575, 578, 579, 581, 582, 583, 627, 628, 642, 1005, 1015], "brr_score": 175, "cutoff": [175, 923, 974, 1014], "full_data": 175, "input_featur": [175, 372, 383, 411, 415, 426, 427, 429, 430, 432, 447, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 671, 672, 675, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 1021], "x_plot": [175, 197, 202, 231, 259, 281, 303], "y_plot": [175, 197, 202, 259], "ard_poli": 175, "brr_poli": 175, "y_ard": 175, "y_ard_std": 175, "y_brr": 175, "y_brr_std": 175, "queri": [175, 289, 356, 374, 401, 406, 428, 433, 440, 535, 593, 594, 611, 627, 628, 708, 738, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 964, 967, 980, 984, 1007, 1009, 1010, 1013], "lambda_init": [175, 176, 628, 960, 1015], "intrins": [175, 383, 400, 402, 967, 972, 978, 1017], "970": [175, 215], "plot_ard": [175, 215, 627], "alpha_init": [176, 628, 960, 1015], "yoshihiro": [176, 1015], "uchida": [176, 1015], "nimbus1after2a1sun7show": 176, "1234": [176, 244, 259, 370], "n_order": 176, "vander": 176, "ymean": 176, "ystd": 176, "pink": 176, "_init": 176, "lambda_": [176, 627, 628, 857, 960, 1012], "363": [176, 215], "plot_bayesian_ridge_curvefit": [176, 215], "normalized_weight": 177, "x_offset": 177, "x_center": 177, "x_scale": [177, 851, 867, 974], "uncent": 177, "incorrectli": [177, 402, 403, 536, 542, 544, 716, 722, 964, 1006, 1011, 1013, 1014, 1016], "lm": 177, "98809919e": 177, "48938813e": 177, "03237920e": 177, "25349312e": 177, "53959628e": 177, "67451144e": 177, "00768662e": 177, "19112072e": 177, "07963978e": 177, "47987268e": 177, "76195467e": 177, "00393284e": 177, "07582983e": 177, "66670169e": 177, "65799352e": 177, "99891212e": 177, "58195950e": 177, "58667835e": 177, "98350372e": 177, "60836363e": 177, "00911944e": 177, "elasticnetelasticnet": 177, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [177, 215], "huber": [178, 206, 394, 402, 543, 632, 659, 661, 978, 1005, 1007, 1008, 1017], "mks542": 178, "x_outlier": [178, 210, 282, 283, 327], "y_outlier": 178, "epsilon_valu": 178, "intercept_": [178, 186, 188, 205, 232, 326, 333, 337, 372, 383, 465, 466, 467, 532, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 881, 882, 883, 884, 885, 886, 887, 958, 960, 978, 979, 1005, 1012, 1017, 1019], "coef_ridg": 178, "plot_huber_vs_ridg": [178, 215], "logreg": [179, 815], "plot_method": [179, 279, 284, 324, 326, 329, 330, 614], "071": [179, 215, 230, 239, 367, 421], "plot_iris_logist": [179, 215], "y_pred_lasso": 180, "r2_score_lasso": 180, "658064": 180, "enet": [180, 269], "y_pred_enet": 180, "r2_score_enet": 180, "642515": 180, "markerfmt": 180, "2ca02c": 180, "ff7f0e": 180, "bx": 180, "151": [180, 215, 313, 376, 402, 976], "plot_lasso_and_elasticnet": [180, 215], "penalis": [181, 194, 211, 679], "lasso_path": [181, 634, 635, 636, 637, 638, 639, 646, 665, 666, 960, 1005, 1007, 1009, 1018], "enet_path": [181, 383, 630, 1007, 1009, 1018], "alphas_lasso": 181, "coefs_lasso": 181, "alphas_positive_lasso": 181, "coefs_positive_lasso": 181, "alphas_enet": 181, "coefs_enet": 181, "alphas_positive_enet": 181, "coefs_positive_enet": 181, "neg_log_alphas_lasso": 181, "neg_log_alphas_enet": 181, "coef_l": 181, "neg_log_alphas_positive_lasso": 181, "coef_pl": 181, "neg_log_alphas_positive_enet": 181, "coef_p": 181, "473": [181, 215], "plot_lasso_coordinate_descent_path": [181, 215, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667], "sai": [182, 225, 336, 341, 342, 370, 393, 395, 396, 400, 402, 403, 430, 483, 487, 493, 660, 953, 970, 977, 988, 996, 997, 999], "x_sp": 182, "sparse_lasso": 182, "dense_lasso": 182, "coeff_diff": 182, "2e": [182, 270], "042": [182, 342, 376], "04e": 182, "xs_sp": 182, "tocsc": 182, "nnz": [182, 342, 365, 682], "137": [182, 231, 376, 1006], "043": [182, 342, 376], "33e": 182, "plot_lasso_dense_vs_sparse_data": [182, 215], "lars_path": [183, 379, 514, 520, 522, 525, 526, 528, 529, 531, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 666, 667, 668, 669, 960, 1005, 1007, 1010, 1014, 1016], "plot_lasso_lar": [183, 215], "zht2007": 184, "lassolars": [184, 185, 404, 634, 637, 638, 960, 1005, 1012, 1014, 1018, 1019], "2173": [184, 639, 960], "2192": [184, 639, 960], "038076": [184, 185], "050680": [184, 185], "061696": [184, 185], "021872": [184, 185], "044223": [184, 185], "034821": [184, 185], "043401": [184, 185], "002592": [184, 185], "019907": [184, 185], "017646": [184, 185], "001882": [184, 185], "044642": [184, 185], "051474": [184, 185], "026328": [184, 185], "008449": [184, 185], "019163": [184, 185], "074412": [184, 185], "039493": [184, 185], "068332": [184, 185], "092204": [184, 185], "085299": [184, 185], "044451": [184, 185], "005670": [184, 185], "045599": [184, 185], "034194": [184, 185], "032356": [184, 185], "002861": [184, 185], "025930": [184, 185], "089063": [184, 185], "011595": [184, 185], "036656": [184, 185], "012191": [184, 185], "024991": [184, 185], "036038": [184, 185], "034309": [184, 185], "022688": [184, 185], "009362": [184, 185], "005383": [184, 185], "036385": [184, 185], "003935": [184, 185], "015596": [184, 185], "008142": [184, 185], "031988": [184, 185], "046641": [184, 185], "linearlars": 184, "akaik": [184, 185, 246, 639, 778, 953, 960], "lasso_lars_": [184, 185], "zou_et_al_criterion_resc": 184, "noise_vari": [184, 515, 639, 960, 1019], "aic_criterion": 184, "criterion_": [184, 185, 639], "index_alpha_path_a": 184, "alphas_": [184, 185, 630, 633, 634, 636, 637, 638, 639, 644, 646, 665, 666, 1005, 1008, 1018], "lassolarsic__criterion": [184, 185], "bic_criterion": 184, "index_alpha_path_b": 184, "plot_lasso_lars_": [184, 215], "n_random_featur": 185, "x_random": 185, "random_": 185, "02d": 185, "random_02": 185, "random_05": 185, "random_08": 185, "random_11": 185, "647689": 185, "234137": 185, "469474": 185, "465730": 185, "012831": 185, "412304": 185, "067528": 185, "110923": 185, "601707": 185, "057711": 185, "208864": 185, "196861": 185, "478522": 185, "057122": 185, "324084": 185, "611676": 185, "331263": 185, "185659": 185, "812526": 185, "003533": 185, "alpha_a": 185, "alpha_b": 185, "160030": 185, "5244": 185, "764779": 185, "300343": 185, "5208": 185, "250639": 185, "5212": 185, "341949": 185, "542052": 185, "4928": 185, "018900": 185, "4936": 185, "201520": 185, "034077": 185, "4869": 185, "678359": 185, "4881": [185, 1010], "952289": 185, "189631": 185, "4815": 185, "437362": 185, "4831": [185, 638], "802601": 185, "329616": 185, "4810": 185, "423641": 185, "4830": 185, "880191": 185, "306012": 185, "4803": 185, "573491": 185, "4828": 185, "121351": 185, "124225": 185, "4804": 185, "126502": 185, "4832": 185, "765671": 185, "820705": 185, "621645": 185, "4836": 185, "352124": 185, "750389": 185, "4805": 185, "012521": 185, "4841": 185, "834310": 185, "570655": 185, "290075": 185, "4846": 185, "203174": 185, "550213": 185, "4807": 185, "075887": 185, "4852": 185, "080295": 185, "358295": 185, "4806": 185, "878051": 185, "4855": 185, "973770": 185, "259297": 185, "706026": 185, "4860": 185, "893055": 185, "237703": 185, "4809": [185, 259], "440409": 185, "4866": 185, "718747": 185, "850031": 185, "989341": 185, "4867": 185, "358990": 185, "384338": 185, "4801": 185, "702266": 185, "163224": 185, "296575": 185, "4802": 185, "594754": 185, "4872": 185, "147022": 185, "031555": 185, "236720": 185, "4874": 185, "880298": 185, "618263": 185, "4798": 185, "484109": 185, "4876": 185, "218997": 185, "526599": 185, "4799": 185, "543841": 185, "370039": 185, "586798": 185, "4794": 185, "238744": 185, "4880": 185, "156252": 185, "445978": 185, "4795": 185, "589715": 185, "4885": 185, "598533": 185, "259031": 185, "4796": 185, "966981": 185, "4891": 185, "067109": 185, "032179": 185, "662409": 185, "4888": 185, "762537": 185, "019069": 185, "652739": 185, "752867": 185, "626286": 185, "4894": 185, "817724": 185, "set_xscal": [185, 200, 201], "optimist": [185, 261, 341, 352, 690, 960, 964], "proper": [185, 214, 358, 376, 393, 402, 432, 524, 536, 659, 918, 939, 959, 960, 961, 964, 979, 1005, 1015, 1016, 1017, 1018, 1019, 1020], "badli": [185, 196, 341, 358, 861, 960, 974], "lassolarscv": [185, 404, 635, 636, 637, 639, 646, 648, 665, 666, 667, 960, 1005, 1012, 1018], "3800": 185, "mse_path_": [185, 630, 634, 636, 638, 644, 646], "cv_alphas_": [185, 634, 638, 1017], "kink": 185, "heavili": [185, 356, 357, 370, 378, 632, 638, 981], "efficaci": 185, "plot_lasso_model_select": [185, 215, 630, 636], "138": [186, 215, 350, 351, 376, 402, 405, 964], "plot_logist": [186, 215], "axes_row": 187, "clf_l1_lr": 187, "clf_l2_lr": 187, "clf_en_lr": 187, "coef_l1_lr": 187, "coef_l2_lr": 187, "coef_en_lr": 187, "sparsity_l1_lr": 187, "sparsity_l2_lr": 187, "sparsity_en_lr": 187, "nl1_ratio": 187, "685": [187, 215, 703, 722, 964], "plot_logistic_l1_l2_spars": [187, 215], "995": 188, "plot_logistic_multinomi": [188, 215], "976": [188, 231, 239], "dupr": [188, 204, 276, 278, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "m4x": [188, 212], "sag": [188, 203, 641, 642, 655, 657, 670, 960, 978, 984, 1010, 1011, 1012, 1014, 1015], "bry": [188, 205], "classes_": [188, 205, 226, 265, 316, 317, 370, 372, 383, 421, 422, 532, 533, 534, 536, 538, 540, 542, 544, 547, 550, 552, 576, 577, 593, 641, 642, 649, 651, 657, 658, 659, 680, 683, 685, 770, 779, 782, 783, 793, 809, 810, 811, 812, 813, 816, 817, 818, 819, 820, 823, 828, 831, 838, 841, 848, 849, 852, 876, 877, 878, 881, 883, 886, 889, 891, 894, 964, 975, 978, 1006, 1009, 1010, 1012, 1015, 1017], "plot_hyperplan": [188, 205, 232], "284": [188, 215, 632], "looser": 189, "liblinear": [189, 326, 376, 641, 642, 770, 881, 882, 883, 886, 887, 964, 979, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1021], "l1_min_c": [189, 960, 979, 1005], "intercept_sc": [189, 641, 642, 881, 882, 888, 960], "coefs_": [189, 294, 838, 839, 968, 1010], "plot_logistic_path": [189, 215], "jointli": [190, 263, 394, 395, 400, 960], "instant": 190, "wave": [190, 370, 963], "n_task": [190, 960], "n_relevant_featur": 190, "multitasklasso": [190, 635, 643, 646, 960, 1005, 1013, 1016, 1018], "coef_lasso_": 190, "coef_multi_task_lasso_": 190, "spy": 190, "feature_to_plot": 190, "seagreen": 190, "404": [190, 214, 215], "plot_multi_task_lasso_support": [190, 215], "reg_nnl": 191, "y_pred_nnl": 191, "r2_score_nnl": 191, "nnl": [191, 640], "8225220806196525": 191, "reg_ol": 191, "y_pred_ol": 191, "r2_score_ol": 191, "7436926291700354": 191, "low_x": 191, "high_x": 191, "low_i": 191, "high_i": 191, "get_ylim": [191, 298, 299], "847222222222214": 191, "096": [191, 215, 320, 322], "plot_nnl": [191, 215], "938": [192, 767, 964, 994], "23786125": 192, "2548": 192, "diabetes_x": [192, 997], "diabetes_i": [192, 997], "diabetes_x_train": [192, 997], "diabetes_x_test": [192, 997], "diabetes_y_train": [192, 997], "diabetes_y_test": [192, 997], "regr": [192, 396, 537, 539, 548, 629, 630, 650, 814, 839, 882, 884, 887, 979, 997], "diabetes_y_pr": 192, "066": [192, 215, 254, 281, 290, 631], "plot_ol": [192, 215], "plot_ols_3d": [193, 215], "greatli": [194, 230, 313, 370, 378, 435, 967, 980, 1011, 1019], "362": [194, 215], "plot_ols_ridge_vari": [194, 215], "orthogonalmatchingpursuit": [195, 648, 668, 669, 960, 1005, 1007, 1010, 1013, 1018], "orthogonalmatchingpursuitcv": [195, 647, 1007, 1018], "make_sparse_coded_sign": [195, 514, 520, 1019, 1021], "512": 195, "n_nonzero_coef": [195, 509, 514, 520, 525, 531, 633, 647, 668, 669], "xw": [195, 311, 629, 630, 632, 635, 636, 637, 638, 639, 643, 644, 645, 646, 655, 664, 665, 666, 667, 960], "_0": [195, 668, 960, 964, 979], "distort": [195, 229, 367, 393, 394, 858, 870, 875, 961, 974, 976], "y_noisi": 195, "idx_r": 195, "omp_cv": 195, "plot_omp": [195, 215], "gbrt": [196, 402], "contract": [196, 214, 357, 383, 985], "compani": [196, 214, 395, 988], "policyhold": [196, 214, 960], "vehicl": [196, 214], "driver": [196, 214, 1020], "exposur": [196, 214, 960], "car": 196, "accid": [196, 214], "noll": [196, 214], "salzmann": [196, 214], "wuthrich": [196, 214], "novemb": [196, 214, 367, 1010, 1011, 1013], "2139": [196, 214], "ssrn": [196, 214], "3164764": [196, 214], "ch": [196, 198, 214, 319, 321], "rth": [196, 214], "41214": [196, 214], "idpol": [196, 214], "claimnb": [196, 214], "vehpow": [196, 214], "vehag": [196, 214], "drivag": [196, 214], "bonusmalu": [196, 214], "vehbrand": [196, 214], "vehga": [196, 214], "b12": [196, 214], "1217": 196, "r82": 196, "77000": 196, "75000": 196, "diesel": [196, 214], "r22": 196, "09000": 196, "r72": 196, "84000": 196, "678008": 196, "6114326": 196, "00274": 196, "3317": 196, "r93": 196, "678009": 196, "6114327": 196, "9850": 196, "r11": [196, 214], "678010": 196, "6114328": 196, "1323": 196, "678011": 196, "6114329": 196, "r26": 196, "678012": 196, "6114330": 196, "678013": [196, 214], "10070308464041304": 196, "log_scale_transform": [196, 214], "linear_model_preprocessor": 196, "passthrough_numer": [196, 214], "binned_numer": [196, 214], "2e5": [196, 214, 846], "log_scaled_numer": [196, 214], "onehot_categor": [196, 214], "imbalanc": [196, 259, 263, 265, 342, 381, 393, 399, 686, 691, 769, 780, 784, 818, 964, 966, 972, 984], "simplist": [196, 403], "pertin": 196, "dummyregressor": [196, 214, 534, 964, 1006, 1008, 1009, 1012, 1013, 1015, 1018, 1019], "df_train": [196, 214], "df_test": [196, 214], "regressor__sample_weight": 196, "mean_absolute_error": [196, 198, 214, 964, 1006, 1008], "mean_poisson_devi": [196, 964, 1015], "score_estim": [196, 214], "n_mask": 196, "564": [196, 200, 215], "189": [196, 376, 878, 977], "comonli": 196, "ridge_glm": 196, "strictli": [196, 214, 298, 342, 375, 383, 393, 398, 400, 403, 491, 492, 518, 524, 527, 544, 545, 571, 574, 625, 653, 654, 678, 683, 721, 748, 779, 782, 783, 789, 793, 804, 830, 857, 869, 873, 874, 876, 877, 881, 882, 886, 887, 916, 953, 955, 960, 964, 974, 978, 1006, 1016, 1021], "domain": [196, 304, 383, 385, 399, 618, 704, 705, 706, 780, 781, 786, 787, 788, 960, 985], "560": [196, 500, 501], "186": [196, 295, 376, 770, 964], "595": 196, "223745": 196, "597": 196, "glm": [196, 214, 309, 631, 652, 663, 960, 1005, 1016], "vanilla": [196, 395, 430, 432, 443, 612], "poissonregressor": [196, 214, 309, 312, 631, 663, 960, 1016, 1019, 1020], "poisson_glm": 196, "newton": [196, 214, 295, 593, 631, 641, 642, 652, 663, 838, 839, 960, 1009, 1010, 1012, 1016, 1017, 1018, 1019, 1020], "deep": [196, 372, 383, 409, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 751, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 968, 969, 984, 985, 988, 1010, 1016, 1017, 1019], "implicit": [196, 383, 402, 403, 555, 665, 666, 958, 963, 984, 1014], "concis": [196, 375, 1016, 1018], "poisson_gbrt": 196, "566": 196, "prone": [196, 243, 302, 381, 393], "set_yscal": 196, "5e5": 196, "realiz": [196, 988], "priori": [196, 213, 265, 274, 298, 383, 395, 402, 571, 577, 963], "wrongli": [196, 328], "gen_even_slic": [196, 379, 921], "_mean_frequency_by_risk_group": 196, "y_true_bin": 196, "y_pred_bin": 196, "idx_sort": 196, "sl": 196, "y_true_seg": 196, "y_pred_seg": 196, "11935": 196, "11933": 196, "11932": 196, "12196": 196, "11931": 196, "portfolio": [196, 214, 958], "riskiest": [196, 214], "safest": [196, 214, 352, 364], "irrespect": [196, 229, 265, 276, 589], "lorenz": [196, 214, 1010], "summar": [196, 247, 263, 265, 343, 370, 372, 385, 402, 504, 641, 677, 689, 690, 960, 961, 964, 970], "gini": [196, 214, 236, 268, 310, 536, 537, 540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 953, 972, 980, 1013, 1014], "lorenz_curv": [196, 214], "ranked_frequ": 196, "ranked_exposur": [196, 214], "cumulated_claim": 196, "cumulated_exposur": 196, "cum_exposur": 196, "cum_claim": [196, 214], "0x7fd17d856070": 196, "worst": [196, 304, 367, 395, 430, 691, 711, 712, 765, 766, 769, 772, 773, 806, 964, 988, 1005, 1018], "occurr": [196, 304, 342, 343, 365, 370, 395, 403, 552, 553, 564, 572, 573, 600, 610, 611, 612, 613, 765, 816, 844, 966, 1006, 1011], "circumstanti": 196, "extractor": [196, 295, 358, 365, 383, 403, 486, 953, 1005], "discrim": 196, "profil": [196, 356, 370, 373, 504, 507, 960, 988], "ideal": [196, 198, 214, 253, 256, 263, 265, 266, 352, 369, 370, 374, 375, 378, 381, 383, 393, 708, 738, 953, 963, 978, 979, 985], "meaningfulli": [196, 964], "plot_poisson_regression_non_normal_loss": [196, 215], "monomi": 197, "vandermond": [197, 974], "x_0": [197, 640], "pseudo": [197, 295, 372, 399, 407, 424, 435, 437, 445, 452, 453, 454, 456, 457, 458, 459, 516, 544, 545, 546, 610, 617, 622, 624, 625, 629, 630, 635, 636, 643, 644, 645, 646, 660, 674, 678, 782, 783, 791, 793, 830, 837, 873, 874, 878, 881, 882, 883, 886, 917, 918, 960, 976, 1010, 1019], "consecut": [197, 393, 399, 403, 427, 430, 432, 433, 435, 439, 442, 445, 520, 521, 522, 529, 585, 628, 649, 650, 651, 659, 660, 661, 777, 778, 784, 816, 817, 818, 819, 820, 838, 839, 953, 974, 999, 1013], "basis_1": 197, "basis_2": 197, "infinit": [197, 241, 259, 356, 405, 605, 606, 760, 777, 899, 901, 902, 956, 963, 974, 979, 1013, 1015, 1018, 1019, 1020], "malt": [197, 1018, 1019, 1020], "londschien": [197, 1018], "prepar": [197, 341, 356, 372, 373, 376, 378, 980, 988, 1013], "set_prop_cycl": 197, "teal": [197, 206, 263], "yellowgreen": [197, 199, 206, 348], "tomato": 197, "unwant": [197, 341], "oscillatori": [197, 974], "danger": [197, 399], "pft": 197, "splt": 197, "bsplines_": [197, 860], "refrain": [197, 370], "dec": [197, 660, 860, 885, 979], "31st": [197, 860], "advis": [197, 352, 368, 370, 395, 403, 421, 629, 635, 637, 643, 645, 655, 670, 956, 960, 966, 968, 979, 1019], "x_plot_ext": 197, "y_plot_ext": 197, "plot_polynomial_interpol": [197, 215, 856, 860], "pareto": 198, "dale": [198, 1018], "mail": [198, 303, 365, 370, 374, 378, 381, 384, 982, 1013, 1014], "ru": 198, "glemaitre58": 198, "y_true_mean": 198, "y_normal": 198, "y_pareto": 198, "huge": [198, 201, 356, 376, 610, 1008], "heavi": [198, 392, 985], "sp_version": [198, 653], "parse_vers": [198, 653], "incompat": [198, 374, 479, 954, 1013, 1014], "older": [198, 369, 374, 1008, 1015, 1017], "recent": [198, 359, 368, 371, 375, 378, 383, 386, 395, 451, 521, 548, 978, 988, 1008, 1017], "interior": [198, 653, 960, 1020], "out_bounds_predict": 198, "bool_": 198, "logical_or": [198, 204, 265, 376], "hit": [198, 376], "wider": [198, 403, 894, 960], "asymmetri": [198, 341], "linger": 198, "linear_regress": [198, 270], "quantile_regress": 198, "y_pred_lr": 198, "y_pred_qr": 198, "805": [198, 312, 314], "486": 198, "670": 198, "cv_results_lr": 198, "cv_results_qr": 198, "test_neg_mean_squared_error": [198, 804], "690": 198, "679": [198, 881], "129": [198, 283, 290, 995, 1005], "812": [198, 215, 336, 339], "plot_quantile_regress": [198, 215], "robustli": [199, 394], "faulti": [199, 1005], "1903908407869": 199, "17236387": 199, "08533159": 199, "ransacregressor": [199, 202, 213, 632, 661, 662, 960, 1008, 1010, 1011, 1012, 1013, 1016, 1018, 1019], "inlier_mask": 199, "inlier_mask_": [199, 654], "outlier_mask": 199, "line_x": [199, 213], "line_i": 199, "line_y_ransac": 199, "estimator_": [199, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 576, 577, 580, 654, 948, 1020], "144": [199, 215, 256, 376, 1005], "plot_ransac": [199, 215], "regularis": [200, 408, 456, 458], "eventu": [200, 244, 394, 395, 404, 576, 988], "simpler": [200, 214, 328, 356, 369, 395, 400, 960, 965, 997, 1010], "stronger": [200, 257, 626, 635, 641, 642, 655, 656, 657, 658, 659, 661, 670], "kornel": [200, 1011], "kielczewski": [200, 1011], "plusnet": 200, "plot_ridge_coeff": [200, 215], "practis": 201, "maintain": [201, 214, 217, 256, 357, 359, 369, 373, 376, 377, 378, 381, 383, 386, 395, 402, 424, 426, 850, 851, 857, 858, 861, 866, 869, 870, 872, 960, 961, 974, 980, 984, 985, 990, 1001, 1020], "10x10": 201, "hilbert": [201, 847, 956, 974], "n_alpha": [201, 455, 629, 630, 633, 634, 635, 636, 637, 638, 639, 643, 644, 645, 646, 656, 658, 664, 665, 666, 667, 1008], "plot_ridge_path": [201, 215], "theilsen": 202, "lessen": [202, 641, 642, 881, 882], "theilsenregressor": [202, 213, 632, 654, 661, 960, 1009, 1017, 1019], "x_error": 202, "y_errors_larg": 202, "x_errors_larg": 202, "deviant": [202, 970], "legend_titl": 202, "nabsolut": 202, "nto": [202, 265], "958": [202, 215], "plot_robust_fit": [202, 215], "asgd": [203, 978], "rob": [203, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1017, 1020], "zinkov": [203, 1005, 1006, 1007, 1009, 1010], "heldout": 203, "squared_hing": [203, 336, 649, 659, 881, 888, 960], "0e4": 203, "yy_": 203, "591": [203, 215], "plot_sgd_comparison": [203, 215], "monitor": [204, 373, 383, 536, 537, 542, 543, 544, 545, 968, 1008, 1013, 1015, 1017], "_test": [204, 300, 372, 1018], "ignore_warn": [204, 300, 1011], "load_mnist": [204, 276], "class_0": [204, 367, 493], "class_1": [204, 367, 493], "554": [204, 212, 294], "mnist_784": [204, 212, 276, 294], "fit_and_scor": 204, "train_scor": [204, 271, 304, 336, 346, 785, 804, 805, 808, 959], "estimator_dict": 204, "flush": 204, "results_df": [204, 256, 304], "group_df": 204, "476": [204, 215], "plot_sgd_early_stop": [204, 215], "ova": [205, 649, 651, 659, 978], "plot_sgd_iri": [205, 215], "ugli": [205, 279, 284, 287, 324], "modified_huber_loss": 206, "darkorchid": 206, "plot_sgd_loss_funct": [206, 215], "l1_color": 207, "l2_color": 207, "elastic_net_color": 207, "1001": 207, "rho": [207, 400, 660, 960, 978, 1006], "elastic_net": 207, "dpi": [207, 895, 1018], "elastic_net_contour": 207, "l2_contour": 207, "l1_contour": 207, "inlin": [207, 370, 371, 980], "293": [207, 215], "plot_sgd_penalti": [207, 215], "ndenumer": 208, "plot_sgd_separating_hyperplan": [208, 215], "no_weight": 209, "samples_weight": 209, "no_weights_handl": 209, "weights_handl": 209, "plot_sgd_weighted_sampl": [209, 215], "sgdoneclasssvm": [210, 225, 311, 885, 970, 978, 1018, 1020, 1021], "rc": [210, 374], "novel": [210, 282, 327, 352, 393, 953], "abnorm": [210, 225, 282, 327, 365, 475, 546, 827, 970, 1013], "y_pred_train": [210, 327], "y_pred_test": [210, 282, 327], "y_pred_outli": [210, 282, 327], "n_error_train": [210, 327], "n_error_test": [210, 282, 327], "n_error_outli": [210, 282, 327], "clf_sgd": 210, "pipe_sgd": 210, "y_pred_train_sgd": 210, "y_pred_test_sgd": 210, "y_pred_outliers_sgd": 210, "n_error_train_sgd": 210, "n_error_test_sgd": 210, "n_error_outliers_sgd": 210, "z_sgd": 210, "pubu": [210, 229, 282, 327], "darkr": [210, 282, 327], "palevioletr": [210, 282, 327], "b1": [210, 282, 327], "b2": [210, 282, 327], "blueviolet": [210, 282, 327], "458": [210, 215], "plot_sgdocsvm_vs_ocsvm": [210, 215], "newgroups20": 211, "trim": [211, 821, 822], "20newsgroup": [211, 363, 1005], "4500": 211, "130107": [211, 229, 472], "epoch": [211, 383, 519, 649, 650, 651, 659, 660, 661, 838, 839, 978, 1012, 1013, 1018], "5960": 211, "26593496": 211, "43348936": 211, "26362917": 211, "31973683": 211, "37815029": 211, "2928359": 211, "27054655": 211, "62717609": 211, "19522393": 211, "30897646": 211, "34586917": 211, "28207552": 211, "34125758": 211, "29898468": 211, "34279478": 211, "59489497": 211, "38353048": 211, "35278655": 211, "19829832": 211, "14603365": 211, "6440": 211, "36047253": 211, "1268187": 211, "10606655": 211, "17985197": 211, "5395559": 211, "07993421": 211, "06686804": 211, "21443888": 211, "11528972": 211, "2075215": 211, "10914094": 211, "11144673": 211, "13988486": 211, "09684337": 211, "26286057": 211, "11682692": 211, "55800226": 211, "17370318": 211, "11452112": 211, "arthur": [211, 212, 395, 430, 443, 1010, 1011, 1012, 1013, 1014, 1017, 1019], "mensch": [211, 212, 1010, 1011, 1012, 1013], "timeit": [211, 244, 376], "default_tim": [211, 244], "model_param": 211, "this_max_it": 211, "train_tim": [211, 231, 341, 342], "ndataset": [211, 300], "run_tim": [211, 212], "plot_sparse_logistic_regression_20newsgroup": [211, 215], "8253": 212, "301": [212, 396, 978], "l1_plot": 212, "402": [212, 215, 229, 260, 342], "plot_sparse_logistic_regression_mnist": [212, 215], "subpopul": [213, 662, 960], "residual_threshold": [213, 654, 960, 1018], "remedi": 213, "max_subpopul": [213, 662, 1019], "lose": [213, 343, 365, 383, 398, 403, 405, 529, 917, 918, 954, 960, 999], "florian": [213, 988, 1005, 1009, 1011, 1015], "wilhelm": [213, 1009, 1011, 1015], "indigo": 213, "851": [213, 215, 256], "plot_theilsen": [213, 215], "motor": 214, "parti": [214, 357, 369, 381, 781, 788, 932, 982, 1005, 1016], "liabil": 214, "functool": 214, "mean_tweedie_devi": [214, 964, 1015], "load_mtpl2": 214, "fremtpl2freq": 214, "df_freq": 214, "fremtpl2sev": 214, "41215": 214, "df_sev": 214, "claimamount": 214, "fillna": 214, "unquot": 214, "field": [214, 367, 392, 395, 396, 403, 481, 484, 600, 960, 962, 971, 979, 984, 987, 999, 1006], "column_nam": 214, "plot_obs_pr": 214, "y_label": 214, "fill_legend": 214, "df_": 214, "tweedie_pow": 214, "d\u00b2": 214, "subset_label": 214, "score_label": [214, 262], "est_freq": 214, "est_sev": 214, "unstack": [214, 259], "fremtpl2": 214, "unreason": [214, 399], "exception": 214, "200000": 214, "column_tran": [214, 396], "purepremium": 214, "indirectli": 214, "avgclaimamount": 214, "fmax": 214, "option_context": 214, "max_column": 214, "139": [214, 276, 348, 351, 376, 402, 435, 445, 674, 678, 965], "414": [214, 396, 708, 738, 857, 869, 964], "424": 214, "463": 214, "27000": 214, "333333": 214, "r25": 214, "1981": [214, 960], "14156": 214, "142857": 214, "4792": 214, "1456": 214, "10403": 214, "928571": 214, "10834": 214, "17474": 214, "193548": 214, "225806": 214, "r73": 214, "3986": 214, "12860": [214, 1014], "5417": 214, "seemingli": [214, 352, 381], "169504": 214, "6237": 214, "upon": [214, 222, 289, 365, 370, 381, 383, 389, 544, 545, 610, 613, 654, 771, 777, 778, 821, 822, 953, 960, 980, 990, 999, 1019], "glm_freq": 214, "0201": 214, "0219": 214, "1379": 214, "1378": 214, "2441": 214, "2246": 214, "surprisingli": [214, 365, 403], "bonu": [214, 370, 994, 999], "malu": 214, "younger": 214, "infti": [214, 405, 602, 960, 974, 1012], "gammaregressor": [214, 309, 312, 663, 960, 1016, 1019, 1020], "mask_test": 214, "glm_sev": 214, "400000e": 214, "700000e": 214, "756746e": 214, "744042e": 214, "801770e": 214, "030677e": 214, "dummy_sev": 214, "000000e": 214, "756687e": 214, "744497e": 214, "803882e": 214, "033764e": 214, "slighli": 214, "avgclaim": 214, "nbclaim": 214, "1951": 214, "1940": 214, "1978": [214, 960], "apriori": 214, "regardless": [214, 257, 258, 259, 357, 370, 395, 518, 641, 687, 698, 964, 976, 1013, 1020], "glm_pure_premium": 214, "scores_product_model": 214, "scores_glm_pure_premium": 214, "expand_frame_repr": 214, "690000e": 214, "420000e": 214, "669930e": 214, "617050e": 214, "640770e": 214, "640880e": 214, "7000": 214, "695740e": 214, "683980e": 214, "682880e": 214, "692270e": 214, "8000": [214, 259, 260], "046010e": 214, "040530e": 214, "037600e": 214, "045390e": 214, "9000": 214, "387580e": 214, "385000e": 214, "382120e": 214, "387830e": 214, "9900": 214, "015716e": 214, "015414e": 214, "015347e": 214, "015587e": 214, "9990": 214, "914573e": 214, "914370e": 214, "914538e": 214, "914387e": 214, "904751e": 214, "904556e": 214, "904747e": 214, "904558e": 214, "730119e": 214, "722128e": 214, "739865e": 214, "731249e": 214, "295040e": 214, "212197e": 214, "295505e": 214, "213056e": 214, "917618e": 214, "299546e": 214, "916555e": 214, "313276e": 214, "951751e": 214, "325198e": 214, "riski": 214, "operation": [214, 988], "develop": [214, 254, 256, 308, 341, 356, 359, 365, 369, 370, 376, 381, 383, 384, 385, 389, 392, 394, 397, 398, 402, 403, 417, 476, 779, 960, 967, 980, 982, 984, 985, 987, 988, 997, 1005, 1013, 1014, 1015, 1018, 1020, 1021], "ranked_pure_premium": 214, "cumulated_claim_amount": 214, "cumulated_sampl": 214, "y_pred_product": 214, "y_pred_tot": 214, "ordered_sampl": 214, "plot_tweedie_regression_insurance_claim": [214, 215], "155": [215, 236, 239], "auto_examples_linear_model": 215, "md": [217, 218, 219, 220, 374, 671, 675, 677, 1000, 1001, 1005, 1017, 1020], "seek": [217, 219, 221, 369, 370, 381, 384, 491, 492, 961, 991, 993], "ticker": [217, 219, 222, 276], "s_point": 217, "s_color": 217, "make_s_curv": [217, 222], "plot_3d": 217, "points_color": 217, "subplot_kw": [217, 280], "set_major_loc": [217, 281], "multipleloc": [217, 281], "add_2d_scatt": 217, "set_major_formatt": [217, 219, 222, 276, 281], "nullformatt": [217, 219, 222, 276], "lle": [217, 218, 219, 221, 513, 672, 676, 961, 1017], "thought": [217, 281, 383, 395, 961, 965], "analys": [217, 350, 400, 782, 783, 961, 984, 988], "lle_standard": 217, "s_standard": 217, "lle_ltsa": 217, "ltsa": [217, 218, 219, 672, 676, 961], "s_ltsa": 217, "lle_hessian": 217, "hessian": [217, 218, 219, 402, 631, 641, 642, 652, 663, 672, 676, 960, 968, 1000, 1001, 1020], "s_hessian": 217, "lle_mod": 217, "s_mod": 217, "lle_method": 217, "tangent": [217, 672, 676, 962, 1000, 1001], "eigenmap": [217, 672, 674, 676, 678, 1000, 1001, 1006], "isometr": [217, 671, 673, 674, 675, 961], "geodes": [217, 671, 961], "s_isomap": 217, "md_scale": 217, "normalized_stress": [217, 218, 219, 220, 673, 677, 961, 1020], "s_scale": 217, "laplacian": [217, 362, 392, 424, 435, 445, 603, 622, 626, 674, 678, 747, 748, 756, 877, 960, 961, 977, 1001, 1006, 1011], "s_spectral": 217, "t_sne": [217, 1013], "s_t_sne": 217, "766": [217, 223], "plot_compare_method": [217, 223], "offsetbox": 218, "plot_embed": 218, "425": [218, 598], "shown_imag": 218, "someth": [218, 341, 370, 372, 373, 374, 378, 403, 964, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "4e": 218, "imagebox": 218, "annotationbbox": 218, "offsetimag": 218, "neighborhoodcomponentsanalysi": [218, 284, 285, 286, 967, 1014, 1019], "random_project": [218, 229, 359, 976, 981, 1006, 1011, 1021], "sparserandomproject": [218, 229, 873, 976, 1006, 1011, 1019, 1021], "embeed": 218, "n_iter_without_progress": [218, 675, 1010, 1011], "nca": [218, 284, 285, 286, 830, 967], "807": [218, 223, 254, 256], "plot_lle_digit": [218, 223], "pole": 219, "thin": [219, 603], "earth": [219, 342, 746, 984], "251": [219, 287, 290, 367], "sphere_data": 219, "trans_data": 219, "2g": [219, 222, 680, 1016], "257": [219, 254], "258": 219, "se": [219, 367, 386], "418": [219, 223], "plot_manifold_spher": [219, 223], "euclidean_dist": [220, 229, 372, 433, 440, 671, 744, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 1005, 1010, 1013, 1014], "finfo": [220, 454, 455, 461, 589, 633, 634, 637, 638, 639, 665, 666, 723, 1020], "x_true": 220, "dissimilar": [220, 383, 392, 435, 673, 677, 961, 1011, 1021], "embedding_": [220, 383, 671, 672, 673, 674, 675], "nmd": 220, "npo": 220, "plot_md": [220, 223], "sr_point": 221, "sr_color": 221, "ambient": 221, "text2d": 221, "unrol": 221, "unnecessarili": [221, 1012, 1015], "clump": 221, "sr_lle": 221, "sr_err": 221, "locally_linear_embed": [221, 961], "sr_tsne": 221, "stretch": [221, 245], "byproduct": 221, "ultim": [221, 371], "sh_point": 221, "sh_color": 221, "topologi": [221, 222], "sh_lle": 221, "sh_err": 221, "sh_tsne": 221, "215": [221, 223, 567], "plot_swissrol": [221, 223], "tendenc": [222, 960, 961, 963, 966, 969], "clearer": [222, 979], "distil": 222, "pub": [222, 819, 876], "misread": 222, "narin": [222, 1012, 1013], "kokhlikyan": [222, 1012, 1013], "plot_t_sne_perplex": [222, 223], "033": [223, 972], "auto_examples_manifold": 223, "cope": [225, 358, 365, 960], "multimod": 225, "inli": [225, 960, 970], "unimod": [225, 457], "localoutlierfactor": [225, 234, 282, 283, 312, 383, 546, 885, 970, 1012, 1013, 1015, 1019, 1020, 1021], "modal": [225, 457, 920], "hypercub": [225, 498], "decent": [225, 255, 365, 966], "handpick": 225, "absenc": [225, 259, 383, 695, 844, 963, 964], "negative_linestyl": 225, "outliers_fract": 225, "n_inlier": 225, "anomaly_algorithm": 225, "blobs_param": 225, "plot_anomaly_comparison": [225, 239], "transfus": 226, "1464": 226, "donat": 226, "confust": 226, "cm_displai": 226, "y_score": [226, 263, 265, 383, 465, 466, 467, 690, 703, 708, 709, 721, 722, 738, 764, 770, 771, 774, 779, 782, 783, 793, 841, 964, 1011, 1019], "pos_label": [226, 234, 383, 422, 423, 681, 683, 685, 689, 690, 692, 709, 711, 712, 720, 764, 765, 766, 769, 771, 848, 865, 964, 1013, 1017, 1019], "roc_displai": 226, "previs": 226, "precision_recall_curv": [226, 263, 683, 689, 690, 709, 964, 1006, 1007, 1011, 1018, 1019, 1021], "pr_displai": 226, "easlii": 226, "444": [226, 239], "plot_display_object_visu": [226, 239], "summaris": [227, 309], "composit": [227, 309, 359, 362, 399, 641, 770, 954, 960, 973, 1001, 1006], "num_proc": [227, 309], "cat_proc": [227, 309], "feat1": [227, 309, 403], "feat3": [227, 309, 403], "feat0": [227, 309], "feat2": [227, 309, 403], "045": [227, 239, 342, 705], "plot_estimator_represent": [227, 239], "isotonicregress": [228, 955, 1006, 1007, 1008, 1009, 1011, 1013, 1014, 1015, 1017, 1019, 1020, 1021], "ir": [228, 400, 573, 708, 738, 816, 820, 962, 964], "out_of_bound": [228, 618], "y_": [228, 242, 246, 247, 288, 372, 398, 400, 620, 631, 652, 663, 711, 712, 720, 765, 766, 769, 960, 964, 1011], "linearregressionlinearregress": 228, "x_thresholds_": [228, 618, 1017], "y_thresholds_": [228, 618, 1017], "plot_isotonic_regress": [228, 239], "lemma": [229, 362, 394, 517, 524, 532, 873, 874, 875, 958, 1001, 1008], "johnson_lindenstrauss_min_dim": [229, 976, 1006], "achliopta": [229, 874, 875, 976], "_compon": [229, 519], "geq": [229, 393, 400, 402, 960, 964, 974, 978, 979], "_sampl": [229, 400, 521, 523, 530], "admiss": [229, 357], "eps_rang": 229, "min_n_compon": 229, "nn_sampl": [229, 268], "semilogi": 229, "nn_compon": [229, 230], "100k": 229, "n_components_rang": 229, "rp": 229, "projected_data": 229, "n_byte": 229, "projected_dist": 229, "min_dist": 229, "max_dist": 229, "hexbin": 229, "gridsiz": 229, "298": [229, 299, 306, 972], "332": [229, 342, 869], "271": [229, 274, 275], "jl": [229, 874], "436": 229, "136": [229, 239], "plot_johnson_lindenstrauss_bound": [229, 239], "rbfsampler": [230, 622, 623, 625, 956, 990, 1009, 1019, 1020], "mont": [230, 405, 594, 624, 625, 956, 969], "fourier": [230, 394, 621, 622, 623, 624, 625, 740, 741, 956], "acceler": [230, 313, 356, 381, 451, 675, 879, 961, 984, 988, 1014, 1018, 1020], "data_train": [230, 257, 341], "targets_train": 230, "data_test": [230, 257, 341], "targets_test": 230, "kernel_svm": 230, "linear_svm": 230, "feature_map_fouri": 230, "feature_map_nystroem": [230, 622], "fourier_approx_svm": 230, "feature_map": [230, 298], "nystroem_approx_svm": 230, "kernel_svm_tim": 230, "kernel_svm_scor": 230, "linear_svm_tim": 230, "linear_svm_scor": 230, "fourier_scor": 230, "nystroem_scor": 230, "fourier_tim": 230, "nystroem_tim": 230, "feature_map__n_compon": 230, "timescal": 230, "ly": [230, 829, 831, 832, 833, 1009], "flat_grid": 230, "lv_ep": 230, "tab10": [230, 246], "plot_kernel_approxim": [230, 239], "krr": [231, 405, 626, 957], "insensit": [231, 626, 659, 661, 770, 882, 957, 978, 979, 1005], "fifth": [231, 957, 990], "kr": [231, 256, 1019], "svr_fit": 231, "kr_fit": 231, "sv_ratio": 231, "support_": [231, 335, 452, 457, 576, 577, 585, 883, 884, 885, 886, 887, 979], "y_svr": 231, "svr_predict": 231, "y_kr": 231, "kr_predict": 231, "737": [231, 507], "728": 231, "314": 231, "340": [231, 316], "sv_ind": 231, "arithmet": [231, 376, 378, 395, 534, 631, 652, 663, 687, 700, 718, 719, 739, 775, 964, 1013], "test_tim": [231, 341], "train_test_s": 231, "learningcurvedisplai": [231, 258, 313, 959, 1020], "negate_scor": [231, 785], "std_display_styl": [231, 258, 785], "get_legend_handles_label": [231, 258, 263], "plot_kernel_ridge_regress": [231, 239], "theta_c": [232, 506], "reject": [232, 383, 384, 506, 654, 709, 901, 902, 960, 964, 1013], "never": [232, 352, 370, 379, 381, 389, 395, 396, 398, 399, 433, 440, 506, 529, 538, 539, 540, 547, 841, 842, 956, 980, 1015, 1018], "likewis": [232, 395, 506], "surround": [232, 370, 827, 970], "cca": [232, 398, 466, 468, 1009, 1013, 1014, 1015, 1017, 1019], "onevsrestclassifi": [232, 263, 265, 274, 393, 809, 811, 881, 990, 1006, 1007, 1009, 1011, 1012, 1018, 1019], "metaclassifi": 232, "min_x": 232, "max_x": 232, "plot_subfigur": 232, "min_i": 232, "zero_class": 232, "one_class": 232, "160": [232, 953, 997], "nfor": 232, "plot_multilabel": [232, 239], "extratreesregressor": [233, 402, 540, 548, 549, 891, 892, 1008, 1011, 1013, 1014, 1015, 1018, 1019, 1020, 1021], "n_face": 233, "face_id": 233, "n_pixel": [233, 254], "nn": [233, 403, 678, 997], "y_test_predict": 233, "true_fac": 233, "completed_fac": 233, "plot_multioutput_face_complet": [233, 239], "benchmark": [234, 276, 310, 342, 343, 356, 363, 365, 370, 381, 386, 388, 393, 451, 498, 879], "iforest": 234, "pharuj": 234, "rajborirug": 234, "ra": 234, "kmitl": 234, "ac": [234, 513, 647, 668, 669, 960, 977, 999], "th": [234, 311, 350, 382, 399, 402, 410, 425, 429, 434, 436, 442, 446, 455, 540, 541, 542, 543, 544, 545, 547, 548, 549, 576, 577, 615, 631, 632, 652, 654, 663, 679, 701, 762, 800, 862, 906, 954, 960, 964, 968, 971, 978, 979, 1020], "preprocess_dataset": 234, "fetch_kddcup99": [234, 365, 1012, 1013, 1014, 1017, 1018], "labelbinar": [234, 265, 383, 723, 810, 845, 854, 865, 965, 990, 1008, 1009, 1010, 1014, 1019], "dataset_nam": [234, 276], "smtp": [234, 365, 475], "sa": [234, 365, 475], "percent10": [234, 475], "lb": [234, 848, 975], "forestcov": 234, "glass": [234, 365], "wdbc": [234, 367], "cardiotocographi": 234, "tablewar": 234, "x_mal": 234, "y_mal": 234, "x_ben": 234, "y_ben": 234, "x_mal2": 234, "y_mal2": 234, "compute_predict": 234, "model_nam": [234, 274], "negative_outlier_factor_": [234, 283, 827, 970], "datasets_nam": 234, "models_nam": 234, "ceil": [234, 540, 541, 542, 543, 546, 547, 548, 549, 577, 654, 782, 783, 889, 890, 891, 892, 978], "model_idx": 234, "plot_chance_level": [234, 265, 266, 685, 1021], "chance_level_kw": [234, 685, 1021], "682": [234, 239, 376], "plot_outlier_detection_bench": [234, 239], "recalcul": [235, 237, 395, 1002, 1005], "mlpregressormlpregressor": 235, "tree_disp": 235, "mlp_disp": 235, "0x7fd1b3630490": 235, "265": [235, 239, 285, 290, 717, 816, 820, 966], "plot_partial_dependence_visualization_api": [235, 239], "set_config": [236, 238, 305, 309, 356, 357, 396, 451, 609, 1014, 1016, 1019], "deactiv": [236, 364, 368, 371, 376, 386, 396, 782, 783, 1019], "standard_scal": 236, "polynomialfeaturespolynomialfeatur": 236, "pcapca": 236, "svcsvc": [236, 237, 254, 256, 310], "numeric_preprocessor": 236, "imputation_mean": 236, "categorical_preprocessor": [236, 304], "imputation_const": 236, "onehot": [236, 299, 300, 396, 846, 974], "gender": [236, 854, 974], "classifier__n_estim": 236, "classifier__max_featur": 236, "classifier__max_depth": 236, "classifier__criterion": 236, "plot_pipeline_displai": [236, 239], "svc_disp": [237, 308, 1002], "rfc_disp": [237, 308, 1002], "239": [237, 239, 1005], "plot_roc_curve_visualization_api": [237, 239], "transform_output": [238, 305, 451, 879, 1020], "slep018": [238, 372, 1020], "x_test_scal": 238, "894264": 238, "798301": 238, "271411": 238, "327605": 238, "244466": 238, "086944": 238, "327407": 238, "459074": 238, "660797": 238, "462234": 238, "576989": 238, "159419": 238, "933197": 238, "427329": 238, "414810": 238, "039497": 238, "275851": 238, "scaler2": 238, "x_test_np": 238, "x_test_df": 238, "feature_names_in_": [238, 305, 311, 383, 415, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 610, 611, 612, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 1018, 1019, 1020, 1021], "num_pip": 238, "num_col": 238, "7621951219512195": 238, "log_reg": [238, 312], "reset": [238, 305, 352, 378, 517, 659, 660, 661, 821, 822, 850, 851, 861, 1007], "config_context": [238, 356, 357, 391, 609, 879, 1012, 1018], "133660": 238, "438059": 238, "885": [238, 367], "894273": 238, "506893": 238, "478": 238, "000619": 238, "182778": 238, "671": [238, 976], "548540": 238, "461032": 238, "817": 238, "487001": 238, "13366001": 238, "4380594": 238, "89427284": 238, "50689261": 238, "00061876": 238, "18277786": 238, "54853974": 238, "46103177": 238, "48700054": 238, "194": [238, 239, 295], "plot_set_output": [238, 239], "114": [239, 313, 333, 339, 1005], "auto_examples_miscellan": 239, "bayesiangaussianmixtur": [241, 242, 247, 778, 1011, 1013, 1014, 1018, 1019], "weight_concentration_prior_typ": [241, 247, 777, 963, 1011], "dirichlet_distribut": [241, 777, 963, 1011], "dirichlet_process": [241, 247, 777, 963, 1011], "weight_concentration_prior": [241, 247, 777, 963], "finit": [241, 247, 356, 365, 383, 451, 521, 534, 565, 589, 592, 593, 594, 641, 710, 760, 767, 777, 802, 879, 899, 901, 902, 960, 963, 964, 980, 988, 990, 997, 1012, 1013, 1017, 1019, 1020], "unnecessari": [241, 375, 427, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 688, 967, 974, 985, 988, 1008, 1010, 1015, 1016, 1018, 1021], "covar": [241, 242, 247], "eig_val": 241, "eig_vec": 241, "unit_eig_vec": 241, "arctan2": [241, 243, 246], "56b4e9": 241, "plot_titl": 241, "weights_": [241, 777, 778, 1019], "covariances_": [241, 242, 243, 246, 247, 777, 778, 1012], "get_xaxi": [241, 286, 298], "set_tick_param": 241, "labelleft": 241, "0072b2": 241, "f0e442": 241, "d55e00": 241, "mean_precision_prior": [241, 247, 777], "nprior": 241, "gamma_0": [241, 247], "reg_covar": [241, 777, 778], "init_param": [241, 244, 247, 777, 778], "concentrations_prior": 241, "plot_concentration_prior": [241, 248], "_base": [242, 372], "270": [242, 317], "color_it": [242, 246, 247], "dp": [242, 247], "shouldn": [242, 247, 370], "em": [242, 243, 247, 427, 430, 442, 519, 777, 778, 963, 1019], "dpgmm": [242, 247, 1005, 1009, 1011], "plot_gmm": [242, 248], "ronweiss": 243, "make_ellips": 243, "datalim": 243, "skf": [243, 399, 798], "train_index": [243, 319, 399, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800], "test_index": [243, 319, 399, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800], "cov_typ": 243, "means_init": [243, 244, 778], "y_train_pr": 243, "train_accuraci": 243, "y_test_pr": 243, "test_accuraci": [243, 257], "360": [243, 248], "plot_gmm_covari": [243, 248], "random_from_data": [244, 777, 778, 963], "diamond": 244, "colour": [244, 367, 403, 570, 965], "walsh": [244, 1017, 1019], "extmath": [244, 341, 379, 436, 1011, 1012, 1015, 1020], "row_norm": 244, "_samples_gener": 244, "timer": [244, 376], "x_squared_norm": [244, 443], "get_initial_mean": 244, "times_init": 244, "relative_tim": 244, "ini": 244, "init_tim": 244, "2fx": 244, "956": [244, 248, 994], "plot_gmm_init": [244, 248], "shifted_gaussian": 245, "stretched_gaussian": 245, "score_sampl": [245, 281, 282, 283, 289, 383, 401, 452, 515, 524, 546, 660, 777, 778, 779, 782, 783, 793, 826, 827, 837, 841, 885, 970, 1008, 1013, 1015, 1017], "plot_gmm_pdf": [245, 248], "component_1": 246, "component_2": 246, "best_parameters_": 246, "gmm_bic_scor": 246, "callabl": [246, 260, 383, 399, 403, 404, 406, 407, 425, 427, 428, 429, 430, 432, 433, 435, 440, 442, 443, 447, 448, 449, 450, 514, 516, 518, 520, 522, 528, 529, 540, 541, 542, 543, 544, 545, 547, 548, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 593, 594, 603, 611, 617, 622, 626, 642, 649, 654, 656, 658, 671, 674, 675, 679, 694, 702, 714, 724, 753, 756, 760, 761, 762, 763, 772, 773, 779, 782, 783, 785, 793, 803, 804, 805, 806, 808, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 845, 854, 876, 877, 883, 884, 885, 886, 887, 925, 931, 934, 948, 953, 964, 974, 1005, 1009, 1012, 1013, 1014, 1015, 1017, 1019, 1021], "0x7fd1838eea60": 246, "gaussianmixturegaussianmixtur": 246, "param_n_compon": 246, "param_covariance_typ": 246, "829429": 246, "1084": 246, "038689": 246, "1114": 246, "517272": 246, "1148": 246, "512281": 246, "1179": 246, "977890": 246, "catplot": 246, "hue": [246, 256, 279, 303, 367], "eigenvalu": [246, 392, 395, 397, 435, 445, 452, 453, 454, 455, 456, 457, 458, 459, 518, 524, 532, 656, 671, 672, 674, 676, 678, 847, 961, 974, 1007, 1011, 1014, 1015, 1016, 1017], "230": [246, 248, 567], "plot_gmm_select": [246, 248], "loos": [247, 253, 979, 1013], "liberti": 247, "judgment": [247, 964], "panel": [247, 281, 298, 401, 984], "primarili": [247, 261, 370, 383, 391, 395, 988, 1014, 1015], "covariance_prior": [247, 777], "721": [247, 248, 521, 523, 530], "plot_gmm_sin": [247, 248], "auto_examples_mixtur": 248, "mislabel": [250, 402, 966], "imbal": [250, 259, 399, 690, 711, 712, 720, 765, 766, 769, 770, 964], "misclassifi": [250, 341, 979], "life": [250, 378, 961], "set_printopt": 250, "titles_opt": 250, "261": [250, 272], "plot_confusion_matrix": [250, 272, 308, 1015, 1016, 1017, 1018], "shufflesplit": [251, 258, 336, 399, 781, 787, 789, 799, 807, 994, 1005, 1006, 1008, 1010, 1011], "groupshufflesplit": [251, 399, 994, 1011], "groupkfold": [251, 261, 399, 577, 779, 782, 783, 784, 785, 786, 787, 788, 793, 797, 802, 803, 804, 805, 808, 994, 1011, 1018], "stratifiedshufflesplit": [251, 328, 399, 994, 1005, 1006, 1011, 1012, 1018], "stratifiedgroupkfold": [251, 1018], "1338": 251, "cmap_data": 251, "cmap_cv": 251, "coolwarm": [251, 325], "n_point": [251, 821, 822], "percentiles_class": 251, "perc": 251, "group_prior": 251, "visualize_group": 251, "yticklabel": [251, 341], "ngroup": 251, "nclass": 251, "plot_cv_indic": [251, 272], "tr": [251, 367, 374, 395, 397, 452, 453, 454, 455, 456, 457, 458, 459, 819], "this_cv": 251, "plot_cv_predict": [252, 272], "fnr": [253, 681, 709], "det_curv": [253, 681, 764, 771, 964, 1017, 1018], "visuali": 253, "commonli": [253, 363, 383, 395, 396, 405, 597, 740, 741, 777, 810, 853, 961, 962, 964, 965, 967, 1021], "detcurvedisplai": [253, 311, 709, 1017, 1018], "ax_roc": 253, "ax_det": 253, "feedback": [253, 369, 370, 371, 384, 984, 1013], "273": [253, 272], "plot_det": [253, 272], "n_imag": 254, "print_datafram": 254, "filtered_cv_result": 254, "mean_precis": 254, "std_precis": 254, "mean_recal": 254, "std_recal": 254, "mean_test_precis": [254, 260], "std_test_precis": 254, "mean_test_recal": 254, "std_test_recal": 254, "03f": 254, "refit_strategi": 254, "best_index": [254, 260], "precision_threshold": 254, "high_precision_cv_result": 254, "mean_score_tim": [254, 257, 779, 793], "rank_test_recal": 254, "rank_test_precis": [254, 260], "best_recall_std": 254, "best_recal": 254, "best_recall_threshold": 254, "high_recall_cv_result": 254, "fastest_top_recall_high_precision_index": 254, "idxmin": 254, "854": 254, "061": [254, 341, 344], "877": 254, "039": [254, 342, 733, 763, 964], "780": 254, "083": [254, 265, 272], "889": [254, 421], "074": 254, "073": [254, 454, 455], "695": 254, "743": [254, 997], "065": [254, 376], "611": [254, 256, 524], "028": 254, "744": [254, 276], "618": 254, "007762": 254, "877206": 254, "069196": 254, "0x7fd17da49160": 254, "419": [254, 272, 599], "plot_grid_search_digit": [254, 272], "minimis": [255, 395, 399, 641, 642, 980], "219": 255, "260": [255, 1018], "york": [255, 770, 777, 954, 964, 976], "usa": [255, 365, 878, 954, 961, 976, 977], "best_index_": [255, 260, 779, 782, 783, 793], "wenhao": [255, 1013, 1014], "zhang": [255, 395, 426, 647, 662, 668, 669, 672, 676, 740, 741, 960, 961, 962, 966, 978, 1009, 1010, 1012, 1013, 1014, 1015, 1017], "wenhaoz": 255, "ucla": [255, 960], "lower_bound": 255, "best_score_idx": 255, "best_low_complex": 255, "fewest": [255, 610], "candidate_idx": 255, "param_reduce_dim__n_compon": 255, "plot_grid_search_refit_cal": [255, 272], "moon": [256, 293, 300, 341, 342, 505], "moder": [256, 370, 405, 437, 970], "repeatedstratifiedkfold": [256, 399, 794, 798, 1012], "repetit": [256, 375, 399, 794, 795, 972, 1019], "rank_test_scor": [256, 264, 779, 793, 1011], "rename_axi": 256, "9400": 256, "079297": 256, "9300": 256, "077846": 256, "3_poli": 256, "9044": [256, 1012], "098776": 256, "2_poli": 256, "6852": 256, "169106": 256, "certainti": [256, 372, 724, 964], "repreat": 256, "model_scor": [256, 274], "regex": [256, 343, 447, 449], "_test_scor": [256, 455, 577, 1018], "lineplot": 256, "labelpad": 256, "882561": 256, "783392": 256, "351390": 256, "746492": 256, "298688": 256, "355440": 256, "nadeau": [256, 1013], "bengio": [256, 838, 839, 953, 977], "framework": [256, 356, 372, 381, 383, 389, 395, 620, 671, 777, 960, 961, 968, 982, 985, 988, 1005, 1011], "diebold": 256, "mariano": 256, "proven": [256, 958, 962, 988], "replic": [256, 369, 372], "cdot": [256, 392, 395, 400, 401, 405, 597, 598, 602, 605, 606, 847, 956, 958, 964, 968, 974], "sum_": [256, 265, 336, 392, 393, 395, 400, 401, 402, 521, 523, 530, 679, 737, 958, 960, 961, 964, 966, 968, 969, 971, 972, 974, 978, 979, 980], "ij": [256, 286, 392, 395, 400, 521, 523, 530, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 960, 961, 964, 966, 969, 979], "corrected_std": 256, "crossvalid": [256, 270], "corrected_var": 256, "ddof": [256, 861, 872], "compute_corrected_ttest": 256, "t_stat": 256, "p_val": 256, "model_1_scor": 256, "model_2_scor": 256, "ncorrect": 256, "227": [256, 395, 707], "uncorrect": [256, 578, 581], "t_stat_uncorrect": 256, "p_val_uncorrect": 256, "convent": [256, 359, 370, 372, 373, 374, 376, 383, 413, 414, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 452, 453, 454, 455, 456, 457, 458, 459, 491, 492, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 530, 546, 549, 552, 553, 564, 565, 566, 571, 572, 574, 610, 611, 612, 613, 660, 671, 672, 673, 674, 682, 701, 777, 778, 809, 810, 825, 827, 829, 833, 845, 853, 856, 857, 859, 873, 874, 885, 912, 913, 964, 991, 1005, 1012, 1013, 1016, 1018, 1019, 1021], "benavoli": 256, "colleagu": 256, "conjug": [256, 435, 445, 655, 657, 670, 678, 960], "overlin": [256, 392], "t_post": 256, "ppf": 256, "infin": [256, 524, 665, 666, 695, 802, 888, 900, 967], "minu": [256, 742, 964], "better_prob": 256, "cdf": 256, "773": [256, 341, 631, 819], "essenti": [256, 313, 368, 372, 395, 399, 400, 492, 956, 964, 967, 985, 988, 1013], "rope": 256, "rope_interv": 256, "rope_prob": 256, "x_rope": 256, "uncertain": [256, 317, 369], "credibl": 256, "cred_interv": 256, "cred_int_df": 256, "000977": 256, "019023": 256, "005422": 256, "025422": 256, "016445": 256, "036445": 256, "bonferroni": 256, "n_comparison": 256, "pairwise_t_test": 256, "model_i": 256, "model_k": 256, "model_i_scor": 256, "model_k_scor": 256, "pairwise_comp_df": 256, "model_1": 256, "model_2": 256, "657": 256, "302": [256, 610], "565": 256, "pairwise_bayesian": 256, "worse_prob": 256, "pairwise_bayesian_df": 256, "018": [256, 342, 455], "882": [256, 343], "187": [256, 376, 567, 965, 997, 1007], "dietterich": [256, 811, 965], "1998": [256, 365, 367, 400, 402, 538, 539, 811, 816, 847, 965, 966, 968, 974, 978], "bouckaert": 256, "frank": [256, 812, 965, 1010, 1014, 1015], "pacif": 256, "asia": [256, 974], "confer": [256, 365, 395, 400, 406, 423, 428, 433, 494, 518, 546, 679, 691, 708, 738, 837, 838, 839, 964, 970, 976, 980], "discoveri": [256, 365, 376, 379, 395, 402, 404, 406, 428, 494, 538, 539, 546, 575, 578, 579, 581, 582, 583, 589, 703, 722, 765, 964, 976, 988, 1019, 1020], "corani": 256, "dem\u0161ar": 256, "zaffalon": 256, "accompani": [256, 1013], "1995": [256, 367, 393, 402, 536, 537, 811, 878, 965], "547": [256, 272], "plot_grid_search_stat": [256, 272], "loader": [257, 320, 341, 363, 364, 365, 481, 482, 491, 984, 985, 999, 1005, 1010, 1012, 1013, 1016], "fetch20newsgroup": 257, "complementnb": [257, 341, 816, 817, 819, 820, 966, 1013, 1017, 1018, 1020], "tfidfvectorizertfidfvector": 257, "complementnbcomplementnb": 257, "vect__": 257, "clf__": 257, "parameter_grid": 257, "vect__max_df": 257, "vect__min_df": 257, "vect__ngram_rang": [257, 999], "unigram": [257, 365, 403, 571, 572, 574, 1012], "bigram": [257, 403, 571, 572, 574, 999], "vect__norm": 257, "clf__alpha": [257, 999], "exhaust": [257, 308, 309, 310, 311, 312, 313, 356, 367, 375, 382, 390, 395, 779, 782, 783, 793, 871, 872, 874, 960, 999, 1001], "parallelis": [257, 451, 879, 1012], "random_search": [257, 264], "best_paramet": 257, "get_param": [257, 373, 383, 405, 409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 953, 1015, 1016, 1017, 1019, 1020], "param_nam": [257, 271, 336, 808, 959, 999], "816": [257, 454, 455], "709": 257, "ambigu": [257, 375, 403, 555, 695, 918, 967, 1014, 1016, 1018], "shorten_param": 257, "plotli": [257, 370, 386, 388], "cursor": 257, "px": 257, "error_x": 257, "std_score_tim": [257, 779, 793], "error_i": 257, "hover_data": 257, "update_layout": 257, "xanchor": 257, "yanchor": 257, "autom": [257, 374, 386, 675, 953, 960, 961, 964, 984, 988], "parallel_coordin": 257, "understood": [257, 370, 395, 996], "column_result": 257, "transform_func": 257, "fromkei": [257, 896], "ngram_rang": [257, 320, 403, 571, 572, 574], "color_continuous_scal": 257, "viridis_r": 257, "slide": [257, 627, 960, 983, 984], "intersect": [257, 325, 392, 395, 720], "undo": [257, 851, 1009], "plot_grid_search_text_feature_extract": [257, 272], "depict": [258, 402, 963], "score_typ": [258, 785], "ax_idx": 258, "resort": [258, 365, 538, 1015], "learning_curv": [258, 313, 785, 959, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020], "return_tim": [258, 805, 1015], "test_scores_nb": 258, "fit_times_nb": 258, "score_times_nb": 258, "test_scores_svm": 258, "fit_times_svm": 258, "score_times_svm": 258, "score_tim": [258, 399, 804, 805], "rapidli": [258, 979, 988, 993], "inflect": 258, "plot_learning_curv": [258, 272], "class_likelihood_ratio": [259, 964, 1020], "medicin": [259, 695, 964], "medic": [259, 399, 695, 960, 988], "truli": [259, 263, 358, 695, 964], "odd": [259, 402, 497, 695, 964, 1012, 1013], "suppos": [259, 316, 356, 357, 372, 376, 397, 402, 403, 404, 540, 544, 547, 641, 642, 649, 651, 657, 658, 659, 724, 827, 881, 883, 886, 889, 891, 907, 968, 1014, 1016], "physiolog": [259, 367, 997], "hopefulli": [259, 378, 1005], "indirect": [259, 371, 383], "bio": 259, "diagnos": [259, 367, 378, 385, 396], "diagnosi": [259, 367, 828], "pos_lr": 259, "neg_lr": 259, "raise_warn": [259, 695, 950], "positive_likelihood_ratio": [259, 695], "negative_likelihood_ratio": [259, 695], "extract_scor": 259, "test_positive_likelihood_ratio": 259, "test_negative_likelihood_ratio": 259, "718894": 259, "724619": 259, "321091": 259, "054054": 259, "dummyclassifi": [259, 535, 964, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015], "108843": 259, "986989": 259, "268147": 259, "034278": 259, "compat": [259, 276, 309, 364, 373, 379, 380, 381, 383, 386, 403, 446, 452, 491, 549, 560, 568, 569, 572, 586, 597, 598, 601, 602, 603, 605, 606, 615, 616, 617, 641, 642, 656, 658, 756, 760, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 825, 826, 846, 854, 855, 893, 894, 897, 927, 961, 964, 967, 969, 984, 985, 988, 1001, 1005, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "diagnost": [259, 363, 383, 483, 695, 803, 804, 964, 984, 985, 1001], "most_frequ": [259, 534, 610, 613, 831, 954, 964, 1013, 1015, 1017], "undefin": [259, 383, 695, 711, 720, 723, 765, 933, 964, 1013, 1017, 1021], "373333": 259, "5557": 259, "235430": 259, "stand": [259, 343, 374, 381, 400, 514, 520, 528, 529, 579, 592, 661, 688, 700, 718, 719, 739, 768, 770, 775, 963, 964, 970], "lr_base": 259, "pos_lr_bas": 259, "pos_lr_base_std": 259, "neg_lr_bas": 259, "neg_lr_base_std": 259, "plot_indic": 259, "scoring_on_bootstrap": 259, "n_bootstrap": [259, 1006], "results_for_preval": 259, "bootstrap_indic": 259, "default_rng": 259, "2039": 259, "507943": 259, "113516": 259, "207667": 259, "009778": 259, "3419": 259, "445329": 259, "125197": 259, "198280": 259, "008907": 259, "422287": 259, "123864": 259, "192630": 259, "006340": 259, "6196": [259, 1010], "410507": 259, "163975": 259, "193761": 259, "005864": 259, "7578": [259, 1012], "335398": 259, "175224": 259, "189120": 259, "005820": 259, "8963": 259, "198284": 259, "238943": 259, "185496": 259, "005020": 259, "band": [259, 300, 974], "plot_likelihood_ratio": [259, 272], "scorer_nam": [260, 779, 793], "predefin": [260, 792, 953, 967, 994, 1020], "403": [260, 342], "return_train_scor": [260, 304, 399, 779, 782, 783, 793, 804, 1011, 1012, 1014], "maskedarrai": [260, 1011], "param_min_samples_split": 260, "sample_score_mean": 260, "sample_score_std": 260, "std_": [260, 1010], "rank_test_": 260, "best_scor": 260, "mean_test_": 260, "710": [260, 272, 393], "plot_multi_metric_evalu": [260, 272], "cawlei": [261, 964], "talbot": 261, "mach": [261, 393, 399, 576, 577], "2079": 261, "2107": 261, "007581": 261, "007833": 261, "num_trial": 261, "x_iri": [261, 998], "y_iri": [261, 998], "p_grid": 261, "non_nested_scor": 261, "nested_scor": 261, "leaveoneout": [261, 399, 994], "leaveonegroupout": [261, 399, 780, 787, 788, 994, 1011], "inner_cv": 261, "outer_cv": 261, "non_nest": 261, "score_differ": 261, "211": [261, 313, 319, 857, 869], "non_nested_scores_lin": 261, "nested_lin": 261, "difference_plot": 261, "plot_nested_cross_validation_iri": [261, 272], "permutation_test_scor": [262, 399, 1005, 1012, 1017], "plant": [262, 265, 266, 363, 964, 1001], "uncorrel": [262, 366, 511, 517, 524, 964, 997], "n_uncorrelated_featur": 262, "x_rand": 262, "undergo": 262, "score_iri": 262, "perm_scores_iri": 262, "pvalue_iri": 262, "n_permut": [262, 399, 806], "score_rand": 262, "perm_scores_rand": 262, "pvalue_rand": 262, "evid": [262, 341, 378, 395, 399, 400, 402, 627, 777, 963], "ndata": 262, "destroi": [262, 403, 775, 850, 974], "ojala": [262, 399, 806], "garriga": [262, 399, 806], "761": [262, 272, 320], "plot_permutation_tests_for_classif": [262, 272], "t_p": 263, "plu": [263, 367, 375, 662, 812, 815, 965, 978], "f_p": 263, "f_n": 263, "denomin": [263, 403, 408, 458, 573, 687, 739, 958], "stairstep": 263, "ap": [263, 690, 691, 964], "sum_n": [263, 690, 964], "r_n": [263, 690, 964], "p_n": [263, 690, 964], "nth": [263, 690, 964], "r_k": 263, "p_k": [263, 964], "trapezoid": [263, 689, 690, 964], "binar": [263, 265, 266, 362, 364, 394, 396, 736, 816, 845, 846, 848, 852, 854, 865, 964, 966, 990, 1001, 1019, 1021], "average_precision_scor": [263, 689, 691, 724, 764, 770, 964, 1005, 1008, 1012, 1013, 1019], "differenti": [263, 402, 405, 542, 543, 602, 605], "mt19937": [263, 268, 1016], "0x7fd1b5fff240": 263, "precisionrecalldisplai": [263, 311, 764, 766, 769, 1015, 1018, 1021], "got": [263, 352, 375, 534, 632, 648, 1018, 1020], "label_binar": [263, 265, 848, 1009], "average_precis": [263, 683, 690, 724, 964], "setup": [263, 265, 356, 368, 372, 376, 378, 967, 991], "f_score": 263, "extens": [263, 265, 281, 356, 357, 364, 365, 368, 371, 373, 374, 378, 379, 381, 389, 400, 479, 486, 517, 723, 912, 920, 961, 963, 964, 983, 984, 988, 1005, 1011, 1018, 1019, 1021], "586": [263, 272], "plot_precision_recal": [263, 272], "pose": [264, 960, 998], "deem": [264, 265, 517, 972, 1018], "993": 264, "01761326452827255": 264, "14458295175799263": 264, "981": [264, 367, 964], "015": [264, 342, 346, 972], "2610311314285183": 264, "003999234857448686": 264, "980": 264, "016727019407645892": 264, "5720620992012775": 264, "996": 264, "6666666666666666": 264, "2222222222222222": 264, "1111111111111111": 264, "n_top": 264, "param_dist": [264, 268, 310], "n_iter_search": 264, "648": [264, 272], "plot_randomized_search": [264, 272], "unambigu": [265, 965, 1011], "notion": [265, 342, 358, 381, 400, 402, 960, 964], "scheme": [265, 281, 304, 365, 383, 395, 399, 401, 403, 549, 573, 641, 642, 688, 792, 848, 849, 852, 854, 858, 862, 865, 870, 881, 886, 953, 960, 974, 978, 1005, 1013, 1016, 1017], "harder": [265, 266, 302, 365, 369, 372, 378, 395, 498, 544, 545, 987], "bulk": [265, 406, 428], "scrutin": 265, "y_onehot_test": 265, "class_id": [265, 266], "class_of_interest": 265, "nvirginica": 265, "versicolor": [265, 266, 487], "tp_c": 265, "fn_c": 265, "fp_c": 265, "tn_c": 265, "briefli": [265, 369, 382, 402, 953, 1015], "nreceiv": 265, "micro_roc_auc_ovr": 265, "mcclish": [265, 770], "deci": 265, "1989": [265, 618, 770, 838, 839, 960, 967], "jul": 265, "fpr_grid": 265, "mean_tpr": [265, 266], "interp": [265, 266, 328], "macro_roc_auc_ovr": 265, "deeppink": 265, "aqua": 265, "role": [265, 356, 369, 381, 400, 982], "pair_list": 265, "pair_scor": 265, "label_a": 265, "label_b": 265, "a_mask": 265, "b_mask": 265, "ab_mask": 265, "a_tru": 265, "b_true": 265, "idx_a": 265, "idx_b": 265, "fpr_a": 265, "tpr_a": 265, "fpr_b": 265, "tpr_b": 265, "macro_roc_auc_ovo": 265, "ovo_tpr": 265, "pool": [265, 381, 429, 618, 933, 985, 1016], "plot_roc": [265, 272], "mean_fpr": 266, "viz": [266, 377], "interp_tpr": 266, "mean_auc": 266, "std_auc": 266, "std_tpr": 266, "tprs_upper": 266, "tprs_lower": 266, "plot_roc_crossv": [266, 272], "halvinggridsearchcv": [267, 268, 310, 562, 783, 953, 1017, 1019, 1020], "1e4": [267, 642, 662, 875, 976], "gsh": 267, "gsh_time": 267, "gs_time": 267, "make_heatmap": 267, "is_sh": 267, "make_cbar": 267, "param_c": [267, 779], "param_gamma": [267, 779, 793], "sh": [267, 374, 378, 953], "scores_matrix": 267, "pivot_t": 267, "aggfunc": 267, "0e": [267, 532, 533], "get_xticklabel": 267, "rotation_mod": 267, "cbar_ax": 267, "077": [267, 272, 276], "plot_successive_halving_heatmap": [267, 272], "rsh": [268, 310], "0x7fd1a8e17440": 268, "_distn_infrastructur": 268, "rv_discrete_frozen": 268, "0x7fd17d9cc6d0": 268, "0x7fd1a8d65dc0": 268, "halvingrandomsearchcvhalvingrandomsearchcv": 268, "params_str": 268, "drop_dupl": 268, "n_resources_": [268, 782, 783, 953], "nn_candid": 268, "n_candidates_": [268, 782, 783, 953], "n_iterations_": [268, 782, 783], "multialign": 268, "226": [268, 272, 395, 406, 428], "plot_successive_halving_iter": [268, 272], "n_samples_train": [269, 883, 884, 885, 886, 887], "n_samples_test": [269, 883, 884, 885, 886, 887, 967, 974], "train_error": 269, "test_error": 269, "i_alpha_optim": 269, "alpha_optim": 269, "00026529484644318975": 269, "559": [269, 272, 599], "plot_train_error_vs_test_error": [269, 272], "nonlinear": [270, 311, 627, 671, 672, 676, 679, 847, 960, 961, 969, 974], "true_fun": 270, "polynomial_featur": 270, "plot_underfitting_overfit": [270, 272], "validation_curv": [271, 336, 959, 1012, 1013, 1014, 1017], "subset_mask": 271, "isin": 271, "param_rang": [271, 336, 808, 959], "train_scores_mean": 271, "train_scores_std": 271, "test_scores_mean": 271, "test_scores_std": 271, "738": [271, 272], "plot_validation_curv": [271, 272], "803": [272, 343], "auto_examples_model_select": 272, "yeast": 274, "2417": 274, "103": [274, 276, 365, 402, 480, 538, 539, 1005], "jaccard": [274, 392, 433, 440, 682, 686, 702, 711, 716, 720, 760, 761, 762, 776, 967, 1013, 1014], "arrang": [274, 615, 812, 813, 814, 815, 964], "adam": [274, 293, 838, 839, 968, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "kleczewski": [274, 1012, 1013], "classifierchain": [274, 383, 813, 815, 1012, 1017, 1020], "jaccard_scor": [274, 686, 711, 716, 776, 964, 1014, 1017], "40597": 274, "wrapper": [274, 276, 376, 379, 399, 405, 527, 603, 654, 881, 980, 984, 1009, 1017], "base_lr": [274, 812], "y_pred_ovr": 274, "ovr_jaccard_scor": 274, "y_pred_chain": 274, "chain_jaccard_scor": 274, "y_pred_ensembl": 274, "ensemble_jaccard_scor": 274, "x_po": 274, "plot_classifier_chain_yeast": [274, 275], "auto_examples_multioutput": 275, "kneighborstransform": [276, 278, 308, 833, 967, 1015, 1019, 1020], "nmslib": 276, "pynndesc": 276, "pip": [276, 308, 309, 310, 311, 312, 313, 357, 368, 370, 374, 376, 386, 980], "pynndescenttransform": 276, "csr_matrix": [276, 309, 424, 428, 435, 479, 517, 527, 540, 541, 542, 543, 546, 547, 548, 549, 571, 576, 577, 697, 807, 856, 883, 884, 886, 887, 889, 890, 891, 892, 965, 974, 978, 979, 980, 1020], "transformermixin": [276, 372, 383, 448, 1013, 1020, 1021], "nmslibtransform": 276, "sw": 276, "n_samples_fit_": [276, 823, 824, 825, 827, 829, 831, 832, 833], "cosinesimil": 276, "nmslib_": 276, "adddatapointbatch": 276, "createindex": 276, "n_samples_transform": [276, 825, 833], "thread": [276, 309, 312, 368, 381, 383, 395, 402, 813, 814, 930, 931, 932, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021], "num_thread": 276, "knnquerybatch": 276, "mnist_10000": 276, "mnist_20000": 276, "20_000": 276, "tsne_param": 276, "barnes_hut": [276, 675, 1012, 1013], "parallel_batch_queri": 276, "msg": [276, 948], "transformer_nam": 276, "longest": 276, "fit_dur": 276, "transform_dur": 276, "315": [276, 367], "823": 276, "884": 276, "769": [276, 282, 290], "733": 276, "759": 276, "numba": [276, 985], "cold": 276, "nearestneighbor": [276, 312, 395, 406, 428, 431, 444, 671, 672, 676, 823, 824, 825, 827, 831, 832, 833, 967, 1005, 1009, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "i_ax": 276, "int32": [276, 305, 370, 383, 427, 430, 432, 434, 436, 883, 884, 885, 886, 887, 929, 979, 1014, 1020], "828": 276, "955": [276, 399, 637], "brute": [276, 381, 390, 399, 406, 428, 433, 440, 615, 616, 671, 672, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 971, 1001, 1009, 1013, 1017, 1020, 1021], "spent": [276, 304, 371, 376, 805, 1020], "approximate_nearest_neighbor": [276, 290], "slow": [278, 298, 341, 356, 364, 368, 370, 400, 403, 430, 682, 855, 856, 860, 883, 886, 918, 961, 967, 985, 998, 1012], "temporarydirectori": [278, 308], "n_neighbors_list": 278, "graph_model": 278, "classifier_model": 278, "sklearn_graph_cache_": 278, "tmpdir": [278, 308], "full_model": 278, "classifier__n_neighbor": 278, "grid_model": 278, "mean_fit_tim": [278, 779, 793], "std_fit_tim": [278, 779, 793], "384": [278, 290, 679, 882], "plot_caching_nearest_neighbor": [278, 290], "cmap_light": [279, 284, 287], "cmap_bold": [279, 284, 287], "darkblu": [279, 287], "neighbour": [279, 445, 675, 969], "781": [279, 290], "plot_classif": [279, 290], "79269019073225": 280, "kerneldens": [280, 281, 289, 401, 1007, 1013, 1014, 1018, 1019, 1020], "new_data": [280, 372], "4x11": 280, "real_data": 280, "set_clim": 280, "plot_digits_kde_sampl": [280, 290], "block": [281, 298, 312, 365, 367, 370, 375, 378, 383, 392, 395, 398, 401, 435, 436, 445, 456, 462, 463, 471, 472, 494, 496, 678, 932, 967, 969], "wildli": [281, 963], "kd": [281, 395, 401, 967, 1013, 1014, 1015], "jakevdp": [281, 289], "aaaaff": [281, 284], "tophat": [281, 401, 821, 822, 826], "log_den": 281, "x_src": 281, "format_func": 281, "ih": 281, "epanechnikov": [281, 401, 821, 822, 826], "funcformatt": 281, "nullloc": 281, "true_den": 281, "plot_kde_1d": [281, 290], "NOT": [282, 367, 373, 789, 821, 822], "plot_lof_novelty_detect": [282, 290], "x_inlier": 283, "ground_truth": 283, "n_error": 283, "x_score": [283, 465, 466, 467, 468], "legend_handl": 283, "handlerpathcollect": 283, "update_legend_marker_s": 283, "update_from": 283, "set_siz": 283, "radiu": [283, 328, 367, 395, 426, 433, 671, 746, 763, 821, 822, 823, 824, 825, 829, 831, 832, 833, 835, 967, 1007, 1009, 1019], "handler_map": 283, "update_func": 283, "plot_lof_outlier_detect": [283, 290], "ffaaaa": 284, "aaffaa": 284, "00ff00": 284, "811": [284, 290], "plot_nca_classif": [284, 290], "neighborhoodcomponentanalysi": 285, "dim_reduction_method": 285, "acc_knn": 285, "x_embed": [285, 286, 675, 679, 830, 967], "ntest": 285, "plot_nca_dim_reduct": [285, 290], "logsumexp": [286, 1012], "get_yaxi": [286, 298], "link_thickness_i": 286, "diff_embed": 286, "dist_embed": 286, "einsum": 286, "exp_dist_embed": 286, "relate_point": 286, "pt_i": 286, "pt_j": 286, "plot_nca_illustr": [286, 290], "8133333333333334": 287, "nearestcentroid": [287, 341, 965, 967, 1005, 1009, 1012, 1017, 1020], "shrink_threshold": [287, 828, 967, 1005, 1017], "plot_nearest_centroid": [287, 290], "barycent": [288, 1005], "plot_regress": [288, 290], "geospati": [289, 401], "haversin": [289, 401, 682, 744, 746, 967, 1014, 1017], "latitud": [289, 298, 365, 481, 682, 746], "longitud": [289, 298, 365, 481, 682, 746], "xtrain": 289, "ytrain": 289, "radian": [289, 682, 746], "land_mask": 289, "ball_tre": [289, 406, 428, 433, 440, 671, 672, 823, 824, 825, 826, 827, 829, 831, 832, 833, 967, 1005], "ocean": 289, "107": [289, 290, 313, 395, 876, 965, 1007], "plot_species_kd": [289, 290], "auto_examples_neighbor": 290, "combat": [292, 400], "encourag": [292, 328, 369, 370, 381, 979, 984], "lesser": [292, 383, 426, 524, 960], "curvatur": 292, "complic": [292, 376, 405, 677, 967], "371": [292, 296], "plot_mlp_alpha": [292, 296], "bfg": [293, 593, 594, 631, 632, 641, 652, 655, 657, 663, 670, 967, 968, 1020], "980000": 293, "096950": 293, "momentum": [293, 838, 839, 968], "049530": 293, "nesterov": [293, 838, 839, 968], "049540": 293, "360000": 293, "978444": 293, "860000": 293, "503452": 293, "504185": 293, "045311": 293, "956038": 293, "243802": 293, "992766": 293, "041297": 293, "993879": 293, "042898": 293, "638843": 293, "855465": 293, "912632": 293, "290584": 293, "909293": 293, "318387": 293, "991653": 293, "045934": 293, "840000": 293, "601052": 293, "940000": 293, "157334": 293, "154453": 293, "500000": 293, "692470": 293, "689143": 293, "689751": 293, "150527": 293, "850000": 293, "341523": 293, "336188": 293, "335919": 293, "689015": 293, "830000": 293, "512595": 293, "513034": 293, "930000": 293, "170087": 293, "schedul": [293, 357, 659, 660, 661, 838, 839, 932, 978, 988, 1012], "nesterovs_momentum": [293, 838, 839], "invscal": [293, 659, 660, 661, 838, 839, 978], "plot_arg": 293, "plot_on_dataset": 293, "nlearn": 293, "loss_": [293, 542, 838, 839, 968, 1019], "loss_curve_": [293, 838, 839], "data_set": 293, "get_lin": 293, "520": [293, 296, 611, 830, 954, 967], "plot_mlp_training_curv": [293, 296], "28x28": 294, "784": 294, "throw": [294, 379, 900, 1009, 1012, 1013, 1014, 1015, 1019], "infrastructur": [294, 982, 984, 985], "44139186": 294, "19174891": 294, "13983521": 294, "11378556": 294, "09443967": 294, "07846529": 294, "06506307": 294, "05534985": 294, "986429": 294, "953061": 294, "plot_mnist_filt": [294, 296], "greyscal": 295, "bernoulli": [295, 403, 404, 816, 817, 818, 819, 820, 837, 838, 839, 844, 960, 974, 986, 1001, 1005], "bernoullirbm": [295, 838, 839, 969, 974, 1007, 1008, 1017, 1019], "yann": [295, 1005, 1007], "dauphin": [295, 1007], "gabriel": [295, 1013, 1014, 1015, 1018, 1019], "synnaev": 295, "convolv": 295, "minmax_scal": [295, 298, 851, 1010, 1013], "nudge_dataset": 295, "1px": 295, "direction_vector": 295, "apply_along_axi": 295, "feature_rang": [295, 851, 867, 974, 1007, 1017], "cg": [295, 641, 642, 655, 657, 670, 960, 1009, 1010, 1012, 1016, 1018, 1019], "rbm": [295, 837, 838, 839, 969], "rbm_features_classifi": 295, "6000": [295, 610], "raw_pixel_classifi": 295, "181": [295, 376], "207": [295, 330, 339, 342, 1005], "154": [295, 634, 965], "plot_rbm_logistic_classif": [295, 296], "auto_examples_neural_network": 296, "incom": [298, 365, 424], "unscal": [298, 303, 960, 964, 1013, 1019], "notabl": [298, 364, 383, 479, 710, 854, 961, 963, 967, 1009, 1012, 1019], "unterthin": [298, 1008, 1009, 1010], "medinc": [298, 310, 365], "houseag": [298, 310, 365], "averoom": [298, 310, 365], "room": [298, 365, 375, 395, 987], "avebedrm": [298, 365], "bedroom": [298, 365], "aveoccup": [298, 310, 365], "features_idx": 298, "quantile_rang": [298, 859, 871, 1011], "yeo": [298, 302, 857, 869, 974, 1013, 1019], "cox": [298, 302, 857, 869, 974, 1013], "plasma": 298, "plasma_r": 298, "create_ax": 298, "bottom_h": 298, "left_h": 298, "rect_scatt": 298, "rect_histx": 298, "rect_histi": 298, "ax_scatt": 298, "ax_histx": 298, "ax_histi": 298, "ax_scatter_zoom": 298, "ax_histx_zoom": 298, "ax_histy_zoom": 298, "rect_colorbar": 298, "ax_colorbar": 298, "plot_distribut": 298, "hist_nbin": 298, "x0_label": 298, "x1_label": 298, "hist_x1": 298, "hist_x0": 298, "aesthet": [298, 980, 1010], "layout": [298, 381, 881, 882, 883, 886, 902, 979, 1008, 1010], "tick_bottom": 298, "tick_left": 298, "outward": 298, "ec": [298, 513], "make_plot": 298, "item_idx": 298, "ax_zoom_out": 298, "ax_zoom_in": 298, "zoom_in_percentile_rang": 298, "cutoffs_x0": 298, "cutoffs_x1": 298, "non_outliers_mask": 298, "colorbarbas": 298, "OR": [298, 395, 406, 428, 1016], "indistinguish": 298, "quadrant": 298, "939": [298, 306, 651, 994], "plot_all_sc": [298, 306, 850, 851, 853, 857, 858, 859, 861, 866, 867, 868, 869, 870, 871, 872], "straightforward": [299, 369, 400, 988], "anywher": 299, "qinhanmin2005": 299, "sina": [299, 1018], "rnd": 299, "enc": [299, 301, 312, 854, 855, 974], "x_bin": 299, "line_bin": 299, "plot_discret": [299, 306], "get_nam": 300, "broader": [300, 960], "logisticregression__c": 300, "linearsvc__c": 300, "kbinsdiscretizer__n_bin": 300, "gradientboostingclassifier__learning_r": 300, "svc__c": 300, "cm_piyg": 300, "piyg": 300, "b30065": 300, "178000": 300, "est_idx": 300, "532": [300, 306], "plot_discretization_classif": [300, 306], "centers_0": 301, "centers_1": 301, "x_list": 301, "grid_encod": 301, "stripe": 301, "989": [301, 306], "plot_discretization_strategi": [301, 306], "powertransform": [302, 858, 869, 954, 974, 1013, 1016, 1019, 1021], "johnwon": 302, "weibul": 302, "bimod": [302, 401], "ineffect": [302, 974, 1013, 1014], "eric": [302, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "ericchang2017": 302, "northwestern": [302, 641], "contact": [302, 381, 984], "font_siz": 302, "304": [302, 367], "bc": 302, "qt": [302, 858], "x_lognorm": [302, 974], "x_chisq": 302, "chisquar": 302, "x_weibul": 302, "x_gaussian": 302, "x_uniform": 302, "loc_a": 302, "loc_b": 302, "105": 302, "x_a": 302, "x_b": 302, "x_bimod": 302, "d81b60": 302, "0188ff": 302, "ffc107": 302, "b7a2ff": 302, "2ec5ac": 302, "figaspect": 302, "axes_idx": 302, "axes_list": 302, "x_trans_bc": 302, "lmbda_bc": 302, "lambdas_": [302, 857, 1018], "x_trans_yj": 302, "lmbda_yj": 302, "x_trans_qt": 302, "ax_origin": 302, "ax_bc": 302, "ax_yj": 302, "ax_qt": 302, "x_tran": [302, 372, 391, 426, 447, 857, 862, 869, 974], "meth_nam": 302, "lmbda": 302, "plot_map_data_to_norm": [302, 306], "involv": [303, 308, 328, 356, 358, 365, 370, 374, 383, 384, 398, 405, 682, 809, 810, 961, 965, 967, 971, 979, 984, 988, 997, 1013], "kneighbor": [303, 312, 823, 824, 825, 827, 829, 967, 1009, 1014, 1018, 1019, 1020, 1021], "obatin": 303, "tyler": [303, 1012, 1018, 1019, 1020], "lanigan": [303, 1012], "tylerlanigan": 303, "sebastian": [303, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "raschka": [303, 1010, 1011, 1012, 1013, 1014, 1017], "sebastianraschka": 303, "alcohol": [303, 367], "malic": [303, 367], "acid": [303, 367], "scaled_x_train": 303, "x_plot_scal": 303, "fit_and_plot_model": 303, "desicion": 303, "scaled_pca": 303, "x_train_transform": [303, 352, 399], "x_train_std_transform": 303, "first_pca_compon": 303, "target_class": 303, "repercuss": 303, "logisticregressioncv": [303, 383, 641, 960, 965, 1009, 1010, 1011, 1013, 1014, 1015, 1019, 1020], "unscaled_clf": 303, "scaled_clf": 303, "y_pred_scal": 303, "y_proba_sc": 303, "0824": 303, "vastli": 303, "plot_scaling_import": [303, 306], "targetencod": [304, 305, 854, 855, 974, 1021], "review": [304, 356, 365, 372, 373, 374, 375, 376, 381, 384, 399, 400, 518, 524, 964, 974, 991], "wine_review": 304, "42074": 304, "countri": [304, 961], "provinc": 304, "region_1": 304, "region_2": 304, "wineri": 304, "tremend": [304, 402], "variet": 304, "hail": 304, "martha": 304, "vineyard": 304, "235": 304, "napa": 304, "vallei": 304, "cabernet": 304, "sauvignon": 304, "heitz": 304, "spain": 304, "ripe": 304, "aroma": 304, "blackberri": 304, "cassi": 304, "carodorum": 304, "selecci\u00f3n": 304, "reserva": 304, "northern": 304, "toro": 304, "tinta": 304, "bodega": 304, "carmen": 304, "rodr\u00edguez": 304, "watson": [304, 396, 984], "honor": 304, "late": [304, 358], "harvest": 304, "knight": 304, "sonoma": 304, "blanc": 304, "macaulei": 304, "oak": 304, "reserv": [304, 544, 545, 988, 990], "oregon": 304, "willamett": 304, "pinot": 304, "noir": 304, "ponzi": 304, "franc": [304, 746], "b\u00e9gude": 304, "aft": [304, 1008], "br\u00fblade": 304, "provenc": 304, "bandol": 304, "one_hot": 304, "max_categori": [304, 312, 854, 855, 974, 1019, 1021], "target_typ": [304, 862, 905, 927], "evaluate_model_and_stor": 304, "rmse_test_scor": 304, "rmse_train_scor": 304, "rmse_test_mean": 304, "rmse_test_std": 304, "rmse_train_mean": 304, "rmse_train_std": 304, "nuniqu": 304, "14810": 304, "1236": 304, "632": 304, "455": 304, "workaround": [304, 370, 779, 793], "high_cardinality_featur": 304, "low_cardinality_featur": 304, "mixed_encoded_preprocessor": 304, "high_cardin": 304, "low_cardin": 304, "mixed_pip": 304, "passthroughpassthroughhigh_cardinalityindex": 304, "targetencodertargetencod": 304, "low_cardinalityindex": 304, "mixed_target": 304, "name_to_color": 304, "rmse_": 304, "_mean": 304, "_std": 304, "explod": 304, "unrel": [304, 357, 375, 378, 403, 498], "972": [304, 306], "plot_target_encod": [304, 306], "targetenocod": 305, "50_000": [305, 342], "n_categori": [305, 817, 855, 974], "kbin": [305, 313], "x_inform": 305, "permuted_categori": 305, "x_shuffl": 305, "catastroph": [305, 745, 985], "x_near_unique_categori": 305, "assembl": [305, 343, 841], "near_uniqu": 305, "raw_model": 305, "0049896314219657345": 305, "004577621581534519": 305, "model_with_cv": 305, "8000184677460286": 305, "7927845601690948": 305, "coefs_cv": 305, "target_encod": 305, "x_train_no_cv_encod": 305, "x_test_no_cv_encod": 305, "model_no_cv": 305, "858486250088675": 305, "6338211367110066": 305, "coefs_no_cv": 305, "421": [305, 306, 708, 738, 964], "plot_target_encoder_cross_v": [305, 306], "auto_examples_preprocess": 306, "announc": [308, 309, 310, 311, 312, 313, 374], "bug": [308, 309, 310, 311, 312, 313, 359, 368, 372, 373, 375, 378, 381, 383, 982, 985, 1005, 1006, 1007, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "latest": [308, 309, 310, 311, 312, 313, 368, 370, 374, 376, 378, 384, 980, 982, 1019], "upgrad": [308, 309, 310, 311, 312, 313, 386, 985, 1005, 1010, 1013], "conda": [308, 309, 310, 311, 312, 313, 357, 370, 371, 373, 374, 376, 378, 388, 980], "forg": [308, 309, 310, 311, 312, 313, 357, 371, 373, 374, 378, 386], "plot_roc_curv": [308, 1015, 1017], "plot_precision_recall_curv": [308, 1015, 1017, 1018], "stackingclassifi": [308, 352, 402, 551, 1015, 1016, 1017, 1018, 1019, 1020], "9473684210526315": 308, "radiusneighborstransform": [308, 825, 967, 1015, 1017, 1019, 1020], "sklearn_cache_": 308, "isomap__n_neighbor": 308, "nan_euclidean_dist": [308, 744, 954, 1015], "ccp_alpha": [308, 346, 540, 541, 542, 543, 547, 548, 889, 890, 891, 892, 980, 1015], "tree_": [308, 346, 350, 826, 889, 890, 891, 892], "node_count": [308, 346, 350, 889, 890, 891, 892], "check_estim": [308, 372, 383, 913, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020], "pytest": [308, 357, 368, 370, 372, 373, 386, 388, 912, 913, 1015, 1018], "estimator_check": [308, 372, 383, 1012, 1013, 1015, 1016, 1019, 1020, 1021], "parametrize_with_check": [308, 372, 912, 1015, 1016], "test_sklearn_compatible_estim": [308, 913], "ovo": [308, 770, 809, 883, 886, 964, 965, 979], "preval": [308, 383, 695, 964], "decision_function_shap": [308, 337, 883, 886, 979, 1010, 1011, 1014, 1015], "9932": 308, "plot_release_highlights_0_22_0": [308, 314], "await": 309, "lam": [309, 310, 1016], "35776189065725783": 309, "42425183539869415": 309, "openmp": [309, 368, 373, 381, 383, 395, 402, 932, 1016, 1018, 1021], "6560362663398502": 309, "10k": [309, 430], "monotoinc": 309, "gbdt_cst": 309, "999791942438998": 309, "578": [309, 314], "plot_release_highlights_0_23_0": [309, 314], "art": [310, 376, 632, 675, 984, 988], "footprint": [310, 313, 356, 358, 395, 400, 538, 539, 546, 1007, 1010, 1011, 1016, 1017, 1020], "yarowski": [310, 878, 977], "selftrainingclassifi": [310, 319, 320, 321, 977, 1017], "random_unlabeled_point": [310, 876, 877, 878], "self_training_model": [310, 878], "base_estim": [310, 372, 393, 421, 536, 537, 538, 539, 654, 812, 815, 878, 953, 960, 1016, 1018, 1019, 1020], "selftrainingclassifierselftrainingclassifi": 310, "7398": 310, "linear_baselin": 310, "7137": 310, "decisiontreeregressordecisiontreeregressor": 310, "effort": [310, 370, 376, 984, 988, 1016, 1018], "538": [310, 314], "plot_release_highlights_0_24_0": [310, 314], "l2_regular": [311, 402, 544, 545], "max_bin": [311, 312, 402, 544, 545], "typeerror": [311, 375, 694, 905, 948, 1012, 1013, 1016, 1018], "quantileregressor": [311, 960, 964, 1018, 1019, 1020], "min_": [311, 395, 402, 851, 960, 974, 978, 979, 980], "sum_i": [311, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 955, 956, 960, 962, 964, 969], "pb_q": [311, 960], "_1": [311, 397, 400, 403, 514, 520, 521, 523, 528, 529, 530, 629, 630, 635, 636, 637, 638, 639, 643, 644, 645, 646, 664, 665, 666, 667, 748, 960, 962, 964, 979], "get_feature_nam": [311, 1013, 1014, 1016, 1017, 1018], "pet": [311, 770, 964], "dog": [311, 312, 565, 765, 862, 974], "fish": 311, "pet_cat": 311, "pet_dog": 311, "pet_fish": 311, "plot_": [311, 386], "plot_release_highlights_1_0_0": [311, 314], "x_1d": 312, "hist_quantil": 312, "log_reg_input_featur": 312, "gather": [312, 378, 384, 394, 395, 974, 988], "min_frequ": [312, 854, 855, 974, 1019, 1021], "rabbit": [312, 974], "snake": [312, 565, 862, 974], "infrequent_categories_": [312, 854, 855, 862, 974], "x0_cat": [312, 974], "x0_rabbit": [312, 974], "x0_infrequent_sklearn": [312, 974], "refactor": [312, 1005, 1007, 1008, 1009, 1015, 1018, 1019, 1020], "radius_neighbor": [312, 829, 831, 832, 833, 1009, 1014, 1015, 1017, 1018, 1019, 1020], "summari": [312, 352, 367, 381, 675, 696, 894, 962, 965, 984, 999], "pairwise_distances_argmin_min": [312, 761, 1008, 1013, 1019, 1020, 1021], "radiusneighborsclassifi": [312, 823, 824, 829, 832, 965, 967, 1005, 1007, 1011, 1013, 1015, 1017, 1018, 1019, 1020, 1021], "radiusneighborsregressor": [312, 823, 824, 829, 831, 967, 1005, 1007, 1013, 1015, 1017, 1018, 1019, 1020, 1021], "trustworthi": [312, 1013, 1014, 1019, 1020, 1021], "labelpropag": [312, 318, 877, 878, 965, 977, 1006, 1011, 1012, 1015, 1016, 1017, 1019, 1020, 1021], "labelspread": [312, 316, 317, 318, 320, 321, 876, 878, 965, 977, 1006, 1011, 1012, 1015, 1016, 1019, 1020, 1021], "blog": [312, 356, 370, 376, 378, 384, 1016], "cython": [312, 356, 357, 359, 368, 370, 373, 379, 381, 386, 388, 391, 395, 402, 491, 974, 975, 978, 979, 984, 985, 1005, 1008, 1009, 1011, 1017, 1020, 1021], "readili": [312, 400, 980, 988], "true_w": 312, "true_h": 312, "x_reconstruct": [312, 465, 466, 467, 566], "00364": 312, "divis": [312, 395, 403, 573, 574, 577, 695, 696, 711, 712, 720, 728, 765, 766, 769, 964, 998, 1009, 1013, 1014, 1017, 1021], "repeatedli": [312, 352, 383, 395, 402, 405, 491, 529, 649, 650, 659, 660, 661, 763, 954, 968, 994], "bisect_km": 312, "plot_release_highlights_1_1_0": [312, 314], "video": [313, 359, 364, 373, 486, 965, 988, 991], "sepal_col": 313, "petal_col": 313, "x_out": [313, 845, 854, 855], "052506": 313, "592373": 313, "189830": 313, "973554": 313, "416010": 313, "630382": 313, "765012": 313, "362176": 313, "021849": 313, "788808": 313, "hist_no_interact": 313, "v1": [313, 364, 386, 407, 516, 738, 777, 778, 816, 817, 818, 820, 1017, 1020, 1021], "liac": [313, 364, 370, 479, 1020], "arff": [313, 370, 479, 1017, 1020], "ticket": [313, 370], "cabin": 313, "boat": 313, "allen": [313, 1008, 1010, 1012, 1015], "elisabeth": 313, "walton": 313, "24160": 313, "3375": 313, "b5": 313, "loui": [313, 1010, 1011, 1015, 1017, 1019], "mo": [313, 1016], "allison": 313, "hudson": 313, "9167": 313, "113781": 313, "5500": [313, 671, 961], "c22": 313, "c26": 313, "montreal": 313, "pq": 313, "chestervil": 313, "ON": 313, "helen": 313, "lorain": 313, "joshua": [313, 365, 1007, 1008, 1010, 1011, 1017, 1020], "creighton": 313, "bessi": 313, "waldo": 313, "compliant": [313, 370], "cupi": [313, 391], "gpu": [313, 391, 968, 985, 999], "changelog": [313, 374, 383], "plot_release_highlights_1_2_0": [313, 314], "167": [314, 376, 1005], "auto_examples_release_highlight": 314, "semisupervis": [316, 383], "clai": [316, 317, 318, 321, 1005], "woolam": [316, 317, 318, 321, 1005], "n_total_sampl": [316, 317], "n_labeled_point": [316, 317], "unlabeled_set": 316, "everyth": [316, 352, 374, 376, 381, 447, 924, 984, 985, 1005], "lp_model": [316, 317], "predicted_label": [316, 317], "transduction_": [316, 317, 318, 876, 877, 878], "true_label": [316, 317], "_plot": 316, "0x7fd1b38525b0": 316, "pred_entropi": [316, 317], "label_distributions_": [316, 317, 876, 877, 1016], "uncertainty_index": [316, 317], "image_index": [316, 317], "577": [316, 322, 367], "plot_label_propagation_digit": [316, 322], "max_iter": 317, "______________________________________________________________________": 317, "290": [317, 671, 672, 676, 961], "330": 317, "unlabeled_indic": 317, "transduc": 317, "in1d": [317, 1012], "delete_indic": 317, "183": [317, 376, 965, 1005], "nfit": 317, "delete_index": 317, "971": [317, 322], "plot_label_propagation_digits_active_learn": [317, 322], "label_spread": 318, "labelspreadinglabelspread": 318, "output_label": 318, "output_label_arrai": 318, "outer_numb": 318, "inner_numb": 318, "268": [318, 322], "plot_label_propagation_structur": [318, 322], "breast_canc": 319, "569": [319, 367, 483, 575, 578, 579, 581], "augment": [319, 613, 863, 988], "oliv": [319, 321, 1013, 1014, 1016, 1017, 1018], "rausch": [319, 321, 1013, 1014, 1017], "rauscho": [319, 321], "ethz": [319, 321], "total_sampl": [319, 519], "base_classifi": [319, 321, 977], "x_valu": 319, "99999": 319, "amount_label": 319, "amount_iter": 319, "self_training_clf": 319, "skfold": 319, "y_test_tru": 319, "labeled_iter_": [319, 878], "return_count": [319, 342, 833], "capsiz": 319, "twinx": 319, "041": [319, 322], "plot_self_training_varying_threshold": [319, 322], "2823": 320, "2117": 320, "1697": 320, "1071": 320, "850": 320, "tfidftransform": [320, 342, 343, 403, 472, 574, 999, 1012, 1013, 1019, 1021], "sdg_param": 320, "vectorizer_param": 320, "selftrain": 320, "st_pipelin": 320, "ls_pipelin": 320, "eval_and_print_metr": 320, "y_mask": 320, "x_20": 320, "y_20": 320, "plot_semi_supervised_newsgroup": [320, 322], "y_rand": 321, "y_30": 321, "y_50": 321, "ls30": 321, "ls50": 321, "ls100": 321, "st30": 321, "st50": 321, "rbf_svc": [321, 979], "color_map": 321, "482": [321, 322], "plot_semi_supervised_versus_svm_iri": [321, 322], "auto_examples_semi_supervis": 322, "my_kernel": [324, 979], "plot_custom_kernel": [324, 339], "2x2": [325, 395, 736], "312": [325, 339, 1008], "plot_iris_svc": [325, 339], "convention": [326, 383, 877], "support_vector_indic": 326, "267": [326, 339, 1005], "plot_linearsvc_support_vector": [326, 339], "494": [327, 339], "plot_oneclass": [327, 339], "midpoint": 328, "blink": 328, "act": [328, 341, 370, 382, 401, 402, 696, 711, 712, 720, 765, 766, 769, 856, 860, 961, 964, 967, 979, 1013], "spuriou": [328, 378, 974, 1018, 1019, 1020], "c_rang": 328, "gamma_rang": 328, "midpointnorm": 328, "masked_arrai": [328, 779, 793], "x_2d": 328, "y_2d": 328, "cheat": [328, 968, 978, 1007], "c_2d_rang": 328, "gamma_2d_rang": 328, "bright": 328, "brutal": 328, "plot_rbf_paramet": [328, 339], "plot_separating_hyperplan": [329, 339], "plain": [330, 405, 640, 978], "n_samples_1": [330, 979], "n_samples_2": [330, 979], "clusters_std": 330, "wclf": 330, "wdisp": 330, "surface_": [330, 614], "plot_separating_hyperplane_unbalanc": [330, 339], "blown": 331, "score_mean": 331, "score_std": 331, "plot_svm_anova": [331, 339], "fignum": [332, 333], "plot_svm_kernel": [332, 339], "plot_svm_margin": [333, 339], "unreg": 333, "perpendicular": 333, "yy_down": 333, "yy_up": 333, "nusvc": [334, 356, 884, 965, 1005, 1006, 1007, 1010, 1013, 1015, 1016, 1017, 1019], "651": [334, 339, 376], "plot_svm_nonlinear": [334, 339], "svr_rbf": 335, "svr_lin": 335, "svr_poli": 335, "kernel_label": 335, "model_color": 335, "setdiff1d": 335, "plot_svm_regress": [335, 339], "mathcal": [336, 400, 402, 610, 679, 956, 958, 960, 964, 978, 1018], "omega": [336, 398, 958], "model_l1": 336, "logx": 336, "train_size_idx": 336, "results_sc": 336, "c_scale": 336, "model_l2": 336, "plot_svm_scale_c": [336, 339], "break_ti": [337, 883, 886, 979, 1015], "accent": [337, 571, 572, 574, 1015], "plot_svm_tie_break": [337, 339], "emphasi": [338, 398, 883, 884, 885, 886, 887, 971, 984], "subtl": [338, 352, 963, 985], "plot_decision_funct": 338, "sample_weight_last_ten": 338, "sample_weight_const": 338, "clf_no_weight": 338, "clf_weight": 338, "plot_weighted_sampl": [338, 339], "535": 339, "auto_examples_svm": 339, "signatur": [341, 342, 365, 471, 472, 540, 541, 547, 548, 577, 593, 594, 642, 656, 658, 694, 724, 785, 803, 805, 808, 854, 953, 1012, 1018], "size_mb": 341, "utf": [341, 343, 403, 470, 486, 565, 571, 572, 574], "load_dataset": 341, "sublinear_tf": [341, 400, 403, 573, 574], "duration_train": 341, "duration_test": 341, "data_train_size_mb": 341, "data_test_size_mb": 341, "2034": [341, 365], "98mb": 341, "1353": 341, "87mb": 341, "502": 341, "924mb": 341, "7831": 341, "343": 341, "357mb": 341, "ridgeclassifi": [341, 356, 655, 656, 658, 960, 965, 1010, 1014, 1018, 1019, 1020], "sparse_cg": [341, 655, 657, 670, 960, 1006, 1012, 1014, 1015, 1019], "rarer": [341, 343, 403], "deeper": [341, 980], "plot_feature_effect": 341, "average_feature_effect": 341, "top5": 341, "top_indic": 341, "predictive_word": 341, "bar_siz": 341, "y_loc": 341, "keith": [341, 1005, 1010], "atheist": 341, "orbit": [341, 342], "caltech": 341, "expectedli": 341, "pollut": [341, 710, 767, 964, 970], "sender": [341, 365], "livesei": 341, "solntz": 341, "wpd": 341, "sgi": 341, "jon": [341, 1012, 1015, 1016, 1018, 1019], "nntp": [341, 365, 999], "1qlettinn8oi": 341, "cco": 341, "allan": [341, 393, 1017], "schneider": [341, 1018], "me": 341, "instinct": 341, "happi": [341, 381, 384, 797, 798], "listen": 341, "murder": 341, "voluntari": 341, "disregard": [341, 383, 403, 416, 448, 465, 466, 467, 535, 537, 539, 541, 543, 545, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 704, 705, 706, 767, 814, 815, 824, 832, 839, 850, 851, 857, 858, 861, 866, 869, 870, 872, 882, 884, 887, 890, 892, 964, 1013], "beings": 341, "bahavior": 341, "theirs": 341, "mimicri": 341, "imit": 341, "parrot": 341, "polli": 341, "pulchritud": 341, "anim": [341, 403], "kill": 341, "Or": [341, 350, 399, 400, 854, 964, 970, 978], "sigh": 341, "wonder": 341, "bahaviour": 341, "believ": [341, 342, 378, 381, 988], "primat": 341, "arbitarili": 341, "poster": [341, 369, 370, 998], "weren": [341, 855, 1014], "slai": 341, "mate": 341, "ritual": 341, "whatnot": 341, "aren": [341, 365, 374, 386, 394, 708, 738, 969, 1015, 1017], "ye": [341, 378, 383, 848, 865, 960], "child": [341, 350, 357, 381, 383, 395, 402, 426, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 889, 890, 891, 892, 932, 1012], "gorilla": 341, "dolphin": 341, "platypu": 341, "writer": 341, "launch": [341, 342, 386, 988], "custom_nam": 341, "clf_descr": 341, "rocchio": [341, 828], "000693": 341, "5316": 341, "0927": 341, "000958": 341, "000937": 341, "752": 341, "0938": 341, "704": 341, "0398": 341, "000904": 341, "000701": 341, "762": 341, "00355": 341, "00147": 341, "748": [341, 376], "00236": 341, "000618": 341, "779": 341, "training_tim": 341, "txt": [341, 364, 476, 486], "curs": [341, 342, 395, 401, 405, 966, 967, 993, 998], "harm": [341, 372, 403, 775], "plot_document_classification_20newsgroup": [341, 344], "discov": [342, 395, 400, 403, 406, 428, 431, 990, 1020], "metadata": [342, 364, 365, 389, 471, 472, 479, 984, 985, 990], "category_s": 342, "true_k": 342, "3387": 342, "evaluations_std": 342, "fit_and_evalu": 342, "evaluation_std": 342, "score_valu": 342, "std_score": [342, 1018], "reweight": [342, 383, 397, 402, 573, 574, 631, 652, 663], "collis": [342, 343, 403, 565, 572], "x_tfidf": 342, "522": [342, 882], "7929": [342, 1012], "devid": 342, "prod": [342, 604], "phenomenon": [342, 974], "cluster_s": 342, "2050": 342, "711": 342, "446": [342, 405, 708, 738, 964], "1689": 342, "638": [342, 376], "480": 342, "580": [342, 821, 822], "3384": 342, "1887": 342, "1688": 342, "454": 342, "973": [342, 399], "987": 342, "351": 342, "008": [342, 367, 376], "redo": 342, "x_lsa": 342, "explained_vari": [342, 964], "468": 342, "minibatch_kmean": 342, "344": 342, "387": [342, 1005], "062": 342, "361": [342, 365, 402, 538, 539], "027": [342, 367], "influenti": [342, 988], "original_space_centroid": 342, "order_centroid": 342, "ve": [342, 370, 403, 987, 988, 999, 1012], "shuttl": 342, "bibl": 342, "sparciti": 342, "lsa_vector": 342, "x_hashed_lsa": 342, "428": 342, "024": 342, "406": [342, 672, 676, 961], "342": 342, "388": 342, "376": [342, 972], "329": [342, 433], "df_std": 342, "speak": [342, 356, 370, 978], "safer": [342, 352, 395, 399, 1005], "plot_document_clust": [342, 344], "18000": [343, 365], "raw_data": 343, "data_size_mb": 343, "3803": 343, "245mb": 343, "anyth": [343, 374, 376, 383, 399, 928, 1019], "unicod": [343, 403, 470, 486, 565, 571, 572, 574, 929, 1005, 1013, 1017], "charact": [343, 370, 375, 383, 403, 486, 491, 492, 571, 572, 574, 893, 969, 999, 1005, 1018, 1020], "underscor": [343, 372, 383, 948, 996, 1005, 1015, 1018], "tok": [343, 403], "findal": 343, "token_freq": 343, "dict_count_vector": 343, "47928": 343, "vocabulary_": [343, 403, 564, 571, 574, 999, 1005], "19145": 343, "n_nonzero_column": 343, "43873": 343, "inact": [343, 364, 370], "47668": 343, "input_typ": [343, 403, 447, 565], "y_po": 343, "downsid": 343, "featureheash": 343, "implicitli": [343, 379, 402, 580, 615, 616, 860, 954, 956, 971, 974, 979], "token_pattern": [343, 403, 571, 572, 574], "915": 343, "47885": 343, "754": [343, 344], "plot_hashing_vs_dict_vector": [343, 344], "auto_examples_text": 344, "parameter": [346, 405, 597, 598, 605, 606, 777, 778, 960, 961, 969, 974, 980], "weakest": [346, 980], "cost_complexity_pruning_path": [346, 889, 890, 891, 892], "drawstyl": [346, 683], "3272984419327777": 346, "624": [346, 351, 971], "plot_cost_complexity_prun": [346, 351], "ryb": 347, "pairidx": 347, "borderpad": 347, "handletextpad": 347, "plot_iris_dtc": [347, 351], "plot_tre": [347, 350, 980, 1014, 1016, 1017, 1018, 1020], "339": [347, 351], "plot_tree_regress": [348, 351], "regr_3": 349, "y_3": 349, "plot_tree_regression_multioutput": [349, 351], "decision_path": [350, 540, 541, 547, 548, 549, 889, 890, 891, 892, 1011, 1016], "children_left": 350, "children_right": 350, "n_node_sampl": 350, "travers": [350, 967, 971], "n_node": [350, 425, 429, 446, 540, 541, 547, 548, 549, 889, 890, 891, 892, 923], "node_depth": 350, "is_leav": 350, "pop": [350, 381, 896, 994, 1013], "visit": [350, 370, 971], "node_id": [350, 893, 895], "is_split_nod": 350, "children": [350, 395, 402, 425, 429, 446, 549, 1009], "800000011920929": 350, "950000047683716": 350, "node_index": 350, "node_ind": 350, "leaf_id": 350, "sample_id": [350, 365, 480], "threshold_sign": 350, "inequ": [350, 383, 395, 427, 430, 442, 682, 961, 962, 967], "boolean": [350, 365, 370, 372, 379, 396, 402, 403, 404, 447, 544, 545, 564, 565, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 612, 615, 616, 619, 632, 654, 682, 810, 816, 837, 844, 864, 897, 948, 954, 960, 966, 971, 974, 980, 1005, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1018, 1019, 1020], "common_nod": 350, "common_node_id": 350, "plot_unveil_tree_structur": [350, 351], "576": 351, "auto_examples_tre": 351, "anti": [352, 589, 816, 966], "x_test_transform": [352, 399], "standard_norm": 352, "unfair": 352, "x_select": 352, "gbc": 352, "x_train_select": 352, "x_test_select": 352, "tip": [352, 355, 359, 370, 373, 376, 390, 403, 517, 524, 628, 675, 960, 986, 1000, 1001, 1003, 1008], "glossari": [352, 359, 370, 372, 376, 394, 406, 407, 421, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 447, 450, 452, 455, 457, 471, 474, 475, 478, 480, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 566, 567, 577, 585, 590, 591, 593, 594, 610, 615, 617, 622, 623, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 670, 671, 672, 673, 674, 675, 676, 677, 678, 684, 756, 760, 763, 773, 777, 778, 779, 781, 782, 783, 784, 785, 791, 793, 794, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 823, 824, 826, 827, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 843, 846, 858, 862, 870, 873, 874, 876, 877, 881, 882, 883, 886, 889, 890, 891, 892, 917, 918, 935, 938, 953, 954, 960, 990, 1013], "mtrand": 352, "_rand": 352, "85418642": 352, "79084103": 352, "13077794": 352, "11915045": 352, "56479934": 352, "70814003": 352, "25291366": 352, "55212743": 352, "18197458": 352, "37845099": 352, "snippet": [352, 370, 375, 378, 381, 391, 402, 403, 404, 954, 974, 980, 987, 1018], "mutat": [352, 1013], "somewhat": [352, 358, 370, 372, 400, 402, 883, 886, 960, 979, 980], "debug": [352, 357, 371, 373, 376, 383, 385, 610, 880, 930, 984, 999, 1013, 1017], "govern": [352, 356, 359, 370, 383, 982, 988], "implic": 352, "rf_123": 352, "rf_inst": 352, "didn": [352, 383, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "strict": [352, 368, 383, 400, 486, 518, 571, 572, 574, 960, 1005, 1014, 1017], "pervas": [352, 370], "throughout": [352, 383, 610, 780, 838, 839, 990, 1008, 1013], "codebas": [352, 370, 371, 372, 403, 1005, 1011], "unlucki": 352, "lucki": 352, "fairer": 352, "temptat": [352, 370], "throughput": [355, 984, 1001, 1008], "switch": [355, 661, 687, 700, 719, 737, 739, 775, 821, 822, 917, 918, 964, 967, 1001, 1005], "offlin": [356, 370], "bottleneck": [356, 376, 402, 431, 838, 839], "hurt": [356, 517, 1013], "toolkit": [356, 984, 988], "branch": [356, 368, 370, 373, 374, 395, 402, 426, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 889, 890, 891, 892, 894, 967, 971, 980], "sklearn_assume_finit": 356, "assume_finit": [356, 357, 451, 879], "assert_all_finit": [356, 379, 451], "nm": 356, "csc": [356, 381, 383, 403, 534, 536, 537, 653, 675, 848, 850, 856, 861, 864, 866, 872, 897, 901, 902, 927, 939, 940, 942, 943, 944, 945, 967, 974, 1013, 1014, 1016, 1019], "32bit": [356, 929], "speedup": [356, 400, 402, 633, 637, 640, 1005, 1006, 1007, 1008, 1020], "multithread": [356, 395, 881, 882, 883, 884, 885, 886, 887], "bla": [356, 357, 368, 371, 376, 1005, 1013, 1014, 1016, 1017], "sparsity_ratio": 356, "gbt": 356, "speedi": 356, "packet": 356, "reuter": [356, 365], "carefulli": [356, 400], "spawn": [356, 381, 779, 793, 802, 803, 804, 1016], "gil": [356, 357, 371, 932, 1008, 1013, 1014, 1017, 1018], "ought": 356, "lapack": [356, 357, 368, 515, 518, 524, 671, 1020], "dgemm": 356, "show_vers": [356, 368, 370, 378, 386, 1013], "atla": [356, 368], "rebuild": [356, 389, 403, 426], "openbla": [356, 357, 368, 381, 932, 1018], "mkl": [356, 357, 368, 381, 932, 1005], "veclib": [356, 381], "osx": 356, "nouri": [356, 1006, 1008], "instruct": [356, 370, 371, 372, 373, 374, 375, 378, 381, 382, 486, 571, 572, 574, 990, 999, 1005], "ubuntu": [356, 368, 376, 378], "1gb": 356, "mib": [356, 451, 879], "working_memori": [356, 357, 451, 763, 879, 1013], "adher": [356, 372, 383, 912, 913, 1005, 1006], "pairwise_distances_chunk": [356, 760, 1013, 1016], "facilit": [356, 383, 389, 984, 985, 1011, 1014], "moment": [356, 400, 405, 424, 598, 606, 838, 839, 928, 968, 969], "000024": 356, "027400": 356, "mileag": 356, "deploi": [356, 385, 389, 985, 988], "upstream": [356, 370, 374, 378, 381, 974, 1014], "lighter": [356, 683, 685, 764, 771, 1021], "threadpoolctl": [357, 368, 386, 388], "subsect": [357, 394], "worker": [357, 383, 403, 930, 931, 932, 1020], "14228": 357, "loki": [357, 932, 964, 1013, 1016], "duplic": [357, 369, 370, 383, 395, 406, 428, 431, 432, 498, 618, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 805, 852, 950, 967, 1005, 1008, 1017, 1019, 1021], "memmap": [357, 365, 383, 400, 491, 517, 1013], "1mb": [357, 1010], "parallel_backend": [357, 406, 421, 428, 431, 433, 435, 440, 441, 444, 447, 450, 455, 514, 518, 519, 520, 522, 525, 526, 528, 529, 531, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 577, 585, 593, 615, 617, 622, 630, 634, 636, 638, 640, 641, 642, 644, 646, 648, 649, 651, 659, 662, 671, 672, 673, 674, 675, 676, 677, 756, 760, 763, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 823, 824, 827, 829, 831, 832, 834, 835, 840, 843, 876, 877, 1013], "exclus": [357, 381, 400, 402, 610, 611, 613, 953, 960, 964, 965, 988, 1012, 1016], "omp_num_thread": 357, "my_script": 357, "algebra": [357, 368, 373, 381, 400, 403, 445, 847, 974], "bli": [357, 368, 381], "mkl_num_thread": 357, "openblas_num_thread": 357, "blis_num_thread": 357, "bash": [357, 378], "zsh": 357, "prompt": [357, 368, 370, 386, 388, 403, 990], "pypi": [357, 368, 370, 372, 374, 376, 386, 980, 1013, 1017, 1019, 1020], "channel": [357, 365, 368, 381, 403, 476, 477, 566, 567, 569, 570], "subscript": [357, 932, 1018], "max_thread": [357, 371], "n_cpu": [357, 383], "_num_thread": 357, "singleton": [357, 787, 904, 1018], "aforement": [357, 965], "global_random_se": 357, "fixtur": [357, 370], "ci": [357, 373, 374, 378, 966, 1011, 1013], "build_numb": 357, "disrupt": 357, "config": [357, 370, 371, 378, 609, 1013], "contributor": [357, 373, 374, 375, 378, 381, 383, 964, 982, 985, 1006, 1007, 1008], "encount": [357, 368, 389, 395, 402, 403, 479, 544, 545, 564, 816, 817, 818, 820, 854, 939, 974, 978, 984, 987, 988, 999, 1013, 1016], "watch": 357, "annoi": 357, "test_your_test_nam": 357, "skip": [357, 370, 372, 379, 403, 451, 551, 629, 630, 635, 643, 644, 645, 654, 664, 879, 999, 1009, 1012, 1015, 1017, 1019], "global_dtyp": 357, "boundscheck": [357, 371], "segfault": [357, 371, 1005, 1013, 1018], "posix": [357, 381], "pairwisedistancesreduct": 357, "adequ": [357, 376, 550, 990, 1018], "drive": [358, 400, 401, 402, 532, 978, 988, 999], "passiveaggressiveregressor": [358, 960, 1006, 1009, 1012, 1013, 1016, 1018], "maxabsscal": [358, 845, 866, 954, 974, 1010, 1013, 1014, 1015, 1016, 1021], "routin": [358, 364, 367, 370, 371, 372, 373, 378, 381, 383, 404, 655, 657, 670, 682, 883, 884, 885, 886, 887, 961, 967, 974, 975, 978, 984, 988, 1005, 1019, 1020, 1021], "passiveaggress": [358, 403], "fledg": [358, 403], "naivebay": 358, "dramat": 358, "welcom": [359, 369, 370, 378, 384, 985, 987], "roadmap": [359, 982], "persist": [359, 378, 381, 400, 593, 594, 837, 969, 984, 1001, 1011, 1014], "miscellan": [359, 363, 364, 1011, 1012, 1019, 1020, 1021], "craft": [359, 373], "curat": [359, 370, 373, 374], "conveni": [362, 378, 381, 396, 399, 403, 405, 410, 427, 430, 432, 434, 436, 447, 472, 594, 659, 661, 682, 710, 767, 840, 841, 938, 954, 956, 960, 961, 971, 988, 999, 1005], "commun": [363, 369, 373, 375, 378, 383, 386, 395, 402, 521, 523, 530, 675, 693, 853, 954, 961, 967, 974, 978, 982, 984, 988, 1013, 1014], "fetcher": [363, 1010, 1012], "linnerrud": [363, 1001], "breast": [363, 483, 1001, 1010], "cancer": [363, 483, 576, 577, 828, 1001, 1010], "covertyp": [363, 474, 1001], "rcv1": [363, 480, 1001, 1010], "kddcup": [363, 475, 1001], "svmlight": [363, 470, 491, 492, 984, 1001, 1005, 1006, 1012, 1014], "jpeg": [364, 365, 476, 477], "publish": [364, 365, 372, 374, 378, 383, 976, 985, 1017], "creativ": 364, "spare": [364, 657, 658], "pyplpt": 364, "load_svmlight_fil": [364, 1005, 1006, 1011, 1012, 1013, 1020], "test_dataset": 364, "everybodi": [364, 370], "upload": [364, 368, 374, 381, 654], "mice": [364, 610, 954], "brain": 364, "miceprotein": 364, "1080": [364, 395], "sc": [364, 395], "clara": [364, 1017], "higuera": 364, "katheleen": 364, "gardin": 364, "krzysztof": 364, "cio": 364, "protein": [364, 984], "cite": [364, 395, 982], "kj": [364, 966], "critic": [364, 370, 382, 389, 402, 675, 961, 964, 972, 979, 988, 1016], "syndrom": 364, "plo": [364, 590, 591], "ONE": [364, 590, 591], "e0129126": 364, "40966": 364, "upload_d": 364, "08t16": 364, "17928620": 364, "file_id": 364, "default_target_attribut": 364, "row_id_attribut": 364, "mouseid": 364, "ignore_attribut": 364, "genotyp": 364, "cc18": 364, "study_135": 364, "study_98": 364, "study_99": 364, "md5_checksum": 364, "3c479a6885bfa0438971388283a1ce32": 364, "websit": [364, 365, 367, 370, 384, 968, 978, 988, 999, 1006, 1007, 1008], "4550": 364, "creator": [364, 367], "17t14": 364, "1804243": 364, "pone": 364, "0129126": 364, "openml100": 364, "study_14": 364, "study_34": 364, "earliest": [364, 961], "iris_61": 364, "iris_969": 364, "969": 364, "iris_version_3": 364, "vanschoren": [364, 1017], "rijn": [364, 1013], "bischl": 364, "torgo": 364, "acm": [364, 365, 395, 406, 428, 433, 440, 443, 494, 546, 659, 708, 738, 827, 964, 967, 970, 976], "sigkdd": [364, 365, 494, 659, 862, 974, 976], "newslett": 364, "legaci": [364, 374, 383, 932, 1005, 1012, 1017], "my": [364, 370, 375, 378, 479], "columnar": [364, 447, 984], "usabl": [364, 370, 372, 383, 389, 403, 779, 932, 1005, 1012, 1019, 1020], "io": [364, 367, 368, 370, 374, 376, 378, 383, 384, 389, 675, 984, 1003], "json": [364, 370, 386], "sql": 364, "smoothli": 364, "manipul": [364, 391, 490, 932, 984, 1011], "mat": [364, 403], "load_fil": [364, 365, 999, 1007, 1019], "audio": [364, 486], "wish": [364, 370, 377, 379, 386, 395, 633, 634, 637, 638, 639, 647, 648, 918, 991, 999, 1012], "imageio": 364, "wavfil": 364, "wav": 364, "hdf5": 364, "h5py": 364, "pytabl": 364, "april": [365, 647, 668, 669, 1009, 1017], "1992": [365, 367, 399, 402, 550, 551, 628, 960], "1994": [365, 367, 627], "AT": [365, 478], "laboratori": [365, 984], "cambridg": [365, 400, 573, 816, 820, 960, 962, 966], "facial": 365, "upright": 365, "frontal": 365, "movement": 365, "credit": [365, 378, 402, 960, 988], "18846": [365, 471, 472], "20news_hom": 365, "newsgroups_train": 365, "11314": 365, "1073": 365, "20new": [365, 999], "34118": 365, "01327": 365, "newsgroups_test": 365, "vectors_test": 365, "class_prior": [365, 816, 817, 818, 820, 1006, 1009], "fit_prior": [365, 816, 817, 818, 820], "88213": 365, "suspici": 365, "show_top10": 365, "top10": 365, "affili": 365, "abund": 365, "clue": [365, 378, 961], "bare": [365, 961, 999], "quotat": 365, "77310": 365, "76995": 365, "cleveland": 365, "indian": 365, "leagu": 365, "team": [365, 373, 381, 383, 982, 984, 988, 1005], "ohio": 365, "spark": [365, 985], "death": 365, "floyd": [365, 671, 961], "reckon": 365, "coloni": 365, "owner": [365, 367], "paul": [365, 1008, 1011, 1012, 1013, 1014, 1018, 1019], "dolan": 365, "nicknam": 365, "tribe": 365, "theme": [365, 1005], "mlb": [365, 852], "inappropri": [365, 399, 405, 692, 800], "nlp": [365, 400, 403, 816, 820, 962, 988], "cultur": 365, "inflammatori": 365, "famou": [365, 367, 979], "internet": [365, 375, 974, 997], "offici": [365, 372, 383, 386, 476, 480, 984, 999, 1013, 1014, 1017], "verif": [365, 964, 988], "identif": [365, 370, 480, 953, 991], "viola": [365, 1013], "opencv": 365, "detector": [365, 383, 827], "5749": [365, 476, 477], "13233": [365, 476, 477], "5828": [365, 476, 477], "200m": 365, "lfw_home": 365, "rectangular": [365, 383, 918, 985], "1140": 365, "fetch_lfw_pair": [365, 1010, 1020], "lfw_pairs_train": 365, "subdivid": [365, 405], "10_fold": [365, 476], "gari": [365, 1012], "huang": [365, 641, 1011, 1016], "manu": 365, "ramesh": [365, 988, 1008, 1011, 1015], "tamara": 365, "berg": [365, 1006, 1007, 1017], "erik": [365, 988, 1008], "miller": [365, 1013, 1014, 1018], "massachusett": 365, "amherst": 365, "30m": 365, "seven": [365, 957], "homepag": [365, 513, 980], "581012": [365, 474], "newswir": 365, "ltd": [365, 988], "804414": [365, 480], "47236": [365, 480], "fetch_rcv1": [365, 1010, 1014], "v2": [365, 480, 647, 668, 669, 960], "chronolog": [365, 480], "23149": [365, 480, 1019], "781265": [365, 480], "lyrl2004": [365, 480], "2286": 365, "810596": 365, "2287": 365, "2288": 365, "uint32": [365, 480], "gmil": 365, "381327": 365, "ccat": 365, "e11": 365, "ecat": 365, "m11": 365, "lewi": [365, 1012, 1016], "yang": [365, 395, 400, 517, 622, 1011, 1012, 1015, 1017, 1018, 1019], "rose": 365, "397": 365, "cup": [365, 964], "tcpdump": 365, "darpa": 365, "intrus": 365, "mit": [365, 376, 395, 405, 593, 594, 597, 602, 605, 626, 649, 650, 659, 818, 957], "lincoln": 365, "inject": [365, 402], "attack": 365, "unrealist": 365, "logged_in": 365, "resp": [365, 402, 580, 777, 778, 978, 1013], "4898431": [365, 475], "976158": 365, "699691": 365, "619052": 365, "95373": 365, "kddcup99": [365, 475], "richard": [365, 404, 641, 1006, 1015, 1017, 1019, 1020], "lippmann": 365, "hain": 365, "jonathan": [365, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021], "korba": 365, "da": [365, 1020, 1021], "yamanishi": 365, "takeuchi": 365, "william": [365, 367, 405, 593, 594, 597, 602, 605, 622, 964, 968, 1012, 1013, 1014, 1015, 1020, 1021], "miln": 365, "discount": [365, 395, 708, 738, 1012, 1015], "sixth": 365, "320": [365, 953, 978, 1005], "press": [365, 395, 400, 405, 406, 428, 573, 593, 594, 597, 602, 605, 626, 816, 820, 957, 960, 962, 966], "household": 365, "statlib": 365, "dcc": 365, "ltorgo": 365, "cal_hous": 365, "1990": 365, "censu": 365, "bureau": 365, "resid": 365, "vacat": 365, "pace": 365, "kellei": [365, 1007, 1008], "ronald": [365, 968, 1008, 1018], "barri": [365, 1013], "autoregress": 365, "291": [365, 367], "297": 365, "hyperspher": [366, 984], "interleav": [366, 505], "simplif": [366, 369, 375, 1005, 1011], "realiti": 366, "make_sparse_uncorrel": 366, "make_friedman1": [366, 402, 522, 526, 576, 577, 615], "make_friedman2": [366, 594, 596, 597, 598, 599, 600, 604, 607, 608], "reciproc": [366, 964], "make_friedman3": 366, "7826": 367, "4194": 367, "9490": 367, "9565": 367, "fisher": [367, 402, 487, 619, 984], "donor": 367, "michael": [367, 393, 395, 433, 611, 620, 674, 777, 954, 960, 988, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1020], "marshal": 367, "arc": [367, 402], "juli": [367, 404, 716, 862, 974, 1008, 1012, 1013, 1014], "1988": 367, "sir": 367, "referenc": [367, 372, 373, 378, 383, 873, 874, 967, 1012, 1018], "duda": [367, 958], "hart": [367, 958, 1013], "taxonom": 367, "annual": [367, 395, 708, 738, 878, 964, 977], "eugen": [367, 1006, 1011], "179": [367, 376, 402, 1005], "1936": 367, "john": [367, 403, 519, 691, 717, 751, 856, 883, 884, 886, 887, 954, 960, 964, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1018, 1020, 1021], "wilei": [367, 954], "1950": [367, 964], "1973": [367, 393], "scene": [367, 967, 969, 1018], "q327": 367, "d83": 367, "son": [367, 954], "isbn": [367, 395, 960], "471": 367, "22361": 367, "218": [367, 454, 698, 768], "dasarathi": 367, "1980": 367, "nose": [367, 1008, 1012], "pami": [367, 395, 707], "gate": [367, 1018], "1972": 367, "431": 367, "mlc": 367, "cheeseman": 367, "autoclass": 367, "conceptu": [367, 402, 962], "alpaydin": 367, "boun": 367, "nist": [367, 964], "bitmap": 367, "preprint": 367, "32x32": 367, "nonoverlap": 367, "4x4": [367, 400, 403], "garri": 367, "candela": 367, "dimmick": 367, "geist": 367, "grother": 367, "janet": 367, "handprint": 367, "nistir": 367, "5469": 367, "kaynak": 367, "msc": 367, "graduat": 367, "bogazici": 367, "cascad": 367, "kybernetika": 367, "ken": [367, 999, 1007, 1014], "tang": [367, 1015, 1016, 1017], "ponnuthurai": 367, "suganthan": 367, "yao": [367, 1011, 1012, 1013, 1014, 1021], "kai": [367, 546, 970, 1012], "dimensionalityreduct": 367, "nanyang": 367, "technolog": 367, "claudio": [367, 1019, 1020], "gentil": [367, 1017], "linnerud": [367, 488], "men": 367, "club": 367, "waist": 367, "puls": 367, "chin": [367, 1009], "situp": 367, "tenenhau": 367, "pratiqu": 367, "alcalin": 367, "magnesium": 367, "phenol": 367, "nonflavanoid": 367, "proanthocyanin": 367, "od280": 367, "od315": 367, "dilut": 367, "class_2": [367, 493], "746": 367, "chemic": 367, "grown": [367, 402, 536, 537, 538, 539, 540, 541, 547, 548, 889, 890, 891, 892, 980], "itali": 367, "cultiv": 367, "thirteen": 367, "constitu": 367, "forina": 367, "parvu": 367, "pharmaceut": 367, "food": 367, "technologi": [367, 395, 984, 988], "brigata": 367, "salerno": 367, "16147": 367, "genoa": 367, "lichman": 367, "irvin": 367, "ca": [367, 395, 426, 889, 890, 976, 980], "aeberhard": 367, "cooman": 367, "vel": 367, "rep": [367, 984], "dept": 367, "cook": [367, 1005, 1011], "north": [367, 395], "queensland": 367, "submit": [367, 368, 369, 372, 373, 374, 375, 378, 383, 384], "technometr": [367, 397, 452, 457, 970], "rda": 367, "1nn": 367, "THE": [367, 980], "OF": 367, "chemometr": 367, "perimet": 367, "textur": [367, 740, 741, 962], "concav": 367, "symmetri": [367, 682, 854, 857, 869, 962], "fractal": 367, "malign": [367, 483], "benign": [367, 483], "143": [367, 454, 455, 976, 1005, 1006], "2501": 367, "163": [367, 972], "019": [367, 376, 454], "427": [367, 489, 490, 566, 567], "079": 367, "4254": 367, "357": [367, 483, 882], "wolberg": 367, "nick": [367, 1005, 1011, 1012, 1013, 1014], "olvi": 367, "mangasarian": 367, "goo": [367, 483], "gl": [367, 483], "u2uwz2": [367, 483], "needl": 367, "aspir": [367, 370], "fna": 367, "nuclei": 367, "multisurfac": 367, "msm": 367, "bennett": [367, 964], "midwest": 367, "cognit": 367, "societi": [367, 395, 397, 452, 457, 524, 610, 857, 869, 960, 978], "101": [367, 827, 1006], "insepar": 367, "uw": [367, 1017], "ftp": [367, 665, 666], "wisc": [367, 876], "prog": 367, "cpo": 367, "nuclear": 367, "tumor": 367, "spie": 367, "1993": [367, 457, 647, 668, 669, 980], "symposium": [367, 395, 443], "1905": 367, "870": 367, "san": [367, 403, 976], "jose": [367, 641, 964, 1013, 1015], "prognosi": 367, "570": [367, 997], "august": [367, 395, 494, 517, 979, 1005, 1007, 1008, 1012, 1019], "wheel": [368, 370, 374, 386, 1015, 1017, 1019], "quickest": 368, "registri": [368, 386], "uninstal": 368, "git": [368, 372, 374, 376, 378, 987, 1005], "fork": [368, 370, 374, 378, 381], "miniforge3": [368, 378], "miniforg": [368, 378, 386], "env": [368, 378, 386], "virtualenv": [368, 370], "venv": [368, 386], "dev0": [368, 374, 987], "pyx": [368, 370, 371, 376, 378], "pxd": [368, 370], "sklearn_fail_no_openmp": 368, "checkout": [368, 370, 374, 378], "cumbersom": 368, "reinstal": [368, 386], "setuptool": 368, "unix": [368, 403], "makefil": 368, "studio": [368, 988], "vs_buildtool": 368, "desktop": 368, "screenshot": 368, "secondli": [368, 370, 381, 395, 402, 640, 960, 999], "architectur": [368, 372, 378, 381, 389, 451, 879, 968, 982, 988, 1005], "cmd": 368, "powershel": 368, "struct": [368, 383, 1008], "calcsiz": 368, "distutils_use_sdk": 368, "x86": 368, "buildtool": 368, "vc": 368, "vcvarsal": 368, "bat": 368, "clang": [368, 371], "confusingli": 368, "usr": 368, "gcc": [368, 371, 376, 381], "libomp": [368, 1017], "silicon": [368, 982], "m1": [368, 982], "januari": [368, 370, 386, 1005, 1006, 1015, 1017, 1020], "arm64": [368, 370, 373, 386], "llvm": 368, "toolchain": 368, "xcode": 368, "conflict": [368, 370, 374, 378, 386, 1012, 1013], "condarc": 368, "channel_prior": 368, "reactiv": [368, 376], "echo": [368, 374], "cxx": 368, "cflag": 368, "cxxflag": 368, "ldflag": 368, "subfold": [368, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 1018], "fopenmp": [368, 371], "export": [368, 371, 372, 389, 893, 894, 980, 984, 987, 1014], "cppflag": 368, "xpreprocessor": 368, "wl": 368, "rpath": 368, "lomp": 368, "sudo": [368, 386], "apt": [368, 378, 386], "pip3": 368, "pythonx": 368, "precompil": 368, "arm": [368, 378, 953], "cython3": 368, "cento": 368, "yum": 368, "devel": 368, "gnu": 368, "port": [368, 386, 1015], "pkg": 368, "build_ext": [368, 376], "build_clib": 368, "linker": [368, 371], "sysconfig": 368, "counterpart": [368, 953, 961, 979, 994], "get_config_var": 368, "sklearn_build_parallel": 368, "tracker": [369, 373, 378, 381, 384, 389, 982, 985], "prioriti": [369, 615, 809, 810, 985, 1008], "guidelin": [369, 373, 375, 376, 378, 394, 395, 402], "reformul": 369, "xyz": 369, "someestim": 369, "glanc": 369, "relabel": [369, 797, 798, 878], "stall": [369, 373], "sprint": [369, 370, 982, 1005], "unfinish": [369, 370], "supersed": [369, 1010], "overflow": [369, 378, 381, 1008, 1012, 1013, 1014, 1015, 1016, 1018], "submitt": 369, "strive": [369, 384, 988], "expertis": [369, 370, 381], "unclear": [369, 370, 484], "pleasant": [369, 988], "chime": 369, "permiss": [369, 374, 384, 386, 988, 1020], "matthew": [369, 375, 519, 725, 1005, 1008, 1012, 1014, 1018, 1019], "rocklin": [369, 375], "acknowledg": [369, 592], "struggl": [369, 384], "everyon": [370, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "underrepres": 370, "merit": [370, 374, 384], "teach": 370, "priceless": 370, "abid": 370, "codeofconduct": 370, "hesit": 370, "typo": [370, 384, 1005], "send": [370, 395, 407, 516], "valuabl": [370, 954, 988], "burden": [370, 853, 985], "slep": [370, 383, 982], "templat": [370, 374, 375, 383, 384, 540, 541, 546, 547, 548, 549, 984], "ecosystem": [370, 954, 983, 988], "contrib": [370, 372, 378, 381, 383, 984, 985], "numpydoc": [370, 383, 386, 388], "compli": [370, 383, 912, 985], "fulfil": [370, 395, 402, 779, 782, 783, 793, 841, 845, 960], "anyon": [370, 384, 988], "gist": [370, 378, 987], "repo": [370, 374, 985], "feasibl": [370, 850, 851, 861], "traceback": [370, 375, 378, 381, 451, 987], "doubt": [370, 371, 374, 960, 970, 984], "companion": [370, 974], "transcript": 370, "inclus": [370, 372, 378, 433, 439, 736, 768, 964, 965, 1005, 1019], "yourlogin": 370, "flake8": [370, 386, 388, 562], "mypi": [370, 374, 386, 388, 1016], "synchron": [370, 403], "my_featur": 370, "commit": [370, 374, 378, 987, 1005, 1006, 1007, 1008], "modified_fil": 370, "committ": [370, 1005], "modif": [370, 398, 402, 403, 977], "approv": [370, 384, 402], "mrg": [370, 378], "incomplet": [370, 386, 395, 688, 775, 954, 961, 999, 1009, 1011], "wip": [370, 378, 386], "matur": [370, 984, 985], "broad": [370, 383, 984], "collabor": 370, "_logist": 370, "doctest": [370, 383, 991, 1005], "test_logist": [370, 378], "rst": [370, 374, 378, 999, 1005, 1010], "test_common": [370, 378], "caught": [370, 378, 389], "editor": [370, 378, 381], "submodul": [370, 374, 376, 394, 956, 962, 1005], "intricaci": 370, "narr": [370, 383, 641, 881, 886, 1005, 1006], "unittest": 370, "tests_for_packag": 370, "static": [370, 372, 376, 378, 629, 630, 635, 636, 643, 644, 645, 646], "astropi": 370, "linux": [370, 372, 373, 378, 984, 1005], "circleci": 370, "lint": [370, 378], "aarch64": [370, 378, 386], "gh": 370, "nogil": [370, 371], "cpython": [370, 371, 376, 1020], "sklearn_run_float32_test": 370, "lengthi": [370, 381], "etiquett": 370, "she": [370, 871, 872, 1015], "he": [370, 708, 738, 838, 839, 871, 872, 964, 999, 1012, 1019, 1020], "shorten": [370, 979, 1018], "leader": [370, 988], "grab": 370, "familiar": [370, 401, 1013], "acquaint": 370, "experienc": 370, "abandon": 370, "someon": [370, 374, 383, 1005], "glad": 370, "restructuredtext": 370, "_build": 370, "viewabl": 370, "pillow": [370, 386, 388], "sphinxext": [370, 386, 388], "opengraph": [370, 386, 388], "vast": 370, "examples_pattern": 370, "your_regex_goes_her": 370, "no_mathjax": 370, "latexpdf": 370, "elabor": [370, 965], "paragraph": [370, 403, 486, 999], "hood": [370, 960, 979], "colon": 370, "selectfpr": [370, 404, 575, 578, 581, 582, 583, 589, 1021], "some_param": 370, "hello": [370, 378, 925], "goodby": 370, "liter": [370, 374, 988], "array_paramet": 370, "list_param": 370, "typed_ndarrai": 370, "multioutput_arrai": 370, "bracket": [370, 960], "delimit": [370, 970, 1020], "unwritten": 370, "bibliograph": 370, "arxiv": [370, 445], "backtick": [370, 375], "nowadai": 370, "syntax": [370, 375, 378, 396, 953, 990, 1016, 1018], "_my": 370, "ref": [370, 377, 378, 954, 1011], "currentmodul": 370, "succeed": 370, "stone": [370, 889, 890, 980], "subdirectori": 370, "subpackag": [370, 374, 982, 1009, 1014], "cleanup": [370, 1005], "charg": 370, "test_requiring_mpl_fixtur": 370, "hang": [370, 987, 1015, 1016], "fruit": [370, 965], "asv": 370, "asv_benchmark": 370, "airspe": 370, "veloc": 370, "publicli": [370, 1015], "zero_on": [370, 1006], "example_funct": 370, "exampleestim": 370, "_n_cluster": 370, "versionchang": 370, "meet": [370, 381, 384, 404, 555, 586, 838, 839, 878, 964, 977, 988, 1013, 1014, 1015], "nit": 370, "retract": 370, "grammar": 370, "disambigu": [370, 809, 878, 977, 1020], "immedi": [370, 381, 779, 793, 802, 803, 1013], "Will": [370, 480, 517, 610, 627, 628, 629, 635, 639, 640, 643, 644, 645, 646, 647, 648, 656, 658, 690, 697, 770, 846, 850, 854, 861, 1008, 1009, 1011, 1013], "clariti": [370, 378], "unhelp": 370, "extran": 370, "rewritten": [370, 632, 1007, 1009], "generos": 370, "reward": 370, "heard": 370, "enemi": 370, "courtesi": 370, "justifi": [370, 376, 393, 548, 980], "occas": 370, "deserv": [370, 376], "digest": [370, 1020], "overwhelm": 370, "sheer": [370, 988], "myself": 370, "trickiest": 370, "buri": 370, "inherit": [370, 372, 382, 383, 560, 659, 910, 912, 960, 1005, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1021], "mixin": [370, 383, 410, 411, 412, 413, 414, 415, 416, 417, 584, 912, 1007, 1016, 1020], "classifiermixin": [370, 372, 383, 399, 1016], "grep": 370, "delai": [370, 479, 779, 793, 802, 803, 932, 1019, 1020], "some_funct": [370, 908], "some_iter": 370, "flavor": [370, 967], "pointer": [370, 378, 426, 1014], "mandatori": [370, 403], "favorit": [370, 381, 988], "Being": [370, 384, 389, 960, 967], "killer": [370, 988], "blame": 370, "migrat": [370, 1005], "ignorerevsfil": 370, "rev": [370, 590, 591], "ruin": 370, "maco": [371, 373, 386, 1013, 1017, 1019], "sklearn_enable_debug_cython_direct": 371, "scratch": [371, 426, 964, 1007], "magic": [371, 376, 405, 599, 604, 607], "gdb": [371, 373, 987], "entrypoint_to_bug_reproduc": 371, "cdef": 371, "state_to_print": 371, "test_val": 371, "unifi": [371, 379, 381, 382, 402, 620, 984, 1005], "fuse": [371, 1011, 1021], "ongo": [371, 384], "concret": [371, 384, 404, 651, 657, 658, 659, 660, 873, 874, 960, 978], "alia": [371, 374, 378, 383, 600, 938, 970, 985, 1005, 1019], "shell": [371, 378, 381, 990, 999], "cythonx": 371, "language_level": 371, "wraparound": 371, "initializedcheck": 371, "nonecheck": 371, "cdivis": 371, "recompil": [371, 376, 386], "pep073": 371, "pathwai": 371, "memoryview": 371, "cnp": 371, "lightweight": [371, 779, 793, 802, 803, 984], "virtual": [371, 386, 399, 988], "enter": [371, 374, 395, 426, 971], "prang": 371, "void": 371, "my_func": [371, 376], "st\u00e9fan": 371, "benhel": 371, "_cython_bla": 371, "protect": [371, 374, 930], "_openmp_help": 371, "cimport": [371, 379, 1013], "omp_get_max_thread": 371, "prolifer": 372, "adopt": [372, 383, 877, 964, 978, 1013, 1020], "predomin": [372, 1006], "overrid": [372, 403, 433, 440, 525, 531, 571, 572, 574, 576, 577, 580, 639, 647, 668, 669, 823, 824, 825, 827, 829, 831, 832, 833, 1005, 1013, 1015, 1019, 1021], "creation": [372, 494, 495, 496, 498, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 639, 821, 822, 988, 1012, 1013, 1014, 1018], "optimis": [372, 395, 967, 984, 1008, 1018, 1020], "rememb": [372, 375, 386, 403, 967, 971, 980], "param1": [372, 996], "param2": [372, 996], "param3": 372, "postpon": [372, 374], "requisit": 372, "liner": [372, 807], "ipython": [372, 375, 376, 378, 991, 999], "session": [372, 376, 381, 386, 983, 988, 999], "trainabl": 372, "trail": [372, 948], "overridden": [372, 383, 405, 525, 531, 599, 604, 607, 677, 1013, 1014], "n_features_in_": [372, 383, 415, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 610, 611, 612, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 1016, 1018, 1020], "slep010": [372, 1016], "duck": [372, 383, 1015], "boilerpl": [372, 988, 999], "check_x_i": [372, 379, 1009, 1013, 1014, 1019], "check_arrai": [372, 379, 517, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "templateclassifi": 372, "demo_param": 372, "myestim": 372, "subestim": 372, "my_extra_param": 372, "my_estim": [372, 396], "subestimator__c": 372, "subestimator__class_weight": 372, "subestimator__du": 372, "subestimator__fit_intercept": 372, "subestimator__intercept_sc": 372, "subestimator__l1_ratio": 372, "subestimator__max_it": 372, "subestimator__multi_class": 372, "subestimator__n_job": 372, "subestimator__penalti": 372, "subestimator__random_st": 372, "subestimator__solv": 372, "subestimator__tol": 372, "subestimator__verbos": 372, "subestimator__warm_start": 372, "__c": 372, "__class_weight": 372, "unpack": 372, "easiest": [372, 378, 396, 961], "__repr__": [372, 985, 1014], "setattr": 372, "accomplish": [372, 393, 529, 961, 965, 967, 988], "deepcopi": 372, "__sklearn_clone__": [372, 418, 1021], "frozen": 372, "frozentransform": 372, "fitted_transform": [372, 447], "__getattr__": 372, "_estimator_typ": [372, 383, 1010], "regressormixin": [372, 383, 448, 1016], "clustermixin": 372, "is_classifi": [372, 383], "predict_log_proba": [372, 383, 532, 533, 534, 536, 538, 540, 542, 547, 576, 577, 641, 642, 659, 779, 782, 783, 793, 802, 816, 817, 818, 819, 820, 838, 841, 878, 883, 886, 889, 891, 979, 1005, 1018], "programmat": [372, 482, 1014], "_get_tag": [372, 1016], "allow_nan": [372, 900, 902, 1021], "binary_onli": [372, 1015, 1016], "multioutput_onli": 372, "no_valid": 372, "non_determinist": [372, 1019], "primari": [372, 383, 400, 498, 971, 988], "_safe_split": 372, "preserves_dtyp": 372, "poor_scor": 372, "requires_fit": 372, "requires_positive_x": [372, 1015, 1020], "requires_i": [372, 1016], "requires_positive_i": 372, "_skip_test": 372, "_xfail_check": 372, "check_nam": 372, "xfail": [372, 378], "skiptestwarn": 372, "x_type": 372, "2darrai": 372, "signifi": [372, 395, 564, 790, 969], "1dlabel": 372, "2dlabel": 372, "_more_tag": 372, "mymultioutputestim": 372, "_required_paramet": 372, "ridgeregress": 372, "idiosyncrat": 372, "subclass": [372, 405, 557, 930, 1010, 1013, 1018], "onetoonefeaturemixin": [372, 417], "classnameprefixfeaturesoutmixin": [372, 417, 1020], "auto_wrap_output_kei": 372, "mytransform": 372, "__init_subclass__": 372, "ownership": 372, "pep8": [372, 374, 378], "indent": [372, 930], "nsampl": [372, 777, 778], "statement": [372, 375, 378, 381, 383, 400, 982, 999], "flow": 372, "client": 372, "corollari": 372, "foo": [372, 564, 968], "baz": [372, 564], "pyflak": 372, "asanyarrai": 372, "hadamard": 372, "choose_random_sampl": 372, "freestand": 372, "unmodifi": [372, 383], "random_state_": [372, 519, 610, 830, 1019], "gaussiannois": 372, "showcas": 372, "quasi": [372, 838, 839, 960], "assert_allclos": 372, "rtol": [372, 821, 822, 826], "atol": [372, 655, 657, 821, 822, 826], "checklist": 373, "unclaim": 373, "workflow": [373, 374, 382, 399], "boil": [373, 397], "markdown": 373, "saniti": [373, 845, 964, 1005, 1006], "outdat": 373, "diff": [373, 964], "valgrind": 373, "platform": [373, 381, 383, 384, 389, 988, 1010, 1013, 1014, 1016, 1018, 1019], "x86_64": 373, "yep": 373, "gperftool": 373, "debugg": [373, 378], "gprof": 373, "callgrind": 373, "kcachegrind": 373, "warm": [373, 383, 514, 520, 526, 528, 529, 593, 636, 642, 649, 651, 659, 660, 661, 960, 985, 1015, 1017, 1019], "homebrew": [373, 386, 980], "freebsd": 373, "rrrcn": 374, "pep101": 374, "build_tool": 374, "blocker": 374, "mileston": 374, "maint_tool": 374, "sort_whats_new": 374, "whats_miss": 374, "fixm": [374, 383], "feedstock": 374, "recip": [374, 961, 988], "yaml": 374, "whats_new": [374, 378], "v0": [374, 454, 455, 461, 495, 571, 572, 574, 779, 793, 840, 843, 1006, 1013, 1014, 1015], "freez": [374, 386, 389, 985, 988, 1013], "afterward": [374, 518, 524, 805], "0rc1": 374, "__version__": 374, "draft": [374, 384], "rebas": 374, "bugfix": [374, 1005, 1019], "backport": [374, 379, 1012], "maint": 374, "enh": 374, "blindli": 374, "invit": 374, "cherri": 374, "shortlog": 374, "f2": [374, 965], "sed": [374, 1005], "front": [374, 1012], "rc1": 374, "suffix": [374, 804, 964, 1015], "brows": 374, "3a": 374, "22wheel": 374, "pyproject": 374, "toml": 374, "oldest": [374, 479], "abi": 374, "acronym": 374, "deliveri": 374, "whl": 374, "22publish": 374, "went": [374, 964], "bot": [374, 969, 1019], "sync": 374, "testpypi": 374, "tarbal": [374, 1020], "wheelhouse_upload": 374, "twine": 374, "rrr": 374, "symlink": 374, "latestst": 374, "tmp": 374, "ln": [374, 960, 968, 974], "versionwarn": 374, "secur": [374, 383, 984, 985, 988, 1001], "twitter": 374, "linkedin": 374, "squash": [374, 405, 514, 520, 525, 531], "authorship": 374, "permalink": 374, "_hist_gradient_boost": 374, "_iter": 374, "pickl": [374, 383, 389, 403, 571, 572, 574, 821, 822, 984, 985, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1021], "checker": [374, 801], "type_check": 374, "test_enable_hist_gradient_boost": 374, "enable_hist_gradient_boost": [374, 1014], "enable_my_experimental_featur": 374, "indefinit": 374, "incentiv": 374, "workabl": 375, "stackoverflow": [375, 378, 381, 987], "blogpost": 375, "mcve": [375, 378, 381], "my_data": 375, "with_mean": [375, 861, 872, 974, 1013, 1018], "default_scor": 375, "other_scor": 375, "scrollbar": 375, "tripl": 375, "fenc": 375, "qualifi": 375, "a674e682c281": 375, "lda_featur": 375, "lda_model": 375, "n_topic": [375, 519, 1012], "minimalist": [375, 403, 987], "continuous_featur": 375, "positive_featur": 375, "invest": [376, 988], "idiom": 376, "wast": [376, 399, 400, 953], "crunch": 376, "performancetip": 376, "reimplement": [376, 383, 1011, 1015], "spottabl": 376, "amen": [376, 405, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 953], "cpp": 376, "engag": [376, 384], "tent": 376, "somewher": [376, 964, 999], "prun": 376, "14496": [376, 1014], "ncall": 376, "tottim": 376, "percal": 376, "cumtim": 376, "lineno": 376, "017": [376, 454, 455], "_nls_subproblem": 376, "1263": 376, "_po": 376, "057": [376, 520], "_initialize_nmf": 376, "010": [376, 972], "_spars": 376, "_neg": 376, "337": 376, "hotspot": 376, "16159": [376, 1016], "840": 376, "2833": 376, "653": [376, 594, 597, 608], "_dotbla": 376, "036": [376, 455], "1397": 376, "2780": 376, "064": [376, 972], "1542": 376, "2734": 376, "fromnumer": 376, "1185": 376, "lapack_lit": 376, "dgesdd": 376, "rewrit": [376, 980, 998, 1005], "shallow": [376, 402, 544, 545, 896], "4x": [376, 1020], "line_profil": 376, "wire": [376, 517, 524], "profile_default": 376, "ipython_config": 376, "terminalipythonapp": 376, "interactiveshellapp": 376, "lprun": 376, "qtconsol": 376, "_nmf": 376, "73153": 376, "h_init": 376, "5863": 376, "nl": 376, "173": [376, 567], "175": [376, 974], "112141": 376, "2336": 376, "wtv": 376, "176": [376, 814, 965, 972], "16144": 376, "wtw": 376, "177": 376, "113": [376, 1008], "1880": 376, "195133": 376, "305": 376, "grad": [376, 988], "495761": 376, "777": 376, "proj_gradi": 376, "2449": 376, "1474": 376, "4474": 376, "inner_it": 376, "83833": 376, "hn": 376, "194239": 376, "191": [376, 965], "48858": 376, "150407": 376, "gradd": 376, "193": [376, 402, 698, 768, 977], "515390": 376, "349": 376, "dqd": 376, "pin": 376, "memory_profil": [376, 386, 388], "memit": 376, "mprun": 376, "1e7": 376, "402344": 376, "standalon": [376, 641, 881, 987], "bianp": 376, "conda_prefix": 376, "pydebug": 376, "extra_cflag": 376, "dpy_debug": 376, "num_cor": 376, "dbg": 376, "fortun": [376, 402, 999, 1018, 1019], "my_fil": 376, "callgrin": 376, "prof": 376, "encapsul": [377, 396], "artist": [377, 422, 615, 681, 683, 684, 685, 785, 895], "classmethod": [377, 422, 614, 615, 680, 681, 683, 684, 685, 785], "line_": [377, 422, 681, 683, 684, 685, 785], "gridspecfromsubplotspec": 377, "subplot_spec": 377, "get_subplotspec": 377, "ax_top_left": 377, "ax_top_right": 377, "ax_bottom": 377, "bounding_ax_": [377, 615], "lines_": [377, 615, 785], "contours_": [377, 615], "advic": [378, 405, 605, 606], "forth": 378, "userscript": 378, "tampermonkei": 378, "greasemonkei": 378, "shortcut": [378, 405], "pr_number": 378, "navig": [378, 1007], "overlai": [378, 615], "codecov": 378, "test_sparsifi": 378, "pdb": 378, "ipdb": [378, 999], "pdbcl": 378, "terminalpdb": 378, "lf": 378, "ff": 378, "tb": [378, 554, 555, 556, 557, 558, 559, 560, 561], "runxfail": 378, "werror": 378, "mailman": 378, "listinfo": 378, "crowd": [378, 384, 961, 985, 987], "imped": 378, "attent": [378, 590, 591, 978], "pytb": 378, "stdin": [378, 999], "perman": 378, "25163598": 378, "issuenumb": 378, "1506": 378, "volunt": 378, "establish": [378, 381, 384, 954], "clarifi": [378, 384, 773], "regression_test": 378, "0008": 378, "patienc": [378, 383], "manifest": [378, 961, 967], "fault": [378, 1013, 1015, 1017], "glibc": 378, "uniniti": 378, "trace": [378, 395, 408, 456, 458, 459, 462, 463, 464, 672, 676, 961, 1016], "supp": 378, "readm": [378, 403, 476], "my_test_script": 378, "mobil": 378, "deploy": [378, 984, 985, 988], "scalewai": 378, "aw": 378, "graviton": 378, "laptop": [378, 451, 879, 1019, 1020, 1021], "workstat": 378, "qemu": 378, "docker": [378, 389, 1018, 1019], "multiarch": 378, "ppc64le": 378, "filesystem": [378, 386, 1018], "pushd": 378, "wget": 378, "arm64v8": 378, "mount": 378, "privileg": 378, "pwd": 378, "reinit": 378, "bashrc": 378, "ephemer": 378, "evolv": [379, 1020], "as_float_arrai": 379, "column_or_1d": [379, 1016, 1020], "multitarget": 379, "multi_output": [379, 901], "safe_index": [379, 1015], "check_memori": [379, 383, 1012], "5488135": 379, "71518937": 379, "60276338": 379, "54488318": 379, "has_fit_paramet": 379, "randomized_range_find": [379, 1006, 1011], "arrayfunc": 379, "cholesky_delet": 379, "min_po": 379, "least_angl": 379, "fast_logdet": 379, "safe_sparse_dot": [379, 1015], "weighted_mod": 379, "sample_without_replac": [379, 1011], "n_popul": [379, 933], "sparsefunc": [379, 1018], "mean_variance_axi": [379, 1011, 1018], "sparsefuncs_fast": 379, "inplace_csr_row_normalize_l1": 379, "inplace_csr_row_normalize_l2": 379, "inplace_csr_column_scal": 379, "sort_graph_by_row_valu": [379, 1020], "single_source_shortest_path_length": 379, "dijkstra": [379, 671, 961], "graph_shortest_path": [379, 1018], "all_estim": [379, 1015, 1016, 1020], "all_displai": [379, 1020], "all_funct": [379, 1020], "is_multilabel": 379, "dict_learn": [379, 514, 520, 529, 1006, 1013, 1015, 1018, 1019, 1021], "gen_batch": [379, 922], "safe_mask": 379, "safe_sqr": 379, "murmurhash3_32": 379, "murmurhash3_x86_32": [379, 929], "cryptograph": 379, "lookup": [379, 929, 1014], "bloom": [379, 929], "384616559": 379, "3910350737": 379, "murmurhash": 379, "graphical_lasso": [379, 454, 455, 1013, 1021], "kit": 381, "toolbox": [381, 984, 988], "multilay": [381, 962], "kera": [381, 984], "forese": 381, "redesign": [381, 1005], "pystruct": [381, 984], "ssvm": 381, "seqlearn": 381, "4143": 381, "meanwhil": [381, 979], "pipegraph": 381, "squared_loss": [381, 1018], "undertak": 381, "discourag": [381, 386, 672], "slowli": [381, 383, 527, 918], "ordinarili": [381, 383], "corrobor": 381, "proof": [381, 402, 875, 976], "road": 381, "bridg": [381, 961, 984], "reproduct": [381, 960, 987], "guidanc": [381, 405], "gitter": [381, 982, 1012, 1013], "value_kei": [381, 896], "levenshtein": 381, "dna": [381, 611, 954], "rna": 381, "pain": 381, "suppli": [381, 395, 629, 901, 902, 967, 988, 1009, 1011, 1013, 1018], "leven": 381, "acctcctagaag": 381, "acctactagaagtt": 381, "gaatattaggccga": 381, "lev_metr": 381, "multiprocess": [381, 383, 930, 932, 967, 1005, 1013, 1019], "exec": 381, "nvidia": 381, "cuda": [381, 391], "reiniti": 381, "culprit": 381, "refus": [381, 871, 872], "forkserv": 381, "joblib_start_method": 381, "set_start_method": 381, "dozen": [382, 405], "newli": [382, 402, 446, 971, 1011, 1012, 1020], "leakag": [382, 383, 396, 1001], "disclos": 382, "entail": [382, 859, 861, 978], "r_squar": 382, "searchcv": [382, 1020], "tacit": 383, "inconsist": [383, 389, 403, 491, 492, 559, 883, 886, 905, 970, 979, 1001, 1005, 1010, 1011, 1012, 1013, 1015, 1018, 1020, 1021], "elsewher": [383, 445, 446, 454, 455, 461], "formal": [383, 384, 395, 402, 821, 822, 961, 964, 965, 968], "thereof": 383, "transduct": [383, 395, 876, 877, 985], "position": 383, "serial": [383, 984, 985, 1001, 1005, 1013, 1017], "unpickl": [383, 389, 559, 821, 822, 1011, 1017, 1021], "pep257": 383, "nuanc": 383, "flaw": [383, 402], "terminologi": [383, 1013], "est1": [383, 615], "est2": [383, 615], "exemplifi": 383, "_score": [383, 779, 793, 804, 964, 1005, 1018], "_loss": [383, 964], "divers": [383, 402], "abstract": [383, 400, 405, 601, 751, 984, 1005], "notfittederror": [383, 830, 948, 1009, 1011, 1014, 1015, 1021], "descriptor": [383, 491, 492], "hoc": 383, "spectral_embed": [383, 961, 1006, 1009, 1011, 1013, 1015, 1018, 1019, 1020], "maxabs_scal": [383, 850, 1013], "astrai": 383, "readthedoc": [383, 384], "entireti": 383, "shield": 383, "n_output": [383, 402, 412, 416, 417, 421, 426, 429, 448, 452, 465, 466, 467, 515, 517, 519, 520, 522, 525, 526, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 594, 611, 613, 616, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 653, 655, 656, 657, 658, 659, 661, 662, 704, 705, 710, 727, 728, 730, 732, 733, 735, 736, 767, 770, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 828, 830, 831, 832, 837, 838, 839, 840, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 873, 874, 876, 877, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 907, 935, 964, 965, 980, 1012, 1015], "synonym": [383, 823, 824, 825, 831, 832, 833], "themat": 383, "alphanumer": [383, 571, 572, 574], "statistician": [383, 861], "prescrib": 383, "baggingclassifi": [383, 402, 539, 891, 1008, 1011, 1012, 1013, 1016, 1020, 1021], "estimator__max_depth": [383, 953], "improp": [383, 1012], "pairwise_kernel": [383, 405, 435, 626, 747, 847, 962, 1005, 1012], "distancemetr": [383, 401, 821, 822, 967, 1013, 1017, 1018, 1019], "di": [383, 395, 400, 514, 520, 647, 668, 669, 874, 1009, 1018], "vectori": [383, 1015], "noun": 383, "rout": [383, 1019], "fit_param": [383, 417, 421, 426, 429, 448, 515, 517, 519, 520, 522, 525, 526, 532, 550, 552, 553, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 611, 613, 618, 621, 622, 623, 624, 625, 779, 782, 783, 785, 793, 802, 803, 804, 805, 806, 808, 813, 814, 815, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 873, 874, 1012, 1015, 1016, 1017, 1019, 1021], "venu": [383, 987], "broadli": [383, 395], "consolid": [383, 384, 1005], "coo": [383, 536, 537, 675, 848, 897, 901, 902, 967, 1006], "lil": [383, 536, 537, 848, 897, 923, 967], "csgraph": [383, 1018], "absent": [383, 403, 736, 802], "densifi": [383, 400, 641, 642, 649, 651, 659, 660, 661, 881, 954, 1007], "lossili": 383, "unnorm": [383, 519, 961, 1011, 1012], "encompass": [383, 433, 439, 538, 539, 961], "is_regressor": 383, "get_n_split": [383, 780, 781, 784, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800], "elasticnetcv": [383, 629, 635, 643, 644, 645, 646, 664, 960, 1005, 1008, 1016, 1018, 1019], "estimatorcv": [383, 985], "loo": [383, 787, 1016], "type_of_target": [383, 848, 862, 965, 1019, 1020], "hashabl": [383, 849, 852, 975], "labelencod": [383, 552, 855, 975, 1005, 1013, 1020], "canonic": 383, "xxx": 383, "everywher": 383, "multilabelbinar": [383, 810, 845, 854, 965, 990, 1008, 1010, 1011, 1013, 1014], "nonetheless": [383, 964], "wherein": 383, "amber": 383, "return_cov": [383, 550, 551, 594, 841], "test_idx": 383, "_idx": 383, "label1": 383, "label2": 383, "class_label": [383, 540, 544, 547, 641, 642, 649, 651, 657, 658, 659, 889, 891, 907, 979], "bincount": [383, 399, 540, 544, 547, 641, 642, 649, 651, 657, 658, 659, 881, 883, 886, 889, 891, 906, 907, 1012], "rebalanc": 383, "compute_class_weight": [383, 1008, 1019], "check_cv": [383, 1010], "obei": [383, 962], "triangl": [383, 400, 427, 430, 442, 682, 962, 967], "concurr": [383, 403, 930, 1017, 1019], "unset": [383, 1013], "get_scor": [383, 715, 1012], "check_scor": 383, "uppercas": [383, 1018], "unavail": [383, 641, 642, 925, 1012, 1018], "deadlock": 384, "meritocrat": 384, "somebodi": 384, "unanim": 384, "emeritu": [384, 982], "recant": 384, "outreach": 384, "brand": [384, 386], "social": [384, 395, 988], "strateg": 384, "entiti": [384, 708, 738], "duti": 384, "resign": 384, "occasion": [384, 709, 1014], "escal": 384, "fallback": [384, 809, 810, 964], "hereaft": 384, "lazi": [384, 403, 978, 1009], "opinion": 384, "slep020": 384, "veto": 384, "appeal": 384, "revis": [384, 653], "slep000": 384, "insuffici": [385, 963, 998], "greatest": [386, 848, 1013], "afraid": 386, "64bit": [386, 1005], "miniconda": 386, "administr": 386, "venvpython": 386, "venvsourc": 386, "activatesourc": 386, "activatesklearn": 386, "activatepip": 386, "learnpip": 386, "learnpip3": 386, "learnconda": 386, "installedpython3": 386, "virtualenvpython3": 386, "installedpython": 386, "virtualenvpython": 386, "installedconda": 386, "environmentpython": 386, "dnf": 386, "pacman": 386, "raspberri": 386, "lock": [386, 388, 930, 932], "19137": 386, "py3": 386, "apk": 386, "bind": [386, 1005, 1012, 1013], "buster": 386, "fedora30": 386, "pkgsrc": 386, "py39": 386, "daal": 386, "daal4pi": 386, "intelpython": 386, "plugin": 386, "appdata": 386, "usernam": 386, "windowsapp": 386, "environmenterror": 386, "errno": 386, "pythonsoftwarefound": 386, "7_qbz5n2kfra8p0": 386, "localcach": 386, "python37": 386, "292": [386, 402, 717], "data_nam": 386, "australian": 386, "data_vers": 386, "lift": 386, "regedit": 386, "menu": 386, "hkey_local_machin": 386, "currentcontrolset": 386, "longpathsen": 386, "broken": [386, 399, 582, 583, 618, 703, 897, 964, 1008, 1012, 1013, 1014, 1016, 1019], "retrain": [389, 985, 1021], "inconsistentversionwarn": [389, 1021], "simplefilt": 389, "model_from_prevision_vers": 389, "original_sklearn_vers": [389, 559], "untrust": 389, "malici": 389, "unsupport": [389, 476, 1013, 1018], "inadvis": 389, "immut": 389, "snapshot": [389, 542, 543, 985], "portabl": 389, "alex": [389, 403, 979, 1005, 1008, 1013, 1015, 1016, 1017, 1019, 1020, 1021], "gaynor": 389, "sio": 389, "obj": [389, 550, 551, 925, 930], "get_untrusted_typ": 389, "unknown_typ": 389, "exchang": [389, 987], "markup": 389, "pmml": [389, 984], "onnx": [389, 984, 985], "xml": 389, "sklearn2pmml": [389, 984], "affero": 389, "gplv3": 389, "datastructur": [391, 1013, 1017], "namespac": 391, "array_api": 391, "x_np": 391, "y_np": 391, "x_cu": 391, "y_cu": 391, "devic": [391, 399, 565], "array_api_dispatch": [391, 451, 879], "_estimator_with_converted_arrai": 391, "transfer": [391, 960, 985], "_array_api": 391, "cupy_to_ndarrai": 391, "lda_np": 391, "torch": 391, "x_torch": 391, "y_torch": 391, "submatrix": [392, 410, 434, 436], "unusu": [392, 970, 974, 1013], "submatric": 392, "bipartit": [392, 436, 494, 969], "subgraph": 392, "a_n": 392, "lceil": [392, 970], "log_2": [392, 546, 970, 980], "rceil": [392, 970], "bmatrix": 392, "u_2": 392, "u_": [392, 465, 466, 467], "n_column": [392, 434, 436], "inderjit": [392, 436], "blockwis": [392, 960], "bistochast": [392, 434], "l_": [392, 594, 635, 723, 964], "k_": [392, 405, 599, 602, 604, 607, 756, 974], "u_1": 392, "v_1": 392, "v_2": 392, "v_": [392, 403], "kluger": [392, 434, 496], "yuval": [392, 434], "microarrai": [392, 434, 496, 611, 954], "cap": [392, 395, 737, 964, 1014], "hochreit": [392, 702], "hungarian": [392, 702], "bodenhof": [392, 702], "fabia": [392, 702], "acquisit": [392, 702], "murphi": [393, 626, 957], "discriminatori": 393, "wilk": 393, "tricki": [393, 961], "logit": [393, 405, 641, 642, 960], "f_i": 393, "train_set": 393, "test_set": 393, "disjoint": [393, 395, 396, 421, 687, 713, 737, 739, 961], "platt": [393, 421, 883, 884, 886, 887, 979], "_i": [393, 402, 955, 960, 964, 968, 979], "_j": [393, 955], "f_j": [393, 972], "meteorologi": 393, "climatologi": 393, "precipit": 393, "wea": 393, "640": [393, 473, 489, 490, 566, 567, 953], "650": 393, "1990a": 393, "menon": 393, "ak": [393, 1019, 1020], "jiang": [393, 1009, 1016], "xj": 393, "vembu": 393, "ohno": 393, "machado": [393, 705], "703": [393, 496], "kull": [393, 964], "silva": [393, 671, 961, 1016, 1018], "filho": 393, "flach": [393, 964], "mario": [393, 1009, 1011, 1019, 1020, 1021], "w\u00fcthrich": 393, "merz": 393, "2023": [393, 1020], "actuari": 393, "refurbish": 394, "rough": [394, 970, 992], "uniti": 394, "lipschitz": [394, 976], "usecas": 395, "mu_j": 395, "coher": 395, "elong": 395, "lloyd": [395, 427, 430, 432, 442, 1019, 1020], "distant": [395, 675, 692, 967], "sergei": [395, 1007, 1011, 1012, 1013, 1014, 1015], "vassilvitskii": [395, 430, 443], "eighteenth": 395, "siam": [395, 399, 435, 443, 445, 518, 524], "industri": [395, 984], "predetermin": [395, 961], "scullei": 395, "19th": 395, "exemplar": [395, 424, 437, 998], "sent": [395, 810], "leftarrow": [395, 968, 978, 980], "foral": [395, 405, 596], "neq": [395, 964, 966, 974], "notin": 395, "hill": [395, 431, 444, 1015], "climb": [395, 431, 444], "maxima": [395, 405], "x_j": [395, 405, 597, 598, 602, 605, 606, 608, 955, 956, 960, 967, 979, 980], "dictat": 395, "solvabl": 395, "stella": [395, 435, 445], "yu": [395, 435, 445, 641, 960, 968, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "jianbo": [395, 435, 445, 674], "shi": [395, 435, 445, 674], "anil": [395, 435, 445], "daml": [395, 435, 445], "victor": [395, 435, 445, 1012, 1015], "minden": [395, 435, 445], "lex": [395, 435, 445], "ying": [395, 435, 445, 1019], "adjac": [395, 400, 435, 445, 568, 569, 618, 674, 678, 923, 961, 967, 998], "adjacency_matrix": 395, "ulrik": [395, 435, 445, 674], "von": [395, 435, 445, 674, 984, 1012, 1013], "luxburg": [395, 435, 445, 674], "jitendra": [395, 435, 445, 674], "malik": [395, 435, 445, 674], "walk": [395, 401, 1008], "marina": 395, "meila": 395, "ng": [395, 400, 674, 827, 968, 970, 1016], "jordan": [395, 400, 674, 777, 1015, 1016, 1019, 1020], "yair": [395, 674], "precondit": [395, 435, 445, 678, 980], "zhuzhunashvili": [395, 445], "forbid": [395, 402], "macroscop": 395, "occupi": [395, 964], "manhattan": [395, 425, 429, 433, 440, 682, 744, 753, 760, 761, 762, 828, 962, 967, 1009, 1014], "bisecting_strategi": [395, 427], "largest_clust": [395, 427], "biggest_inertia": [395, 427], "biggest": [395, 398, 400, 427], "steinbach": [395, 1020], "karypi": 395, "vipin": 395, "egin": 395, "minnesota": 395, "june": [395, 961, 1011], "weblog": 395, "abirami": 395, "mayilvahanan": 395, "emerg": [395, 988], "ijet": 395, "jian": 395, "xinyu": 395, "gou": 395, "baod": 395, "hebei": 395, "knee": 395, "triangular": [395, 446, 594, 961], "whichev": [395, 402, 527, 544, 545, 616, 633, 637, 639, 647, 665, 666, 680], "conjunct": [395, 577, 779, 782, 783, 785, 793, 802, 803, 804, 805, 808, 931, 954, 960, 1020], "extract_dbscan": 395, "radius_neighbors_graph": [395, 406, 428, 823, 824, 825, 827, 829, 831, 832, 833, 834, 967, 1009, 1014, 1017], "ester": [395, 406, 428], "kriegel": [395, 406, 428, 433, 440, 827, 970], "sander": [395, 406, 428, 433, 440, 827, 970, 1014, 1015], "xu": [395, 398, 406, 428, 978, 1018, 1019], "portland": [395, 406, 428], "aaai": [395, 406, 428, 816, 966], "revisit": [395, 406, 428], "schubert": [395, 406, 428, 433, 1009, 1010, 1013, 1014, 1016, 1017, 1018, 1019], "tod": [395, 406, 428], "max_ep": [395, 433, 438, 440], "nearbi": [395, 967], "cluster_hierarchy_": [395, 433], "planar": 395, "peripheri": 395, "hdbscan": [395, 984], "wall": 395, "ankerst": [395, 433, 440], "mihael": [395, 433, 440], "marku": [395, 433, 440, 1013, 1015, 1016, 1017], "breunig": [395, 433, 440, 827, 970], "han": [395, 426, 433, 440, 1005, 1013, 1014, 1018], "j\u00f6rg": [395, 433, 440, 1013], "sigmod": [395, 433, 440, 827, 970], "cft": 395, "lossi": 395, "cf": [395, 398, 426, 683, 960, 974, 985], "subclust": [395, 426], "till": [395, 426, 770, 964], "temporarili": [395, 1010], "farthest": 395, "brc": [395, 426], "tian": [395, 426, 1010, 1011, 1012], "raghu": [395, 426], "ramakrishnan": [395, 426], "maron": [395, 426], "livni": [395, 426], "sfu": [395, 426], "coursecentr": [395, 426], "zhang96": [395, 426], "roberto": [395, 426], "perdisci": [395, 426], "jbirch": [395, 426], "java": [395, 426, 984], "satisfi": [395, 633, 637, 682, 700, 718, 719, 821, 822], "labels_pr": [395, 687, 688, 697, 698, 700, 713, 718, 719, 737, 739, 768, 775], "unadjust": [395, 964, 1017], "swap": [395, 400, 699, 718, 943, 944, 1005], "ri": [395, 688, 768], "c_2": [395, 961], "unord": [395, 402, 974], "esp": [395, 1005], "hubert": [395, 688, 698, 768], "arabi": [395, 688, 698, 768], "steinlei": [395, 688], "psycholog": [395, 688, 699], "agreement": [395, 687, 699, 737, 739, 775, 964], "22504": 395, "10526": 395, "u_i": [395, 465, 466, 467, 737], "v_j": [395, 737, 969], "veb2009": 395, "a_i": 395, "b_j": 395, "yat2016": 395, "average_method": [395, 687, 739, 1013], "vinh": [395, 687], "veb2010": 395, "strehl": 395, "joydeep": 395, "1162": 395, "153244303321897735": 395, "epp": [395, 687], "bailei": [395, 687], "26th": [395, 708, 738, 964], "1553374": 395, "1553511": 395, "9781605585161": 395, "csail": [395, 649, 650, 659, 818], "volume11": 395, "vinh10a": 395, "algesheim": 395, "tesson": 395, "30750": 395, "1038": 395, "srep30750": 395, "rosenberg": [395, 700, 719, 775], "hirschberg": [395, 700, 719, 775], "b2011": 395, "homogeneity_completeness_v_measur": [395, 1014], "n_k": [395, 533], "n_c": [395, 642], "julia": [395, 700, 719, 775], "media": [395, 988], "hila": 395, "becker": [395, 988, 1008, 1017], "fowlkes_mallows_scor": [395, 964, 1011, 1013], "fmi": [395, 713], "fp": [395, 695, 701, 713, 764, 765, 766, 769, 964], "fn": [395, 695, 701, 713, 764, 765, 766, 769, 964, 965], "47140": 395, "fowkl": [395, 713], "1983": [395, 713, 861], "tandfonlin": 395, "01621459": 395, "10478008": 395, "kmeans_model": 395, "1987": [395, 590, 591, 772, 773], "calinski_harabasz_scor": [395, 1013], "dispers": [395, 693, 707, 960], "561": 395, "n_e": 395, "mathrm": [395, 397, 400, 404, 960, 980], "b_k": 395, "w_k": [395, 960], "c_q": 395, "n_q": 395, "c_e": 395, "cali\u0144ski": 395, "1974": [395, 403, 693], "dendrit": [395, 693], "davies_bouldin_scor": [395, 1013], "6619": 395, "bould": 395, "c_i": [395, 967], "c_j": [395, 969], "s_i": [395, 974], "diamet": 395, "nonneg": [395, 400, 436, 521, 523, 530, 858], "s_j": 395, "max_": [395, 964], "1979": [395, 707, 751], "halkidi": 395, "batistaki": 395, "yanni": 395, "vazirgianni": 395, "michali": 395, "145": 395, "contingency_matrix": [395, 737, 1013], "pair_confusion_matrix": [395, 1017], "permit": [396, 450, 571, 572, 574, 779, 782, 783, 793, 803, 842, 843, 964, 965, 966, 1011], "clf__c": 396, "pca1": [396, 411], "svm1": 396, "77484909e": 396, "07058917e": 396, "pca2": [396, 411], "svm2": 396, "raw_target_regr": 396, "bypass": [396, 582, 629, 635, 889, 890, 891, 892], "check_invers": [396, 448, 845, 974, 1013, 1019, 1020], "caller": [396, 629, 630, 635, 643, 644, 645, 664, 871, 872, 932, 940, 941, 942, 1014], "linear_pca": 396, "make_union": [396, 840, 1008, 1012], "incorpor": [396, 402, 963, 984, 988], "unreli": 396, "citi": [396, 403, 449, 999], "london": [396, 403, 449], "sallisaw": [396, 449], "bow": 396, "moveabl": 396, "feast": 396, "grape": 396, "wrath": 396, "expert_r": 396, "user_r": 396, "city_categori": 396, "title_bow": 396, "city_london": 396, "city_pari": 396, "city_sallisaw": 396, "507": 396, "ignored_new_col": 396, "estimator_html_repr": [396, 1016, 1017, 1018, 1019], "shrunk_covari": 397, "sigma_": [397, 627, 628, 1018], "wiesel": [397, 408, 458], "eldar": [397, 408, 458], "hero": [397, 408, 458], "5016": [397, 408, 458], "5029": [397, 408, 458], "_k": [397, 958, 960], "glasso": [397, 461], "biostatist": [397, 461], "uncommon": [397, 641, 881, 979], "downweight": [397, 519], "driessen": [397, 452, 457, 970], "fastmcd": [397, 452, 457], "raw_location_": [397, 452, 457], "raw_covariance_": [397, 452, 457], "multidimension": [398, 671, 673, 675, 677, 961, 967], "plsw2a": 398, "u_k": [398, 400], "v_k": [398, 400, 514, 520, 528, 529], "x_k": [398, 400, 958, 967], "y_k": [398, 974], "xi_k": 398, "omega_k": [398, 958], "gamma_k": 398, "delta_k": 398, "nipal": [398, 466, 467], "xp": [398, 856], "x_rotations_": [398, 465, 466, 467], "y_rotations_": [398, 465, 466, 467], "ty": 398, "x_weights_": [398, 465, 466, 467, 468], "y_weights_": [398, 465, 466, 467, 468], "yv": 398, "tx": 398, "pls1": [398, 467], "pls2": [398, 467], "tx_k": [398, 958], "ty_k": 398, "ja": [398, 1012], "wegelin": 398, "methodolog": [399, 987], "academ": [399, 988], "commerci": [399, 988], "flowchart": [399, 992], "f1_macro": [399, 964, 1009], "custom_cv_2fold": 399, "custom_cv": 399, "9333": 399, "scorer1_nam": 399, "scorer2_nam": 399, "return_indic": [399, 804, 1021], "precision_macro": [399, 994], "recall_macro": [399, 964], "test_precision_macro": 399, "test_recall_macro": 399, "prec_macro": 399, "rec_macro": 399, "test_prec_macro": 399, "test_rec_macro": 399, "train_prec_macro": 399, "train_rec_macro": 399, "undistinguish": 399, "kf": [399, 784], "12883823": 399, "rkf": [399, 794], "weigh": [399, 1012], "caveat": [399, 405], "part3": 399, "spector": 399, "submodel": 399, "kohavi": 399, "jnt": 399, "bharat": [399, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "rao": [399, 1017, 1020], "fung": 399, "rosal": 399, "witten": 399, "leavepout": [399, 787, 994], "ss": 399, "gkf": 399, "sgkf": [399, 797], "suboptim": [399, 683, 685, 764, 771, 967, 1013, 1021], "leavepgroupsout": [399, 781, 994, 1011], "n_group": [399, 788, 994, 1011], "lpgo": [399, 788], "gss": [399, 781], "withheld": 399, "predefinedsplit": [399, 994, 1009], "test_fold": [399, 792], "train_indx": 399, "test_indx": 399, "autocorrel": 399, "superset": [399, 800, 964], "surplu": 399, "tscv": [399, 800], "inbuilt": 399, "some_integ": 399, "n_cv": [399, 421], "isotropi": 400, "alik": [400, 962], "halko": [400, 518, 524, 527, 917, 918], "szlam": [400, 917, 918], "disadvantag": [400, 405, 960, 961, 968, 978, 979, 980], "parsimoni": [400, 974], "jen09": 400, "mrl09": 400, "ell_1": [400, 960], "underset": [400, 960, 967, 980], "operatornam": [400, 723, 960, 964, 980], "fro": [400, 521, 523, 530, 676, 960], "gentli": 400, "spirit": 400, "mairal": [400, 514, 520], "bach": [400, 514, 519, 520, 521, 641, 960], "ponc": [400, 514, 520], "sapiro": [400, 514, 520], "jenatton": 400, "obozinski": 400, "scholkopf1997": 400, "bakir2003": 400, "smola": [400, 403, 518, 847, 974, 979], "klau": [400, 518, 847], "berlin": [400, 518, 679, 708, 738, 964], "heidelberg": [400, 518, 679, 708, 738, 964], "eigendecompos": 400, "eigensolv": [400, 435, 445, 518, 527, 678, 961], "eigsh": [400, 518, 1011, 1012], "lehoucq": 400, "sorensen": 400, "lsa": [400, 527, 1007], "synonymi": 400, "polysemi": 400, "lsi": 400, "sigma_k": [400, 958], "columnwis": 400, "sublinear": [400, 573, 574], "use_idf": [400, 403, 573, 574, 999], "textual": [400, 980, 1014], "man": [400, 573, 751, 816, 820, 962, 964, 966], "prabhakar": 400, "raghavan": [400, 573, 816, 820, 962, 964, 966], "hinrich": 400, "sch\u00fctze": [400, 573, 962, 964, 966], "transform_method": 400, "split_cod": 400, "dictionarylearn": [400, 520, 522, 523, 525, 526, 527, 528, 529, 1006, 1010, 1012, 1015, 1018, 1019, 1020, 1021], "overcomplet": 400, "mammalian": 400, "cortex": 400, "inpaint": 400, "h_i": [400, 969], "psi": 400, "sim": [400, 997], "wh_i": 400, "ww": 400, "superflu": 400, "psi_1": 400, "psi_2": 400, "psi_n": 400, "superimpos": 400, "plug": [400, 960, 988, 999], "wh": [400, 521, 523, 530], "hoyer": [400, 1008], "nndsvd": [400, 521, 523, 530, 1014, 1017], "nndsvdar": [400, 521, 523, 530, 1014], "elementwis": [400, 521, 523, 530], "_featur": [400, 521, 523, 530], "kl": [400, 961, 1013], "itakura": [400, 521, 523, 530, 1012], "saito": [400, 521, 523, 530, 1012], "w_new": 400, "forget_factor": [400, 521], "lee": [400, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1020], "seung": 400, "boutsidi": 400, "gallopoulo": 400, "cichocki": [400, 521, 523, 530], "phan": 400, "fevott": [400, 521, 523, 530], "idier": [400, 521, 523, 530], "lefevr": [400, 521], "corpora": 400, "hoffman": [400, 519, 1010, 1017], "unshad": 400, "beta_k": 400, "eta": [400, 519, 659, 660, 661, 968, 978, 1010], "topic_word_prior": [400, 519], "theta_d": 400, "doc_topic_prior": [400, 519], "z_": 400, "w_": [400, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 960, 964, 966, 969], "beta_": 400, "elbo": 400, "overset": [400, 971], "e_": 400, "blei": [400, 519, 777], "wang": [400, 519, 662, 672, 676, 708, 738, 960, 961, 964, 1008, 1010, 1011, 1012, 1013, 1017, 1020], "paislei": [400, 519], "kaiser": [400, 515], "talli": 401, "disproportion": 401, "41075698": 401, "41076071": 401, "rho_k": 401, "unsmooth": 401, "scott": [401, 826, 1005, 1006, 1011, 1013, 1014, 1015, 1020], "silvermann": 401, "propto": [401, 966], "2h": 401, "angular": [401, 675, 746], "contin": [401, 697, 974], "generaliz": 402, "flavour": 402, "b1999": 402, "b1996": 402, "h1998": 402, "lg2012": 402, "bootstrap_featur": [402, 538, 539], "geurt": [402, 538, 539, 540, 541, 548, 549, 891, 892], "346": [402, 484, 538, 539], "b1998": 402, "decoupl": [402, 966], "cancel": [402, 403, 745], "b2001": 402, "bear": [402, 984], "ernst": [402, 540, 541, 548, 549, 891, 892], "wehenkel": [402, 540, 541, 548, 549, 891, 892], "l2014": 402, "lieg": 402, "freund": [402, 536, 537], "fs1995": 402, "w_1": [402, 960, 968], "w_2": [402, 960, 968], "w_n": 402, "w_i": [402, 955, 964], "reappli": 402, "htf": 402, "zzrh2009": 402, "d1997": 402, "semin": 402, "friedman2001": 402, "shelf": 402, "ecologi": 402, "lightgbm": [402, 544, 545, 1014, 1021], "nr": 402, "f_m": 402, "h_m": 402, "f_": [402, 618, 964], "l_m": 402, "taylor": [402, 1013, 1015, 1016, 1019], "g_i": [402, 632], "absolute_error": [402, 541, 543, 545, 548, 654, 890, 892, 1018], "sum_m": 402, "softmax": [402, 544, 641, 642, 960, 967, 968], "superior": 402, "ineffici": [402, 427, 557, 809, 810, 967, 969], "r2007": 402, "friedman2002": 402, "1189": 402, "1232": 402, "367": [402, 1005], "8965": 402, "grower": [402, 544, 545], "missing": [402, 610, 611, 613, 1014], "comfort": 402, "fisher1958": 402, "loan": [402, 517, 960, 988], "nevertheless": 402, "mayer2022": 402, "mayer": [402, 1017, 1019], "bourassa": 402, "hoesli": 402, "scognamiglio": 402, "valuat": 402, "tianqi": 402, "guestrin": 402, "ke": [402, 1016, 1017], "boostingdecis": 402, "w2": 402, "w3": 402, "lr__c": 402, "rf__n_estim": 402, "w1992": 402, "knr": 402, "stack_method": [402, 550], "286": 402, "126": 402, "164": 402, "stack_method_": [402, 550, 551], "final_layer_rfr": 402, "final_layer_gbr": 402, "final_lay": 402, "multi_layer_regressor": 402, "wolpert": [402, 550, 551], "241": [402, 550, 551], "dubai": 403, "francisco": [403, 976], "movi": [403, 991], "movie_entri": 403, "thriller": [403, 852], "drama": 403, "000e": 403, "003e": 403, "011e": 403, "974e": 403, "unseen_featur": [403, 564], "speech": [403, 964], "chunker": 403, "pos_window": 403, "pos_vector": 403, "1x6": 403, "part_of_speech": 403, "token_featur": 403, "isupp": 403, "uppercase_initi": 403, "all_uppercas": 403, "raw_x": [403, 565], "pos_tagg": 403, "comprehens": [403, 740, 741, 962, 988, 1013], "murmurhash3": [403, 565, 572, 929], "weinberg": 403, "modulo": [403, 1016], "kilian": [403, 1020], "anirban": 403, "dasgupta": [403, 875, 976], "langford": [403, 671, 961], "josh": [403, 1012], "attenberg": 403, "multitask": [403, 965], "punctuat": [403, 571, 572, 574], "diminish": 403, "4x9": 403, "build_analyz": [403, 571, 572, 574, 1015], "interrog": 403, "bigram_vector": 403, "bi": 403, "cool": [403, 1005], "feature_index": 403, "him": 403, "constru": 403, "nqy18": 403, "smooth_idf": [403, 573, 574], "_n": [403, 964], "textbook": [403, 573], "6x3": 403, "81940995": 403, "57320793": 403, "47330339": 403, "88089948": 403, "58149261": 403, "81355169": 403, "term1": 403, "term2": 403, "term3": 403, "0986": [403, 845], "819": 403, "8473": 403, "8515": [403, 1012], "5243": 403, "85151335": 403, "52433293": 403, "55422893": 403, "83236428": 403, "63035731": 403, "77630514": 403, "idf_": [403, 573, 574, 1013], "western": 403, "europ": [403, 974], "koi8": 403, "russian": 403, "modern": [403, 451, 486, 573, 673, 677, 712, 879, 961, 985], "unicodedecodeerror": [403, 571, 572, 574], "told": 403, "silent": [403, 564, 837, 974, 1010, 1011, 1013, 1014, 1018, 1019], "chardet": 403, "chardetect": 403, "damag": 403, "sloppili": 403, "ftfy": 403, "mish": 403, "mash": 403, "text1": 403, "sei": 403, "mir": 403, "gegr": 403, "xc3": 403, "xbc": 403, "x9ft": 403, "mein": 403, "sauerkraut": 403, "text2": 403, "holdselig": 403, "sind": 403, "dein": 403, "ger": 403, "xfcche": 403, "text3": 403, "xff": 403, "xfea": 403, "x00u": 403, "x00f": 403, "x00": 403, "x00l": 403, "xfc": 403, "x00g": 403, "x00e": 403, "x00n": 403, "x00d": 403, "x00a": 403, "x00h": 403, "x00r": 403, "x00z": 403, "x00i": 403, "x00b": 403, "x00c": 403, "x00t": 403, "x00o": 403, "spolski": 403, "nnmf": [403, 1000, 1001, 1005], "phrase": 403, "misspel": 403, "rescu": 403, "resili": 403, "wprd": 403, "ngram_vector": 403, "char_wb": [403, 571, 572, 574], "rd": 403, "wo": 403, "wp": [403, 640, 654], "char": [403, 571, 572, 574, 1005], "jumpi": 403, "fox": 403, "1x4": 403, "umpi": 403, "1x5": 403, "mpy": 403, "fo": 403, "barrier": 403, "hv": 403, "4x10": 403, "discrep": [403, 999, 1009], "4x1048576": 403, "collid": 403, "ingest": 403, "spend": 403, "my_token": 403, "lowercas": [403, 411, 426, 427, 429, 430, 432, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 571, 572, 574, 622, 623, 624, 625, 671, 672, 675, 825, 830, 833, 837, 842, 847, 873, 874, 1018], "lucen": 403, "build_preprocessor": [403, 571, 572, 574, 1015], "whitespac": 403, "fanci": 403, "lemmat": 403, "nltk": [403, 983, 984], "word_token": 403, "wordnetlemmat": 403, "lemmatoken": 403, "wnl": 403, "british": 403, "spell": 403, "to_british": 403, "1or": 403, "bt": 403, "1er": 403, "ing": 403, "ation": 403, "1z": 403, "ogu": 403, "og": 403, "customvector": 403, "asian": 403, "one_imag": [403, 567], "fake": 403, "assert_array_equ": 403, "patchextractor": [403, 1021], "five_imag": 403, "variancethreshold": [404, 846, 954, 1008, 1015, 1018, 1021], "sel": 404, "selectfdr": [404, 575, 579, 581, 582, 583, 589, 1009, 1011, 1012, 1021], "selectfw": [404, 575, 578, 579, 582, 583, 589, 1021], "genericunivariateselect": [404, 578, 579, 581, 582, 583, 585, 1019, 1021], "r_regress": [404, 589, 1018, 1019], "nonparametr": [404, 590, 591], "bewar": 404, "importance_gett": [404, 576, 577, 580, 1017], "unimport": 404, "lsvc": 404, "baraniuk": 404, "isr": 404, "ist": 404, "utl": 404, "aguiar": 404, "cs_note": 404, "ferri": [404, 964], "versatil": [405, 979, 988], "optima": 405, "markov": [405, 594, 969, 984, 1005], "ppmv": 405, "0336": 405, "4ppm": 405, "27ppm": 405, "197ppm": 405, "nuisanc": 405, "one_vs_on": [405, 593, 965], "ingredi": 405, "duv2014": 405, "theta_l": 405, "x_bound": [405, 600], "operand": 405, "k1__": 405, "k2__": 405, "constant_valu": [405, 596, 600], "constant_value_bound": [405, 594, 596, 600], "k1__k1__constant_valu": 405, "value_typ": [405, 600], "n_element": [405, 600], "k2__length_scal": 405, "k1": [405, 604, 607], "k1__k1": 405, "k1__k1__constant_value_bound": 405, "k1__k2": 405, "k1__k2__length_scale_bound": 405, "k2": [405, 604, 607], "k2__length_scale_bound": 405, "69314718": [405, 595, 974], "30258509": 405, "interoper": [405, 982, 985, 1001], "pairwisekernel": 405, "_valu": [405, 596], "_level": [405, 608], "k_1": [405, 604, 607], "k_2": [405, 604, 607], "__add__": [405, 607], "__mul___": 405, "__pow__": [405, 599], "2l": [405, 605], "bigg": [405, 602], "bessel": [405, 602], "rightarrow": [405, 602, 968, 980], "quad": [405, 967, 978], "tfrac": 405, "3l": 405, "pp84": 405, "x_d": [405, 597], "inhomogen": [405, 597], "expon": [405, 599, 659, 660, 661, 791, 838, 839, 856, 953], "carl": [405, 593, 594, 597, 602, 605], "rasmussen": [405, 593, 594, 597, 602, 605], "duvenaud": [405, 605, 606], "cookbook": [405, 605, 606], "minkowski": [406, 428, 433, 440, 671, 682, 760, 761, 762, 821, 822, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 967, 1005, 1008, 1019, 1020], "metric_param": [406, 428, 433, 440, 671, 675, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 1009, 1012, 1019], "leaf_siz": [406, 428, 433, 440, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833], "kd_tree": [406, 428, 433, 440, 671, 672, 823, 824, 825, 826, 827, 829, 831, 832, 833, 967, 1018], "balltre": [406, 428, 433, 440, 671, 672, 682, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 961, 1005, 1007, 1009, 1013, 1018, 1021], "ckdtree": [406, 428, 1007], "inhibit": [406, 428], "core_sampl": 406, "n_core_sampl": [406, 428], "attract": [406, 428, 958, 967, 984], "fun": [407, 516, 988], "logcosh": [407, 516], "fun_arg": [407, 516], "w_init": [407, 516], "whiten_solv": [407, 516, 1020], "return_x_mean": 407, "compute_sourc": 407, "return_n_it": [407, 437, 442, 461, 528, 529, 629, 630, 635, 636, 643, 644, 645, 646, 664, 665, 666, 667, 668, 669, 670, 677, 1019], "cube": [407, 516], "my_g": [407, 516], "x_mean": 407, "AS": 407, "fortran": [407, 524, 629, 630, 635, 636, 643, 644, 645, 646, 648, 664, 667, 668, 669, 901, 902, 1005, 1008, 1009, 1013], "hyvarinen": [407, 516], "oja": [407, 516], "shrunk_cov": [408, 462, 464], "eq": [408, 458, 704, 705, 706], "subobject": [409, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 777, 778, 779, 782, 783, 793, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892], "row_ind": [410, 434, 436], "intp": [410, 434, 436], "col_ind": [410, 434, 436], "get_submatrix": [410, 434, 436], "pca0": 411, "_n_features_out": 411, "class_name0": [411, 426, 427, 429, 430, 432, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 622, 623, 624, 625, 671, 672, 675, 825, 830, 833, 837, 847, 873, 874], "class_name1": [411, 426, 427, 429, 430, 432, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 622, 623, 624, 625, 671, 672, 675, 825, 830, 833, 837, 847, 873, 874], "class_name2": [411, 426, 427, 429, 430, 432, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 622, 623, 624, 625, 671, 672, 675, 825, 830, 833, 837, 847, 873, 874], "feature_names_out": [411, 415, 426, 427, 429, 430, 432, 447, 465, 466, 467, 468, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 549, 550, 551, 552, 553, 564, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 610, 611, 612, 613, 618, 621, 622, 623, 624, 625, 671, 672, 675, 825, 830, 833, 837, 840, 841, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 873, 874, 1019], "harsh": [412, 421, 452, 532, 533, 534, 536, 538, 540, 542, 544, 547, 550, 552, 593, 641, 649, 651, 657, 658, 659, 809, 810, 811, 812, 816, 817, 818, 819, 820, 823, 828, 831, 838, 876, 877, 881, 883, 886, 889, 891, 1015, 1017, 1020], "n_samples_fit": [416, 448, 465, 466, 467, 537, 539, 541, 543, 545, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 671, 814, 815, 823, 824, 825, 827, 829, 831, 832, 833, 839, 882, 884, 887, 890, 892], "uniform_averag": [416, 448, 465, 466, 467, 537, 539, 541, 543, 545, 548, 551, 553, 594, 618, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 653, 655, 656, 661, 662, 704, 705, 710, 727, 728, 730, 732, 733, 735, 767, 814, 815, 824, 832, 839, 882, 884, 887, 890, 892, 964, 1014], "n_features_new": [417, 426, 429, 515, 517, 519, 520, 522, 525, 526, 532, 550, 552, 553, 565, 566, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 611, 613, 618, 621, 622, 623, 624, 625, 830, 837, 844, 845, 846, 847, 850, 851, 853, 854, 855, 856, 858, 859, 860, 861, 873, 874], "base_clf": 421, "calibrated_clf": 421, "072": [421, 631], "x_calib": 421, "y_calib": 421, "936": [421, 964], "prob_tru": [422, 423], "prob_pr": [422, 423], "ref_lin": 422, "alexandru": 423, "22nd": 423, "525": [423, 611, 954], "convergence_it": [424, 437], "hardcod": [424, 437, 1013], "affinity_matrix_": [424, 435, 674], "cluster_center_indic": [424, 437], "compute_full_tre": [425, 429, 1009], "compute_dist": [425, 429, 1017], "inferior": [425, 429, 1016], "n_leaves_": [425, 429], "n_connected_components_": [425, 429, 1014], "branching_factor": 426, "compute_label": [426, 432], "promot": [426, 691, 984, 1016, 1018], "redistribut": 426, "overwritten": [426, 515, 516, 517, 519, 524, 531, 590, 591, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 655, 657, 662, 664, 665, 666, 667, 669, 932, 934, 1018], "root_": 426, "_cfnode": 426, "cftree": 426, "dummy_leaf_": 426, "subcluster_labels_": 426, "centroids_": [426, 828], "copy_x": [427, 430, 442, 518, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 655, 657, 662, 664, 665, 666, 667, 668, 1007, 1013, 1014], "smart": [427, 442, 443, 573], "k_init": [427, 442], "sse": 427, "bisect_mean": 427, "pooling_func": [429, 1013], "xred": 429, "socg2006": 430, "min_bin_freq": [431, 444], "cluster_al": [431, 444], "get_bin_se": 431, "orphan": [431, 444, 1005], "reassignment_ratio": 432, "eec": [432, 624], "tuft": 432, "dscullei": 432, "fastkmean": 432, "55102041": 432, "48979592": 432, "06896552": 432, "cluster_method": 433, "predecessor_correct": [433, 439], "unprocess": [433, 571, 572, 574], "heap": 433, "braycurti": [433, 440, 682, 760, 761, 762, 967], "canberra": [433, 440, 682, 760, 761, 762, 967], "chebyshev": [433, 440, 682, 760, 761, 762, 967], "dice": [433, 440, 682, 760, 761, 762, 967], "kulsinski": [433, 440, 682, 760, 761, 762], "rogerstanimoto": [433, 440, 682, 760, 761, 762, 967], "russellrao": [433, 440, 682, 760, 761, 762, 967], "seuclidean": [433, 440, 682, 760, 761, 762, 828, 967, 1013, 1016, 1017], "sokalmichen": [433, 440, 682, 760, 761, 762, 967], "sokalsneath": [433, 440, 682, 760, 761, 762, 967], "yule": [433, 440, 760, 761, 762], "manhattan_dist": [433, 440, 671, 744, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835, 1005, 1015, 1020, 1021], "minkowski_dist": [433, 440, 671, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835], "l_p": [433, 440, 671, 823, 824, 825, 827, 829, 831, 832, 833, 834, 835], "upward": [433, 439], "successor": [433, 439, 980, 984], "predecessor": [433, 439, 440], "kdtree": [433, 440, 671, 672, 821, 823, 824, 825, 826, 827, 829, 831, 832, 833, 1007, 1009, 1013, 1017, 1018], "predecessor_": [433, 440], "erich": [433, 1009, 1010, 1013, 1014, 1016, 1017, 1018, 1019], "gertz": 433, "lernen": 433, "wissen": 433, "daten": [433, 1013, 1014], "analysen": 433, "lwda": 433, "318": 433, "n_best": 434, "n_svd_vec": [434, 436], "mini_batch": [434, 436], "n_row_clust": [434, 436, 496], "n_column_clust": [434, 436, 496], "ncv": [434, 436], "n_oversampl": [434, 436, 524, 527, 918, 1019], "kernel_param": [435, 518, 622, 626], "precomputed_nearest_neighbor": [435, 674], "eigendecomposit": [435, 445, 656, 674, 678, 847], "dist_matrix": 435, "517": [435, 445, 997], "541": [435, 445], "csc_matrix": [435, 540, 541, 546, 547, 548, 549, 858, 889, 890, 891, 892, 954, 974, 980, 1010], "best_n_it": 442, "n_local_tri": 443, "n_seed": 444, "multigrid": 445, "multiscal": 445, "preliminari": 445, "heapq": 446, "topolog": [446, 984], "n_connected_compon": 446, "n_leav": [446, 889, 890, 891, 892], "untransform": [447, 450, 975], "transformers_": 447, "remaining_column": 447, "named_transformers_": 447, "sparse_output_": [447, 534], "output_indices_": [447, 1018], "datatyp": [447, 449, 1012, 1015], "norm1": 447, "norm2": 447, "text_preprocess": 447, "num_preprocess": 447, "x_t": [447, 610, 840], "sum_n_compon": [447, 840], "transformer_": 448, "predict_param": [448, 550, 551, 841, 1018], "y_hat": 448, "90453403": 449, "50755672": 449, "30151134": 449, "print_changed_onli": [451, 879, 1014, 1016, 1017], "pairwise_dist_chunk_s": [451, 879], "enable_cython_pairwise_dist": [451, 879], "cache_s": [451, 879, 883, 884, 885, 886, 887, 979], "get_config": [451, 763, 879, 931, 1020], "offset_": [452, 546, 660, 827, 885, 1013], "raw_support_": [452, 457], "dist_": [452, 457], "true_cov": [452, 454, 455], "7411": [452, 457, 1011], "2535": [452, 457], "3053": [452, 457], "0813": [452, 457], "0427": [452, 457], "correct_covari": [452, 457], "rvd": [452, 457], "covariance_correct": [452, 457], "comp_cov": [452, 453, 454, 455, 456, 457, 458, 459], "get_precis": [452, 453, 454, 455, 456, 457, 458, 459, 515, 517, 524], "is_inli": [452, 546, 827], "reweight_covari": [452, 457], "rvdriessen": [452, 457], "location_reweight": [452, 457], "covariance_reweight": [452, 457], "support_reweight": [452, 457], "negative_mahal_dist": 452, "7569": 453, "2818": 453, "3928": 453, "0622": [453, 459], "0193": [453, 459], "enet_tol": [454, 455, 461, 1010], "220446049250313e": [454, 455, 461, 633, 634, 637, 638, 639, 665, 666], "graphlasso": [454, 1010, 1013], "costs_": [454, 455, 1021], "dual_gap": [454, 455, 461, 629, 630, 635, 636, 643, 644, 645, 646, 664, 667], "return_cost": [454, 455, 461], "049": 454, "364": [454, 455, 1006], "034": 454, "093": [454, 1010], "038": [454, 455, 838], "n_refin": 455, "graphlassocv": [455, 1007, 1013], "dualiti": [455, 960], "051": 455, "block_siz": [456, 462, 463, 1009], "4406": 456, "1616": 456, "0595": 456, "0075": [456, 524], "rouseeuw1984": 457, "butlerdavi": 457, "butler": [457, 1008, 1016, 1017], "davi": [457, 707, 964, 1009], "jhun": 457, "1385": 457, "7533": [458, 1012], "2763": 458, "3964": 458, "7833": 458, "2431": 458, "3889": 458, "0195": 458, "7387": 459, "2536": 459, "4110": 459, "cov_init": [461, 1021], "graph_lasso": [461, 1013], "x_loadings_": [465, 466, 467], "y_loadings_": [465, 466, 467], "plssvd": [465, 466, 986, 1001, 1017, 1019], "x_c": [465, 466, 468, 971], "y_c": [465, 466, 468], "y_reconstruct": [465, 466, 467], "x_scores_": [467, 1017], "y_scores_": [467, 1017], "y_transform": 468, "data_hom": [469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 1012], "sklearn_learn_data": [469, 482], "zero_bas": [470, 491, 492], "query_id": [470, 491, 492], "grok": 470, "qid": [470, 491, 492, 1006, 1011], "download_if_miss": [471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 1012], "ioerror": [471, 472, 473, 474, 475, 476, 477, 478, 480, 481], "stopword": [472, 999], "target_column": [472, 473, 479], "percent": [475, 583, 977], "494021": 475, "slice_": [476, 477, 1020], "195": [476, 477], "unrestrict": 476, "2914": 477, "5748": 477, "n_retri": [479, 1019], "timeout": [479, 930, 1019], "silenc": 479, "ith": [479, 756, 760, 817, 838, 839, 854, 855], "1592": 481, "1212": 481, "620": 481, "data_filenam": [484, 488], "target_filenam": [484, 488], "container_path": 486, "load_cont": 486, "allowed_extens": 486, "container_fold": 486, "category_1_fold": 486, "file_1": 486, "file_2": 486, "file_42": 486, "category_2_fold": 486, "file_43": 486, "file_44": 486, "mod": 486, "image_nam": 489, "first_img_data": 490, "backup": [491, 1005], "instantan": 491, "mycach": 491, "get_data": 491, "mysvmlightfil": 491, "xn": 492, "yn": [492, 965, 966], "q1": 492, "qn": 492, "yi": [492, 966, 1009, 1013, 1014, 1017], "qi": [492, 1017], "triplet": 492, "minval": [494, 496], "maxval": [494, 496], "seventh": [494, 976], "269": 494, "274": 494, "return_cent": [495, 1016], "intric": 495, "basri": 496, "gerstein": 496, "genom": 496, "716": 496, "flip_i": 498, "interdepend": 498, "polytop": 498, "guyon": [498, 576, 577, 964], "madelon": 498, "1991": [499, 500, 501], "12000": 503, "effective_rank": [504, 507], "tail_strength": [504, 507], "bell": [504, 1013, 1015, 1017, 1018], "fat": [504, 507], "crawl": [504, 910], "return_ind": 506, "make_low_rank_matrix": 507, "4967": 507, "1382": 507, "6476": 507, "523": 507, "2341": 507, "4694": 507, "5425": 507, "579": 507, "7674": [507, 1012], "4017": 507, "data_transpos": [509, 1019, 1021], "norm_diag": 510, "make_spd_matrix": 510, "celeux": 511, "el": [511, 1018, 1020], "anbari": 511, "marin": 511, "frequentist": 511, "n_dim": [512, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "marsland": 513, "vuw": 513, "nz": 513, "marslast": 513, "ch6": 513, "code_init": [514, 528], "dict_init": [514, 520, 528, 529], "callback": [514, 520, 522, 528, 529, 830, 930, 985, 1021], "split_sign": [514, 520, 525], "transform_max_it": [514, 520, 521, 525, 1015], "_fro": [514, 520, 528, 529, 629, 630, 635, 643, 644, 645, 664], "lasso_cd": [514, 520, 525, 531], "invok": [514, 520, 522, 528, 529, 550, 552, 553, 802, 878, 1017], "error_": [514, 526], "minibatchsparsepca": [514, 516, 520, 523, 525, 526, 528, 529, 1005, 1006, 1016, 1018, 1019, 1020, 1021], "sierra": [514, 520], "icml09": [514, 520], "x_hat": [514, 520], "noise_variance_init": 515, "quartimax": [515, 1017], "loglike_": 515, "barber": 515, "bishop": [515, 517, 524, 723, 777, 960, 965, 979], "get_covari": [515, 517, 524], "unmixing_matrix": 516, "whitening_": 516, "kpca": [516, 517, 518, 1000, 1001, 1005], "unsaf": 517, "singular_values_": [517, 524, 527, 1012], "var_": [517, 819, 861, 1018], "miketip": [517, 524], "mppca": [517, 524], "n_samples_seen_": [517, 850, 851, 861, 1013], "batch_size_": 517, "ross": [517, 590, 591, 980, 1019, 1020], "vision": [517, 740, 741, 956, 960, 962, 980, 984, 988, 1006], "toronto": [517, 627, 837], "dross": 517, "ivt": 517, "rosslimlinyang_ijcv": 517, "karhunen": 517, "loev": 517, "levi": [517, 1012], "lindenbaum": 517, "1371": 517, "1374": 517, "abstain": 517, "holub": 517, "opportun": [517, 978], "golub": [517, 819, 861], "x_spars": [517, 935, 938], "sigma2": [517, 524], "x_origin": [517, 522, 524, 526, 527, 613, 873, 874], "check_input": [517, 531, 629, 630, 635, 643, 644, 645, 664, 670, 889, 890, 891, 892, 1013], "remove_zero_eig": [518, 1007, 1014], "x_fit_": [518, 626], "eigenvalues_": [518, 1018], "eigenvectors_": [518, 1018], "dual_coef_": [518, 626, 883, 884, 885, 886, 887, 979, 1009], "x_transformed_fit_": 518, "nathan": [518, 1013, 1017, 1020], "gunnar": [518, 918], "tropp": [518, 524], "vladimir": [518, 918, 960, 1015, 1019], "rokhlin": [518, 524, 918], "tygert": [518, 524, 918], "learning_decai": 519, "evaluate_everi": 519, "perp_tol": 519, "mean_change_tol": 519, "max_doc_update_it": 519, "kappa": [519, 699], "tau_0": 519, "pseudocount": [519, 1013], "exp_dirichlet_component_": 519, "n_batch_iter_": 519, "bound_": 519, "doc_topic_prior_": 519, "topic_word_prior_": 519, "franci": [519, 641, 960, 1011], "onlineldavb": 519, "chong": 519, "00360392": 519, "25499205": 519, "0036211": 519, "64236448": 519, "09541846": 519, "15297572": 519, "00362644": 519, "44412786": 519, "39568399": 519, "003586": 519, "vb": 519, "sub_sampl": 519, "doc_topic_distr": [519, 1012], "fresh_restart": 521, "fresh_restarts_max_it": 521, "_w": [521, 523, 530], "_ratio": [521, 523, 530], "_h": [521, 523, 530], "fresh": [521, 985, 1015], "reconstruction_err_": [521, 523], "andrzej": [521, 523, 530], "anh": [521, 523, 530], "ieic": [521, 523, 530], "708": [521, 523, 530, 732], "waspa": 521, "ridge_alpha": [522, 526, 1012], "power_iteration_norm": [524, 527, 917, 918, 1019], "500x500": 524, "lu": [524, 527, 917, 918, 1011, 1012, 1013, 1014], "n_samples_": 524, "royal": [524, 610, 857, 869, 978], "methodologi": [524, 854, 954, 964, 988], "622": 524, "9924": 524, "30061": 524, "54980": 524, "00755": 524, "99244": 524, "ascontiguousarrai": 524, "sparse_encod": [525, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 665, 666, 667, 668, 669, 1005, 1012, 1013, 1015, 1019], "u_init": 526, "v_init": 526, "9666": 526, "oversampl": [527, 1005], "indeterminaci": 527, "x_dens": 527, "0157": 527, "0512": 527, "0499": 527, "0479": 527, "0453": 527, "2102": 527, "2410": 527, "5981": 527, "5420": 527, "4486": 527, "3288": 527, "method_max_it": [528, 529, 1015], "dict_learning_onlin": [528, 1006, 1015, 1018, 1019], "return_cod": 529, "iter_offset": [529, 1019], "return_inner_stat": [529, 1019], "inner_stat": [529, 1019], "update_h": 530, "_n_compon": 530, "hal": [530, 641, 740, 741, 962], "copy_cov": 531, "orthogonal_mp": [531, 647, 648, 669, 960], "eigen": [532, 656, 674, 678, 958, 1011, 1014], "sum_k": [532, 980], "prior_k": 532, "c_k": 532, "priors_": [532, 533], "scalings_": [532, 533], "xbar_": 532, "reg_param": 533, "scaling_": 533, "colinear": 533, "rotations_": 533, "n_classes_": [534, 536, 538, 540, 542, 547, 593, 809, 810, 889, 891, 1006, 1015, 1017], "class_prior_": [534, 819], "n_outputs_": [534, 535, 540, 541, 547, 548, 549, 838, 839, 889, 890, 891, 892], "dummy_clf": 534, "constant_": 535, "dummy_regr": 535, "base_estimator_": [536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 593, 878, 1020], "983": [536, 710], "dok": [536, 537, 848, 1018], "staged_decision_funct": [536, 542, 544], "staged_scor": [536, 537], "7972": 537, "9771": 537, "estimators_samples_": [538, 539, 546, 1011, 1013, 1016], "estimators_features_": [538, 539, 546], "oob_decision_function_": [538, 540, 547], "oob_prediction_": [539, 541, 548], "8720": [539, 1013], "min_weight_fraction_leaf": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 980, 1008, 1011, 1012], "min_impurity_decreas": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892, 980, 1012], "shannon": [540, 547, 889, 891, 961, 980], "unlimit": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "n_t": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "n_t_r": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "right_impur": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "n_t_l": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "left_impur": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "balanced_subsampl": [540, 547, 1013], "subtre": [540, 541, 542, 543, 547, 548, 889, 890, 891, 892, 980], "unprun": [540, 541, 547, 548, 889, 890, 891, 892], "x_leav": [540, 541, 542, 543, 547, 548, 549, 889, 890, 891, 892], "n_nodes_ptr": [540, 541, 547, 548, 549], "friedman_ms": [541, 542, 543, 548, 890, 892], "extratreeregressor": [541, 546, 549, 891, 970, 1014, 1015, 1016, 1018, 1019, 1020], "2727": 541, "dummyestim": [542, 543], "eras": [542, 543, 629, 635, 641, 643, 645, 649, 650, 651, 659, 660, 661, 838, 839], "oob_scores_": [542, 543, 1021], "init_": [542, 543], "init_estim": [542, 543], "max_features_": [542, 543, 580, 889, 890, 891, 892, 1019], "_fit_stag": [542, 543], "crossentropi": 544, "deepest": [544, 545, 1016], "no_interact": [544, 545, 1020], "do_early_stopping_": [544, 545], "n_trees_per_iteration_": [544, 545], "validation_score_": [544, 545], "is_categorical_": [544, 545], "n_trees_per_iter": 544, "longerr": 546, "max_samples_": 546, "fei": [546, 970], "ting": [546, 970, 1013, 1014], "ming": [546, 970, 1009, 1013, 1014, 1015, 1019], "zhou": [546, 622, 877, 970, 1013], "zhi": [546, 970], "hua": [546, 970], "icdm": [546, 970], "eighth": [546, 970], "tkdd": 546, "n_left": 546, "32987858": 548, "n_out": 549, "one_hot_encoder_": 549, "extratreeclassifi": [549, 892, 965, 1009, 1014, 1015, 1016, 1018, 1019, 1020], "moosmann": 549, "trigg": 549, "juri": 549, "random_tre": 549, "x_sparse_embed": 549, "randomtreesembedding_": 549, "final_estimator_": [550, 551], "named_estimators_": [550, 551, 552, 553, 1013, 1015], "named_estim": [550, 551, 552, 553], "parameter_nam": [550, 551, 552, 553], "new_valu": [550, 551, 552, 553], "linearsvr": [551, 887, 1009, 1011, 1016], "flatten_transform": [552, 1012], "le_": 552, "eclf1": 552, "array_equ": [552, 1012], "eclf2": 552, "eclf3": 552, "maj": 552, "probabilities_or_label": 552, "n_regressor": 553, "r1": 553, "r3": 553, "er": 553, "with_traceback": [554, 555, 556, 557, 558, 559, 560, 561], "__traceback__": [554, 555, 556, 557, 558, 559, 560, 561], "current_sklearn_vers": 559, "repr": [560, 1016, 1017, 1019], "linter": 562, "spam": [564, 692, 723, 816, 964, 966, 988], "feature_names_": 564, "xa": 564, "dict_typ": 564, "conform": [564, 611, 809, 810, 964, 984, 985, 1012, 1018], "1048576": [565, 572], "non_neg": [565, 1012], "eleph": 565, "bird": [565, 701, 736, 964], "patch_height": [566, 567, 570], "patch_width": [566, 567, 570], "img_height": 566, "img_width": 566, "pe": 566, "pe_tran": 566, "263758": 566, "image_height": [566, 567, 570], "image_width": [566, 567, 570], "n_channel": [566, 567, 570], "n_patch": [566, 567, 570], "272214": 567, "243": 567, "244": 567, "n_z": 568, "return_a": [568, 569, 1008], "_coo": [568, 569], "image_s": 570, "strip_acc": [571, 572, 574], "nfkd": [571, 572, 574, 1015], "unicodedata": [571, 572, 574], "regexp": [571, 572, 574], "min_n": [571, 572, 574, 1005], "max_n": [571, 572, 574, 1005], "fixed_vocabulary_": [571, 574], "stop_words_": [571, 574], "delattr": [571, 574, 1017], "vectorizer2": 571, "raw_docu": [571, 574], "get_stop_word": [571, 572, 574], "x_inv": [571, 574], "con": 572, "yates2011": 573, "baeza": [573, 712, 1008], "yate": [573, 712], "ribeiro": [573, 712, 1018], "neto": [573, 712], "addison": [573, 712], "weslei": [573, 712], "mrs2008": 573, "118": 573, "tfid": 573, "22314355": 573, "51082562": 573, "91629073": 573, "_check_stop_list": 574, "pvalu": [575, 578, 579, 581, 582, 583, 806], "k_best": [575, 878, 977], "fdr": 575, "fwe": 575, "iff": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 852], "retent": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "n_selected_featur": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "n_original_featur": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586], "attrgett": [576, 580], "barnhil": [576, 577], "vapnik": [576, 577], "389": [576, 577, 999], "n_subsets_of_featur": 577, "narrai": 577, "benjamini": [578, 1011, 1012], "hochberg": [578, 1011, 1012], "false_discovery_r": 578, "norm_ord": [580, 1012], "threshold_": [580, 1012], "3252302": 580, "83462377": 580, "49750423": 580, "55245": 580, "half_cal": 580, "half_selector": 580, "unspecifi": [582, 583, 781, 961], "_get_support_mask": 584, "n_features_to_select_": 585, "variances_": 586, "weed": 587, "p_valu": [587, 588, 589], "f_statist": [588, 589], "force_finit": [589, 592, 710, 767, 964, 1019], "pearson": [589, 592, 1018], "discrete_featur": [590, 591], "essenc": [590, 591, 725, 961, 964], "hardli": [590, 591], "kraskov": [590, 591], "stogbauer": [590, 591], "grassberg": [590, 591], "phy": [590, 591], "kozachenko": [590, 591], "leonenko": [590, 591], "probl": [590, 591], "peredachi": [590, 591], "correlation_coeffici": 592, "fmin_l_bfgs_b": [593, 594], "max_iter_predict": 593, "copy_x_train": [593, 594], "one_vs_rest": [593, 965], "compoundkernel": [593, 1019], "obj_func": [593, 594], "initial_theta": [593, 594], "theta_opt": [593, 594], "func_min": [593, 594], "_posterior_mod": 593, "log_marginal_likelihood_value_": [593, 594], "9866": [593, 602, 605], "83548752": 593, "03228706": 593, "13222543": 593, "79064206": 593, "06525643": 593, "14410151": 593, "clone_kernel": [593, 594, 1015], "n_kernel_param": [593, 594], "log_likelihood_gradi": [593, 594], "x_train_": 594, "y_train_": 594, "3680": [594, 597, 608], "y_cov": 594, "n_samples_x": [594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 682, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763], "requires_vector_input": [595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "51292546": 595, "09861229": [595, 974], "n_samples_i": [595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 682, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763], "n_kernel": 595, "k_gradient": [595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608], "k_diag": [595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608], "hyperparameter_constant_valu": 596, "3696": 596, "606": [596, 811, 965], "hyperparameter_sigma_0": 597, "edward": [597, 602, 605, 1008, 1013, 1014, 1015, 1016, 1020], "hyperparameter_length_scal": [598, 602, 605, 606], "hyperparameter_period": 598, "0144": 598, "457": 598, "3894": 598, "3467": 598, "namedtupl": [600, 1021], "maxsiz": 600, "mat\u00e9rn": 602, "appr": 602, "8513": 602, "0368": 602, "1117": 602, "8086": [602, 1012], "0693": 602, "1220": 602, "gamma_bound": 603, "pairwise_kernels_kwarg": 603, "additive_chi2": [603, 621, 747, 756], "pairwise_kernel_funct": [603, 626, 756], "hyperparameter_gamma": 603, "9733": [603, 606], "8880": 603, "05663": 603, "05532": 603, "8676": [603, 1012], "07073": 603, "06165": 603, "__mul__": 604, "8354": [605, 1012], "03228": 605, "1322": 605, "7906": [605, 632], "0652": 605, "1441": 605, "hyperparameter_alpha": 606, "8881": 606, "0566": 606, "05518": 606, "8678": 606, "0707": 606, "0614": 606, "hyperparameter_noise_level": 608, "initial_strategi": 610, "imputation_ord": [610, 1015], "skip_complet": 610, "min_valu": [610, 1016, 1017], "max_valu": [610, 1016, 1017], "keep_empty_featur": [610, 611, 613, 954, 1020], "nullabl": [610, 611, 612, 613, 1016, 1020], "na": [610, 611, 612, 613, 751, 760, 899, 901, 902, 1015, 1016, 1019, 1020], "known_val": 610, "Nearness": 610, "arab": 610, "broadcast": 610, "missingind": [610, 611, 613, 954, 1013, 1014, 1015, 1019, 1021], "initial_imputer_": 610, "imputation_sequence_": 610, "feat_idx": 610, "neighbor_feat_idx": 610, "n_features_with_missing_": 610, "indicator_": [610, 611, 613], "knp": 610, "stef": [610, 954], "buuren": [610, 954], "karin": [610, 954], "groothui": [610, 954], "oudshoorn": [610, 954], "buck": 610, "1960": [610, 699], "306": 610, "imp_mean": [610, 613], "9584": [610, 1012], "nan_euclidean": [611, 744, 760], "_pairwise_cal": 611, "kwd": [611, 753, 756, 760, 763, 772, 773], "olga": [611, 954], "troyanskaya": [611, 954], "cantor": [611, 954], "gavin": [611, 954], "sherlock": [611, 954], "pat": [611, 954], "botstein": [611, 954], "russ": [611, 954], "altman": [611, 954], "bioinformat": [611, 954], "n_output_featur": 611, "error_on_new": 612, "features_": [612, 954], "n_missing_featur": 612, "x2_tr": 612, "n_features_with_miss": 612, "statistics_": 613, "n_features_missing_ind": 613, "x_imput": 613, "n_features_out": 613, "quadcontourset": 614, "quadmesh": 614, "feature_1": [614, 894], "feature_2": 614, "nicer": 614, "overwrit": [614, 990, 1005, 1016], "pd_result": 615, "target_idx": 615, "decil": [615, 1016], "pdp_lim": 615, "is_categor": 615, "pdp": [615, 971, 1019], "nonexist": 615, "deciles_vlines_": 615, "vlines_": 615, "deciles_hlines_": 615, "bars_": 615, "heatmaps_": 615, "ice_lines_kw": 615, "pd_line_kw": 615, "contour_kw": 615, "disp1": 615, "disp2": 615, "pdp_line_kw": 615, "bar_kw": 615, "heatmap_kw": 615, "seq": 616, "n_values_feature_j": 616, "bre": [617, 980], "4666": 617, "2211": 617, "x_min_": 618, "x_max_": 618, "n_threshold": [618, 709, 764, 771], "stepwis": [618, 637, 638, 639, 665, 666, 960], "increasing_": 618, "isotonic_regress": [618, 1018], "secondari": [618, 1009], "leeuw": 618, "1977": 618, "nilotp": [618, 620], "chakravarti": [618, 620], "308": 618, "pava": 618, "hornik": 618, "mair": 618, "kruskal": [618, 673, 677, 961], "psychometrica": 618, "iso_reg": 618, "8628": 618, "7256": 618, "isotonicregression0": 618, "increasing_bool": 619, "fisher_transform": 619, "sample_step": 621, "sample_interv": 621, "sample_interval_": [621, 1021], "skewedchi2sampl": [621, 622, 623, 624, 956, 1012, 1019, 1020], "chi2_kernel": [621, 625, 740, 747, 962, 1006], "additive_chi2_kernel": [621, 741, 747, 956], "vedaldi": [621, 956], "zisserman": [621, 956, 964], "chi2sampl": 621, "9499": 621, "component_indices_": [622, 1018], "normalization_": 622, "additivechi2sampl": [622, 623, 624, 625, 740, 741, 956, 1019, 1021], "kernel_metr": [622, 623, 624, 625], "seeger": 622, "mahdavi": 622, "jin": [622, 1016, 1017], "data_transform": 622, "9987": 622, "fft": 623, "indexhash": 623, "bithash": 623, "indexhash_": 623, "bithash_": 623, "kitchen": [624, 956], "sink": [624, 956], "random_offset_": [624, 625], "random_weights_": [624, 625], "rahimi": [624, 956], "benjamin": [624, 1007, 1008, 1016, 1017, 1018, 1019, 1020], "recht": [624, 956], "berkelei": [624, 889, 890], "brecht": 624, "rah": 624, "rbf_featur": [624, 956], "skewed": [625, 1012], "secant": 625, "hyperbol": [625, 838, 839, 962, 968], "fuxin": 625, "catalin": 625, "ionescu": [625, 956, 1015], "cristian": 625, "sminchisescu": [625, 956], "chi2_featur": 625, "2c": [626, 635, 655, 656, 657, 658, 670, 956], "492": [626, 957, 997], "493": [626, 881, 957], "alpha_1": [627, 628, 960], "alpha_2": [627, 628, 960], "lambda_1": [627, 628, 960], "lambda_2": [627, 628, 960], "threshold_lambda": 627, "x_offset_": [627, 628, 1017], "x_scale_": [627, 628, 1017], "mackai": [627, 628, 960], "ashra": 627, "salakhutdinov": [627, 830, 967], "lectur": [627, 956, 983], "utstat": 627, "rsalakhu": 627, "sta4273": 627, "lecture2": 627, "computed_scor": 628, "appendix": [628, 659, 960, 974], "wipf": [628, 960], "nagarajan": [628, 960], "2_2": [629, 630, 635, 636, 637, 638, 639, 643, 644, 645, 646, 655, 664, 665, 666, 667], "glmnet": [629, 630, 1005], "sparse_coef_": [629, 635, 643, 645, 1005], "dual_gap_": [629, 630, 635, 636, 643, 644, 645, 646, 1018], "max_j": [629, 635], "w_j": [629, 635, 964, 978], "ext": 629, "83816048": 629, "55968825": 629, "coef_init": [629, 630, 635, 636, 643, 644, 645, 646, 649, 651, 659, 660, 661, 664, 667], "mono": [629, 630, 635, 636, 643, 644, 645, 646, 664, 667], "_21": [629, 630, 635, 636, 643, 644, 645, 646, 664, 667], "sum_j": [629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 960, 964, 969], "alpha_min": [629, 630, 633, 635, 636, 637, 639, 643, 644, 645, 646, 664, 665, 666, 667], "alpha_max": [629, 630, 635, 636, 643, 644, 645, 646, 664, 667], "ndim": [629, 630, 635, 636, 643, 644, 645, 646, 664, 667, 901, 902], "multitaskelasticnet": [629, 630, 635, 644, 645, 646, 664, 960, 1005, 1012, 1013, 1016, 1018], "multitaskelasticnetcv": [629, 630, 635, 643, 645, 646, 664, 960, 1008, 1015, 1016, 1018], "l1_ratio_": [630, 642, 644], "n_l1_ratio": [630, 642, 644, 1008], "199": [630, 733, 979], "398": [630, 999], "unpen": [631, 652, 663, 960], "raphson": [631, 652, 663], "g_j": [631, 652, 663], "896": 631, "483": 631, "pg_i": 632, "scale_": [632, 850, 851, 859, 861, 871, 974, 1010], "outliers_": 632, "elvezio": [632, 960], "ronchetti": [632, 960], "concomit": [632, 960], "owen": [632, 1014, 1015], "hybrid": [632, 984], "statweb": [632, 665, 666], "hhu": [632, 1014], "806": 632, "7200": 632, "4923": 632, "1698": 632, "0106": 632, "9221": 632, "0226": 632, "fit_path": [633, 637, 638, 639, 665, 666], "jitter": [633, 637, 1016], "coef_path_": [633, 634, 637, 638, 960], "active_": [633, 634, 637, 638], "larscv": [633, 648, 665, 666, 1012, 1018], "1111": [633, 639], "max_n_alpha": [634, 638], "n_cv_alpha": [634, 638], "cv_alpha": [634, 638], "lassolar": [634, 635, 636, 638, 639, 646, 647, 648, 665, 666, 667, 960, 997, 1005, 1006, 1008, 1012, 1015, 1016, 1018], "9996": 634, "2961": 634, "3996": 634, "2_f": 635, "_11": 635, "4951": 636, "2_fro": [636, 645, 646, 667], "coef_path": [636, 646, 667], "46874778": [636, 646, 667], "2159048": [636, 646, 667], "4425765": [636, 646, 667], "23689075": [636, 646, 667], "coef_path_lar": [636, 646, 667], "coef_path_continu": [636, 646, 667], "interp1d": [636, 646, 667], "46915237": [636, 646, 667], "23668876": [636, 646, 667], "congruenc": [637, 638, 639, 665, 666], "fragil": 638, "3972": 638, "2222": 639, "rank_": 640, "singular_": 640, "maxent": [641, 642, 960], "primal": [641, 642, 660, 881, 882, 978, 979], "synthetic_feature_weight": [641, 642], "ciyou": 641, "byrd": 641, "jorg": [641, 1008, 1017, 1019], "noced": 641, "lui": [641, 1006, 1008, 1009, 1013], "iem": 641, "lbfgsb": 641, "schmidt": [641, 960, 1008], "le": [641, 849, 955, 960, 967, 975, 977, 1013, 1017, 1018], "roux": [641, 960, 977], "00860051": 641, "defazio": [641, 960], "lacost": [641, 960], "hsiang": [641, 1009], "fu": [641, 1009], "fang": [641, 1012, 1013], "lan": [641, 1020], "chih": [641, 1010], "jen": [641, 1013], "maxent_du": 641, "cs_": 642, "l1_ratios_": 642, "coefs_paths_": [642, 1015], "coefs_path": 642, "n_l1_ratios_": 642, "w_ij": 643, "eps_": [643, 645], "45663524": 643, "45612256": 643, "0872422": 643, "fro_2": [644, 646], "multitasklassocv": [644, 1008, 1015, 1016, 1018], "52875032": 644, "46958558": 644, "00166409": 644, "60809415": 645, "94592424": 645, "41888636": 645, "87382323": 645, "9994": 646, "5713": 646, "153": 646, "7971": 646, "9015": [646, 1013], "n_nonzero_coefs_": [647, 648], "orthogonal_mp_gram": [647, 648, 668, 1019], "mallat": [647, 668, 669, 960], "3397": [647, 668, 669], "3415": [647, 668, 669], "papier": [647, 668, 669], "mallatpursuit93": [647, 668, 669], "rubinstein": [647, 668, 669], "zibulevski": [647, 668, 669], "elad": [647, 668, 669], "technion": [647, 668, 669, 960], "ronrubin": [647, 668, 669, 960], "ksvd": [647, 668, 669, 960], "9991": [647, 648, 1013], "3854": [647, 648], "previous_loss": [649, 650, 651, 660], "pa": [649, 650, 878, 960, 964, 977], "preset": [649, 651, 659, 968], "t_": [649, 650, 651, 659, 660, 661, 838, 839, 978], "loss_function_": [649, 651, 659, 660], "volume7": [649, 650], "crammer06a": [649, 650], "crammer": [649, 650, 717, 960, 964, 979], "dekel": [649, 650, 960], "keshat": [649, 650, 960], "shalev": [649, 650, 960, 978], "shwartz": [649, 650, 960, 978], "singer": [649, 650, 717, 960, 964, 978, 979], "26642044": 649, "45070924": 649, "67251877": 649, "64185414": 649, "84127814": 649, "intercept_init": [649, 651, 659, 661], "y_all": [649, 651, 659, 809, 810, 838], "epsilon_insensit": [650, 659, 661, 882, 960, 978], "squared_epsilon_insensit": [650, 659, 661, 882, 960, 1011], "48736655": 650, "18818427": 650, "59122734": 650, "94731329": 650, "02306214": 650, "eta0": [651, 659, 660, 661, 978], "lossfunct": [651, 659, 660, 1014], "therein": 651, "990": [652, 964], "676": 652, "solver_opt": 653, "ipm": 653, "linprog": [653, 960], "is_data_valid": [654, 960], "is_model_valid": [654, 960], "max_trial": [654, 960], "max_skip": 654, "stop_n_inli": [654, 960], "stop_scor": [654, 960], "stop_prob": 654, "mad": [654, 1011], "costlier": 654, "n_trials_": 654, "n_skips_no_inliers_": 654, "n_skips_invalid_data_": 654, "n_skips_invalid_model_": 654, "sri": [654, 960, 1012, 1013], "bmva": 654, "bmvc": [654, 960], "paper355": 654, "9885": 654, "9417": 654, "15000": [655, 670, 838, 839], "btol": [655, 657], "gcv_mode": [656, 1007], "store_cv_valu": [656, 658, 1013, 1016], "alpha_per_target": [656, 1017], "cv_values_": [656, 658], "ridgeclassifiercv": [656, 657, 770, 964, 965, 1013, 1015, 1016, 1018, 1019], "5166": 656, "gcv": [656, 658], "9595": 657, "9630": 658, "power_t": [659, 660, 661, 838, 839, 978], "best_loss": [659, 661], "leon": [659, 660, 661, 1005], "bottou": [659, 660, 661, 968, 978], "pow": [659, 660, 661, 838, 839], "dl": 659, "775047": 659, "775151": 659, "justif": 659, "volume2": 659, "zhang02c": 659, "offset_init": 660, "unshifft": 660, "n_subsampl": [662, 907], "breakdown_": 662, "n_subpopulation_": 662, "xin": [662, 960, 1013], "dang": [662, 960], "hanxiang": [662, 960], "peng": [662, 960, 1011, 1012, 1013, 1015, 1017], "xueqin": [662, 960], "hepe": [662, 960], "olemiss": 662, "xdang": 662, "mtse": 662, "9884": 662, "5871": 662, "coeff": 663, "599": 663, "copy_gram": [665, 666, 669], "return_path": [665, 666, 668, 669], "lars_path_gram": [665, 960, 1014], "tib": [665, 666], "xgamma": 668, "norms_squar": 669, "copy_xi": 669, "return_intercept": [670, 1014], "linearoper": 670, "_preprocess_data": 670, "path_method": [671, 961], "neighbors_algorithm": [671, 672], "arnoldi": [671, 672, 676], "fw": 671, "warshal": [671, 961], "kernel_pca_": 671, "nbrs_": [671, 672], "dist_matrix_": 671, "tenenbaum": [671, 961], "reconstruction_error": 671, "frobenius_norm": 671, "d_fit": 671, "x_fit": 671, "n_queri": [671, 823, 824, 825, 827, 829, 831, 832, 833], "hessian_tol": [672, 676], "modified_tol": [672, 676], "reconstruction_error_": 672, "rowei": [672, 676, 830, 961, 967], "saul": [672, 676, 961, 1012, 1013, 1015], "2323": [672, 676, 961], "donoho": [672, 676, 961], "grime": [672, 676, 961], "natl": [672, 676, 961], "acad": [672, 676, 961], "5591": [672, 676, 961], "mlle": [672, 676, 961], "zha": [672, 676, 961], "shanghai": [672, 676, 961], "univ": [672, 676, 961], "immers": [673, 677], "nonmetr": [673, 677], "smacof": [673, 1020], "stress": [673, 677, 961, 1020], "stress_": 673, "dispar": [673, 677, 961], "dissimilarity_matrix_": 673, "psychometrika": [673, 677, 961], "1964": [673, 677, 857, 869, 961], "borg": [673, 677, 961], "groenen": [673, 677, 961], "affinity_matrix": 674, "n_neighbors_": [674, 827], "early_exagger": 675, "min_grad_norm": [675, 1011], "square_dist": [675, 1017], "der": [675, 679, 961, 1008, 1009, 1013], "maaten": [675, 679, 961], "bhtsne": [675, 1012], "opentsn": 675, "abort": 675, "pdist": [675, 682, 760, 763], "pairwise_distance_funct": [675, 679, 760, 763, 967], "barn": [675, 1010, 1012, 1015], "hut": [675, 1010, 1012, 1015], "nlogn": 675, "kl_divergence_": [675, 1012], "learning_rate_": [675, 839], "hinton": [675, 830, 837, 838, 839, 961, 967, 968, 969], "2579": 675, "2605": 675, "lvdmaaten": [675, 1012], "oct": [675, 751, 961, 967], "3221": [675, 961], "3245": [675, 961], "jmlr_2014": 675, "belkina": [675, 961], "ciccolella": [675, 961], "anno": [675, 961], "halpert": [675, 961], "spidlen": [675, 961], "snyder": [675, 961], "cappion": [675, 961], "kobak": [675, 1018], "beren": 675, "transcriptom": 675, "guttman": 677, "norm_laplacian": 678, "drop_first": 678, "nk": 679, "2n": [679, 956, 968], "3k": 679, "cosine_dist": [679, 744, 967, 1011], "jarkko": 679, "venna": 679, "samuel": [679, 988, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "kaski": 679, "icann": 679, "verlag": 679, "491": 679, "twelth": 679, "pmlr": 679, "391": 679, "im_": 680, "axesimag": 680, "text_": 680, "include_valu": 680, "values_format": [680, 1015], "im_kw": [680, 1019], "text_kw": [680, 1020], "get_metr": 682, "19615242": 682, "euclideandist": 682, "manhattandist": 682, "chebyshevdist": 682, "minkowskidist": [682, 1018], "wminkowski": [682, 828, 967, 1017, 1019], "wminkowskidist": 682, "seuclideandist": 682, "mahalanobisdist": 682, "haversinedist": 682, "arcsin": [682, 746], "hammingdist": 682, "n_unequ": 682, "n_tot": 682, "canberradist": 682, "braycurtisdist": 682, "abbrevi": 682, "ntt": 682, "ntf": 682, "nft": 682, "nff": 682, "nneq": 682, "jaccarddist": 682, "matchingdist": 682, "dicedist": 682, "kulsinskidist": [682, 1021], "rogerstanimotodist": 682, "russellraodist": 682, "sokalmichenerdist": 682, "sokalsneathdist": 682, "pyfunc": [682, 967], "pyfuncdist": 682, "dist_to_rdist": 682, "surrog": [682, 988], "cdist": [682, 1018], "rdist_to_dist": 682, "rdist": 682, "predictionrecalldisplai": [683, 964], "drop_intermedi": [683, 685, 764, 771, 1021], "errors_lines_": 684, "with_error": 684, "scatter_": 684, "chance_level_": [685, 1021], "balanced_accuracy_scor": [686, 769, 964, 1013], "imperfectli": [686, 716, 964], "label_tru": [687, 700, 719, 737, 739, 775], "upperlimit": 687, "nat": [687, 737, 739, 1019], "expected_ri": 688, "discord": 688, "hubert1985": 688, "1007": 688, "2fbf01908075": 688, "steinley2004": 688, "wk": 688, "rand_index": 688, "adjusted_rand_index": 688, "chacon": 688, "chac\u00f3n": 688, "rastrojo": 688, "balanced_accuraci": [691, 964, 1013], "brodersen": 691, "ong": 691, "stephan": [691, 1008, 1014, 1015, 1017], "buhmann": 691, "20th": 691, "3121": 691, "kelleh": [691, 964], "aoif": [691, 964], "arci": [691, 964], "y_true_categor": [692, 964], "037": 692, "calinski": [693, 1011], "harabasz": 693, "allow_non": 694, "thrown": [694, 1014, 1015], "tn": [695, 701, 964], "negative_class": 695, "zebra": 695, "output_dict": [696, 1013, 1017], "zero_divis": [696, 711, 712, 720, 765, 766, 769, 1015, 1017, 1021], "precision_recall_fscore_support": [696, 711, 712, 766, 769, 964, 1009, 1013, 1015, 1021], "multilabel_confusion_matrix": [696, 711, 712, 720, 766, 769, 964, 1014], "conting": [697, 698, 713, 737, 1011], "n_classes_tru": [697, 737], "n_classes_pr": [697, 737], "cohen": [699, 1013], "p_o": 699, "p_e": 699, "artstein": 699, "poesio": 699, "linguist": [699, 878, 977], "label_pr": [700, 718, 719, 737, 739, 775], "ant": [701, 736, 964], "a_row": 702, "a_column": 702, "b_row": 702, "b_column": 702, "tsoumaka": [703, 716, 722, 964], "kataki": [703, 716, 722, 964], "vlahava": [703, 722, 964], "handbook": [703, 722, 964], "667": [703, 722, 964], "raw_valu": [704, 705, 710, 727, 728, 730, 732, 733, 735, 767, 964, 1013, 1016], "wainwright": [704, 705, 706], "su": [704, 705, 706], "statlearnspars": [704, 705, 706], "691": 704, "8125": 704, "57142857": 704, "d2": 705, "d2_absolute_error_scor": [705, 964, 1019], "koenker": [705, 960], "roger": [705, 1012, 1013, 1017], "jos\u00e9": [705, 1008, 1018], "772": 705, "bouldin": 707, "farther": 707, "log_bas": 708, "ignore_ti": [708, 738], "ndcg": [708, 738, 964, 1012], "ndcg_score": [708, 964, 1012, 1015, 1020, 1021], "sharper": 708, "discounted_cumulative_gain": 708, "dcg": [708, 738, 964, 1012], "jarvelin": [708, 738, 964], "kekalainen": [708, 738, 964], "colt": [708, 738, 964], "mcsherri": [708, 738, 964], "najork": [708, 738, 964], "european": [708, 738, 964], "groud": [708, 738], "true_relev": [708, 738], "propabl": 709, "imperfect": [710, 767, 964, 1007], "variance_weight": [710, 767, 964], "n_unique_label": [711, 712, 720, 765, 766, 769, 928], "fbeta_scor": [711, 724, 765, 964, 1007, 1008, 1009, 1010, 1015, 1021], "undefinedmetricwarn": [711, 712, 765, 766, 769, 1014], "y_true_empti": 711, "y_pred_empti": [711, 712], "66666667": [711, 764, 831, 974], "lend": [712, 988], "fowlk": [713, 1011], "mallow": [713, 1011], "get_scorer_nam": [714, 964, 1019], "forgiv": 716, "upperbound": 716, "grigorio": 716, "ioanni": 716, "wareh": 716, "septemb": [716, 964, 1005, 1008, 1011, 1013, 1018], "pred_decis": [717, 964, 1018], "disagre": [717, 971], "kobi": 717, "yoram": 717, "AND": 717, "denero": 717, "gluster": 718, "v_measur": [718, 775], "6666": [720, 964, 1011], "5833": [720, 964], "lrap": [721, 964], "416": [721, 964], "209": [723, 857], "21616": 723, "needs_proba": [724, 1014], "needs_threshold": [724, 964], "ftwo_scor": [724, 964], "mcc": [725, 964, 1019], "baldi": 725, "brunak": 725, "chauvin": 725, "andersen": [725, 1019], "nielsen": [725, 1013], "gorodkin": 725, "jurman": 725, "riccadonna": 725, "furlanello": 725, "cen": 725, "mape": [728, 964], "3273": 728, "5515": 728, "6198": 728, "112589990684262": 728, "0568": 729, "4260": [731, 734], "612": 732, "822": 732, "41666667": 732, "825": 732, "msle": [733, 964], "rmsle": 733, "00462428": 733, "08377444": 733, "samplewis": [736, 964], "mcm": [736, 964], "mcm_": 736, "multi_confus": 736, "normalized_discounted_cumulative_gain": 738, "dcg_score": [738, 964, 1012, 1015], "kernel_matrix": [740, 741, 748, 758], "marszalek": [740, 741, 962], "lazebnik": [740, 741, 962], "schmid": [740, 741, 962], "ouvert": [740, 741, 962], "00171412": [740, 741, 962], "cosine_similar": [742, 747, 962, 1010], "dense_output": [743, 749, 874, 919, 1013], "linear_kernel": [743, 747, 962, 1013], "haversine_dist": [744, 1014], "y_norm_squar": 745, "x_norm_squar": [745, 1010], "paired_dist": [745, 751, 760, 1009], "41421356": [745, 751, 967], "ezeiza": 746, "airport": 746, "bueno": 746, "argentina": 746, "gaull": 746, "bsa": 746, "83333": 746, "5166646": 746, "0083899664": 746, "53844117956": 746, "bsas_in_radian": 746, "paris_in_radian": 746, "6371000": 746, "kilomet": 746, "11099": 746, "54035582": 746, "polynomial_kernel": [747, 962], "rbf_kernel": [747, 962, 1009], "laplacian_kernel": [747, 962, 1010], "sigmoid_kernel": [747, 962], "kernal_metr": 747, "sum_over_featur": [750, 1005, 1020], "componentwis": 750, "sq": 751, "dixon": [751, 1015, 1016], "cybernet": 751, "ieeexplor": 751, "4310090": 751, "filter_param": 756, "jth": [756, 760], "tanh": [759, 838, 839, 962, 979], "force_all_finit": [760, 899, 901, 902, 1016, 1019], "distance_metr": [760, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835], "metric_kwarg": [761, 762], "reduce_func": [763, 1016], "d_chunk": 763, "sought": 763, "neigh": [763, 823, 824, 825, 827, 829, 831, 832, 833], "gen": 763, "probas_pr": 764, "warn_for": 765, "shantanu": 765, "godbol": 765, "sunita": 765, "sarawagi": 765, "pig": 765, "948": [767, 964], "max_fpr": [770, 964, 1013], "provost": [770, 964], "ceder": [770, 964], "stern": [770, 964], "fawcett": [770, 771, 964], "874": [770, 771, 964], "generalis": [770, 964, 985], "multioutputclassifi": [770, 810, 812, 814, 964, 1012, 1014, 1015, 1016, 1017], "n_samples_a": [772, 773], "favour": [772, 961, 963, 1014], "mean_prior": 777, "degrees_of_freedom_prior": 777, "verbose_interv": [777, 778], "wishart": 777, "emipr": 777, "precisions_": [777, 778], "precisions_cholesky_": [777, 778, 1019], "converged_": [777, 778], "lower_bound_": [777, 778, 1013], "weight_concentration_prior_": 777, "weight_concentration_": 777, "mean_precision_prior_": 777, "mean_precision_": 777, "mean_prior_": 777, "degrees_of_freedom_prior_": 777, "degrees_of_freedom_": 777, "covariance_prior_": 777, "hagai": 777, "attia": 777, "bgm": 777, "n_dimens": [777, 778], "log_prob": [777, 778], "weights_init": 778, "precisions_init": [778, 1019], "gm": 778, "pre_dispatch": [779, 785, 793, 802, 803, 804, 805, 808, 930, 1008], "error_scor": [779, 782, 783, 785, 793, 803, 804, 805, 808, 953, 1009, 1013, 1017, 1020], "explos": [779, 793, 802, 803, 804], "fitfailedwarn": [779, 782, 783, 785, 793, 803, 804, 805, 808], "param_kernel": [779, 793], "param_degre": 779, "split0_test_scor": [779, 793, 1011], "rank_t": 779, "split1_test_scor": [779, 793], "split0_train_scor": [779, 793, 1011], "split1_train_scor": [779, 793], "mean_train_scor": [779, 793, 1011], "std_train_scor": [779, 793, 1011], "split0_test_precis": [779, 793], "mean_train_precis": [779, 793], "best_estim": [779, 782, 783, 793], "scorer_": [779, 782, 783, 793], "n_splits_": [779, 782, 783, 793], "refit_time_": [779, 782, 783, 793, 1013], "multimetric_": [779, 782, 783, 793], "parametergrid": [779, 1007, 1013], "split2_test_scor": 779, "num_sampl": [779, 793, 1020], "stratif": [780, 781, 787, 788, 797, 798, 799, 935, 1014], "group_kfold": 780, "aggressive_elimin": [782, 783, 953], "r0": [782, 783], "replai": [782, 783], "n_remaining_candidates_": [782, 783], "n_candid": [782, 783, 953], "max_resources_": [782, 783], "min_resources_": [782, 783], "n_required_iterations_": [782, 783], "n_possible_iterations_": [782, 783], "exceed": [782, 783, 1011], "n_unique_tick": [785, 805], "n_tick": [785, 805, 808], "errorbar_": 785, "errorbarcontain": 785, "line2d": 785, "fill_between_": 785, "polycollect": 785, "exploit_incremental_learn": [785, 805], "log_scal": 785, "fill_between_kw": 785, "errorbar_kw": 785, "model_selectionkfold": 785, "predispatch": [785, 805, 808], "negat": [785, 964], "neg_": [785, 1011], "combinator": 789, "lpo": 789, "param_list": 791, "rounded_list": 791, "89856": 791, "923223": 791, "878964": 791, "038159": 791, "parametersampl": [793, 1007, 1013, 1017], "2652124": 794, "rskf": 795, "36851234": 795, "sizeabl": [796, 799], "sad": [797, 798], "sss": 799, "checked_cv": 801, "3315057": [803, 804], "08022103": [803, 804], "03531816": [803, 804], "test_r2": 804, "test_auc": 804, "train_r2": 804, "train_auc": 804, "3635": 804, "3573": 804, "6114": 804, "28009951": 804, "3908844": 804, "22784907": 804, "train_sizes_ab": 805, "train_size_ab": 805, "cv_train_scor": 805, "cv_test_scor": 805, "permutation_scor": 806, "n_valu": [808, 1013], "pairwise_indices_": 809, "outputcodeclassifi": [809, 810, 1012, 1017, 1021], "label_binarizer_": 810, "multilabel_": [810, 1010], "onevsoneclassifi": [810, 811, 1006, 1008, 1009, 1011, 1012, 1014, 1017, 1019], "code_s": [811, 965], "code_book_": 811, "bakiri": [811, 965], "pict": [811, 965], "order_": [812, 815], "regressorchain": [812, 814, 1013, 1016, 1020], "jess": [812, 965, 1018], "pfahring": [812, 965], "geoff": [812, 965], "holm": [812, 965], "eib": [812, 965], "8387": 812, "9431": 812, "4576": 812, "8878": 812, "3684": 812, "2640": 812, "0321": 812, "9935": 812, "0625": 812, "y_decis": 812, "load_linnerud": [814, 1011, 1016], "force_alpha": [816, 817, 818, 820, 1020], "lidston": [816, 817, 818, 820, 966], "class_count_": [816, 817, 818, 819, 820], "class_log_prior_": [816, 817, 818, 820], "feature_count_": [816, 818, 820], "feature_log_prob_": [816, 817, 818, 820], "categoricalnb": [816, 818, 819, 820, 966, 1015, 1016, 1017, 1018, 1020], "renni": [816, 818, 966, 1013], "schuetz": [816, 820], "htmledit": [816, 820, 962], "mccallum": [816, 966], "nigam": [816, 966], "metsi": [816, 966], "androutsopoulo": [816, 966], "palioura": [816, 966], "cea": [816, 966], "predict_joint_log_proba": [816, 817, 818, 819, 820, 1020], "min_categori": [817, 1017], "category_count_": 817, "n_categories_": 817, "mirror": [818, 953], "mahout": 818, "weka": 818, "feature_all_": 818, "shih": [818, 966], "teevan": [818, 966], "karger": [818, 966], "616": [818, 966, 974], "623": [818, 966], "jrenni": 818, "icml03": 818, "var_smooth": [819, 1013], "stan": 819, "levequ": [819, 861], "cstr": 819, "epsilon_": 819, "theta_": [819, 966], "clf_pf": 819, "valid_metr": [821, 822, 967], "random_sampl": [821, 822, 826], "19662693": [821, 822], "29473397": [821, 822], "tree_copi": [821, 822], "query_radiu": [821, 822], "count_onli": [821, 822], "kernel_dens": [821, 822], "94114649": [821, 822], "83281226": [821, 822], "2071716": [821, 822], "two_point_correl": [821, 822], "get_arrai": [821, 822], "get_n_cal": [821, 822], "n_call": [821, 822], "get_tree_stat": [821, 822], "tree_stat": [821, 822], "breadth_first": [821, 822, 826], "return_log": [821, 822], "k_true": [821, 822], "k_ret": [821, 822], "breadth": [821, 822, 826, 988, 1007], "dualtre": [821, 822], "sort_result": [821, 822, 829, 831, 832, 833, 1017], "radii": [821, 822], "reset_n_cal": [821, 822], "effective_metric_": [823, 824, 825, 827, 829, 831, 832, 833, 967], "callbl": 823, "effective_metric_params_": [823, 824, 825, 827, 829, 831, 832, 833], "outputs_2d_": [823, 831, 1015], "nearest_neighbor_algorithm": [823, 831, 832], "333": 823, "n_index": [823, 824, 825, 827, 829, 831, 832], "neigh_dist": [823, 824, 825, 827, 829, 831, 832, 833], "neigh_ind": [823, 824, 825, 827, 829, 831, 832, 833], "nearest_neighbors_algorithm": [824, 829], "nearer": [825, 833, 967], "x_dist_graph": 825, "silverman": [826, 1020], "binarytre": [826, 1009, 1013, 1017], "bandwidth_": 826, "log_dens": 826, "52955942": 826, "51462041": 826, "60244657": 826, "logprob": 826, "negative_outlier_factor": 827, "9821": 827, "0370": 827, "3697": 827, "shifted_opposite_lof_scor": 827, "opposite_lof_scor": 827, "narasimhan": 828, "chu": [828, 1021], "shrunken": [828, 1005], "6567": 828, "6572": 828, "nbr": [829, 967], "neighborsclassifi": [829, 831, 832, 833, 1005], "n_features_a": 830, "n_features_b": 830, "goldberg": [830, 967], "neighbourhood": [830, 967], "513": [830, 967], "ncanip": 830, "neighbourhood_components_analysi": 830, "961904": 830, "outlier_label": [831, 1015], "outlier_label_": 831, "33333333": [831, 974], "x_cluster": 833, "warn_when_not_sort": 836, "efficiencywarn": [836, 1020], "sml": [837, 969], "pcd": [837, 969], "sweep": 837, "gibb": [837, 969, 984], "intercept_hidden_": 837, "intercept_visible_": 837, "h_samples_": 837, "osindero": [837, 969], "teh": [837, 969], "1527": 837, "1554": 837, "absp": 837, "fastnc": 837, "tieleman": [837, 969], "v_new": 837, "pseudo_likelihood": 837, "relu": [838, 839], "beta_1": [838, 839], "beta_2": [838, 839], "max_fun": [838, 839, 1015], "n_layer": [838, 839], "neuron": [838, 839, 962, 968], "tan": [838, 839, 968, 1012], "rectifi": [838, 839], "kingma": [838, 839, 968], "diederik": [838, 839, 968, 1020], "jimmi": [838, 839, 968, 1011, 1013], "gradual": [838, 839, 978], "effective_learning_r": [838, 839], "best_loss_": [838, 839, 1020], "ot": 838, "best_validation_score_": [838, 839, 1020], "validation_scores_": [838, 839, 1020], "intercepts_": [838, 839, 968], "n_layers_": [838, 839], "out_activation_": [838, 839], "geoffrei": [838, 839, 968, 1016, 1017, 1018, 1019], "connectionist": [838, 839], "glorot": [838, 839], "xavier": [838, 839, 1013, 1014, 1015, 1017, 1018], "yoshua": [838, 839, 977], "feedforward": [838, 839], "kaim": [838, 839], "delv": [838, 839], "surpass": [838, 839], "imagenet": [838, 839], "log_y_prob": 838, "time_step": 839, "named_transform": [840, 1020], "transform_list": 840, "s__p": 841, "n_transformed_featur": 841, "predict_log_proba_param": 841, "y_log_proba": 841, "predict_proba_param": 841, "analyst": 844, "x_tr": [844, 850, 853, 854, 855, 859, 861, 864, 866, 867, 871, 872], "accept_spars": [845, 901, 902, 1012], "inv_kw_arg": 845, "pickleabl": [845, 1011], "6931": 845, "3862": 845, "onward": [846, 855, 1009], "n_bins_": 846, "int_": 846, "regener": 846, "xinv": 846, "tild": [847, 972, 974], "k_fit_rows_": 847, "k_fit_all_": 847, "1299": [847, 974], "1319": [847, 974], "n_samples1": 847, "n_samples2": 847, "k_new": 847, "neg_label": [848, 865], "y_type_": 848, "sparse_input_": 848, "tokyo": [849, 975], "amsterdam": [849, 975], "max_abs_": 850, "x_std": [851, 867, 974], "data_min_": [851, 1010], "data_max_": [851, 1010], "data_range_": [851, 1010], "unwieldi": 852, "fi": 852, "comedi": 852, "y_indic": 852, "yt": 852, "ands": 852, "feature_name_combin": [854, 1021], "categories_": [854, 855, 862, 974, 1013, 1020], "unregular": [854, 877, 997, 1014], "intact": [854, 999], "infrequ": [854, 855, 862, 964, 1005, 1019, 1020, 1021], "infrequent_if_exist": [854, 974], "x_6": 854, "x_7": 854, "drop_idx_": [854, 1016, 1020], "drop_idx": 854, "gender_femal": 854, "gender_mal": 854, "group_1": 854, "group_2": 854, "group_3": 854, "drop_enc": [854, 974], "drop_binary_enc": 854, "custom_combin": 854, "custom_fnames_enc": 854, "x0_str_femal": 854, "x0_str_male": 854, "x1_int_1": 854, "x1_int_2": 854, "x1_int_3": 854, "oh": [854, 1015], "infrequent_sklearn": [854, 974], "n_encoded_featur": [854, 855], "bpo": 855, "43475": 855, "lenient": [855, 985], "min_degre": [856, 1018], "max_degre": [856, 1018], "powers_": 856, "n_output_features_": 856, "nystrom": [856, 1014, 1015], "featurewis": 857, "power_transform": [857, 870, 1013], "biometrika": [857, 869], "959": [857, 869], "386": 857, "707": [857, 869], "ignore_implicit_zero": [858, 870], "landmark": [858, 870, 974], "n_quantiles_": 858, "quantiles_": [858, 974, 1015], "references_": 858, "robustscal": [858, 871, 954, 974, 1010, 1011, 1013, 1015, 1016, 1017, 1021], "with_cent": [859, 871], "with_scal": [859, 871], "unit_vari": [859, 871, 1017], "iqr": [859, 871], "interquartil": [859, 871], "quartil": 859, "75th": 859, "q_min": [859, 871], "q_max": [859, 871], "center_": 859, "robust_scal": [859, 870, 1013], "interquartile_rang": 859, "bspline": 860, "n_features_out_": 860, "with_std": [861, 872, 974, 1013], "n_samples_seen": 861, "5a": 861, "randal": [861, 1009, 1019], "242": [861, 1005], "247": 861, "mic": [862, 974], "target_mean_": [862, 974], "target_type_": 862, "encodings_": 862, "micci": [862, 974], "barreca": [862, 974], "newsl": [862, 974], "enc_auto": 862, "enc_high_smooth": 862, "enc_low_smooth": 862, "ahead": 865, "return_norm": [868, 1012], "notimplementederror": [868, 1012], "compute_inverse_compon": [873, 874, 976], "inverse_components_": [873, 874, 976, 1019], "2759": [873, 874], "afor": [873, 874], "baserandomproject": [873, 874], "ping": [874, 976, 1011, 1012], "density_": 874, "gaussianrandomproject": [874, 976, 1006, 1019, 1021], "church": [874, 976], "kdd06_rp": 874, "cgi": 874, "uoa": 874, "gr": 874, "opta": 874, "0182": 874, "e2": [875, 960], "93lindenstrauss_lemma": 875, "sanjoi": [875, 976], "anupam": [875, 976, 1020], "gupta": [875, 976, 1012, 1013, 1016, 1017, 1018, 1019, 1021], "elementari": [875, 976], "663": [875, 972, 976], "11841": [875, 976], "1112658": [875, 976], "7894": [875, 976], "9868": [875, 976], "steadi": [876, 877], "baselabelpropag": [876, 1012], "xiaojin": 876, "zoubin": 876, "ghahramani": 876, "cmu": 876, "cald": 876, "carnegi": 876, "mellon": 876, "jerryzhu": 876, "label_prop_model": [876, 877], "clamp": [877, 977], "dengyong": 877, "bousquet": 877, "navin": 877, "lal": 877, "schoelkopf": 877, "termination_condition_": 878, "no_chang": 878, "all_label": 878, "33rd": [878, 977], "acl": [878, 977, 978], "stroudsburg": [878, 977], "196": [878, 977], "crammer_sing": [881, 965, 979, 1005], "seldom": 881, "readonli": [881, 882, 1018, 1020, 1021], "raw_coef_": [881, 882], "smo": [881, 882], "1693": 881, "unsur": 882, "582": 882, "class_weight_": [883, 884, 885, 886, 887, 1020], "n_sv": [883, 884, 885, 886, 887, 979, 1015], "fit_status_": [883, 884, 885, 886, 887], "n_support_": [883, 884, 885, 886, 887, 979, 1015], "proba_": [883, 886, 1016], "probb_": [883, 886, 1016], "shape_fit_": [883, 884, 885, 886, 887], "n_dimensions_of_x": [883, 884, 885, 886, 887], "7798": 885, "0547": 885, "0556": 885, "0561": 885, "7332": 885, "unshift": 885, "impract": 886, "tube": [887, 979], "_tree": [889, 890, 891, 892, 1006, 1008], "decision_tree_learn": [889, 890, 980], "olshen": [889, 890, 980], "wadsworth": [889, 890, 980], "belmont": [889, 890, 980], "cutler": [889, 890], "cc_home": [889, 890], "htm": [889, 890], "ccp_path": [889, 890, 891, 892], "get_depth": [889, 890, 891, 892, 1014], "get_n_leav": [889, 890, 891, 892, 1014], "extra_tre": [891, 892], "8947": 891, "decision_tre": [893, 894, 895, 980], "out_fil": [893, 980], "leaves_parallel": 893, "special_charact": [893, 980], "fontnam": [893, 1018], "helvetica": [893, 895], "graphviz": [893, 980], "postscript": 893, "tpng": 893, "paint": [893, 895], "dot_data": [893, 980], "digraph": 893, "show_weight": 894, "feature_0": 894, "unrepresent": 896, "keyerror": [896, 1015], "popitem": 896, "lifo": 896, "input_nam": [900, 902, 927, 1019], "accept_large_spars": [901, 902, 1013], "ensure_2d": [901, 902], "allow_nd": [901, 902], "ensure_min_sampl": [901, 902], "ensure_min_featur": [901, 902], "y_numer": 901, "bsr": [901, 902, 1018], "x_convert": 901, "y_convert": 901, "array_convert": 902, "min_val": 905, "max_val": 905, "include_boundari": [905, 1019], "y_org": 906, "class_weight_vect": 906, "king": 906, "zen": 906, "sample_weight_vect": 907, "parenthes": 908, "type_filt": 910, "generate_onli": [912, 1015], "checks_gener": 912, "test_check_estim": 913, "check_estimators_fit_returns_self": 913, "array_lik": 916, "logdet": 916, "slogdet": 916, "6375861597263857": 916, "flip_sign": 918, "svd_lapack_driv": 918, "gesdd": 918, "p5": 918, "transposit": 918, "gesvd": 918, "conquer": 918, "unitari": 918, "vh": 918, "dot_product": 919, "deweight": 920, "min_batch_s": 921, "n_pack": [921, 922], "path_length": 923, "sliceabl": 924, "truthi": 925, "helloifeven": 925, "_x_is_even": 925, "say_hello": 925, "temp_fold": 930, "max_nbyt": 930, "1m": 930, "mmap_mod": 930, "dispatch_next": 930, "dispatch_one_batch": 930, "unprotect": 930, "prefetch": 930, "print_progress": 930, "inner_max_num_thread": 932, "backend_param": 932, "register_parallel_backend": [932, 1013], "pyiodin": 932, "dask": [932, 985, 1013], "workload": [932, 984], "register_rai": 932, "backend_nam": 932, "oversubscript": [932, 1019], "threadpool": 932, "effective_n_job": 932, "tracking_select": 933, "reservoir_sampl": 933, "reservoir": 933, "make_default": 934, "parallelbackendbas": 934, "resampled_arrai": 935, "3x2": [935, 938], "shuffled_arrai": 938, "last_mean": 939, "last_var": 939, "last_n": 939, "return_sum_weight": 945, "sum_weight": 945, "all_or_ani": [948, 1015], "is_fit": 948, "__sklearn_is_fitted__": [948, 1018, 1019], "eg": 948, "substitut": [948, 985, 1011], "raise_except": 950, "array_sym": 950, "is_paramet": 952, "enclos": 953, "set_stat": 953, "bergstra": [953, 1005, 1006], "tournament": 953, "dispos": [953, 999], "n_resources_i": 953, "n_resources_0": 953, "n_candidates_i": 953, "n_candidates_0": 953, "r_0": 953, "n_resourc": 953, "983667": 953, "951958": 953, "947958": 953, "961009": 953, "955989": 953, "jamieson": 953, "talwalkar": 953, "desalvo": 953, "rostamizadeh": 953, "hyperband": 953, "bandit": 953, "multimetr": [953, 1015, 1020], "calibrated_forest": 953, "select__k": 953, "model__estimator__max_depth": 953, "imp": 954, "sophist": [954, 966], "14338": 954, "13286": 954, "15611": 954, "amelia": 954, "scientist": [954, 988], "roderick": 954, "rubin": 954, "1986": [954, 980], "ol2001": 954, "mask_missing_values_onli": 954, "mask_al": 954, "rr2007": 956, "2x_iy_i": 956, "vz2010": 956, "vvz2010": 956, "prod_i": 956, "ls2010": 956, "c_0": [956, 962], "tensorsketch": 956, "pp2013": 956, "wikic": 956, "ccf2002": 956, "mercer": 956, "langl": [956, 964, 978, 979], "rangl": [956, 964, 978, 979], "y_j": [956, 964, 966, 979], "obviat": 956, "dagm": 956, "vempati": 956, "jawahar": 956, "charikar": 956, "farach": 956, "colton": 956, "m2012": 957, "mu_k": 958, "cst": 958, "omega_": 958, "k0": 958, "h_l": 958, "extrema": 958, "119": [958, 1008], "honei": 958, "stork": 958, "dilemma": 959, "valid_scor": 959, "w_0": 960, "w_p": 960, "x_p": 960, "34545455": 960, "13636": [960, 1014], "rifkin": 960, "lippert": 960, "2n_": 960, "softw": 960, "kim": [960, 1013, 1014, 1015, 1019], "koh": [960, 988], "lustig": 960, "boyd": 960, "gorinevski": 960, "c_p": 960, "cherkasski": 960, "yunqian": 960, "1691": 960, "1714": 960, "ell_2": 960, "equiangular": 960, "weisberg": 960, "ell_0": [960, 964], "_coef": 960, "mp": 960, "ell_": 960, "posteriori": [960, 966], "radford": 960, "neal": [960, 1018], "50000013": 960, "49999993": 960, "lambda_i": [960, 974], "srikantan": 960, "tristan": 960, "fletcher": [960, 1005, 1009], "nomenclatur": [960, 1011], "deliber": 960, "overparameter": 960, "ldot": [960, 964, 966, 968, 978], "w_l": 960, "min_w": 960, "iverson": 960, "broyden": 960, "goldfarb": 960, "shanno": 960, "shortcom": 960, "statsmodel": [960, 984], "aaron": [960, 1008, 1009, 1010, 1015], "simon": [960, 988, 1008, 1009, 1018, 1019, 1020], "93fletcher": 960, "93goldfarb": 960, "93shanno_algorithm": 960, "noah": 960, "multirespons": 960, "edm": 960, "agricultur": 960, "rainfal": 960, "bernouli": 960, "fraud": [960, 988], "cash": 960, "fraudul": [960, 988], "interrupt": 960, "drug": 960, "cure": 960, "entertain": 960, "mccullagh": 960, "nelder": 960, "boca": 960, "raton": 960, "chapman": 960, "hall": [960, 1012, 1016], "crc": 960, "31760": 960, "j\u00f8rgensen": 960, "monografia": 960, "matem\u00e1tica": 960, "2463": 960, "4337": 960, "7638": 960, "disappear": [960, 1005], "photogrammetr": 960, "hypothes": 960, "paradigm": 960, "cartographi": 960, "fischler": 960, "boll": 960, "sunglok": 960, "choi": 960, "taemin": 960, "wonpil": 960, "93sen_estim": 960, "binom": 960, "infeas": [960, 967, 969], "k\u00e4rkk\u00e4inen": 960, "\u00e4yr\u00e4m\u00f6": 960, "h_": 960, "oarc": 960, "dae": 960, "bassett": 960, "jr": 960, "econometrica": 960, "econometr": 960, "portnoi": 960, "hare": 960, "tortois": 960, "paraboloid": 960, "w_3": 960, "w_4": 960, "w_5": 960, "z_1": 960, "z_2": 960, "z_3": 960, "z_4": 960, "z_5": 960, "streamlin": 960, "gotten": [960, 974], "necess": [961, 967], "strife": 961, "mother": 961, "baloo": 961, "song": 961, "jungl": 961, "rubric": 961, "defici": [961, 978], "hlle": 961, "revolv": 961, "belkin": 961, "niyogi": 961, "1373": 961, "1396": 961, "molecul": 961, "jk": 961, "delta_": 961, "c_1": 961, "disentangl": 961, "legitim": 961, "die": 961, "noisier": 961, "5415": 961, "brief": 962, "num_featur": [962, 1020], "quantum": 962, "nutshel": 962, "36787944": 962, "89483932": 962, "58364548": 962, "51341712": 962, "83822343": 962, "7768366": 962, "facil": 963, "equi": 963, "agnost": [963, 972], "cue": 963, "came": 963, "quicker": 963, "unpract": 963, "analogi": [963, 964], "top_k_accuraci": 964, "top_k_accuracy_scor": [964, 1017, 1019], "neg_brier_scor": [964, 1015], "f1_micro": [964, 1009], "f1_weight": [964, 1009], "f1_sampl": 964, "neg_log_loss": 964, "roc_auc_ovr": [964, 1015], "roc_auc_ovo": [964, 1015], "roc_auc_ovr_weight": [964, 1015], "roc_auc_ovo_weight": [964, 1015], "explained_variance_scor": [964, 1008, 1012, 1019], "max_error": [964, 1014], "neg_mean_squared_log_error": 964, "mean_squared_log_error": [964, 1012, 1018], "neg_median_absolute_error": 964, "neg_mean_poisson_devi": 964, "neg_mean_gamma_devi": 964, "mean_gamma_devi": [964, 1015], "d2_pinball_scor": [964, 1019], "d2_tweedie_scor": [964, 1018], "invalidparametererror": 964, "_error": 964, "my_custom_loss_func": 964, "693": 964, "protocol": [964, 1008, 1021], "custom_scoring_funct": 964, "custom_scorer_modul": 964, "confusion_matrix_scor": 964, "test_tp": 964, "test_fn": 964, "untru": 964, "dividend": 964, "divisor": 964, "quotient": 964, "texttt": 964, "_class": 964, "youden": 964, "informed": 964, "mosley2013": 964, "kelleher2015": 964, "guyon2015": 964, "urbanowicz2015": 964, "escalant": 964, "escalera": 964, "maci\u00e0": [964, 1018, 1020], "saeed": 964, "statnikov": 964, "viega": 964, "chalearn": 964, "automl": [964, 984], "ijcnn": 964, "moslei": 964, "ijcv": 964, "urbanowicz": 964, "exstrac": 964, "evol": 964, "intel": [964, 984], "cohen_kappa_scor": [964, 1010, 1012], "4285714285714286": 964, "manning2008": 964, "everingham2010": 964, "davis2006": 964, "flach2015": 964, "everingham": 964, "gool": 964, "winn": 964, "pascal": 964, "voc": 964, "goadrich": 964, "y_l": 964, "_l": 964, "emptyset": 964, "f_beta": 964, "hinge_loss": [964, 1009, 1017, 1018], "ne": [964, 967], "1738": 964, "matthews_corrcoef": [964, 1005, 1011, 1012, 1019], "t_k": [964, 980], "ik": 964, "ki": 964, "kk": 964, "auroc": 964, "ht2001": 964, "fc2009": 964, "pd2000": 964, "f2006": 964, "f2001": 964, "inner_clf": 964, "c\u00e8sar": 964, "hernandez": 964, "orallo": 964, "modroiu": 964, "wikipediadet2017": 964, "martin1997": 964, "navratil2007": 964, "consult": 964, "encyclopedia": 964, "utc": 964, "php": [964, 984], "detection_error_tradeoff": 964, "oldid": 964, "798982054": 964, "doddington": 964, "kamm": 964, "ordowski": 964, "przybocki": 964, "navractil": 964, "klusacek": 964, "acoust": 964, "icassp": 964, "honolulu": 964, "229": 964, "232": 964, "brier1950": 964, "p_i": [964, 967, 980], "bella2012": 964, "flach2008": 964, "bella": 964, "hern\u00e1ndez": 964, "ram\u00edrez": 964, "quintana": 964, "khosrow": 964, "pour": 964, "hershei": 964, "edson": [964, 1010], "matsubara": 964, "dagstuhl": 964, "seminar": 964, "schloss": 964, "leibniz": 964, "zentrum": 964, "lr_": 964, "brenner": 964, "gefel": 964, "991": 964, "coverage_error": [964, 1009, 1019], "label_ranking_average_precision_scor": [964, 1009, 1013, 1014, 1020], "label_ranking_loss": [964, 1010], "grade": 964, "unalt": 964, "epsilon_i": 964, "908": 964, "925": [964, 994], "7083": 964, "log_": 964, "growth": [964, 980, 1010, 1011], "commod": 964, "mapd": 964, "2e6": 964, "2666": 964, "y_n": [964, 968, 978], "elicit": 964, "2500": 964, "mean_pinball_loss_95p": 964, "skill": 964, "mcfadden": 964, "d2_tweedie_score_15": 964, "d2_pinball_score_08": 964, "heteroschedast": 964, "homoschedast": 964, "pear": 965, "y_dens": 965, "y_spars": 965, "advoc": 965, "financ": 965, "f3": 965, "y3": 965, "multi_target_forest": 965, "75474165": 965, "03498585": 965, "03812219": 965, "12165031": 965, "12914884": 965, "46081961": 965, "8948621": 965, "44373091": 965, "88978285": 965, "62745778": 965, "02891072": 965, "48204257": 965, "03260883": 965, "34867495": 965, "52003279": 965, "92529176": 965, "25719016": 965, "84253": 965, "25193977": 965, "16443186": 965, "12274212": 965, "170388": 965, "80956739": 965, "16979946": 965, "72667194": 965, "50941682": 965, "50447799": 965, "149": [965, 1005], "37967282": 965, "15699552": 965, "72850319": 965, "prod_": 966, "downarrow": 966, "spite": 966, "famous": 966, "serious": 966, "flair": 966, "2_y": 966, "mu_i": 966, "sigma_i": [966, 974], "theta_i": 966, "cnb": 966, "mnb": 966, "inventor": 966, "alpha_i": [966, 979], "cj": [966, 1008, 1009, 1010, 1011, 1012], "summat": [966, 968], "min_c": 966, "t_i": 966, "poorest": 966, "n_i": [966, 974], "satellit": 967, "kdt": 967, "farawai": 967, "invent": 967, "orthotrop": 967, "bentlei": 967, "1975": 967, "omohundro": 967, "characteris": 967, "unaffect": 967, "amort": 967, "cache_path": 967, "gettempdir": 967, "unsort": [967, 1006, 1009, 1013], "5807": 967, "nca_pip": 967, "96190476": 967, "limits_": 967, "lx": 967, "x_m": 968, "leftmost": 968, "w_1x_1": 968, "w_2x_2": 968, "w_mx_m": 968, "backpropag": 968, "998": 968, "b_1": 968, "b_2": 968, "z_l": 968, "dfrac": [968, 974], "nabla": 968, "deduct": [968, 980], "rumelhart": 968, "jiquan": 968, "ngiam": 968, "chuan": 968, "yifan": 968, "carolin": 968, "suen": 968, "backprop": [968, 978], "lecun": [968, 978], "orr": [968, 978], "strai": 969, "v_ih_j": 969, "b_iv_i": 969, "c_jh_j": 969, "h_j": 969, "v_i": [969, 980], "b_i": 969, "sum_h": 969, "fantasi": 969, "particl": 969, "thoroughli": 969, "hereund": 970, "1443": 970, "1471": 970, "outlying": 970, "h2009": 971, "g2015": 971, "absurd": 971, "m2019": 971, "bike": 971, "mc_clf": 971, "466": 971, "overlaid": 971, "obscur": 971, "cice": [971, 1019], "pd_": 971, "dx_c": 971, "footnot": [971, 984], "opaqu": 972, "x_val": 972, "y_val": 972, "356": 972, "probe": 972, "204": [972, 977], "050": 972, "048": 972, "056": 972, "r_multi": 972, "081": 972, "1013": 972, "866": 972, "246": [972, 1005], "445": 972, "726": 972, "022": 972, "277": [972, 1007], "i_j": 972, "min_max_scal": [974, 1010], "x_train_minmax": 974, "x_test_minmax": 974, "max_abs_scal": 974, "x_train_maxab": 974, "x_test_maxab": 974, "excess": [974, 1012], "unintention": 974, "kernelcenter": [974, 1015, 1019], "semidefinit": [974, 979], "scholkopf1998": 974, "1_": 974, "x_train_tran": 974, "x_test_tran": 974, "8pt": 974, "x_normal": 974, "firefox": 974, "chrome": 974, "safari": 974, "africa": 974, "dragon": 974, "lexicon": 974, "par": 974, "sigma_c": 974, "tau": 974, "l_i": 974, "pargent": 974, "pfister": 974, "2671": 974, "2692": 974, "infant": 974, "kid": 974, "teen": 974, "adult": 974, "senior": [974, 988], "citizen": 974, "retbin": 974, "x_1x_2": 974, "x_1x_3": 974, "x_2x_3": 974, "x_1x_2x_3": 974, "rung": 974, "eiler": 974, "marx": 974, "perperogl": 974, "sauerbrei": 974, "abrahamowicz": 974, "bmc": 974, "methodol": 974, "38629436": 974, "sixteenth": 976, "uai": 976, "craig": [976, 1008, 1013], "boutili": 976, "mois\u00e9": 976, "goldszmidt": 976, "morgan": [976, 980, 982], "kaufmann": [976, 980, 1017], "ella": 976, "bingham": 976, "heikki": 976, "mannila": 976, "245": [976, 1007], "explic": 976, "3947": 976, "687": 976, "kenneth": [976, 1005, 1006, 1011, 1012, 1019, 1020], "12th": 976, "296": 976, "x_new_invers": 976, "x_new_again": 976, "delalleau": 977, "216": 977, "aistat": 977, "gatsbi": 977, "ucl": 977, "uk": [977, 999], "fullpap": 977, "xi_i": 978, "slack": 978, "varepsilon": [978, 979], "t_0": 978, "l\u00e9on": [978, 1019, 1020, 1021], "_init_t": 978, "basesgd": 978, "eta_0": 978, "_t": 978, "svmsgd": 978, "pegaso": 978, "srebro": 978, "tsuruoka": 978, "tsujii": 978, "ananiad": 978, "afnlp": 978, "lin_clf": 979, "grasp": [979, 985], "sv": 979, "builtin": 979, "qp": 979, "linear_svc": 979, "gram_train": 979, "gram_test": 979, "zeta": 979, "zeta_i": 979, "textrm": [979, 997], "q_": 979, "equiv": [979, 980], "reparameter": 979, "wu": [979, 1009, 1017], "weng": 979, "1005": 979, "rong": 979, "aug": 979, "1871": 979, "1874": 979, "ofmulticlass": 979, "fitter": 980, "pariti": 980, "multiplex": 980, "export_graphviz": [980, 1010, 1012, 1018, 1020], "iris_flower_data_set": 980, "export_text": [980, 1014, 1021], "dumont": 980, "subwindow": 980, "beforehand": 980, "dichotomis": 980, "quinlan": 980, "multiwai": 980, "topdown": 980, "backtrack": 980, "reconsid": 980, "targe_tattribut": 980, "target_attribut": 980, "mathit": 980, "examples_": 980, "oplu": 980, "ominu": 980, "IN": 980, "halt": 980, "proprietari": 980, "ruleset": 980, "q_m": 980, "n_m": 980, "t_m": 980, "setminu": 980, "mk": 980, "_m": 980, "ge0": 980, "widetild": 980, "tradition": 980, "t_t": 980, "eff": 980, "predictive_analyt": 980, "troubleshoot": 982, "artwork": 982, "fund": 982, "spotifi": 982, "betawork": 982, "evernot": 982, "aweb": 982, "yhat": 982, "rangespan": 982, "birchbox": 982, "bestofmedia": 982, "phimeca": 982, "howaboutw": 982, "peerindex": 982, "datarobot": 982, "okcupid": 982, "love": [982, 999], "publica": 982, "machinali": 982, "solido": 982, "infonea": 982, "dataiku": 982, "otto": 982, "zopa": 982, "bnp": 982, "pariba": 982, "cardif": 982, "post1": [982, 1003], "foot": 983, "gear": 983, "neuroimag": [983, 988], "astronom": 983, "pycon": 983, "thirti": 983, "nyc": [983, 988], "sister": 984, "sklearn_panda": 984, "sklearn_xarrai": 984, "xarrai": 984, "autoviml": 984, "tpot": 984, "featuretool": 984, "tempor": [984, 985], "neuraxl": 984, "neat": [984, 1005], "checkpoint": 984, "funki": 984, "saver": 984, "evalml": 984, "neptun": 984, "mlop": 984, "sacr": 984, "dtreeviz": 984, "eli5": 984, "mlxtend": 984, "yellowbrick": 984, "deap": 984, "evolutionari": 984, "interchang": 984, "skop": [984, 1001], "jpmml": 984, "porter": 984, "transpil": 984, "javascript": 984, "m2cgen": 984, "dart": 984, "haskel": 984, "rust": 984, "treelit": 984, "intelex": 984, "tslearn": 984, "sktime": 984, "hmmlearn": 984, "pomegran": 984, "crfsuit": 984, "skforecast": 984, "nolearn": 984, "lasagn": 984, "theano": 984, "skorch": 984, "scikera": 984, "scikit_learn": 984, "feder": 984, "lego": 984, "subsembl": 984, "lightn": 984, "sdca": 984, "adagrad": 984, "svrg": 984, "nadaraya": 984, "gplearn": 984, "genet": 984, "multilearn": 984, "seglearn": 984, "libopf": 984, "fastfm": 984, "kmode": 984, "sphereclust": 984, "mise": 984, "giotto": 984, "tda": 984, "pymc": 984, "censor": 984, "lightfm": 984, "openrec": 984, "spotlight": 984, "gensim": 984, "nilearn": 984, "neuro": 984, "astroml": 984, "astronomi": 984, "msmbuilder": 984, "dissemin": 984, "chines": 984, "persian": 984, "spanish": 984, "korean": 984, "disclaim": 984, "promis": 985, "eleven": 985, "incept": 985, "scala": 985, "reinforc": 985, "era": 985, "7242": 985, "12147": 985, "5523": 985, "10733": 985, "13902": [985, 1015], "12800": 985, "12866": 985, "15550": 985, "5853": 985, "11805": 985, "15319": 985, "11977": 985, "12852": [985, 1015], "13911": [985, 1015], "amput": 985, "6284": 985, "beginn": 985, "priorit": [985, 1012], "4497": 985, "7646": 985, "6425": 985, "6424": 985, "8480": 985, "6231": 985, "8100": 985, "6599": 985, "6715": 985, "14582": 985, "3855": 985, "13227": 985, "6323": 985, "14180": [985, 1016], "9173": 985, "13146": [985, 1015], "8614": 985, "7608": 985, "5082": 985, "8243": 985, "searchgrid": 985, "6929": 985, "__array_function__": [985, 1015], "etl": [985, 988], "8370": 985, "6451": 985, "lifecycl": 985, "8157": 985, "7382": 985, "drift": 985, "11047": [985, 1015], "9326": 985, "slep011": 985, "1626": 985, "10463": 985, "id3": [986, 1001], "cart": [986, 1001], "touch": 987, "savetxt": 987, "cloneabl": 987, "datafil": 987, "printabl": 987, "indispens": 988, "stephen": [988, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018], "simmon": 988, "vp": 988, "athena": 988, "music": 988, "bernhardsson": 988, "pariet": [988, 1005], "lear": 988, "visag": 988, "fantast": 988, "startup": 988, "bitli": 988, "chartbeat": 988, "digg": [988, 1012], "poncho": 988, "gilad": 988, "lotan": 988, "chief": 988, "chat": 988, "bread": 988, "butter": 988, "chaumond": [988, 1013], "offic": 988, "ayzenshtat": [988, 1013], "undergrad": 988, "professor": 988, "hotel": 988, "destin": 988, "agent": 988, "melani": [988, 1012, 1013], "awesom": 988, "stuff": 988, "randomizedpca": [988, 1005, 1007, 1008, 1010, 1011, 1012], "boston": 988, "mdbecker": 988, "pydata_2013": 988, "ninja": 988, "thorough": 988, "notch": 988, "production": 988, "greg": [988, 1011, 1012, 1014, 1015], "lamp": 988, "founder": 988, "prototyp": 988, "jurgen": 988, "director": 988, "commerc": 988, "inventori": 988, "bertin": 988, "mahieux": 988, "invalu": 988, "vijai": [988, 1008], "traine": 988, "impress": 988, "traffic": 988, "tenur": 988, "matchmak": 988, "weitzenfeld": 988, "tweet": 988, "ferenc": 988, "huszar": 988, "shop": 988, "ourselv": 988, "jeremi": [988, 1010, 1011, 1012, 1013, 1016, 1017], "achin": 988, "ceo": 988, "marketplac": 988, "frid": [988, 1008], "radar": 988, "partnership": 988, "lebourgeoi": 988, "charron": [988, 1008, 1009, 1016, 1017, 1018], "cornerston": 988, "sheep": 988, "featureforg": 988, "rafael": [988, 1006, 1007, 1009, 1012], "carrascosa": [988, 1009], "law": 988, "semiconductor": 988, "fab": [988, 1015, 1016], "bleed": 988, "chip": 988, "smartphon": 988, "automobil": 988, "trent": [988, 1011], "mcconaghi": 988, "rapid": 988, "immens": 988, "thorsten": 988, "kranz": 988, "coma": 988, "dss": 988, "douetteau": 988, "b2c": 988, "retail": 988, "palladium": 988, "rammig": [988, 1011], "peer": 988, "billion": 988, "gbp": 988, "grate": 988, "vlasio": [988, 1012], "vasilei": [988, 1012], "petfood": 988, "cocoa": 988, "worldwid": 988, "toolset": 988, "equip": 988, "fitzk": 988, "sr": 988, "fondat": 988, "s\u00e9bastien": [988, 1011, 1013], "conort": 988, "salmon": 990, "nine": 990, "sentiment": 991, "cli": 991, "doctest_mod": 991, "hardest": 992, "tightli": 993, "knit": 993, "x_fold": 994, "array_split": 994, "y_fold": 994, "train_indic": 994, "test_indic": 994, "922": 994, "930": 994, "96388889": 994, "92222222": 994, "9637883": 994, "93036212": 994, "96578289": 994, "92708922": 994, "96681476": 994, "96362897": 994, "93192644": 994, "0077": 994, "943": 994, "944": 994, "00375": 994, "lfw_": 995, "_lfw": 995, "gerhard_schroed": 995, "donald_rumsfeld": 995, "tony_blair": 995, "colin_powel": 995, "george_w_bush": 995, "estimated_param_": 996, "iris_x": 997, "iris_i": 997, "iris_x_train": 997, "iris_y_train": 997, "iris_x_test": 997, "iris_y_test": 997, "pave": 997, "paltri": 997, "exabyt": 997, "30349955": 997, "63931533": 997, "53060544": 997, "73698041": 997, "13170937": 997, "81458798": 997, "84845219": 997, "60648906": 997, "51961675": 997, "09517222": 997, "585": 997, "5854": 997, "5855": 997, "occam": 997, "razor": 997, "best_alpha": [997, 1005], "025118864315095794": 997, "knew": 998, "taxonomist": 998, "face_compress": 998, "x_approx": 998, "images_approx": 998, "18565811e": 998, "19346747e": 998, "43026679e": 998, "text_analyt": 999, "skeleton": [999, 1008], "sklearn_tut_workspac": 999, "cp": 999, "work_directori": 999, "tutorial_hom": 999, "fetch_data": 999, "lang": 999, "newsweed": 999, "netnew": 999, "bydat": 999, "twenty_train": 999, "holder": 999, "2257": 999, "sd345": 999, "collier": 999, "laserjet": 999, "iii": [999, 1019], "hampton": 999, "4gb": 999, "count_vect": 999, "x_train_count": 999, "35788": 999, "4690": 999, "downscal": 999, "tf_transform": 999, "x_train_tf": 999, "tfidf_transform": 999, "x_train_tfidf": 999, "na\u00efv": 999, "docs_new": 999, "opengl": 999, "x_new_count": 999, "x_new_tfidf": 999, "text_clf": 999, "twenty_test": 999, "docs_test": 999, "8348": 999, "9101": [999, 1013], "1502": 999, "tfidf__use_idf": 999, "searcher": 999, "gs_clf": 999, "workspac": 999, "fear": 999, "fire": 999, "exercise_xx_script": 999, "arg1": 999, "arg2": 999, "arg3": 999, "mortem": 999, "charngramanalyz": 999, "exercise_01_language_train_model": 999, "exercise_02_senti": 999, "movie_review": 999, "txt_sentoken": 999, "cpickl": 999, "polar": 999, "subtleti": 1001, "subscrib": 1003, "gzip": 1005, "bzip2": 1005, "decompress": 1005, "auc_scor": [1005, 1007], "kernc": [1005, 1019, 1020], "led": 1005, "probabilisticpca": [1005, 1008], "hmm": [1005, 1006, 1007, 1008, 1010], "gaussianhmm": 1005, "multinomialhmm": 1005, "n_gram_rang": 1005, "alexi": [1005, 1008, 1009, 1012], "mignon": [1005, 1008, 1009, 1012], "subhodeep": [1005, 1006, 1007], "moitra": [1005, 1006, 1007], "yannick": [1005, 1007], "schwartz": [1005, 1007, 1019], "duckworth": 1005, "benediktsson": [1005, 1006, 1007], "marko": [1005, 1014, 1015], "burjek": 1005, "pinto": 1005, "abraham": [1005, 1006, 1011, 1015], "hoenig": 1005, "flyingimmidev": 1005, "francoi": [1005, 1018], "savard": 1005, "hann": 1005, "schulz": 1005, "welind": 1005, "companioni": 1005, "brandyn": 1005, "bussonni": [1005, 1017], "matthia": [1005, 1007, 1008, 1011, 1012, 1013, 1017, 1020], "pierr": [1005, 1013, 1014, 1016, 1018, 1020], "astolfi": 1005, "huiginn": 1005, "goodman": [1005, 1010], "ludwig": 1005, "schwardt": 1005, "hervieu": 1005, "sergio": [1005, 1007, 1008, 1017, 1020], "medina": [1005, 1007], "sheerman": 1005, "buguen": 1005, "seq_dataset": [1005, 1015], "weight_vector": [1005, 1015], "reuben": 1005, "costin": 1005, "_basehmm": 1005, "neighborsregressor": 1005, "gone": [1005, 1006], "vbgmm": [1005, 1009, 1011], "_pvalu": 1005, "charset": [1005, 1007], "test_fract": 1005, "train_fract": 1005, "198": 1005, "marek": 1005, "fcostin": 1005, "adrien": 1005, "gaidon": 1005, "joona": 1005, "sillanp\u00e4\u00e4": 1005, "mccarthi": [1005, 1013], "roi": [1005, 1019], "hyunjin": 1005, "ibay": 1005, "scheidegg": 1005, "clair": 1005, "revillet": 1005, "conrad": [1005, 1006, 1020], "meng": [1005, 1006, 1009, 1011, 1012], "xinfan": [1005, 1006, 1009], "udi": 1005, "weinsberg": 1005, "janso": 1005, "palafox": 1005, "overwrite_": 1005, "copy_": 1005, "buffer_mb": 1005, "sparse_encode_parallel": 1005, "accident": [1005, 1009, 1014], "basedictionarylearn": 1005, "sparsecodingmixin": 1005, "fast_svd": 1005, "arnold": [1005, 1006], "bala": [1005, 1008], "subrahmanyam": [1005, 1008], "varanasi": [1005, 1008], "draxu": 1005, "eickenberg": [1005, 1007, 1008, 1009, 1010], "bogdan": 1005, "trach": 1005, "f\u00e9lix": [1005, 1007, 1008, 1009, 1013], "antoin": [1005, 1007, 1008, 1009, 1012], "fortin": [1005, 1007, 1008, 1009], "manuel": [1005, 1009, 1013, 1014, 1017, 1018], "caicedo": 1005, "carvaj": 1005, "tiziano": 1005, "zito": [1005, 1018], "jean": [1005, 1008, 1009, 1010, 1011, 1012, 1018], "kossaifi": [1005, 1009, 1010], "thumbnail": 1005, "univariate_select": 1005, "mldata": [1005, 1013], "pietro": [1005, 1008], "berk": 1005, "macosx": 1005, "xarg": 1005, "bscikit": 1005, "cross_val": 1005, "bcross_val": 1005, "lurk": 1005, "l1_distanc": 1005, "168": 1005, "andi": [1005, 1012], "amit": [1005, 1019, 1020], "salvator": [1005, 1019, 1020], "masecchia": 1005, "schut": 1005, "metaireau": [1005, 1008], "bryan": [1005, 1008, 1014, 1015, 1018], "silverthorn": 1005, "minwoo": 1005, "luca": [1005, 1015, 1016, 1017, 1018], "wiman": 1005, "schl\u00fcter": [1005, 1013], "malet": 1005, "miott": [1005, 1008], "feth": 1005, "arezki": 1005, "yamin": 1005, "notes_neighbor": 1005, "netbsd": 1005, "kamel": 1005, "ibn": 1005, "hassen": 1005, "derouich": 1005, "virgilefritsch": 1005, "example_gaussian_process_plot_gp_regress": 1005, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1005, "tast": 1005, "2x": 1005, "10x": 1005, "200x": 1005, "ann": [1005, 1017, 1019], "laur": 1005, "fouqu": 1005, "ronan": [1005, 1008, 1013], "amicel": [1005, 1008], "osendorf": [1005, 1006], "gmmhmm": [1005, 1006], "latex": 1005, "mlcomp": 1005, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1005, "pybrain": 1005, "262": 1005, "116": 1005, "rokem": [1005, 1011], "100x": [1005, 1008], "obsolet": 1005, "attrselect": 1005, "unmaintain": 1005, "lite": 1005, "filo": [1005, 1008], "mailhot": 1005, "huard": 1005, "dave": [1005, 1012, 1013, 1019], "morril": 1005, "schofield": 1005, "travi": [1005, 1013], "oliph": 1005, "pearu": 1005, "peterson": [1005, 1007], "0d": 1006, "marchman": [1006, 1007], "hrishikesh": [1006, 1007], "huilgolkar": [1006, 1007], "bastiaan": [1006, 1007], "diego": [1006, 1007], "molla": [1006, 1007], "cunha": [1006, 1007], "almeida": [1006, 1007, 1018], "rolando": [1006, 1007], "espinoza": [1006, 1007], "fuent": [1006, 1007], "formerli": [1006, 1009, 1011, 1012], "beauchamp": [1006, 1009], "longstand": [1006, 1012], "shaun": 1006, "jackman": 1006, "winterman": 1006, "seberg": 1006, "n_atom": 1006, "label_propag": 1006, "learn_rat": 1006, "basegradientboost": 1006, "mean_square_error": 1006, "gmm_": 1006, "eig_tol": 1006, "chunk_siz": 1006, "zero_one_scor": 1006, "aymer": 1006, "masurel": 1006, "syhw": [1006, 1007], "corei": [1006, 1013, 1014], "lynch": [1006, 1012], "shu": [1006, 1009, 1013], "tadej": [1006, 1007], "jane\u017e": [1006, 1007], "caje": 1006, "tiago": [1006, 1010], "nune": 1006, "cow": 1006, "anz": 1006, "jauvin": 1006, "jacqu": [1006, 1008], "kvam": [1006, 1008], "doug": [1006, 1007, 1017], "coleman": [1006, 1007], "dickerson": 1006, "approximateident": 1006, "veronda": 1006, "matti": [1006, 1009, 1010], "lyra": [1006, 1009, 1010], "mikhail": [1006, 1007, 1008, 1011, 1012, 1020], "korobov": [1006, 1007, 1008, 1011, 1012], "alejandro": [1006, 1011], "weinstein": 1006, "deil": [1006, 1016, 1017], "nizhibitski": 1006, "coelho": [1006, 1008, 1009, 1013], "miroslav": [1006, 1007, 1010], "batchkarov": [1006, 1010], "pavel": [1006, 1014], "bob": [1006, 1012], "dengemann": 1006, "emanuel": 1006, "x006": 1006, "justin": [1007, 1013, 1017], "stochastic_gradi": [1007, 1008, 1014], "crombach": 1007, "sheet": 1007, "jaccard_similarity_scor": [1007, 1009, 1014], "jochen": 1007, "wersd\u00f6rfer": 1007, "sinayev": 1007, "unpleas": 1007, "novic": 1007, "tini": [1007, 1020], "hyperlink": 1007, "luessi": 1007, "philipp": [1007, 1008, 1011, 1020], "gervai": [1007, 1008], "cleverless": 1007, "nosetest": 1007, "compute_import": 1007, "return_model": [1007, 1009], "itergrid": 1007, "tacitli": 1007, "charset_error": 1007, "precompute_gram": 1007, "2224": 1007, "jim": 1007, "holmstr\u00f6m": 1007, "steven": [1007, 1008, 1010, 1012, 1013, 1018, 1020], "gryze": [1007, 1010], "sergeyf": 1007, "ben": [1007, 1008, 1009, 1012, 1013, 1014, 1017], "speer": 1007, "federico": [1007, 1008, 1013, 1014, 1019], "vaggi": [1007, 1008], "raul": [1007, 1008], "garreta": [1007, 1008], "gei": 1007, "flaxman": [1007, 1009], "denton": 1007, "cockburn": 1007, "dougal": [1007, 1009, 1010, 1012, 1013, 1014, 1015], "sutherland": [1007, 1009, 1010, 1012, 1013, 1014, 1015], "ian": [1007, 1009, 1014, 1015, 1017, 1020, 1021], "ozsvald": 1007, "johann": [1007, 1008, 1013, 1015, 1016, 1019], "sch\u00f6nberger": [1007, 1008], "szabo": [1007, 1008], "roland": [1007, 1008], "imran": [1007, 1008, 1009], "haqu": [1007, 1008, 1009], "karayev": 1007, "jamestwebb": [1007, 1008], "abhijeet": 1007, "kolh": 1007, "velkov": 1007, "fazlul": 1007, "shahriar": 1007, "felix": [1007, 1012, 1013, 1015, 1017, 1018, 1019], "brockherd": 1007, "harikrishnan": 1007, "jack": [1007, 1010, 1018, 1019, 1020], "hale": [1007, 1019], "jakemick": 1007, "mcdermott": 1007, "zwinck": 1007, "vredevoogd": [1007, 1008], "pati": 1007, "ekman": [1007, 1011], "shubernetskii": 1007, "naoki": [1007, 1017], "orii": 1007, "seamu": 1007, "absher": 1007, "feldman": [1007, 1012, 1013, 1014, 1015], "stefano": 1007, "lattarini": 1007, "steve": [1007, 1009, 1013, 1018, 1020], "koch": [1007, 1013, 1014, 1016, 1017], "sturla": 1007, "molden": 1007, "jarosch": 1007, "nikolai": [1008, 1009, 1010, 1011, 1013, 1014, 1019], "mayorov": [1008, 1009, 1010, 1011], "msvc": 1008, "mingw": 1008, "resourcewarn": 1008, "calvin": [1008, 1009], "gile": [1008, 1009], "billing": [1008, 1009, 1010], "safe_realloc": 1008, "bradshaw": [1008, 1009, 1012], "pico": [1008, 1009], "restor": [1008, 1013, 1014, 1015, 1016, 1020], "raff": 1008, "__array__": [1008, 1015], "jeffrei": [1008, 1011], "blackburn": [1008, 1011], "danni": [1008, 1009, 1010], "sullivan": [1008, 1009, 1010], "wignal": [1008, 1009, 1015, 1016], "grid_tograph": 1008, "gracefulli": [1008, 1009], "gaussianprocess": 1008, "novak": 1008, "tulloch": [1008, 1009], "wardagglomer": 1008, "wardclust": 1008, "mean_l1_ratio": 1008, "phlypo": 1008, "148": 1008, "bommarito": [1008, 1009], "brook": [1008, 1009, 1017], "osborn": [1008, 1009], "eltermann": 1008, "bwignal": 1008, "ankit": [1008, 1015, 1017, 1019], "agraw": [1008, 1013, 1019, 1020], "carei": [1008, 1009, 1010, 1011, 1012], "ugurthemast": [1008, 1009], "schumach": [1008, 1009, 1010], "baptist": [1008, 1016], "lagard": 1008, "rajat": [1008, 1015], "khanduja": 1008, "pascual": 1008, "ignacio": 1008, "rossi": 1008, "s\u00e4ger": [1008, 1011], "ilambharathi": [1008, 1009], "kanniah": [1008, 1009], "sdenton4": 1008, "alyssa": [1008, 1012], "amo": 1008, "waterland": 1008, "murad": 1008, "maud": 1008, "karol": 1008, "pysniak": 1008, "cgohlk": [1008, 1009], "jacobsen": 1008, "collin": 1008, "kaushik94": 1008, "erwin": 1008, "marsi": 1008, "csytraci": 1008, "lk": 1008, "laurent": [1008, 1009, 1012, 1013, 1020], "direr": [1008, 1009, 1012, 1013], "shilt": 1008, "yoshiki": [1008, 1011], "v\u00e1zquez": 1008, "yung": [1008, 1011], "siang": 1008, "liau": 1008, "abhishek": [1008, 1009, 1015, 1019], "thakur": [1008, 1009], "rohit": [1008, 1009, 1013, 1014], "sivaprasad": [1008, 1009], "amormachin": 1008, "oscar": [1008, 1012], "carlsson": 1008, "nanta": 1008, "nardelli": 1008, "jess010": 1008, "kowalski87": 1008, "clegg": 1008, "ralf": [1008, 1011, 1012, 1020], "gommer": [1008, 1011, 1012, 1020], "rupesh": 1008, "srivastava": [1008, 1020], "ryan": [1008, 1011, 1013, 1014], "skipper": [1008, 1010, 1011], "seabold": [1008, 1010, 1011], "stefan": [1008, 1009, 1013, 1015], "walt": [1008, 1009, 1013], "riddel": [1008, 1010, 1012], "valentin": [1008, 1010, 1020], "haenel": 1008, "myer": [1008, 1012], "yoni": 1008, "meshulam": 1008, "yuri": [1008, 1010], "zaytsev": 1008, "adrinjalali": [1008, 1017], "ai8rahim": 1008, "alemagnani": 1008, "chalmerlow": 1008, "dziki": 1008, "dro\u017cd\u017c": 1008, "matrixorz": 1008, "popo": 1008, "samuela": 1008, "fran\u00e7oi": 1008, "boulogn": 1008, "ethan": [1008, 1011], "guilherm": 1008, "trein": 1008, "heuer": 1008, "ivicajov": 1008, "rouli": 1008, "eduardo": [1008, 1010, 1018, 1019], "ari\u00f1o": 1008, "rubia": 1008, "jell": 1008, "zijlstra": 1008, "eddi": 1008, "jansson": [1008, 1020], "ca\u00f1ardo": 1008, "alastuei": 1008, "joseph": [1008, 1009, 1010, 1011, 1017, 1019, 1020], "perla": 1008, "ricardo": [1008, 1018, 1019], "kenta": 1008, "sato": 1008, "medri": 1008, "luce": 1008, "pierron": 1008, "danielweitzenfeld": 1008, "thompson": [1008, 1020, 1021], "brett": [1008, 1010, 1011, 1012, 1013, 1020], "feurer": [1008, 1013], "earl": 1008, "hank": 1008, "orr\u00f9": 1008, "lunt": 1008, "kearn": 1008, "pawe\u0142": [1008, 1012, 1017, 1018], "mandera": 1008, "zambelli": 1008, "staubda": 1008, "dedupl": 1009, "heilman": [1009, 1010], "precompute_dist": [1009, 1016], "lshforest": [1009, 1012], "qiang": 1009, "luo": 1009, "clemen": 1009, "brunner": 1009, "matteo": [1009, 1011, 1019], "visconti": 1009, "oleggio": 1009, "castello": 1009, "linkage_tre": 1009, "jatin": [1009, 1011], "shah": [1009, 1010, 1011, 1017], "saurabh": [1009, 1010, 1011, 1012, 1013, 1017], "jha": [1009, 1015, 1019], "blanchard": [1009, 1010], "michal": [1009, 1012, 1018, 1019], "romaniuk": 1009, "gilmor": 1009, "stapl": 1009, "hedyati": 1009, "antoni": [1009, 1011, 1017, 1020], "parel": 1009, "herv\u00e9": 1009, "bredin": 1009, "hasil": 1009, "sharma": [1009, 1011, 1013, 1014, 1016, 1017, 1019], "ducktyp": 1009, "download_20newsgroup": 1009, "friend": 1009, "cathi": [1009, 1015], "deng": [1009, 1010, 1011], "dawson": 1009, "garret": 1009, "hanna": [1009, 1010, 1016], "wallach": [1009, 1010], "yan": [1009, 1017], "artem": [1009, 1012], "sobolev": 1009, "fit_ovr": 1009, "predict_ovr": 1009, "predict_proba_ovr": 1009, "fit_ovo": 1009, "predict_ovo": 1009, "fit_ecoc": 1009, "predict_ecoc": 1009, "lamond": 1009, "outweigh": 1009, "thresh": 1009, "akshai": [1009, 1012, 1017], "akshayah3": 1009, "aldrian": 1009, "obaja": 1009, "ander": [1009, 1015], "aagaard": 1009, "cranenburgh": 1009, "walker": 1009, "banilo": [1009, 1010], "barmalei": [1009, 1010], "benedikt": 1009, "koehler": 1009, "bhsu": 1009, "bori": [1009, 1017], "feld": 1009, "borja": 1009, "ayerdi": 1009, "boyuan": [1009, 1010, 1011], "brent": [1009, 1013, 1014], "pedersen": 1009, "celeo": 1009, "chebee7i": 1009, "stade": 1009, "schuldt": 1009, "christof": [1009, 1010], "angermuel": [1009, 1010], "daiki": 1009, "aminaka": 1009, "danfrankj": 1009, "dmitrij": 1009, "milajev": 1009, "floydsoft": 1009, "garrett": 1009, "gpassino": 1009, "gwulf": [1009, 1010], "hampu": 1009, "bengtsson": 1009, "harri": [1009, 1011, 1017, 1018], "mavroforaki": [1009, 1011], "helder": [1009, 1018, 1019], "herv": 1009, "hugu": 1009, "salamin": 1009, "ism": 1009, "dlabal": 1009, "javier": 1009, "l\u00f3pez": [1009, 1013, 1014, 1017], "pe\u00f1a": 1009, "jdcaballero": 1009, "jeff": [1009, 1011, 1018, 1019], "hammerbach": 1009, "helmu": 1009, "kaicheng": 1009, "markham": [1009, 1016, 1017], "lagacheri": 1009, "leepei": 1009, "loic": [1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "estev": [1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020], "luka": [1009, 1016], "michelbach": 1009, "krell": [1009, 1011], "ku": [1009, 1010], "mateusz": [1009, 1016, 1017], "susik": 1009, "mehdi": [1009, 1018], "cherti": 1009, "mlg": 1009, "montecchio": 1009, "okal": 1009, "billi": 1009, "\u00f3scar": [1009, 1010, 1011, 1012], "n\u00e1jera": [1009, 1010, 1011, 1012], "puggioni": 1009, "pratap": [1009, 1012, 1019], "vardhan": 1009, "pvnguyen": 1009, "queqichao": 1009, "rahiel": 1009, "kasim": 1009, "mason": 1009, "saket": [1009, 1010, 1017], "choudhari": [1009, 1010, 1019], "sam": [1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020], "nichol": 1009, "sethdandridg": 1009, "sinhrk": [1009, 1010], "snuderl": 1009, "ott": 1009, "tjoa": 1009, "swu": 1009, "zimmer": [1009, 1019], "tejesh95": 1009, "terrycojon": 1009, "delteil": 1009, "toma": 1009, "kazmar": 1009, "trevorstephen": [1009, 1011], "tttthomasssss": 1009, "tzu": 1009, "kuo": 1009, "ugurcaliskan": 1009, "vinayak": [1009, 1010, 1011, 1013, 1014, 1020], "mehta": [1009, 1010, 1011, 1013, 1014, 1015, 1016, 1020], "vjacheslav": 1009, "murashkin": 1009, "wadawson": 1009, "x0l": 1009, "vendor": [1010, 1013, 1014], "6147": 1010, "presort": [1010, 1015], "5857": 1010, "mcculloh": [1010, 1011], "6258": 1010, "giorgio": [1010, 1011, 1012], "patrini": [1010, 1011, 1012], "joe": 1010, "jevnik": 1010, "labelkfold": [1010, 1011], "labelshufflesplit": [1010, 1011], "mcfee": [1010, 1011], "3659": 1010, "4738": 1010, "projectedgradientnmf": 1010, "nls_max_it": 1010, "erick": 1010, "moodi": 1010, "4025": 1010, "mean_shift_": 1010, "mean_shift": [1010, 1013], "martino": 1010, "sorbaro": 1010, "cori": 1010, "konstantin": [1010, 1011, 1012], "shmelkov": 1010, "backlink": 1010, "jaidev": 1010, "deshpand": [1010, 1011], "dictlearn": 1010, "kashif": 1010, "rasul": [1010, 1012, 1013], "galvez": 1010, "sonni": 1010, "hu": [1010, 1013, 1015], "santi": [1010, 1012, 1013], "villalba": [1010, 1013, 1017], "5186": 1010, "stolbunov": 1010, "booster": 1010, "graham": [1010, 1011], "clenaghan": [1010, 1011], "clyde": 1010, "subproblem": 1010, "forestclassifi": 1010, "ankur": 1010, "ankan": 1010, "henri": [1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020], "5431": 1010, "buddha": 1010, "prakash": [1010, 1012, 1018], "5182": 1010, "lamb": [1010, 1018], "5282": 1010, "5355": 1010, "5360": 1010, "4478": 1010, "5337": 1010, "4362": 1010, "5495": 1010, "elvi": [1010, 1011, 1012], "dohmatob": [1010, 1011, 1012], "data_min": 1010, "data_max": 1010, "data_rang": 1010, "_learntselectormixin": 1010, "gradientboost": 1010, "metatransfom": 1010, "load_lfw_pair": 1010, "wardagglom": 1010, "residues_": 1010, "indicator_matrix_": 1010, "adithya": 1010, "ganesh": 1010, "akitti": 1010, "alexei": 1010, "grigorev": 1010, "ali": [1010, 1013, 1014, 1017, 1018, 1020], "baharev": 1010, "ando": 1010, "saaba": 1010, "anish": [1010, 1011], "anthoni": [1010, 1012, 1013], "erling": 1010, "rouvinen": 1010, "rachez": [1010, 1011], "benjaminirv": 1010, "naul": [1010, 1011], "gohlk": 1010, "bourguignat": 1010, "cindi": [1010, 1018], "sridharan": 1010, "kronovet": 1010, "data1010": 1010, "dotson": 1010, "djipei": [1010, 1011], "dmitri": [1010, 1012, 1013, 1014, 1018], "spikhalskii": 1010, "donn": 1010, "duart": [1010, 1018, 1020], "caro": 1010, "larson": [1010, 1014, 1015, 1017, 1019], "fernando": [1010, 1017], "carrillo": 1010, "eckert": 1010, "zalkow": 1010, "ganiev": [1010, 1011, 1012], "ibraim": [1010, 1011, 1012], "giorgiop": 1010, "gryllo": [1010, 1013], "prokopi": [1010, 1013], "hsuan": 1010, "tien": 1010, "ishank": [1010, 1011, 1012], "gulati": [1010, 1011, 1012], "jeffrey04": [1010, 1011], "jfraj": 1010, "jiali": 1010, "mei": [1010, 1015], "kirkham": [1010, 1011, 1013], "wittenau": 1010, "loyal": 1010, "jungkook": 1010, "park": [1010, 1015, 1017, 1020], "kamalakerdadi": [1010, 1011], "kyler": 1010, "lilian": [1010, 1011], "besson": [1010, 1011], "tiao": [1010, 1011], "marktab": 1010, "spacek": 1010, "martinbpr": [1010, 1011], "martinosorb": 1010, "maryanmorel": [1010, 1011], "masafumi": 1010, "oyamada": 1010, "krump": 1010, "kolganov": 1010, "mbilling": 1010, "mhg": 1010, "patterson": 1010, "omer": 1010, "katz": [1010, 1017, 1018], "pauli": 1010, "virtanen": 1010, "fischer": [1010, 1011], "pianomania": 1010, "preston": [1010, 1011, 1012], "parri": [1010, 1011, 1012], "rohan": [1010, 1011, 1013, 1014, 1018], "ramanath": 1010, "bansod": [1010, 1011, 1012], "scls19fr": 1010, "saeger": [1010, 1011, 1012], "shivan": 1010, "sornarajah": 1010, "simonpl": 1010, "sseg": 1010, "hoover": [1010, 1011, 1012, 1014], "seguin": 1010, "theodor": 1010, "vasiloudi": 1010, "freita": [1010, 1012, 1013], "pereira": [1010, 1013, 1014], "timothi": [1010, 1018], "hopper": 1010, "tokoroten": 1010, "vstolbunov": 1010, "wangz10": 1010, "yucheng": 1010, "zhauniarovich": 1010, "zac": 1010, "stewart": [1010, 1015, 1018, 1020], "zhai_pro": 1010, "zichen": 1010, "7946": 1011, "8355": 1011, "9010": 1011, "8040": 1011, "9149": 1011, "aman": [1011, 1012, 1013, 1019, 1020], "dalmia": [1011, 1012, 1013], "nate": [1011, 1012, 1018], "guerin": [1011, 1012], "lebedev": [1011, 1012], "utilis": 1011, "6497": 1011, "7724": 1011, "bing": [1011, 1012], "explained_variance_ratio": 1011, "7632": 1011, "jpfrancoia": [1011, 1012], "7676": 1011, "moham": [1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "affan": 1011, "7756": 1011, "7786": 1011, "srivatsan": [1011, 1012, 1015], "7799": 1011, "7490": [1011, 1012], "6282": 1011, "7301": 1011, "6178": 1011, "7680": 1011, "n_iters_": 1011, "7553": 1011, "ekaterina": [1011, 1012, 1013, 1014, 1016], "krivich": [1011, 1012, 1014], "5874": 1011, "7593": 1011, "7594": 1011, "7660": 1011, "7750": 1011, "7732": 1011, "artsion": 1011, "lieu": [1011, 1012], "grid_scores_": [1011, 1017, 1018], "leaveonelabelout": 1011, "leaveplabelout": 1011, "plural": 1011, "mean_tim": 1011, "std_time": 1011, "3204": 1011, "5291": 1011, "sounder": 1011, "7295": 1011, "5299": 1011, "bravi": 1011, "fouchet": 1011, "calinski_harabaz_scor": [1011, 1013], "harabaz": 1011, "6586": 1011, "4294": 1011, "6667": 1011, "6954": 1011, "unveil": 1011, "yelit": 1011, "basebag": [1011, 1013], "staub": 1011, "5805": 1011, "5251": 1011, "imacul": 1011, "1000x": 1011, "arfa": 1011, "6691": 1011, "6913": 1011, "5762": 1011, "utkarsh": [1011, 1012, 1013, 1014], "upadhyai": [1011, 1012, 1013, 1014], "6846": 1011, "5929": 1011, "podshumok": [1011, 1012], "6173": 1011, "ryad": 1011, "zenin": 1011, "devashish": 1011, "asish": [1011, 1012], "dowl": 1011, "6697": 1011, "ori": 1011, "ziv": 1011, "sear": 1011, "merritt": 1011, "7325": 1011, "7239": 1011, "hong": [1011, 1013, 1017, 1018, 1019], "guangguo": 1011, "jensen": [1011, 1017], "7419": 1011, "gregori": [1011, 1015, 1016, 1017, 1018], "stupp": [1011, 1012], "bernardo": 1011, "stein": 1011, "sparse_func": [1011, 1017], "incr_mean_variance_axi": [1011, 1017], "7049": 1011, "7152": 1011, "load_boston": [1011, 1013, 1018], "7154": 1011, "manvendra": [1011, 1012], "singh": [1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020], "5540": 1011, "7248": 1011, "6764": 1011, "wenhua": 1011, "6817": 1011, "6902": 1011, "leonieborn": 1011, "5141": 1011, "4995": 1011, "5012": 1011, "_transform_select": 1011, "7194": 1011, "caio": [1011, 1013, 1015], "oliveira": [1011, 1013, 1015, 1019], "6182": 1011, "6121": 1011, "6472": 1011, "7350": 1011, "russel": [1011, 1012], "smith": [1011, 1012, 1013, 1014, 1015, 1017], "7159": 1011, "yichuan": [1011, 1012], "5460": 1011, "document_clust": 1011, "7353": 1011, "_search": 1011, "_check_param_grid": 1011, "xrang": 1011, "7323": 1011, "viacheslav": 1011, "kovalevskyi": 1011, "7101": 1011, "residual_metr": 1011, "6651": 1011, "reorgan": 1011, "7187": 1011, "7260": 1011, "sebasti\u00e1n": 1011, "vanrel": 1011, "leaveplabelsout": 1011, "6660": 1011, "unprefix": 1011, "7261": 1011, "aditya": [1011, 1013, 1014, 1015, 1019, 1020], "joshi": [1011, 1013, 1019], "loginov": 1011, "minyushkin": 1011, "rudi": 1011, "abadi": [1011, 1012], "saint": 1011, "alexfield": 1011, "alvaro": [1011, 1013], "ulloa": 1011, "alyssaq": 1011, "amlan": 1011, "kar": 1011, "giessel": 1011, "jackson": [1011, 1012, 1014], "murrai": [1011, 1012], "arafat": 1011, "archit": 1011, "asnt": 1011, "b0noi": 1011, "behzad": 1011, "tabibian": 1011, "kratzwald": 1011, "bhargav": 1011, "mangipudi": 1011, "blakeflei": 1011, "brandon": [1011, 1012, 1019, 1020], "carter": [1011, 1012, 1020], "camilo": 1011, "lamu": 1011, "carol": [1011, 1012], "Willing": [1011, 1012], "cass": 1011, "ceshin": 1011, "truong": 1011, "codevig": 1011, "shiebler": 1011, "hnyk": [1011, 1012], "elli": [1011, 1014], "nicholson": [1011, 1012, 1013], "thaler": 1011, "warshaw": 1011, "lasagna": 1011, "deborah": [1011, 1012], "definitelyuncertain": 1011, "didi": [1011, 1012, 1013, 1014], "zev": [1011, 1012, 1013, 1014], "dsquareindia": 1011, "edwinensa": 1011, "elia": 1011, "kuth": 1011, "fabio": 1011, "ticconi": 1011, "fisach": 1011, "donovan": 1011, "ghg": 1011, "giovanni": [1011, 1013], "cherubin": 1011, "lanzani": 1011, "glenn": 1011, "qian": [1011, 1016], "mohr": 1011, "govin": 1011, "vatsan": 1011, "reda": 1011, "gustav": 1011, "m\u00f6rtberg": 1011, "halwai": 1011, "harizo": [1011, 1012], "rajaona": [1011, 1012], "hashcode55": 1011, "hdmetor": 1011, "hobson": 1011, "lane": 1011, "bown": 1011, "igor": [1011, 1012, 1018], "andriushchenko": [1011, 1012], "inki": 1011, "hwang": 1011, "isaac": [1011, 1012, 1014, 1015], "sijaranamu": 1011, "iver": 1011, "jordal": 1011, "jackmartin": 1011, "fiedler": 1011, "routlei": 1011, "zike": 1011, "janna": 1011, "brettingen": 1011, "jarfa": 1011, "laska": 1011, "jblackburn": 1011, "levesqu": 1011, "hintz": 1011, "jeremynixon": 1011, "jeroen": 1011, "jessica": 1011, "jill": 1011, "j\u00eann": 1011, "vie": 1011, "jia": 1011, "jiyuan": 1011, "johannah": 1011, "boersma": 1011, "moeller": 1011, "striebel": [1011, 1012], "joncral": 1011, "jordi": 1011, "munoz": [1011, 1017], "jrfiedler": 1011, "juliankahnert": 1011, "juliathebrav": 1011, "kaichogami": 1011, "lyon": [1011, 1012], "kingjr": 1011, "kjell": 1011, "krishna": [1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020], "kalyan": 1011, "krishnakalyan3": 1011, "kvle": 1011, "putnam": 1011, "ldavid": 1011, "leig": 1011, "leightonzhang": 1011, "leland": [1011, 1012, 1013, 1015, 1016], "mcinn": [1011, 1012, 1013, 1015, 1016], "liang": [1011, 1016, 1017], "hsieh": 1011, "lizsz": 1011, "l\u00e9oni": 1011, "born": 1011, "maniteja": [1011, 1012, 1013], "nandana": [1011, 1012, 1013], "marco": [1011, 1013, 1014, 1018, 1019, 1020], "bao": [1011, 1019], "szepieniec": 1011, "madsen": [1011, 1013], "massil": 1011, "matheu": 1011, "duboi": [1011, 1013], "moroz": 1011, "scherer": 1011, "michiaki": 1011, "ariga": 1011, "moussa": 1011, "taifi": 1011, "mrandrewandrad": 1011, "mridul": 1011, "seth": 1011, "nadya": 1011, "naoya": [1011, 1012, 1013, 1014], "kanai": [1011, 1012, 1013], "nickledav": 1011, "nico": [1011, 1018], "ningchi": 1011, "nlathia": 1011, "okbalefthand": 1011, "okhlopkov": [1011, 1012], "pano": 1011, "lourida": 1011, "strickland": 1011, "perrin": 1011, "letelli": 1011, "pestrickland": 1011, "practicalswift": 1011, "qimu": 1011, "zheng": [1011, 1012, 1017], "rachit": [1011, 1017, 1020], "kansal": 1011, "ramana": [1011, 1012], "randi": 1011, "olson": 1011, "lutz": [1011, 1015, 1018], "schucker": 1011, "jain": [1011, 1012, 1013, 1017, 1019, 1020], "ruifeng": [1011, 1012, 1017], "r\u00e9my": 1011, "l\u00e9one": 1011, "saihttam": 1011, "saiw": 1011, "yeung": 1011, "shleifer": [1011, 1012], "sartaj": 1011, "sasank": 1011, "chilamkurthi": 1011, "seal": 1011, "shagun": 1011, "sodhani": 1011, "shanmuga": 1011, "shashank": [1011, 1017], "shekhar": 1011, "shawpan": 1011, "shengxiduan": 1011, "shota": 1011, "shuckle16": 1011, "smedbergm": 1011, "srvanrel": 1011, "leriqu": [1011, 1013], "taranjeet": 1011, "themrmax": [1011, 1012], "hallock": 1011, "moreau": [1011, 1012, 1013, 1014, 1015], "tkammi": 1011, "toastedcornflak": [1011, 1012], "tomdlt": 1011, "toshihiro": [1011, 1012, 1018], "kamishima": [1011, 1012], "tracer0tong": 1011, "hauck": 1011, "vo": [1011, 1019], "varun": [1011, 1012, 1013, 1019, 1020], "jewalikar": 1011, "vikram": [1011, 1020], "villu": 1011, "ruusmann": 1011, "walter": 1011, "waterponei": [1011, 1012], "wenjian": 1011, "welch": 1011, "wyseguy7": 1011, "xyguo": [1011, 1013], "yanlend": 1011, "yen": [1011, 1012], "yenchenlin": 1011, "yoav": 1011, "zivori": 1011, "10723": [1012, 1013], "9623": 1012, "undocu": 1012, "deleteri": 1012, "9677": 1012, "ashutosh": [1012, 1013, 1015, 1017], "correlation_model": 1012, "regression_model": 1012, "belatedli": 1012, "9717": 1012, "9693": 1012, "steingold": [1012, 1013], "9711": 1012, "goncalo": [1012, 1013], "rodrigu": [1012, 1013, 1018], "9641": 1012, "bourbeau": [1012, 1013, 1014], "9865": 1012, "sachin": [1012, 1013, 1019], "kelkar": [1012, 1013, 1015], "9922": 1012, "charli": [1012, 1013, 1021], "brummitt": [1012, 1013], "9945": 1012, "9830": 1012, "9600": 1012, "kerimov": [1012, 1013], "9593": 1012, "reiichiro": [1012, 1013], "nakano": [1012, 1013], "9604": 1012, "interim": 1012, "9558": 1012, "9847": 1012, "joan": [1012, 1013, 1014, 1015], "massich": [1012, 1013, 1014, 1015], "oli": 1012, "blum": 1012, "9697": 1012, "9750": 1012, "9788": 1012, "9815": 1012, "9802": 1012, "vrishank": [1012, 1013], "bhardwaj": [1012, 1013], "nagarjuna": [1012, 1013], "nathaniel": [1012, 1013, 1015], "diegodlh": [1012, 1013], "jkleint": [1012, 1013], "oliblum90": [1012, 1013], "pasbi": [1012, 1013], "lawson": [1012, 1013, 1014], "nielsenmarkus11": [1012, 1013], "excit": 1012, "cautiou": 1012, "min_impurity_split": 1012, "7823": [1012, 1013], "8446": 1012, "5279": 1012, "8363": 1012, "5295": 1012, "7388": 1012, "userguid": 1012, "7655": 1012, "karan": [1012, 1013, 1014], "desai": [1012, 1014, 1017, 1018, 1020], "7739": 1012, "gasquez": 1012, "8120": 1012, "neeraj": 1012, "gangwar": 1012, "7548": 1012, "9206": 1012, "7441": 1012, "6101": 1012, "8698": 1012, "7794": 1012, "herilalaina": [1012, 1013, 1015], "rakotoarison": [1012, 1013, 1015], "5036": 1012, "4939": 1012, "esuli": [1012, 1017], "n_skips_": 1012, "7914": 1012, "horrel": 1012, "8591": 1012, "hadrien": [1012, 1015], "7838": 1012, "8835": 1012, "8061": 1012, "cordier": 1012, "6288": 1012, "9145": 1012, "reddi": [1012, 1013, 1014, 1019], "chinthala": 1012, "7721": 1012, "crall": [1012, 1018], "7685": 1012, "tommi": [1012, 1013, 1014], "l\u00f6fstedt": 1012, "9277": 1012, "hongkahjun": 1012, "7089": 1012, "randomized_svd_low_rank": 1012, "9067": 1012, "6181": 1012, "wendling": 1012, "8065": 1012, "lejeun": 1012, "7567": 1012, "jay": 1012, "doepk": 1012, "7573": 1012, "romain": [1012, 1017], "brault": 1012, "5229": 1012, "7990": 1012, "8586": 1012, "7723": 1012, "8028": 1012, "booth": 1012, "8005": 1012, "7863": 1012, "7506": 1012, "5991": 1012, "8845": 1012, "8053": 1012, "8282": 1012, "8117": 1012, "9259": 1012, "8094": 1012, "8335": 1012, "poughon": 1012, "7880": 1012, "karnofski": 1012, "8931": 1012, "attractador": [1012, 1013], "8002": 1012, "8549": 1012, "zerodivisionerror": [1012, 1015, 1021], "7501": 1012, "dominik": 1012, "krzeminski": 1012, "7970": 1012, "8006": 1012, "p\u00f6lsterl": [1012, 1015, 1018], "8936": 1012, "8672": 1012, "mike": 1012, "benfield": 1012, "broke": 1012, "8068": 1012, "5732": 1012, "ytrue": 1012, "ypred": 1012, "8087": 1012, "7983": 1012, "8512": 1012, "8251": 1012, "aivision2020": 1012, "5814": 1012, "7849": 1012, "jair": 1012, "montoya": 1012, "martinez": 1012, "randomizedlasso": 1012, "5359": 1012, "9302": 1012, "8160": 1012, "8224": 1012, "gedeck": 1012, "vathsala": [1012, 1013, 1014, 1015], "achar": [1012, 1013, 1014, 1015], "9022": 1012, "mehmet": [1012, 1018], "basbug": 1012, "9024": 1012, "8973": 1012, "paulo": [1012, 1018, 1020], "haddad": 1012, "unmeaning": 1012, "6573": 1012, "quazi": [1012, 1013], "marufur": 1012, "rahman": [1012, 1013, 1017], "9239": 1012, "andr": [1012, 1019], "ambrosio": 1012, "boechat": 1012, "early_exager": 1012, "assertionerror": 1012, "8992": 1012, "7954": 1012, "foreman": 1012, "9105": 1012, "9108": 1012, "8306": 1012, "7872": 1012, "_c_step": 1012, "3367": 1012, "steward": 1012, "8768": 1012, "detomaso": 1012, "6507": 1012, "7819": 1012, "jayzed82": 1012, "6126": 1012, "7814": 1012, "7702": 1012, "9219": 1012, "7771": 1012, "ang": 1012, "randomizedlogisticregress": 1012, "8259": 1012, "mandatorili": 1012, "7565": 1012, "8181": 1012, "basesearchcv": [1012, 1013], "8344": 1012, "eriksson": 1012, "7661": 1012, "8295": 1012, "batula": 1012, "dylan": [1012, 1015], "werner": [1012, 1017], "meier": 1012, "7365": 1012, "aleksandr": 1012, "sandrovskii": 1012, "5697": 1012, "stijn": 1012, "tonk": 1012, "6250": 1012, "8093": 1012, "bull": 1012, "9507": 1012, "7356": 1012, "dingwal": 1012, "_check_target": 1012, "8377": 1012, "5211": 1012, "rhinehart": 1012, "8159": 1012, "8198": 1012, "fetch_": 1012, "7944": 1012, "7825": 1012, "kathleen": 1012, "7376": 1012, "7331": 1012, "yangarbit": 1012, "__getstate__": [1012, 1020], "obstruct": 1012, "8316": 1012, "holger": 1012, "8010": 1012, "7986": 1012, "najera": 1012, "9289": 1012, "makedir": 1012, "9284": 1012, "sebastin": [1012, 1013], "alert": 1012, "lgtm": 1012, "9278": 1012, "heli": 1012, "8449": 1012, "9078": 1012, "purport": 1012, "sergul": [1012, 1013, 1016], "aydor": [1012, 1013, 1016], "8922": 1012, "8137": 1012, "8139": 1012, "8995": 1012, "2879": 1012, "7459": 1012, "7812": 1012, "9100": 1012, "8481": 1012, "8174": 1012, "tahar": 1012, "zanouda": 1012, "8854": 1012, "8874": 1012, "7998": 1012, "jiacheng": 1012, "argpartit": 1012, "frombuffer_empti": 1012, "rankdata": 1012, "safe_copi": 1012, "eig": 1012, "fast_dot": 1012, "pinvh": [1012, 1014], "graph_laplacian": 1012, "sparsetool": 1012, "connected_compon": 1012, "check_decision_proba_consist": 1012, "shubham": [1012, 1015], "9019": 1012, "baseensembl": [1012, 1015], "7464": 1012, "rishikesh": 1012, "taehoon": [1012, 1013], "aashil": 1012, "balakumaran": [1012, 1013], "manoharan": [1012, 1013], "petrov": [1012, 1013], "minghui": [1012, 1013], "jc": [1012, 1013], "alexandercbooth": 1012, "chkoar": 1012, "aarshai": [1012, 1013], "gilliam": 1012, "subramanyam": 1012, "clement": [1012, 1013, 1017], "joudet": [1012, 1013], "robl": 1012, "kati": 1012, "luangkot": 1012, "lacchia": 1012, "akshay0724": 1012, "omtcyfz": 1012, "rickiepark": 1012, "jbdelafoss": 1012, "vivek": [1012, 1013, 1014], "elliott": 1012, "ldirer": 1012, "sid": 1012, "kapur": 1012, "midina": 1012, "mikebenfield": 1012, "sourav": [1012, 1015], "aseem": 1012, "bansal": 1012, "aishwaryark": 1012, "howel": 1012, "dokato": 1012, "kathi": [1012, 1015], "ferria": 1012, "nikita": [1012, 1013, 1015, 1018, 1019, 1020], "basil": 1012, "beirouti": 1012, "possa": 1012, "bednar": 1012, "janin": 1012, "harper": 1012, "artsiom": 1012, "ligo": 1012, "rahn": [1012, 1015], "seanpwilliam": 1012, "julian": [1012, 1013], "kuhlmann": [1012, 1013], "aubert": 1012, "j\u00f6rn": 1012, "hee": [1012, 1015], "shivamgargsya": [1012, 1016, 1018], "kat": 1012, "hempstalk": 1012, "kaushik": [1012, 1019, 1020, 1021], "lakshmikanth": 1012, "kennedi": [1012, 1015], "yap": 1012, "kiril": [1012, 1013, 1015, 1017], "bobyrev": 1012, "imbert": [1012, 1014, 1017, 1019], "lera": 1012, "douillard": 1012, "mainak": 1012, "tobychees": [1012, 1013], "manraj": 1012, "marc": [1012, 1014, 1015, 1021], "meketon": 1012, "marcofalk": 1012, "gilch": 1012, "mehul": 1012, "ahuja": [1012, 1019, 1020], "goetz": [1012, 1013], "dezub": 1012, "baumgartn": 1012, "vibrantabhi19": 1012, "golubin": 1012, "milen": 1012, "paskov": 1012, "antonin": 1012, "carett": 1012, "morikko": 1012, "mrmjauh": 1012, "nalepa": 1012, "namiya": 1012, "narinek": [1012, 1013], "angu": [1012, 1013, 1019], "nicol": 1012, "vavrova": 1012, "nitish": 1012, "pandei": [1012, 1017], "daniil": 1012, "olegovich": 1012, "craze": 1012, "om": 1012, "parmind": 1012, "patrick": [1012, 1013, 1018, 1019], "carlson": 1012, "pei": 1012, "ganssl": 1012, "lorek": 1012, "pete": [1012, 1016, 1017], "bachant": 1012, "csizsek": 1012, "jong": 1012, "puneet": 1012, "mathur": [1012, 1014, 1015, 1020, 1021], "quentin": [1012, 1013, 1014], "hibon": 1012, "1kastner": 1012, "rameshwar": [1012, 1013], "bhaskaran": [1012, 1013], "rebecca": 1012, "bilbro": 1012, "remi": 1012, "rampin": 1012, "pratik": 1012, "agarw": [1012, 1013, 1015], "sailesh": [1012, 1013], "choyal": [1012, 1013], "samson": 1012, "samu\u00ebl": 1012, "weber": 1012, "sarah": [1012, 1014, 1017], "abhyudai": 1012, "sharan": [1012, 1013], "yalburgi": [1012, 1013], "willduan": 1012, "siddharth": [1012, 1016], "almer": 1012, "theofilo": 1012, "papapanagiot": 1012, "alison": 1012, "boucher": 1012, "folkman": 1012, "jung": [1012, 1016, 1020], "shenoi": 1012, "vilhelm": [1012, 1013], "ehrenheim": [1012, 1013], "alan": [1012, 1013, 1016, 1018, 1019], "yee": [1012, 1013], "warut": [1012, 1013], "vijitbenjaronk": [1012, 1013], "yuichi": 1012, "fujikawa": 1012, "affanv14": 1012, "andreh7": 1012, "bradi": 1012, "salz": 1012, "campustrampu": 1012, "agamemnon": [1012, 1013, 1014, 1015, 1017, 1018], "krasouli": [1012, 1013, 1014, 1015, 1017, 1018], "ditenberg": 1012, "elena": 1012, "sharova": 1012, "filipj8": [1012, 1013], "fukatani": 1012, "guiniol": 1012, "guoci": 1012, "hakaa1": [1012, 1013], "xhy": 1012, "jakirkham": [1012, 1013, 1014, 1020], "jaroslaw": 1012, "jeroko": 1012, "jmontoyam": 1012, "josephsalmon": [1012, 1013, 1014], "jschendel": [1012, 1013], "leereev": 1012, "hahn": [1012, 1013], "mathurinm": [1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020], "mehak": 1012, "sachdeva": 1012, "mlewis1729": 1012, "mlliou112": 1012, "mthorrel": [1012, 1015], "ndingwal": 1012, "nuff": 1012, "plagre": 1012, "pldtc325": 1012, "breno": [1012, 1013], "olsen": 1012, "alfano": 1012, "burn": [1012, 1013], "polmauri": 1012, "charlton": 1012, "austin": 1012, "chayant": 1012, "t15h": 1012, "chinmaya": 1012, "pancholi": 1012, "danielsen": 1012, "chung": [1012, 1013], "pravarmahajan": [1012, 1013], "dariu": [1012, 1013], "morawiec": [1012, 1013], "haberth\u00fcr": 1012, "heryanto": 1012, "kirkbi": [1012, 1013], "rashchedrin": 1012, "gertrud": 1012, "devansh": [1012, 1013], "dickson": 1012, "baxlei": 1012, "don86": 1012, "klarup": 1012, "elizabeth": [1012, 1014, 1017], "ferriss": 1012, "ellen": 1012, "egli": 1012, "chieh": [1012, 1013], "chou": [1012, 1013], "grzegorz": [1012, 1015], "szpak": [1012, 1015], "zxcvbniu": 1012, "icyblad": 1012, "ilya": 1012, "laughlin": 1012, "iv\u00e1n": [1012, 1018], "vall\u00e9": 1012, "aur\u00e9lien": [1012, 1013, 1014, 1018, 1019], "bellet": [1012, 1013, 1014], "mahapatra": 1012, "bundl": [1013, 1014], "indexerror": [1013, 1014], "11756": [1013, 1014], "14237": [1013, 1014], "schuder": [1013, 1014, 1015], "13903": [1013, 1014], "13124": [1013, 1014], "13772": [1013, 1014], "vya": [1013, 1014, 1015], "12949": 1013, "prabakaran": [1013, 1014, 1017, 1019, 1020], "kumaresshan": [1013, 1014, 1017], "12946": 1013, "tallott": 1013, "13276": 1013, "13005": 1013, "13312": 1013, "11295": 1013, "vacaliuc": [1013, 1014], "13046": 1013, "12360": 1013, "aakanksha": 1013, "13134": 1013, "sandro": [1013, 1020], "casagrand": [1013, 1014], "12881": 1013, "13165": 1013, "13221": 1013, "bertrandhaut": [1013, 1014], "raghunathan": [1013, 1014, 1015, 1016, 1017, 1018, 1019], "dowon": [1013, 1014], "aria": [1013, 1014, 1020], "fibins": [1013, 1014], "finn": [1013, 1014], "shea": [1013, 1014], "joaak": [1013, 1014], "m\u00e9hault": [1013, 1014], "kms15": [1013, 1014], "kossori": [1013, 1014], "aruku": [1013, 1014], "lakshya": [1013, 1014, 1015], "ib\u00e1\u00f1ez": [1013, 1014, 1017], "gorelli": [1013, 1014, 1018, 1020], "marcogorelli": [1013, 1014], "mferrari3": [1013, 1014], "micka\u00ebl": [1013, 1014], "schoentgen": [1013, 1014], "pavlo": [1013, 1014], "kalli": [1013, 1014], "glaser": [1013, 1014], "pierretallott": [1013, 1014, 1015], "kapoor": [1013, 1014], "sandrocasagrand": [1013, 1014], "tashai": [1013, 1014], "vishaal": [1013, 1014], "zhuyi": [1013, 1014], "ziji": [1013, 1014], "zj": [1013, 1014], "poh": [1013, 1014], "12704": 1013, "12701": 1013, "12685": 1013, "12699": 1013, "adanhawth": [1013, 1014], "stine": [1013, 1014], "feda": [1013, 1014], "curic": [1013, 1014], "jeremiedbb": [1013, 1014, 1015], "katrin": [1013, 1014], "leinweb": [1013, 1014], "muhammad": [1013, 1014, 1018], "hassaan": [1013, 1014], "rafiqu": [1013, 1014], "paczuski": [1013, 1014], "waterburi": [1013, 1014], "shivam": [1013, 1014, 1015], "kotwalia": [1013, 1014], "12159": 1013, "12105": 1013, "11912": 1013, "12304": 1013, "12339": 1013, "12246": 1013, "10811": 1013, "feldbauer": [1013, 1014, 1015, 1016, 1019], "12441": 1013, "12517": 1013, "12234": 1013, "12165": 1013, "12388": 1013, "connor": [1013, 1018], "tann": [1013, 1018], "12393": 1013, "12122": 1013, "sharedmem": 1013, "12518": 1013, "12481": 1013, "12612": 1013, "12211": 1013, "lisa": [1013, 1014, 1016, 1017, 1019, 1020], "hannel": [1013, 1014], "melissa": 1013, "ferrari": 1013, "12451": 1013, "12171": 1013, "12365": 1013, "_encod": 1013, "12514": 1013, "12522": 1013, "12471": 1013, "marzinotto": [1013, 1014], "12317": 1013, "12338": 1013, "bauk": [1013, 1014], "12625": 1013, "sklearn_site_joblib": 1013, "12350": 1013, "12467": 1013, "unvendor": 1013, "12345": 1013, "navarret": [1013, 1014, 1015], "benjastudio": [1013, 1014], "cheuk": [1013, 1014], "connossor": [1013, 1014], "levinson": [1013, 1014], "kieker": [1013, 1014], "kataev": [1013, 1014], "dillon": [1013, 1014, 1015], "gardner": [1013, 1014], "vukolov": [1013, 1014], "caselli": [1013, 1014], "gauravahlawat": [1013, 1014], "gustavo": [1013, 1014, 1019], "haroldfox": [1013, 1014], "jacklangerman": [1013, 1014], "jacopo": [1013, 1014], "notarstefano": [1013, 1014], "janvanrijn": [1013, 1014], "jdethuren": [1013, 1014], "koen": [1013, 1014], "kushal": [1013, 1014], "chauhan": [1013, 1014, 1020], "jie": [1013, 1014, 1017], "lili": [1013, 1014], "xiong": [1013, 1014, 1019], "liam": [1013, 1014], "melsyt": [1013, 1014], "nichola": [1013, 1014, 1016], "shebanov": [1013, 1014], "oleksandr": [1013, 1014, 1015, 1016, 1019], "pavlyk": [1013, 1014, 1015, 1016], "hausamann": [1013, 1014], "pulkit": [1013, 1014, 1016], "maloo": [1013, 1014], "batista": [1013, 1014, 1018], "radostin": [1013, 1014], "stoyanov": [1013, 1014], "ramil": [1013, 1014], "nugmanov": [1013, 1014], "rebekah": [1013, 1014, 1015], "roopam": [1013, 1014], "tiernei": [1013, 1014, 1015], "sylvainlan": [1013, 1014, 1015, 1016, 1017], "takingitcasu": [1013, 1014], "tulio": [1013, 1014], "xing": [1013, 1014], "zach": [1013, 1014, 1019], "mountain": 1013, "sorri": 1013, "basemultilayerperceptron": [1013, 1015], "11924": 1013, "macbook": 1013, "9354": 1013, "9372": 1013, "astel": 1013, "10933": 1013, "hansen": 1013, "10471": 1013, "gaurav": [1013, 1014, 1015, 1016, 1017, 1019], "dhingra": [1013, 1014, 1017], "8003": 1013, "jo\u00ebl": 1013, "billaud": 1013, "10059": 1013, "braun": 1013, "9612": 1013, "jonatan": 1013, "samoocha": 1013, "8129": 1013, "margeta": 1013, "k_means_elkan": 1013, "11353": 1013, "11901": 1013, "9875": 1013, "9012": 1013, "11315": 1013, "9041": 1013, "9858": 1013, "artiem": 1013, "krinitsyn": 1013, "9908": 1013, "8617": 1013, "maskani": [1013, 1015, 1016, 1017], "filali": 1013, "konstantino": 1013, "katriopla": 1013, "10774": 1013, "catalfo": 1013, "10795": 1013, "takeshi": [1013, 1018, 1019, 1020], "yoshizawa": 1013, "11082": 1013, "sadhana": 1013, "srinivasan": [1013, 1016], "9731": 1013, "10045": 1013, "fetch_mldata": 1013, "11466": 1013, "6374": 1013, "normalize_compon": [1013, 1015], "11585": 1013, "ivan": [1013, 1014, 1017, 1020], "panico": [1013, 1017], "11420": 1013, "6452": 1013, "walli": 1013, "gauz": 1013, "9492": 1013, "8484": 1013, "9886": 1013, "underflow": [1013, 1018], "10142": 1013, "5956": 1013, "_class_mean": 1013, "_class_cov": 1013, "10898": 1013, "nanxin": 1013, "9832": 1013, "11951": 1013, "r\u00fcdiger": [1013, 1014, 1016], "busch": [1013, 1014, 1016], "9707": 1013, "wan": 1013, "7071": 1013, "9157": 1013, "11176": 1013, "forsyth": 1013, "11542": 1013, "anna": 1013, "9524": 1013, "9723": 1013, "10908": 1013, "10899": 1013, "melderi": 1013, "10101": 1013, "10\u2079": 1013, "9147": 1013, "clae": 1013, "fredrik": 1013, "mannbi": 1013, "10441": 1013, "mayur": 1013, "kulkarni": 1013, "6689": 1013, "nihar": 1013, "sheth": 1013, "11293": 1013, "9656": 1013, "greenhal": 1013, "n_features_to_comput": 1013, "9222": 1013, "hoh": 1013, "9234": 1013, "andrewww": 1013, "8075": 1013, "11211": 1013, "9484": 1013, "dalla": 1013, "card": 1013, "9043": 1013, "10112": 1013, "logistic_regression_path": [1013, 1014], "11724": 1013, "9939": 1013, "westov": 1013, "10998": 1013, "vazelh": [1013, 1014, 1015], "10071": 1013, "10153": 1013, "d\u00f6pfert": 1013, "10095": 1013, "cv_valu": 1013, "10297": 1013, "mabel": [1013, 1017], "10581": 1013, "yacin": 1013, "mazari": 1013, "10687": 1013, "10836": 1013, "aishwarya": 1013, "10397": 1013, "10992": 1013, "11327": 1013, "11905": 1013, "9837": 1013, "10593": 1013, "10610": 1013, "8554": 1013, "9775": 1013, "10827": 1013, "osa": 1013, "8066": 1013, "10587": 1013, "3840": 1013, "niederb\u00fchl": 1013, "9521": 1013, "11124": 1013, "arya": 1013, "11160": 1013, "barkhorn": 1013, "11679": 1013, "pacha": 1013, "10845": 1013, "perez": [1013, 1020], "parra": 1013, "toledano": 1013, "10999": 1013, "memoryerror": [1013, 1017], "11135": 1013, "10377": 1013, "9786": 1013, "10093": 1013, "alexryndin": 1013, "9772": 1013, "9515": 1013, "liddel": 1013, "manh": 1013, "dao": 1013, "9851": 1013, "10280": 1013, "10336": 1013, "haoran": 1013, "basemixtur": [1013, 1014], "10740": 1013, "10869": 1013, "g\u00e9ron": 1013, "9686": 1013, "11310": 1013, "_fit_and_scor": 1013, "11576": 1013, "ronsin": [1013, 1014], "_run_search": 1013, "9599": 1013, "11006": 1013, "11557": 1013, "boucaud": 1013, "iid": 1013, "9085": 1013, "10677": 1013, "zhdanovich": 1013, "10982": 1013, "juliet": 1013, "lawton": 1013, "10928": 1013, "solutu": 1013, "immensu": 1013, "9257": 1013, "8190": 1013, "alcorn": 1013, "9681": 1013, "mottl": [1013, 1014], "10005": 1013, "10346": 1013, "tobia": [1013, 1018, 1020], "10887": 1013, "11136": 1013, "4394": 1013, "9579": 1013, "kober": 1013, "9655": 1013, "bjerr": 1013, "11556": 1013, "11774": 1013, "9456": 1013, "unexpectedli": 1013, "9304": 1013, "11144": [1013, 1014], "9151": 1013, "10521": 1013, "7668": 1013, "9647": 1013, "10195": 1013, "10192": 1013, "11272": 1013, "11467": 1013, "11505": 1013, "giusepp": [1013, 1014], "costa": [1013, 1018], "10210": 1013, "11520": 1013, "11011": 1013, "11005": 1013, "11308": 1013, "11206": 1013, "11306": 1013, "10437": 1013, "lucija": 1013, "gregov": 1013, "10452": 1013, "10181": 1013, "nirvan": [1013, 1017], "anjirbag": 1013, "9399": 1013, "10913": 1013, "rodrigo": 1013, "agundez": 1013, "10458": 1013, "9816": 1013, "newei": 1013, "11042": 1013, "11235": 1013, "active_features_": 1013, "feature_indices_": 1013, "n_values_": 1013, "9726": 1013, "10829": 1013, "gilberto": 1013, "olimpio": 1013, "10655": 1013, "python2": 1013, "10412": 1013, "jiongyan": 1013, "9497": 1013, "8361": 1013, "neo": 1013, "_criterion": 1013, "classificationcriterion": 1013, "regressioncriterion": 1013, "10325": 1013, "camil": 1013, "stap": 1013, "basedecisiontre": [1013, 1014, 1017], "10536": 1013, "ohayon": [1013, 1014, 1021], "11464": 1013, "stott": 1013, "10663": 1013, "10229": 1013, "11553": 1013, "10881": 1013, "sevin": 1013, "ridge_regress": [1013, 1014, 1020], "10306": 1013, "siebert": 1013, "11741": 1013, "11166": 1013, "pypy3": 1013, "v5": 1013, "11010": 1013, "lami": 1013, "11596": 1013, "marcu": 1013, "voss": 1013, "9569": 1013, "12462": 1013, "zachariah": 1013, "10474": 1013, "10500": 1013, "9701": 1013, "9378": 1013, "check_set_param": 1013, "7738": 1013, "alvin": 1013, "chiang": 1013, "8102": 1013, "ankita": 1013, "sinha": 1013, "check_methods_subset_invari": [1013, 1019], "10428": 1013, "check_sample_weights_pandas_seri": 1013, "11558": 1013, "211217613": 1013, "absolutelynowarranti": 1013, "richi": 1013, "halford": [1013, 1020], "adelr": 1013, "adityadaflapurkar": 1013, "aidan": 1013, "fitzgerald": 1013, "aishgrt1": 1013, "akash": 1013, "shivram": 1013, "lenail": [1013, 1017], "egg": 1013, "diaz": 1013, "amanda": [1013, 1016, 1017, 1018, 1019], "aniruddha": 1013, "annaayzenshtat": 1013, "antonio": [1013, 1015], "quinonez": 1013, "anubhav": 1013, "marwaha": 1013, "arik": 1013, "pamnani": 1013, "ozga": 1013, "arunava": 1013, "geron": [1013, 1018, 1019], "ayush": [1013, 1018], "bangda": 1013, "bastian": 1013, "venthur": 1013, "benn": 1013, "koonc": 1013, "cclauss": 1013, "chadi": 1013, "kamar": 1013, "holdgraf": 1013, "hirsch": 1013, "hogan": 1013, "cnx": 1013, "cwitt": 1013, "ferreira": [1013, 1018, 1019], "gomez": [1013, 1020], "klevebr": 1013, "shwed": 1013, "mohn": [1013, 1017], "danil": 1013, "baibak": [1013, 1014], "beach": 1013, "pickup": 1013, "derek": 1013, "niederhut": [1013, 1015], "dilutedsauc": 1013, "dlovel": 1013, "dor": 1013, "dougla": 1013, "duhaim": 1013, "tuzova": 1013, "eunji": 1013, "farahsae": 1013, "raimundo": 1013, "fenx": 1013, "frankhui": 1013, "franz": 1013, "wompner": 1013, "freija": 1013, "descamp": 1013, "frsi": 1013, "calvo": [1013, 1014], "georgi": [1013, 1016], "peev": [1013, 1016], "gkevinyen5418": 1013, "vermeil": 1013, "hongh": 1013, "hossein": [1013, 1014, 1015], "pourbozorg": [1013, 1014, 1015], "hristo": [1013, 1020], "hunan": 1013, "rostomyan": 1013, "iampat": 1013, "jaewon": 1013, "malcolm": 1013, "jami": 1013, "wolosonovich": 1013, "jeb": 1013, "bearer": 1013, "jinkun": 1013, "jjabl": 1013, "johnstott": 1013, "jotasi": 1013, "julietcl": 1013, "shenk": 1013, "karl": 1013, "kasper": 1013, "primdal": 1013, "lauritzen": 1013, "ksemb": 1013, "kuai": [1013, 1014], "kyeongpil": 1013, "kang": [1013, 1015], "kye": 1013, "kyledrogo": 1013, "l\u00e9o": 1013, "liutong": 1013, "lizao": 1013, "lkjcalc": 1013, "louib": [1013, 1014], "luciano": [1013, 1020], "luke": 1013, "persola": 1013, "markiwanchyshyn": 1013, "marsgui": 1013, "gubri": [1013, 1014], "koko": [1013, 1019, 1020], "copeland": [1013, 1014], "meghann": [1013, 1015], "minh": 1013, "jamaoui": [1013, 1014, 1017], "mohammad": [1013, 1014], "shahebaz": 1013, "muayyad": 1013, "alsadi": 1013, "nabarun": 1013, "pal": [1013, 1019], "narendran": 1013, "santhanam": 1013, "suh": 1013, "eng": 1013, "av": 1013, "nicolau": 1013, "werneck": 1013, "titov": [1013, 1015, 1018, 1019], "nilesh": 1013, "kevlani": 1013, "notmatthancock": [1013, 1015], "nzw": 1013, "oren": 1013, "milman": 1013, "osaid": 1013, "rehman": 1013, "nasir": 1013, "fernand": [1013, 1019, 1020], "olden": 1013, "pierreablin": 1013, "pietruh": 1013, "pinaki": 1013, "nath": 1013, "chowdhuri": [1013, 1019], "piotr": [1013, 1014], "szyma\u0144ski": [1013, 1014], "pradeep": [1013, 1014], "raamana": [1013, 1014], "pravar": 1013, "mahajan": [1013, 1015], "qingi": 1013, "rajendra": 1013, "arora": [1013, 1020], "rankylau": 1013, "kosobrodov": 1013, "rragundez": 1013, "sagnik": 1013, "bhattacharya": 1013, "radhakrishnan": 1013, "saqib": 1013, "nizam": 1013, "shamsi": 1013, "satish": 1013, "gigant": [1013, 1015, 1020], "flennerhag": 1013, "sebastien": 1013, "shalil": 1013, "awalei": 1013, "shangwu": [1013, 1014], "sharad": 1013, "vijalapuram": 1013, "shenhanc78": 1013, "rastogi": 1013, "siftikha": 1013, "sinclert": 1013, "p\u00e9rez": 1013, "solutusimmensu": 1013, "somya": 1013, "anand": [1013, 1017], "srajan": 1013, "paliw": 1013, "sriharsha": [1013, 1014], "hatwar": [1013, 1014], "mcdowel": 1013, "syonekura": 1013, "takanori": 1013, "hayashi": 1013, "tarcusx": 1013, "theriley106": 1013, "heavei": 1013, "augspurg": [1013, 1015], "trishnendu": 1013, "ghorai": 1013, "twosigmajab": 1013, "umar": [1013, 1014], "farouk": [1013, 1014], "urvang": [1013, 1015], "patel": [1013, 1015, 1016, 1017, 1019], "vadim": [1013, 1017, 1018], "markovtsev": 1013, "vinit": 1013, "vinod": 1013, "viraj": 1013, "mavani": 1013, "navkal": 1013, "vqean3": [1013, 1014], "vufg": 1013, "wallygauz": 1013, "wdevazelh": 1013, "barnett": 1013, "rosenfeld": 1013, "yime": 1013, "ymazari": 1013, "yufeng": 1013, "griffith": [1013, 1014], "z\u00e9": 1013, "vin\u00edciu": 1013, "zhenq": 1013, "zhiqe": 1013, "xiao": [1013, 1015, 1018, 1019, 1020, 1021], "couldn": [1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "12955": 1014, "klopfer": 1014, "14197": 1014, "14024": 1014, "nicolashug": 1014, "13974": 1014, "hoang": [1014, 1015], "fhoang7": 1014, "14393": 1014, "guillem": [1014, 1015, 1020], "subi": [1014, 1015, 1020], "14087": 1014, "14067": 1014, "stalei": [1014, 1015], "14092": 1014, "14053": 1014, "13947": 1014, "instanci": 1014, "suffient": 1014, "13910": 1014, "13894": 1014, "myatt": [1014, 1015], "min_max_axi": 1014, "13741": 1014, "roddi": [1014, 1015], "macsween": [1014, 1015], "14309": 1014, "13864": 1014, "paresh": [1014, 1015], "13877": 1014, "_sag": 1014, "sag_solv": 1014, "3591": 1014, "13317": 1014, "13157": 1014, "13086": 1014, "cole": 1014, "13485": 1014, "assia": 1014, "benbihi": 1014, "13651": 1014, "reloc": 1014, "13486": 1014, "13427": 1014, "couvreur": [1014, 1015], "9069": 1014, "13835": 1014, "10727": 1014, "wood": 1014, "13250": 1014, "13241": 1014, "12143": 1014, "11650": 1014, "non_negative_factor": [1014, 1016, 1017, 1018], "12988": 1014, "8769": 1014, "11000": 1014, "thibault": 1014, "sejourn": 1014, "changedbehaviourwarn": 1014, "11526": 1014, "6848": 1014, "glemaitr": [1014, 1015, 1017], "11727": 1014, "13266": 1014, "13545": 1014, "sorro": 1014, "12807": 1014, "12513": 1014, "12543": 1014, "storch": 1014, "13260": 1014, "13283": 1014, "13524": 1014, "13174": 1014, "13496": 1014, "13620": 1014, "12436": 1014, "12983": 1014, "13251": 1014, "joshuakennethjon": 1014, "12715": 1014, "13164": 1014, "12834": 1014, "leastsquareserror": 1014, "update_terminal_region": 1014, "6463": 1014, "movelikeriv": 1014, "13193": 1014, "12599": 1014, "13779": 1014, "13780": 1014, "12916": 1014, "13641": 1014, "8478": 1014, "12177": 1014, "12583": 1014, "13601": 1014, "danylo": 1014, "densif": 1014, "13240": 1014, "bartosz": 1014, "13562": 1014, "11646": 1014, "11699": 1014, "make_dataset": 1014, "13336": 1014, "toleranbc": 1014, "11754": 1014, "13397": 1014, "fagan": 1014, "12174": 1014, "12972": 1014, "lucio": 1014, "fernandez": 1014, "arjona": 1014, "coeffeci": 1014, "13279": 1014, "13328": 1014, "13389": 1014, "basesgdclassifi": 1014, "13422": 1014, "cl\u00e9ment": [1014, 1018, 1020], "doumouro": 1014, "unhandl": 1014, "13363": 1014, "12821": 1014, "13350": 1014, "j\u00e9r\u00f4me": [1014, 1015, 1016], "dock\u00e8": [1014, 1015, 1016], "9907": 1014, "12232": 1014, "sangeeth": 1014, "11179": 1014, "13151": 1014, "12568": 1014, "8216": 1014, "romuald": 1014, "menuet": 1014, "12732": 1014, "12334": 1014, "13607": 1014, "12855": 1014, "pawel": 1014, "sendyk": 1014, "13628": 1014, "13447": 1014, "10580": 1014, "sandra": [1014, 1020], "mitrov": 1014, "13554": 1014, "celelibi": 1014, "13142": 1014, "11354": 1014, "12613": 1014, "12669": 1014, "torrella": [1014, 1015, 1021], "12861": 1014, "8773": 1014, "13366": 1014, "fournier": 1014, "10440": 1014, "12222": 1014, "10058": 1014, "chiotelli": 1014, "12279": 1014, "12582": 1014, "my_pipelin": 1014, "2568": 1014, "make_": 1014, "11364": 1014, "baze": 1014, "petrushev": 1014, "__len__": 1014, "13439": 1014, "12908": 1014, "drew": 1014, "13253": 1014, "12116": 1014, "12197": 1014, "12251": 1014, "float16": 1014, "13007": 1014, "raffaello": 1014, "baluyot": 1014, "13333": 1014, "13459": 1014, "hunter": 1014, "mcgushion": 1014, "8508": 1014, "6261": 1014, "vettigli": 1014, "justglow": 1014, "12300": 1014, "11458": 1014, "mitar": 1014, "milutinov": 1014, "12344": 1014, "13549": 1014, "warn_on_dtyp": 1014, "check_pairwise_arrai": 1014, "13382": 1014, "prathmesh": 1014, "saval": 1014, "11705": 1014, "11973": 1014, "our_rand_r": 1014, "madhura": [1014, 1016, 1017, 1020], "parikh": [1014, 1019, 1020, 1021], "13531": 1014, "check_fit_idempot": 1014, "alberto": [1014, 1018, 1019], "torr": 1014, "amourav": 1014, "assiaben": 1014, "micha\u0142owski": 1014, "brentfagan": 1014, "chenal": [1014, 1015, 1017], "choe": 1014, "drewmjohnston": 1014, "dror": 1014, "atariah": 1014, "esvhd": 1014, "falak": 1014, "gandenberg": 1014, "luqi": 1014, "jf": 1014, "kulbear": 1014, "leandro": [1014, 1018], "hermida": [1014, 1018], "luk": 1014, "manimaran": [1014, 1016, 1017, 1018, 1019], "gaido": 1014, "marinelm": 1014, "masstran": 1014, "roeschk": 1014, "aftab": 1014, "abdela": 1014, "ibraheem": 1014, "mwestt": 1014, "iijima": 1014, "oresti": 1014, "osman": [1014, 1020], "flanagan": [1014, 1015], "soriano": 1014, "peai": 1014, "pim": 1014, "haan": 1014, "raf": 1014, "rajdeep": 1014, "dua": 1014, "ra\u00fal": 1014, "garc\u00eda": [1014, 1015, 1020], "lekhwani": 1014, "varma": 1014, "shiyu": 1014, "duan": [1014, 1016], "smari": [1014, 1015, 1016], "st\u00e9phane": [1014, 1015, 1019, 1020], "surgan12": 1014, "thibsej": 1014, "xhan": 1014, "xinyuliu12": 1014, "zayd": 1014, "hammoudeh": 1014, "16397": [1015, 1016], "16500": 1015, "16505": 1015, "16076": 1015, "shack": [1015, 1016, 1017], "15930": 1015, "inder128": 1015, "15810": 1015, "15898": 1015, "gargsya": 1015, "15933": 1015, "15760": 1015, "15888": 1015, "15936": 1015, "dizietasahi": 1015, "15879": 1015, "bibhash": [1015, 1016], "chandra": [1015, 1016, 1019], "mitra": [1015, 1016, 1020], "15937": 1015, "blyston": [1015, 1016], "15863": 1015, "abstractmethod": 1015, "_check_x": 1015, "basenb": 1015, "15996": 1015, "brigitta": [1015, 1016, 1017, 1021], "sip\u0151cz": [1015, 1016, 1017, 1021], "15751": 1015, "tirth": [1015, 1016], "15868": 1015, "nikla": [1015, 1016], "smedemark": 1015, "marguli": 1015, "15797": 1015, "15947": 1015, "revamp": 1015, "14849": 1015, "_name_estim": 1015, "_gb": 1015, "facto": 1015, "_birch": 1015, "9250": 1015, "12927": 1015, "deprecationwarn": 1015, "interfer": 1015, "hinder": 1015, "15080": 1015, "14464": 1015, "13575": 1015, "10482": 1015, "13726": 1015, "shuzh": 1015, "9288": 1015, "15057": 1015, "korolev": 1015, "15120": 1015, "7943": 1015, "12303": 1015, "14510": 1015, "14890": 1015, "miguel": 1015, "cabrera": 1015, "14544": 1015, "15304": 1015, "jaim": 1015, "ferrando": 1015, "huerta": 1015, "12068": 1015, "12145": 1015, "13609": 1015, "camila": 1015, "williamson": 1015, "15661": 1015, "15160": 1015, "14259": 1015, "14764": 1015, "14740": 1015, "st\u00e9phan": 1015, "tulken": 1015, "14623": 1015, "sarra": 1015, "habchi": 1015, "15257": 1015, "willocx": 1015, "12650": 1015, "13960": 1015, "multiouput": 1015, "14908": 1015, "martina": [1015, 1017], "vila": [1015, 1017], "15382": 1015, "14933": 1015, "15138": 1015, "cusick": 1015, "14406": 1015, "14012": 1015, "faouzi": [1015, 1016], "13769": 1015, "14194": 1015, "least_absolute_devi": [1015, 1017, 1018], "13896": 1015, "13933": 1015, "14710": 1015, "categorical_crossentropi": [1015, 1019], "14869": 1015, "14682": 1015, "hancock": 1015, "5963": 1015, "pablo": [1015, 1018, 1019], "dubou": 1015, "14287": 1015, "15375": 1015, "14305": 1015, "14114": 1015, "15084": 1015, "14294": 1015, "14907": 1015, "14602": 1015, "chawla": 1015, "vectorizermixin": 1015, "14430": 1015, "strip_accents_unicod": 1015, "15100": 1015, "gradi": 1015, "overflowerror": 1015, "15463": 1015, "norvan": 1015, "sahin": 1015, "14520": 1015, "11635": 1015, "alec": 1015, "13704": 1015, "15557": 1015, "14378": 1015, "masashi": [1015, 1017], "shibata": 1015, "ashim": 1015, "bhattarai": 1015, "15010": 1015, "skip_comput": 1015, "13773": 1015, "14356": 1015, "15393": 1015, "venkatachalam": [1015, 1016, 1017, 1018, 1019], "14646": 1015, "14028": 1015, "15429": 1015, "14706": 1015, "14108": 1015, "14170": 1015, "14296": 1015, "13618": 1015, "13995": 1015, "14458": 1015, "14591": 1015, "14864": 1015, "15044": 1015, "15086": 1015, "15038": 1015, "15082": 1015, "13213": 1015, "14647": 1015, "linalgerror": 1015, "13393": 1015, "13707": 1015, "training_data_": 1015, "14357": 1015, "14900": 1015, "socastro": [1015, 1021], "9951": 1015, "14936": 1015, "15083": 1015, "12789": 1015, "15274": 1015, "13938": 1015, "15049": 1015, "toccac": 1015, "ptocca": 1015, "13231": 1015, "dong": 1015, "13467": 1015, "14595": 1015, "14865": 1015, "l\u00e9onard": [1015, 1020], "binet": [1015, 1020], "14732": 1015, "14417": 1015, "15625": 1015, "12258": 1015, "14898": 1015, "matcovici": 1015, "14593": 1015, "reboul": 1015, "14549": 1015, "14704": 1015, "15096": 1015, "14629": 1015, "15488": 1015, "15490": 1015, "12569": 1015, "bicker": 1015, "9597": 1015, "wenbo": [1015, 1017], "zhao": [1015, 1017, 1018, 1019, 1020], "14336": 1015, "dexter": 1015, "9274": 1015, "perri": 1015, "13806": 1015, "ana\u00ebl": 1015, "beaugnon": 1015, "15119": 1015, "15053": 1015, "13290": 1015, "13987": 1015, "_pairwis": [1015, 1017], "13925": 1015, "robson": 1015, "15524": 1015, "xun": [1015, 1017], "12557": 1015, "border": 1015, "14286": 1015, "15099": 1015, "baselibsvm": 1015, "_sparse_fit": 1015, "14894": 1015, "danna": 1015, "naser": 1015, "12887": 1015, "15028": 1015, "guan": 1015, "14381": 1015, "11232": 1015, "sievert": 1015, "10815": 1015, "14035": 1015, "14475": 1015, "14538": 1015, "14872": 1015, "upcast": [1015, 1019], "15094": 1015, "choose_check_classifiers_label": 1015, "enforce_estimator_tags_i": 1015, "mock": 1015, "mockdatafram": 1015, "checkingclassifi": 1015, "newton_cg": 1015, "random_choice_csc": 1015, "fast_dict": 1015, "parallel_help": 1015, "14902": 1015, "14971": 1015, "nep": 1015, "14702": 1015, "13013": 1015, "13875": 1015, "14680": 1015, "check_classifier_multioutput": 1015, "check_regressor_multioutput": 1015, "13392": 1015, "rok": 1015, "mihevc": 1015, "check_transformer_data_not_an_arrai": 1015, "mro": [1015, 1016], "14884": 1015, "alphonsu": 1015, "abbi": [1015, 1016], "popa": [1015, 1016], "abdur": 1015, "rahmaan": 1015, "janhang": 1015, "abenbihi": 1015, "abhinav": [1015, 1018], "sagar": 1015, "jana": 1015, "lagat": 1015, "alessandro": [1015, 1017, 1020], "surac": 1015, "siqueira": 1015, "alexgoryainov": 1015, "itk": [1015, 1016, 1017], "alexshack": [1015, 1016, 1017], "akinkunl": 1015, "kaseorg": 1015, "maldonado": [1015, 1018], "angela": [1015, 1016, 1020], "ambroz": [1015, 1016], "anisha": 1015, "keshavan": 1015, "gutierrez": 1015, "anuja": 1015, "archana": [1015, 1017], "alva": 1015, "arnaudstiegl": 1015, "arpanchowdhri": 1015, "ashimb9": 1015, "ayomid": 1015, "bamidel": 1015, "baran": 1015, "buluttekin": 1015, "barrycg": 1015, "bill": [1015, 1016], "mill": 1015, "biswadip": 1015, "mandal": 1015, "blackd0t": 1015, "barklei": 1015, "c56poni": 1015, "camilaagw": 1015, "cartman_nabana": 1015, "catajara": 1015, "cgsavard": [1015, 1016], "vesteghem": 1015, "dakota": 1015, "grusak": 1015, "datenbergwerk": 1015, "dormagen": 1015, "deeplook": 1015, "drgfreeman": 1015, "cashman": 1015, "edvardlindelof": 1015, "ndirangu": [1015, 1019], "eunseop": 1015, "jeong": 1015, "fanni": 1015, "federicopisanu": 1015, "divo": 1015, "flaviomorelli": 1015, "francidona": 1015, "franco": 1015, "luqu": 1015, "freder": 1015, "haas": 1015, "g0g0gadget": 1015, "altai": 1015, "vale": 1015, "rio": [1015, 1017, 1018, 1019], "ganevgv": 1015, "gdex1": 1015, "getgaurav2": 1015, "gideon": 1015, "sonoiya": 1015, "gpapadok": [1015, 1019], "mogavero": 1015, "h4dr1en": 1015, "hadshirt": 1015, "hailei": [1015, 1016], "nguyen": [1015, 1016, 1019, 1020], "hannah": [1015, 1017, 1019], "bruce": [1015, 1016], "macdonald": [1015, 1016], "honglu": 1015, "ingrid": 1015, "spielman": 1015, "a16": [1015, 1016], "jaehong": 1015, "jai": [1015, 1019], "jeromedock": 1015, "jesper": 1015, "dramsch": 1015, "joanna": 1015, "ortiz": 1015, "kanika": 1015, "sabharw": 1015, "katarina": [1015, 1017], "slama": [1015, 1017], "kellycarmodi": 1015, "eth": 1015, "kensuk": 1015, "arai": 1015, "kesshi": [1015, 1016], "kevad": 1015, "lofti": [1015, 1016], "winata": [1015, 1017], "sheng": 1015, "dolmatov": 1015, "kirthi": 1015, "shankar": 1015, "sivamani": 1015, "katyal": 1015, "lakshmi": 1015, "krishnan": 1015, "lalliacqua": [1015, 1018], "lbfin": 1015, "loopym": 1015, "lostcoast": 1015, "huynh": [1015, 1017], "lrjball": [1015, 1016], "roeder": 1015, "maggiecheg": [1015, 1019], "maithreyi": 1015, "venkatesh": 1015, "maltimor": 1015, "maocx": 1015, "douriez": [1015, 1016], "oywa": 1015, "aladago": 1015, "mbillingr": 1015, "clare": 1015, "micah": 1015, "miguelbarao": 1015, "mina": [1015, 1016], "naghshhnejad": [1015, 1016], "motmoti": 1015, "mschaffenroth": 1015, "natasha": 1015, "nezar": 1015, "nidhin": 1015, "pattaniyil": 1015, "nishan": 1015, "mann": 1015, "nitya": 1015, "mandyam": 1015, "novaya": [1015, 1018], "nxorabl": 1015, "oleg": 1015, "stikhin": 1015, "omar": [1015, 1020, 1021], "saleem": 1015, "panpiort8": [1015, 1017], "paula": [1015, 1016], "poorna": [1015, 1017], "pspachtholz": [1015, 1016, 1017], "qdeffens": [1015, 1018], "garg": [1015, 1016], "rapha\u00ebl": 1015, "bournhonesqu": 1015, "reza": 1015, "gharibi": 1015, "payn": 1015, "rlm": 1015, "juergen": [1015, 1020], "sanjabi": 1015, "ruchitagard": 1015, "ruth": 1015, "waithera": 1015, "sackei": 1015, "samesh": [1015, 1016], "lakhotia": [1015, 1016], "sewook": 1015, "dare": 1015, "shreya": 1015, "simoncw": 1015, "smujjiga": 1015, "s\u00f6nke": 1015, "behrend": 1015, "soumirai": 1015, "steinfurt": [1015, 1017], "cowlei": 1015, "th0rwa": [1015, 1016], "theoptip": [1015, 1016], "theotheo": 1015, "thierno": 1015, "ibrahima": 1015, "diop": 1015, "schmitt": [1015, 1016], "tilen": 1015, "kusterl": 1015, "timsaur": 1015, "tola": 1015, "topisan": 1015, "ttang131": 1015, "veerlosar": 1015, "luzgin": 1015, "jeanselm": 1015, "lostanlen": 1015, "vnherdeiro": 1015, "wendi": 1015, "willdarnel": 1015, "wolframalpha": 1015, "xcjason": 1015, "martian": 1015, "xsat": 1015, "yinglr": 1015, "yokasr": 1015, "maxin": [1015, 1016], "yulia": 1015, "zamrii": 1015, "feng": [1015, 1017, 1018, 1019], "17959": 1016, "17848": 1016, "17742": 1016, "17995": 1016, "thomaz": 1016, "santana": [1016, 1019], "dsouza": [1016, 1017, 1018, 1019], "17433": 1016, "17985": 1016, "multinomialdevi": 1016, "logloss": [1016, 1020], "17694": 1016, "rempfler": 1016, "tsutomu": 1016, "kusanagi": [1016, 1018], "17357": 1016, "18016": 1016, "x_copi": 1016, "17914": 1016, "15730": 1016, "forrest": [1016, 1017], "17309": 1016, "swier": [1016, 1017], "heer": 1016, "17360": 1016, "17812": 1016, "bruno": [1016, 1017, 1018], "idl": 1016, "17210": 1016, "17235": 1016, "17204": 1016, "changed_onli": 1016, "17205": 1016, "15005": [1016, 1018], "slep009": [1016, 1018, 1019], "estimator_samples_": 1016, "16149": 1016, "11950": 1016, "11514": 1016, "16075": 1016, "16484": 1016, "agglomerativecluclust": 1016, "16257": 1016, "simona": [1016, 1017, 1018], "maggio": [1016, 1017, 1018], "16801": 1016, "rcwoolston": 1016, "16431": 1016, "14048": 1016, "15963": 1016, "16084": 1016, "15950": 1016, "stephani": 1016, "15980": 1016, "wconnel": 1016, "15709": 1016, "15707": 1016, "maciej": 1016, "mikulski": 1016, "16006": 1016, "rushabh": 1016, "vasani": 1016, "streamhandl": 1016, "logger": 1016, "handler": 1016, "16451": 1016, "16280": 1016, "16837": 1016, "wornbb": 1016, "15669": 1016, "chaitanya": 1016, "16224": 1016, "schwetlick": [1016, 1017], "gelavizh": 1016, "ahmadi": 1016, "marija": [1016, 1017], "vlajic": [1016, 1017], "wheeler": [1016, 1017], "16841": 1016, "16655": 1016, "16718": 1016, "miotto": 1016, "16981": 1016, "g\u00f3rski": [1016, 1017], "14696": 1016, "14516": 1016, "15582": 1016, "16069": 1016, "bail": 1016, "16183": 1016, "16182": 1016, "santhosh": 1016, "16437": 1016, "hwan": 1016, "cho": 1016, "16539": 1016, "deros": 1016, "16692": 1016, "16663": 1016, "15834": 1016, "santiago": 1016, "mola": 1016, "16103": 1016, "divyaprabha": 1016, "selectormixin": 1016, "16132": 1016, "trimeta": 1016, "15503": 1016, "15782": 1016, "plgreenliru": 1016, "16403": 1016, "narendra": 1016, "mukherje": 1016, "16508": 1016, "15864": 1016, "14300": 1016, "15436": 1016, "15652": 1016, "15179": 1016, "angelaambroz": 1016, "15773": 1016, "15655": 1016, "14848": 1016, "absgrad": 1016, "_newton_cg": 1016, "16266": 1016, "standard_coef_": 1016, "standard_intercept_": 1016, "average_coef_": 1016, "average_intercept_": 1016, "16261": 1016, "brandt": 1016, "16849": 1016, "14264": 1016, "17021": 1016, "16323": 1016, "16362": 1016, "16442": 1016, "parson": [1016, 1018], "rick": 1016, "mackenbach": 1016, "16993": 1016, "emit": 1016, "15622": 1016, "mors": 1016, "15918": 1016, "kubin": 1016, "fit_grid_point": 1016, "16401": 1016, "pratama": 1016, "sutiono": 1016, "15953": 1016, "15959": 1016, "16111": 1016, "16090": 1016, "jayaratn": [1016, 1017, 1020], "14075": 1016, "meyer89": 1016, "16117": 1016, "15785": 1016, "16245": 1016, "16585": 1016, "15762": 1016, "16466": 1016, "16632": 1016, "maura": 1016, "pintor": 1016, "battista": 1016, "biggio": 1016, "15946": 1016, "ngshya": 1016, "32767": 1016, "mersenn": 1016, "twister": 1016, "31bit": 1016, "63bit": 1016, "crude": 1016, "postprocessor": 1016, "lemir": 1016, "13511": 1016, "kennel": 1016, "11296": 1016, "15558": 1016, "15806": 1016, "16331": 1016, "batiss": 1016, "15926": 1016, "16021": 1016, "sparsearrai": 1016, "16728": 1016, "uint": 1016, "17032": 1016, "_safe_tag": 1016, "16950": 1016, "15380": 1016, "acitiv": 1016, "16726": 1016, "16112": 1016, "16622": 1016, "17061": 1016, "aleksandra": 1016, "kocot": 1016, "alonso": [1016, 1018], "allend": [1016, 1018], "ana": [1016, 1018], "casado": 1016, "ankit810": 1016, "arunav": 1016, "konwar": 1016, "maingret": 1016, "beier": 1016, "berni": 1016, "bharathi": 1016, "brigi": [1016, 1017], "castachick": 1016, "castor": 1016, "corri": 1016, "bartelheim": 1016, "dani\u00ebl": 1016, "gelder": 1016, "daphn": 1016, "breuer": 1016, "cort": [1016, 1017, 1020], "dbauer9": 1016, "borovikova": 1016, "eln": 1016, "emili": [1016, 1017], "leung": 1016, "evgeni": 1016, "chasnovski": 1016, "fabiana": 1016, "facundo": [1016, 1019], "ferr\u00edn": 1016, "franziska": 1016, "boenisch": 1016, "bolmier": [1016, 1017], "gholdman1": 1016, "gonthier": 1016, "hao": [1016, 1017, 1019, 1020], "chun": [1016, 1017, 1019, 1020, 1021], "haoyin": [1016, 1018, 1019], "h\u00e9lion": 1016, "bourboux": 1016, "himanshu": [1016, 1019], "hirofumi": [1016, 1017], "suzuki": [1016, 1017], "huangk10": 1016, "kemenad": 1016, "hye": 1016, "sung": 1016, "indecisiveus": [1016, 1017], "inderjeet": 1016, "jjmistri": 1016, "haitz": [1016, 1018, 1019], "legarreta": [1016, 1018, 1019], "gorro\u00f1o": [1016, 1018, 1019], "judithabk6": 1016, "jumon": 1016, "kathryn": 1016, "krishnachaitanya9": 1016, "gia": 1016, "thuan": 1016, "lkubin": 1016, "lopusz": 1016, "lucgiffon": 1016, "lucyleeow": 1016, "kemk": 1016, "magda": 1016, "zielinska": 1016, "mandi": [1016, 1019], "gu": [1016, 1017, 1019], "manish": 1016, "aradwad": 1016, "maren": [1016, 1017, 1018, 1019, 1020], "westermann": [1016, 1017, 1018, 1019, 1020], "mariana": 1016, "meirel": 1016, "mariel": 1016, "mc4229": 1016, "shoemak": 1016, "micha\u0142": 1016, "s\u0142apek": 1016, "mojca": 1016, "bertoncelj": 1016, "narendramukherje": 1016, "nicolasservel": 1016, "nkish": 1016, "noa": 1016, "tamir": [1016, 1019], "olicairn": 1016, "ur": 1016, "lenz": [1016, 1020], "delanou": 1016, "qizhi": 1016, "quang": 1016, "rachelcjordan": 1016, "raduspaimoc": 1016, "riccardo": 1016, "folloni": 1016, "ritchi": 1016, "rori": 1016, "hartong": 1016, "redden": 1016, "sambhav": 1016, "kothari": 1016, "santhoshbala18": 1016, "sarat": 1016, "addep": 1016, "scibol": 1016, "kie\u00dfl": 1016, "sergiodsr": 1016, "shiki": 1016, "shubh": 1016, "chatterje": 1016, "simonamaggio": [1016, 1017, 1018], "snowhit": 1016, "stareh": 1016, "marsh": 1016, "sunmi": 1016, "yoon": 1016, "talgatomarov": 1016, "tamirlan1": 1016, "nonner": 1016, "vink": [1016, 1018], "tiphain": 1016, "viard": 1016, "titu": 1016, "vachan": 1016, "vandana": 1016, "iyer": 1016, "waelbenamara": 1016, "wderos": 1016, "wenliwyan": 1016, "windber": 1016, "19579": 1017, "19646": 1017, "stopiter": 1017, "19922": 1017, "19732": 1017, "ishikawa": [1017, 1018], "19407": 1017, "ushtanit": [1017, 1018], "19982": 1017, "19939": 1017, "halvic": 1017, "19703": 1017, "sobkevich": 1017, "villaz\u00f3n": 1017, "terraza": 1017, "fonari": [1017, 1018], "19182": 1017, "yosuk": [1017, 1018], "kobayashi": [1017, 1018], "19721": 1017, "19659": 1017, "19211": 1017, "19847": 1017, "xiaoyu": 1017, "chai": [1017, 1020], "19308": 1017, "19234": 1017, "19727": 1017, "delong": [1017, 1018], "transfrom": 1017, "19888": 1017, "19924": 1017, "19271": 1017, "zhaowei": 1017, "19580": 1017, "brice": [1017, 1018], "adamson": 1017, "wil": 1017, "yegelwel": 1017, "css": 1017, "19417": 1017, "19179": 1017, "19126": 1017, "17448": 1017, "17107": 1017, "17546": 1017, "17856": 1017, "17984": 1017, "riedmann": 1017, "francesco": [1017, 1020], "casalegno": 1017, "18052": 1017, "sean": [1017, 1018, 1020], "stallei": 1017, "17937": 1017, "counts_": 1017, "init_size_": 1017, "17864": 1017, "17616": 1017, "18167": 1017, "18256": 1017, "jayratn": 1017, "16392": 1017, "17095": 1017, "18746": 1017, "18525": 1017, "norm_y_weight": 1017, "x_mean_": 1017, "y_mean_": 1017, "x_std_": 1017, "y_std_": 1017, "18768": 1017, "18302": 1017, "md5": 1017, "checksum": 1017, "14800": 1017, "17396": 1017, "jiaxiang": 1017, "17491": 1017, "18280": 1017, "17499": 1017, "17610": 1017, "11064": 1017, "17414": 1017, "18149": 1017, "17679": 1017, "18528": 1017, "villanova": [1017, 1018], "14446": 1017, "18394": 1017, "16985": 1017, "garbag": 1017, "18334": 1017, "multicor": [1017, 1018], "18341": 1017, "egor": 1017, "smirnov": 1017, "18410": 1017, "17702": 1017, "18326": 1017, "changedbehaviorwarn": 1017, "nonblasdotwarn": 1017, "17804": 1017, "17367": 1017, "15427": 1017, "gangesh": 1017, "gudmalwar": 1017, "erin": 1017, "6545": 1017, "17159": 1017, "15361": 1017, "17878": 1017, "17090": 1017, "_check_bounds_param": 1017, "12638": 1017, "lannuzel": 1017, "17526": 1017, "ayako": 1017, "yagi": 1017, "17612": 1017, "srimukh": 1017, "sripada": 1017, "16493": 1017, "darshan": 1017, "15636": 1017, "18987": 1017, "16619": 1017, "16906": 1017, "roei": 1017, "kahni": 1017, "18293": 1017, "16289": 1017, "kishimoto": 1017, "18639": 1017, "13003": 1017, "s\u00e1nchez": 1017, "18545": 1017, "laurenz": 1017, "reitsam": 1017, "17578": 1017, "knox": 1017, "6624": 1017, "marijn": 1017, "vliet": 1017, "18121": 1017, "18607": 1017, "fhaselbeck": 1017, "18622": 1017, "haesun": [1017, 1020], "10493": 1017, "17997": 1017, "maisonneuv": 1017, "17662": 1017, "18278": 1017, "17412": 1017, "16625": 1017, "10591": 1017, "karnowski": 1017, "plot_det_curv": [1017, 1018], "18176": 1017, "10708": 1017, "15007": 1017, "hathidara": 1017, "10711": 1017, "17192": 1017, "avi": [1017, 1018], "17225": 1017, "17569": 1017, "17651": 1017, "mato": 1017, "17777": 1017, "shubhanshu": 1017, "mishra": [1017, 1018], "17826": 1017, "decal": 1017, "willard": 1017, "17935": 1017, "cari": 1017, "goltermann": 1017, "18114": 1017, "18405": 1017, "yakov": 1017, "pchelintsev": 1017, "13900": 1017, "17478": 1017, "teon": 1017, "13204": 1017, "kosic": 1017, "18527": 1017, "18343": 1017, "devi": 1017, "sandeep": 1017, "18595": 1017, "18222": 1017, "18266": 1017, "subrat": 1017, "sahu": 1017, "15126": 1017, "17987": 1017, "17233": 1017, "zolisa": 1017, "bleki": 1017, "histgradientboost": 1017, "18124": 1017, "brocchini": 1017, "armstrong": 1017, "17427": 1017, "17038": 1017, "neighborsbas": [1017, 1020], "17148": 1017, "18691": 1017, "18370": 1017, "18612": 1017, "17603": 1017, "17604": 1017, "17606": 1017, "17608": 1017, "17609": 1017, "17633": 1017, "17661": 1017, "17932": 1017, "16352": 1017, "17759": 1017, "18269": 1017, "17876": 1017, "18429": 1017, "biernat": 1017, "17317": 1017, "17406": 1017, "wick": 1017, "18406": 1017, "17833": 1017, "yashika": 1017, "18510": 1017, "18447": 1017, "16066": 1017, "18682": 1017, "16935": 1017, "17193": 1017, "16335": 1017, "14982": 1017, "11682": 1017, "patric": [1017, 1018], "15763": 1017, "16530": 1017, "shuhua": 1017, "17386": 1017, "17187": 1017, "x_idx_sort": 1017, "17614": 1017, "check_methods_sample_order_invari": [1017, 1019], "17598": 1017, "ngo": 1017, "17992": 1017, "endian": 1017, "17644": 1017, "18508": 1017, "abo7atm": 1017, "spannbauer": 1017, "deodhar": 1017, "alexandracraciun": 1017, "amy12xx": 1017, "tiwari": 1017, "choraria": 1017, "subramaniyan": 1017, "kushwaha": 1017, "atsushi": [1017, 1018], "nukariya": [1017, 1018], "aura": 1017, "autoviz": 1017, "auto_viml": 1017, "avinash": 1017, "anak": 1017, "barankaraku": 1017, "barberogaston": 1017, "beatrizsmg": 1017, "mainy": 1017, "bossan": [1017, 1019, 1020], "pedigo": [1017, 1018], "bhavika": 1017, "devnani": 1017, "biprateep": 1017, "dei": 1017, "bmaisonn": 1017, "byron": 1017, "ceethinwa": [1017, 1018], "chaitanyamog": 1017, "clmbst": 1017, "coelhudo": 1017, "crispinlogan": [1017, 1020, 1021], "cristina": 1017, "mula": 1017, "darioka": [1017, 1019, 1020], "declan": 1017, "neill": 1017, "deeksha": 1017, "madan": 1017, "fiegel": [1017, 1018, 1020], "khoo": 1017, "eschibli": 1017, "fran": [1017, 1018, 1019], "larsson": [1017, 1018, 1019], "sheni": 1017, "genvalen": [1017, 1018, 1019, 1020], "kiragu": 1017, "gesa": 1017, "stupperich": 1017, "ghislain": 1017, "vaillant": 1017, "gim": 1017, "seng": 1017, "chevali": 1017, "bohl": [1017, 1019], "schole": 1017, "hitesh": 1017, "somani": 1017, "hoda1394": 1017, "moin": 1017, "hugorichard": 1017, "isuru": 1017, "wiryadi": 1017, "j0rd1smit": 1017, "jaehyun": 1017, "ahn": 1017, "tae": 1017, "hoctor": 1017, "vese": 1017, "jeevan": 1017, "jeroenpeterbo": 1017, "jhay": 1017, "jigna": 1017, "panchal": 1017, "jim0421": 1017, "joaquin": 1017, "gorb": 1017, "moya": 1017, "kartik": 1017, "chugh": 1017, "kaylani2": 1017, "kendrick": 1017, "cetina": 1017, "kenni": 1017, "isakov": 1017, "koki": 1017, "nishihara": 1017, "krum": [1017, 1019], "arnaudov": [1017, 1019], "oldja": 1017, "guitton": 1017, "mariam": 1017, "l\u00f6ning": 1017, "scheubrein": 1017, "megasari": 1017, "mathschi": 1017, "giudic": 1017, "milan": 1017, "straka": 1017, "muoki": 1017, "caleb": 1017, "haiat": 1017, "nadia": 1017, "tahiri": 1017, "ph": 1017, "hamada": 1017, "neil": 1017, "botelho": 1017, "nil": 1017, "noelano": 1017, "oj_lappi": 1017, "oleh": [1017, 1019], "kozynet": [1017, 1019], "pankaj": 1017, "jindal": 1017, "pardeep": 1017, "parthiv": 1017, "chigurupati": 1017, "pgithub": 1017, "probinette4": 1017, "pwalchessen": 1017, "rachel": [1017, 1020], "fischoff": 1017, "toshniw": 1017, "rafei": 1017, "iqbal": 1017, "rahul": 1017, "jakhar": 1017, "rachum": 1017, "ramyanp": [1017, 1018], "rauwuckl": 1017, "ravi": [1017, 1020], "kiran": 1017, "boggavarapu": 1017, "rishi": 1017, "advani": 1017, "rithvik": 1017, "romijnd": 1017, "tavenard": 1017, "rubi": 1017, "werman": 1017, "ryotaro": 1017, "tsukada": 1017, "sadak": 1017, "khandelw": 1017, "ezebunandu": 1017, "kimbinyi": 1017, "shail": 1017, "keller": 1017, "shao": [1017, 1018, 1019], "shooter23": [1017, 1018], "soledad": 1017, "galli": 1017, "subrat93": 1017, "sunitha": 1017, "selvan": 1017, "kusanagi2": 1017, "terenc": [1017, 1018], "honl": [1017, 1018], "thij": [1017, 1020, 1021], "thomas9292": 1017, "thorben": 1017, "tijanajovanov": 1017, "timo": 1017, "tnwei": 1017, "ufmay": 1017, "umberto": 1017, "lupo": 1017, "vika": [1017, 1019], "viniciu": [1017, 1018], "fuck": [1017, 1018], "violeta": 1017, "watchtheblur": 1017, "willpeppo": 1017, "xethan": 1017, "qianm": 1017, "yue": 1017, "yutaro": 1017, "ikeda": 1017, "zacchari": 1017, "ramzi": 1017, "zoj613": 1017, "21271": 1018, "21833": 1018, "siavash": 1018, "rezazadeh": 1018, "19210": 1018, "21295": 1018, "22050": 1018, "21991": 1018, "19869": 1018, "21481": [1018, 1019], "andr\u00e9": [1018, 1019], "babino": [1018, 1019], "disconnect": 1018, "21915": 1018, "21694": 1018, "minknowski": 1018, "21741": 1018, "21871": 1018, "21845": 1018, "21517": 1018, "21917": 1018, "21552": 1018, "escap": [1018, 1020], "21493": 1018, "21199": 1018, "20638": 1018, "bohn\u00e9": 1018, "21179": 1018, "21195": 1018, "21130": 1018, "20761": 1018, "21251": 1018, "min_idf": 1018, "max_idf": 1018, "20752": 1018, "alek": [1018, 1019], "lefebvr": [1018, 1019], "21340": 1018, "21093": 1018, "21351": 1018, "cve": 1018, "28975": 1018, "21336": 1018, "_check_sample_weight": 1018, "only_non_neg": 1018, "20880": 1018, "andr\u00e1": [1018, 1019, 1020], "if_delegate_has_method": [1018, 1019], "21145": 1018, "zahlii": 1018, "21389": 1018, "20002": 1018, "19310": 1018, "least_squar": 1018, "19733": 1018, "lad": 1018, "absolute_loss": 1018, "20165": 1018, "18444": 1018, "18010": 1018, "threadsaf": 1018, "18736": 1018, "17443": 1018, "19641": 1018, "20087": 1018, "fauchereau": 1018, "19002": 1018, "19052": 1018, "yusuk": 1018, "nagasaka": 1018, "17622": 1018, "19024": 1018, "franki": 1018, "robertson": 1018, "20117": 1018, "natchiappan": [1018, 1019], "19883": 1018, "20597": 1018, "20899": 1018, "20200": 1018, "fit_": 1018, "partial_fit_": 1018, "19297": 1018, "20560": 1018, "18393": 1018, "bittarello": 1018, "19263": 1018, "19244": 1018, "18459": 1018, "nd": 1018, "18898": 1018, "ora": 1018, "phongpanagnam": 1018, "21080": 1018, "ledoit_wolf_shrinkag": 1018, "20416": 1018, "defoi": 1018, "20583": 1018, "19365": 1018, "ateif": 1018, "sara": 1018, "19669": 1018, "importlib": 1018, "pyoxid": 1018, "20297": 1018, "20209": 1018, "19011": 1018, "20729": 1018, "12069": 1018, "19046": 1018, "surya": [1018, 1019], "18433": 1018, "19198": 1018, "19159": 1018, "beno\u00eet": 1018, "mal\u00e9zieux": 1018, "19908": 1018, "20512": 1018, "20960": 1018, "cgroup": [1018, 1019], "quota": [1018, 1019], "20477": 1018, "19799": 1018, "19564": 1018, "19836": 1018, "19162": 1018, "10096": 1018, "fenil": 1018, "suchak": 1018, "20159": 1018, "murata": [1018, 1019], "20534": 1018, "19296": 1018, "19035": 1018, "19520": 1018, "18964": 1018, "19401": 1018, "relova": 1018, "17169": 1018, "dmytro": 1018, "lituiev": 1018, "20380": 1018, "pulido": 1018, "felip": [1018, 1019, 1020, 1021], "bidu": [1018, 1019], "rutter": 1018, "20515": 1018, "carsten": 1018, "allefeld": 1018, "19568": 1018, "shyam": 1018, "20207": 1018, "tomohiro": 1018, "endo": 1018, "20161": 1018, "shuhei": 1018, "kayawari": 1018, "arka204": [1018, 1020], "20431": 1018, "pfaffel": 1018, "19428": 1018, "hamoumi": 1018, "19411": 1018, "20959": 1018, "20554": 1018, "xiangyin": 1018, "kong": 1018, "9978": 1018, "10027": 1018, "16449": 1018, "20231": 1018, "naka": 1018, "19571": 1018, "20155": 1018, "oura": [1018, 1019, 1020], "19004": 1018, "midvidi": 1018, "19055": 1018, "19172": 1018, "19426": 1018, "19499": 1018, "strubel": 1018, "19616": 1018, "19391": 1018, "19390": 1018, "linearmodel": 1018, "17743": 1018, "17772": 1018, "17746": 1018, "17785": 1018, "17750": 1018, "17769": 1018, "20683": 1018, "19491": 1018, "19472": 1018, "shortest_path": 1018, "20531": 1018, "19415": 1018, "17036": 1018, "20326": 1018, "uttam": 1018, "9843": 1018, "19643": 1018, "attard": 1018, "19784": 1018, "18328": 1018, "20312": 1018, "divyanshu": 1018, "deoli": 1018, "18543": 1018, "20552": 1018, "19278": 1018, "20030": 1018, "tingshan": 1018, "18649": 1018, "rodion": 1018, "martynov": 1018, "20619": 1018, "baseshufflesplit": 1018, "20056": 1018, "pabloduque0": 1018, "prematur": 1018, "20904": 1018, "tomasz": 1018, "jakubek": [1018, 1019], "18925": 1018, "poznik": [1018, 1019, 1020], "18842": 1018, "19473": 1018, "jiefangxuanyan": 1018, "20072": 1018, "20842": 1018, "mart\u00edn": [1018, 1019], "19631": 1018, "19790": 1018, "flynn": [1018, 1020], "18368": 1018, "19483": 1018, "20526": 1018, "19069": 1018, "19041": 1018, "20250": 1018, "20652": 1018, "19934": 1018, "gleb": [1018, 1020, 1021], "levitskii": 1018, "19734": 1018, "robinson": 1018, "19752": 1018, "zhehao": [1018, 1019, 1020], "19527": 1018, "19788": 1018, "19356": 1018, "makoeppel": 1018, "19879": 1018, "19906": 1018, "20727": 1018, "20961": 1018, "n_input_features_": 1018, "20240": 1018, "20843": 1018, "18959": 1018, "wstate": 1018, "20023": 1018, "19336": 1018, "20272": 1018, "19459": 1018, "bezuidenhout": 1018, "clifford": 1018, "akai": 1018, "nettei": 1018, "19948": 1018, "20657": 1018, "19766": 1018, "propreti": 1018, "20385": 1018, "_weighted_percentil": 1018, "huberlossfunct": 1018, "20528": 1018, "_safe_index": 1018, "20673": 1018, "is_scalar_nan": 1018, "assert_warn": 1018, "assert_warns_messag": 1018, "20521": 1018, "abdulelah": 1018, "mesfer": 1018, "adrian": [1018, 1019, 1020], "garcia": 1018, "badaracco": 1018, "sad\u0142ocha": 1018, "rubial": 1018, "alessia": 1018, "marcolini": 1018, "alihan": 1018, "zihna": 1018, "alin": 1018, "amol": 1018, "deshmukh": 1018, "pessoa": 1018, "anavelyz": 1018, "ashish": 1018, "ashvith": 1018, "shetti": 1018, "baam": [1018, 1019], "baptbillard": 1018, "bmalezieux": 1018, "bumblebe": 1018, "caherrera": 1018, "meli": [1018, 1019, 1020], "chrissobel": 1018, "yeh": 1018, "chuliang": 1018, "cliffordemmanuel": 1018, "conner": 1018, "shen": 1018, "dimitri": [1018, 1019, 1020], "papadopoulo": [1018, 1019, 1020], "orfano": [1018, 1019, 1020], "dmallia17": 1018, "ds_ana": 1018, "jardim": 1018, "edwinwenink": 1018, "eleni": 1018, "markou": 1018, "ericellwang": [1018, 1019], "ezri": 1018, "mudd": 1018, "fato": 1018, "morina": 1018, "hafner": 1018, "flyingdutchman23": 1018, "uwha": [1018, 1019], "bereng": 1018, "frederick": 1018, "frellwan": 1018, "vicent": [1018, 1019, 1020], "geroldcsend": 1018, "glen": 1018, "gl\u00f2ria": [1018, 1020], "mu\u00f1oz": [1018, 1020], "gregorystrubel": 1018, "groceryheist": 1018, "guiweb": 1018, "haidar": [1018, 1019], "almubarak": [1018, 1019], "moritz": [1018, 1020], "g\u00fcnther": 1018, "mirza": 1018, "harutaka": 1018, "kawamura": 1018, "hassan": 1018, "alsawadi": 1018, "geovan": [1018, 1019], "gome": [1018, 1019], "lima": [1018, 1019], "ilic": 1018, "ikko": 1018, "ashimin": 1018, "isaack": 1018, "mungui": 1018, "ishaan": 1018, "bhat": [1018, 1020], "ishan": [1018, 1019], "iwhalv": 1018, "preiss": 1018, "budarz": 1018, "jannik": 1018, "jennif": 1018, "jianzhu": 1018, "guo": 1018, "jnboehm": 1018, "johanwork": 1018, "paton": 1018, "n\u00e1pole": 1018, "julio": 1018, "julyrashchenko": 1018, "jvm": 1018, "kadatatlu": 1018, "kishor": 1018, "karen": 1018, "palacio": 1018, "kmatt10": 1018, "kobaski": 1018, "kot271828": 1018, "kunj": 1018, "kurumeyuta": 1018, "kxytim": 1018, "lacrosse91": 1018, "laveen": 1018, "bagai": 1018, "leonardo": 1018, "rocco": [1018, 1019, 1020], "uieda": 1018, "leopoldo": 1018, "corona": 1018, "lsturtew": 1018, "lucca": 1018, "quadro": 1018, "ly648499246": 1018, "mabu": 1018, "manaileng": 1018, "mariangela": 1018, "marielaraj": 1018, "hirzel": 1018, "mateo": 1018, "nore\u00f1a": 1018, "mathi": 1018, "batoul": 1018, "calcot": 1018, "prieur": 1018, "\u00f6zer": 1018, "miao": 1018, "cai": 1018, "karbownik": 1018, "michalkrawczyk": [1018, 1019], "mitzi": [1018, 1019], "mlondschien": 1018, "haseeb": [1018, 1019], "khoual": 1018, "jarir": 1018, "kanji": 1018, "nadim": 1018, "kawwa": 1018, "nanshan": 1018, "naozin555": 1018, "fultz": 1018, "nic": 1018, "annau": 1018, "stefani": [1018, 1020], "nigel": 1018, "bosch": 1018, "nodar": 1018, "okroshiashvili": 1018, "ogbonna": 1018, "chibuik": 1018, "ogordon100": 1018, "phongpanangam": 1018, "duqu": 1018, "ibieta": 1018, "jimenez": [1018, 1019], "lacouth": 1018, "olszewski": 1018, "dye": 1018, "pierreattard": [1018, 1019], "yve": 1018, "borgn": 1018, "pranayanchuri": 1018, "princ": 1018, "canuma": 1018, "putschblo": 1018, "ranjanikrishnan": 1018, "rene": 1018, "corneil": 1018, "ricardojnf": 1018, "richardscottoz": 1018, "sandi": 1018, "khosasi": 1018, "benhur": 1018, "flore": 1018, "shinehid": 1018, "shinnar": 1018, "tootoonian": 1018, "solosil": 1018, "kolawol": 1018, "stagg": 1018, "swpeas": 1018, "tfifi": 1018, "caswel": 1018, "timotheemathieu": 1018, "wolodzko": 1018, "tliu68": 1018, "uhmann": 1018, "tom1092": 1018, "tom\u00e1": [1018, 1019], "moreyra": 1018, "tommaso": 1018, "noto": 1018, "tsuga": 1018, "vang": 1018, "gkiasta": 1018, "vil\u00e9m": 1018, "zouhar": 1018, "vlasovet": 1018, "waijean": 1018, "whidou": 1018, "xiaoyuchai": 1018, "yasmeen": 1018, "alsaedi": 1018, "yoch": 1018, "yusukenagasaka": 1018, "yzhenman": 1018, "zeyusun": 1018, "zhaoweiwang": 1018, "msvcp140": 1019, "dll": 1019, "24631": 1019, "24446": 1019, "10805": 1019, "mathia": 1019, "23471": 1019, "24015": 1019, "23990": 1019, "23833": 1019, "24017": 1019, "sorski": [1019, 1020], "23395": 1019, "23636": 1019, "22063": 1019, "22059": 1019, "kurz": [1019, 1020], "23608": 1019, "23548": 1019, "24087": 1019, "23273": 1019, "23194": 1019, "23198": 1019, "lise": 1019, "kleiber": 1019, "23358": 1019, "23264": 1019, "feature_names_in": 1019, "23299": 1019, "23214": 1019, "collot": [1019, 1020], "baak": 1019, "23370": 1019, "23410": 1019, "compute_sample_weight": 1019, "23115": 1019, "22868": 1019, "multiindex": 1019, "22410": 1019, "23271": 1019, "21987": 1019, "22064": 1019, "22065": 1019, "22288": 1019, "22320": 1019, "21219": 1019, "21542": 1019, "23098": 1019, "22318": 1019, "23036": 1019, "binary_crossentropi": 1019, "23040": 1019, "23046": 1019, "22856": 1019, "21032": 1019, "18170": 1019, "21038": 1019, "14975": 1019, "22526": 1019, "23095": 1019, "silk": 1019, "20031": 1019, "krawczyk": 1019, "21148": 1019, "22255": 1019, "21881": 1019, "vassard": 1019, "22217": 1019, "21735": 1019, "22154": 1019, "22537": 1019, "iofal": 1019, "arisa": [1019, 1020], "22775": 1019, "22913": 1019, "randomgeek78": 1019, "22493": 1019, "19680": 1019, "thibaut": 1019, "22119": 1019, "22016": 1019, "22015": 1019, "19747": 1019, "attalla": 1019, "22498": 1019, "21482": 1019, "pujalt": 1019, "22412": 1019, "16605": 1019, "21901": 1019, "rileran": 1019, "23113": 1019, "ilion": 1019, "beyst": 1019, "21425": 1019, "stefanini": 1019, "16948": 1019, "patricio": 1019, "cerda": 1019, "22002": 1019, "21109": 1019, "inner_stats_": 1019, "iter_offset_": 1019, "18975": 1019, "22111": 1019, "22181": 1019, "21334": 1019, "21705": 1019, "stanlei": [1019, 1020], "21432": 1019, "22806": 1019, "jihan": 1019, "benni": 1019, "21713": 1019, "haya": 1019, "21567": 1019, "maggi": 1019, "chege": 1019, "22300": 1019, "15948": 1019, "sysuresh": 1019, "22553": 1019, "19490": 1019, "ferrin": 1019, "22120": 1019, "15984": 1019, "okon": 1019, "22696": 1019, "22486": 1019, "21800": 1019, "20567": 1019, "22159": 1019, "20811": 1019, "21814": 1019, "16748": 1019, "siqi": 1019, "22215": 1019, "23047": 1019, "22695": 1019, "22697": 1019, "21762": 1019, "22106": 1019, "gijsber": 1019, "21632": 1019, "genesi": [1019, 1021], "valencia": [1019, 1021], "22566": 1019, "22908": 1019, "23097": 1019, "23079": 1019, "20803": 1019, "23023": 1019, "21573": 1019, "21832": 1019, "20145": 1019, "22356": 1019, "18482": 1019, "gameiro": 1019, "kharsa": 1019, "22370": 1019, "17819": 1019, "22235": 1019, "21837": 1019, "wagner": 1019, "22199": 1019, "aidar": 1019, "shakerimoff": 1019, "tenavi": 1019, "nakamura": 1019, "22223": 1019, "marcom": 1019, "21617": 1019, "ritter": [1019, 1020], "21114": 1019, "21078": 1019, "21448": 1019, "16061": 1019, "19438": 1019, "18310": 1019, "elfner": 1019, "22249": 1019, "22137": 1019, "22694": 1019, "22808": 1019, "22950": 1019, "21086": 1019, "22206": 1019, "21808": 1019, "22548": 1019, "22062": 1019, "trujillo": [1019, 1020], "22148": 1019, "22240": 1019, "9087": 1019, "22525": 1019, "19689": 1019, "21606": 1019, "21341": 1019, "preservs": 1019, "21767": 1019, "21724": 1019, "yar": 1019, "khine": 1019, "phyo": 1019, "21998": 1019, "22891": 1019, "22899": 1019, "23256": 1019, "19794": 1019, "21534": 1019, "22254": 1019, "21805": 1019, "jeann": 1019, "dionisi": 1019, "22685": 1019, "n_neighbour": 1019, "18832": 1019, "23033": 1019, "21565": 1019, "17266": 1019, "interpet": 1019, "22118": 1019, "ohad": 1019, "22284": 1019, "19158": 1019, "nicki": 1019, "skaft": 1019, "20753": 1019, "22108": 1019, "22635": 1019, "19085": 1019, "22866": 1019, "21576": 1019, "emil": 1019, "dugnat": 1019, "21873": 1019, "21177": 1019, "20408": 1019, "ceballo": 1019, "22058": 1019, "23034": 1019, "22203": 1019, "21026": 1019, "21880": 1019, "mrinal": 1019, "tyagi": 1019, "22982": 1019, "22508": 1019, "comb": 1019, "22604": 1019, "22212": 1019, "21430": 1019, "desislava": 1019, "vasileva": 1019, "22687": 1019, "22150": 1019, "22248": 1019, "20860": 1019, "shubhraneel": 1019, "21888": 1019, "21954": 1019, "22953": 1019, "16018": 1019, "21445": 1019, "21988": 1019, "get_output_feature_nam": 1019, "21569": 1019, "21079": 1019, "20653": 1019, "21434": 1019, "19916": 1019, "22735": 1019, "compute_inverse_transform": 1019, "21701": 1019, "22114": 1019, "21330": 1019, "21408": 1019, "22149": 1019, "21436": 1019, "22191": 1019, "22476": 1019, "21278": 1019, "21316": 1019, "clickabl": 1019, "21298": 1019, "22237": 1019, "check_scalar": 1019, "22218": 1019, "validationerror": 1019, "check_requires_y_non": 1019, "22578": 1019, "arcidiacono": [1019, 1020], "22595": 1019, "21310": 1019, "22027": 1019, "lanterni": 1019, "23077": 1019, "22188": 1019, "22830": 1019, "2357juan": [1019, 1020], "adamgonzo": 1019, "adijohar": 1019, "kumawat": 1019, "raghuwanshi": 1019, "duron": 1019, "ahmadjubair33": 1019, "aj": 1019, "druck": 1019, "peixinho": 1019, "arroyo": 1019, "alexanmv": 1019, "almeidayoel": 1019, "amar": [1019, 1020, 1021], "amrcod": 1019, "griva": [1019, 1020], "andrii": 1019, "herrou": 1019, "ducout": 1019, "arth": 1019, "arthurmello": 1019, "arturoamor": 1019, "atharva": 1019, "patil": 1019, "aufarkari": 1019, "avm19": [1019, 1020], "ayan": 1019, "bardiya": [1019, 1020], "behrouz": 1019, "ben3940": 1019, "bijil": 1019, "subhash": 1019, "bmreinig": 1019, "brenden": 1019, "kadota": 1019, "cdrig": 1019, "chalmer": 1019, "chitteti": 1019, "srinath": [1019, 1020], "chloe": 1019, "agath": 1019, "azencott": 1019, "christopherlim98": 1019, "weidemann": 1019, "combsccod": 1019, "daniela": [1019, 1020], "darren": [1019, 1020], "eargl": 1019, "gilbertson": [1019, 1020], "dea": [1019, 1020, 1021], "mar\u00eda": [1019, 1020, 1021], "denni": 1019, "osei": 1019, "dessyvv": 1019, "dev514": 1019, "diwakar": 1019, "ries": 1019, "drskd": 1019, "emiko": 1019, "sano": 1019, "emmanouil": 1019, "gionanidi": 1019, "ermolaevpa": [1019, 1020], "estefania": 1019, "barreto": 1019, "ojeda": 1019, "eyast": 1019, "fatima": 1019, "gasmi": 1019, "luna": 1019, "glushchenkov": 1019, "fkaren27": 1019, "fpgawesom": 1019, "ftorres16": [1019, 1020], "gabor": 1019, "berei": 1019, "kertesz": 1019, "gauthier": 1019, "giancarlo": 1019, "glennfrutiz": 1019, "guillermo": 1019, "fern\u00e1ndez": 1019, "hansin": [1019, 1020], "henrymooresc": [1019, 1020], "hideaki": 1019, "imamura": 1019, "hind": 1019, "hmasdev": 1019, "hvassard": 1019, "aki": [1019, 1020], "iasoon": 1019, "ingela": 1019, "cowton": 1019, "jalexand3r": 1019, "jauhar": 1019, "jaya": 1019, "kommireddi": 1019, "je": 1019, "jelfner": 1019, "jenni": 1019, "jirka": 1019, "borovec": 1019, "cipri\u00e1n": 1019, "loayza": 1019, "chazalon": 1019, "mess": 1019, "jovan": [1019, 1020], "stojanov": [1019, 1020], "jschuerz": 1019, "katotten": 1019, "ken4git": 1019, "doucet": 1019, "kimayoung": 1019, "koushik": 1019, "kranthi": 1019, "sedamaki": 1019, "krumetoft": 1019, "lesne": 1019, "casino": [1019, 1020], "logan": [1019, 1020], "lucieclair": 1019, "luiz": 1019, "magali": 1019, "mandjev": 1019, "wurp": [1019, 1020], "boerner": 1019, "wimld": 1019, "martel": 1019, "corentin": 1019, "mat\u00eda": 1019, "matjansen": 1019, "francia": 1019, "megabyt": 1019, "mehrdad": 1019, "moradizadeh": 1019, "melemo2": 1019, "micky774": [1019, 1020], "milana2": 1019, "millawel": 1019, "miwojc": 1019, "mizuki": 1019, "mlant": 1019, "mohit": 1019, "moonkyung94": 1019, "mpoemsl": 1019, "mrinaltyagi": 1019, "leu": 1019, "msabati": 1019, "nadirhan": 1019, "\u015fahin": 1019, "naipawat": [1019, 1020], "poolsawat": [1019, 1020], "nartayxd": 1019, "nastegiano": 1019, "nathansquan": 1019, "detlefsen": 1019, "niket": 1019, "nikhil": 1019, "suresh": 1019, "kondratyev": 1019, "husak": 1019, "partev": [1019, 1020], "pelennor": 1019, "piet": [1019, 1020], "br\u00f6mmel": [1019, 1020], "pinki": 1019, "poloso": 1019, "pramod": 1019, "anantharam": 1019, "puhuk": [1019, 1020], "purna": 1019, "mansingh": 1019, "quadv": 1019, "rahil": [1019, 1020, 1021], "boy": 1019, "raz": 1019, "hoshia": 1019, "rishabh": 1019, "barnowski": [1019, 1020], "rsnegrin": 1019, "yadav": 1019, "sakinaouisrani": 1019, "sanjai": 1019, "marreddi": 1019, "seel": 1019, "sele": [1019, 1020], "seyedsaman": 1019, "emami": 1019, "shandeng123": 1019, "sharmadharmp": 1019, "shaymernaturalint": 1019, "shuangchi": [1019, 1020], "siavrez": 1019, "slishak": 1019, "spikebh": 1019, "sply88": 1019, "kailasa": [1019, 1020], "sultan": 1019, "orazbayev": 1019, "sumit": 1019, "saha": 1019, "sven": [1019, 1020], "eschlbeck": 1019, "stehl": [1019, 1020], "swapnil": 1019, "teunp": 1019, "ferr\u00e9": 1019, "hjortkj\u00e6r": 1019, "thiruvenkadam": 1019, "toastedyeast": [1019, 1020], "mctiernan": [1019, 1020], "udit": 1019, "ugo": 1019, "marchand": 1019, "vera": [1019, 1020], "komey": [1019, 1020], "victoireloui": 1019, "vishwakarma": 1019, "vikrant": 1019, "khedkar": 1019, "chernyi": 1019, "weijiadu": 1019, "yuan": [1019, 1020], "yiyangq": 1019, "yosshi999": 1019, "yuki": 1019, "koyama": 1019, "zeel": 1019, "zempleni": 1019, "zhenfish": 1019, "\u8d75\u4e30": 1019, "25747": 1020, "base_estimator__": 1020, "25477": 1020, "25563": 1020, "25570": 1020, "25664": 1020, "25774": 1020, "25500": 1020, "25589": 1020, "25704": 1020, "min_sample_split": 1020, "25744": 1020, "25619": 1020, "25638": 1020, "25354": 1020, "25174": 1020, "25089": 1020, "25129": 1020, "auxillari": 1020, "25363": 1020, "25188": 1020, "25295": 1020, "spec": 1020, "25312": 1020, "backslash": 1020, "25511": 1020, "25172": 1020, "25341": 1020, "25094": 1020, "25250": 1020, "25370": 1020, "23101": 1020, "24873": 1020, "25694": 1020, "25274": 1020, "25296": 1020, "25147": 1020, "23619": 1020, "24354": 1020, "safiuddin": 1020, "khaja": 1020, "gsiisg": 1020, "23935": 1020, "22527": 1020, "_sgd_fast": 1020, "_plain_sgd": 1020, "oversc": 1020, "23798": 1020, "24543": 1020, "24465": 1020, "23734": 1020, "24699": 1020, "23865": 1020, "simd": 1020, "primit": 1020, "23446": 1020, "23197": 1020, "23604": 1020, "23585": 1020, "24556": 1020, "maladi\u00e8r": [1020, 1021], "24617": 1020, "sim4n6": 1020, "24688": 1020, "22054": 1020, "roic": 1020, "24264": 1020, "maladier": 1020, "14736": 1020, "hunt": 1020, "zhan": 1020, "20802": 1020, "pokorni": 1020, "22965": 1020, "22968": 1020, "23038": 1020, "propog": 1020, "23210": 1020, "24258": 1020, "23470": 1020, "21938": 1020, "23127": 1020, "19075": 1020, "ramo": 1020, "carre\u00f1o": 1020, "24951": 1020, "22268": 1020, "mohamedbsh": 1020, "23905": 1020, "11860": 1020, "ablin": 1020, "24528": 1020, "23726": 1020, "24421": 1020, "kshitij": [1020, 1021], "22554": 1020, "24218": 1020, "molin": 1020, "21020": 1020, "24856": 1020, "22014": 1020, "23252": 1020, "24538": 1020, "24889": 1020, "24146": 1020, "peretti": 1020, "nestor": 1020, "navarro": 1020, "nati": 1020, "tomatti": 1020, "24855": 1020, "24849": 1020, "20415": 1020, "24283": 1020, "24894": 1020, "23819": 1020, "edoardo": 1020, "abati": 1020, "24747": 1020, "24245": 1020, "24405": 1020, "salman": [1020, 1021], "16695": 1020, "vitor": 1020, "rosa": 1020, "18298": 1020, "25077": 1020, "24317": 1020, "24350": 1020, "24755": 1020, "levitski": [1020, 1021], "24637": 1020, "24767": 1020, "23275": 1020, "maxwelllzh": 1020, "24433": 1020, "yogendrasingh": 1020, "23637": 1020, "23877": 1020, "10168": 1020, "\u0142ukasz": 1020, "borchmann": 1020, "12285": 1020, "miltenberg": 1020, "13042": 1020, "parizi": 1020, "18094": 1020, "22562": 1020, "24714": 1020, "foor": 1020, "23834": 1020, "24051": 1020, "22518": 1020, "18020": 1020, "24338": 1020, "23442": 1020, "atukorala": 1020, "22710": 1020, "conroi": 1020, "trinh": 1020, "23461": 1020, "24365": 1020, "24630": 1020, "rushil": 1020, "24084": 1020, "iinfo": 1020, "24141": 1020, "24539": 1020, "23977": 1020, "23683": 1020, "andrei": 1020, "melnik": 1020, "16747": 1020, "18805": 1020, "hongshaoyang": 1020, "22269": 1020, "23139": 1020, "24645": 1020, "10468": 1020, "ruben": 1020, "22993": 1020, "24750": 1020, "rudresh": 1020, "veerkhar": 1020, "23874": 1020, "24075": 1020, "22665": 1020, "24683": 1020, "24058": 1020, "perdok": 1020, "20331": 1020, "23993": 1020, "22629": 1020, "24412": 1020, "22898": 1020, "23480": 1020, "21469": 1020, "lapack_svd_driv": 1020, "20617": 1020, "ouptut": 1020, "25067": 1020, "14862": 1020, "24512": 1020, "24667": 1020, "25080": 1020, "24523": 1020, "mia": 1020, "bajic": 1020, "3llobo": 1020, "kania": 1020, "anulekh": 1020, "admir": 1020, "demiraj": 1020, "adoublet": 1020, "ahmedbgh": 1020, "aiko": 1020, "akshita": 1020, "prasanth": 1020, "ala": 1020, "miola": 1020, "lebel": 1020, "buzenet": [1020, 1021], "kassa": 1020, "bera": 1020, "maennel": 1020, "aniket": 1020, "shirsat": 1020, "anthony22": 1020, "apostolo": 1020, "tsetogl": 1020, "aravindh": 1020, "artur": 1020, "hermano": 1020, "ashah002": 1020, "ashwin": [1020, 1021], "azaria": 1020, "gebremichael": 1020, "b0rxington": 1020, "badr": 1020, "moufad": 1020, "bart\u0142omiej": 1020, "go\u0144da": 1020, "bdegraaff": 1020, "berkecanrizai": 1020, "bernd": 1020, "fritzk": 1020, "bhoomika": 1020, "biswaroop": 1020, "cannon": 1020, "bsh": 1020, "ceh": 1020, "chalulu": 1020, "changyao": 1020, "zablit": 1020, "veenhui": 1020, "christianwaldmann": 1020, "christin": 1020, "verrier": 1020, "dangonite57": 1020, "danielgaerb": 1020, "davidblnc": 1020, "dayn": 1020, "khant": 1020, "dhanshre": 1020, "diadochokinet": 1020, "diederikwp": 1020, "litsidi": 1020, "drewhogg": 1020, "oc": 1020, "dwight": 1020, "lindquist": 1020, "eden": 1020, "brekk": 1020, "edern": 1020, "eleanor": 1020, "eliaschiavon": 1020, "emir": 1020, "fabrizio": 1020, "damicelli": 1020, "fcharra": 1020, "siola": [1020, 1021], "tuveri": 1020, "franck": 1020, "charra": 1020, "geevarghes": 1020, "georgiamaydai": 1020, "gianr": 1020, "lazz": 1020, "guitar": 1020, "gunesbayir": 1020, "harshit5674": 1020, "hasan": 1020, "yaman": 1020, "vrigazov": 1020, "htsedebenham": 1020, "humahn": 1020, "ido": 1020, "iglesi": 1020, "iliya": 1020, "zhechev": 1020, "iren": 1020, "ivanllt": 1020, "sedykh": 1020, "mcivor": 1020, "janfidor": 1020, "jiten": 1020, "sidhpura": 1020, "jkarolczak": 1020, "jo\u00e3o": 1020, "johnathanpi": 1020, "koumenti": 1020, "panga": [1020, 1021], "johnthagen": 1020, "fleme": 1020, "choo": 1020, "yun": 1020, "keat": 1020, "juanfe88": 1020, "juliaschoepp": 1020, "jygerardi": 1020, "ka00ri": 1020, "kanishk": 1020, "sachdev": 1020, "kanissh": 1020, "kendal": 1020, "kento": 1020, "nozawa": 1020, "eliasi": 1020, "kluge": 1020, "lieret": 1020, "kirandevraj": 1020, "kraig": 1020, "vamsi": 1020, "kapadni": 1020, "lingyi1110": 1020, "mantovani": 1020, "maascha": 1020, "madinak": 1020, "maksym": 1020, "mansi": 1020, "kostelac": [1020, 1021], "marvin": [1020, 1021], "krawutschk": [1020, 1021], "masanori": 1020, "kanazu": 1020, "haberland": 1020, "mauroantonioserrano": 1020, "maxi": 1020, "marufo": 1020, "maximesaur": 1020, "smolskii": 1020, "bou": 1020, "mehgarg": 1020, "mehmetcanakbai": 1020, "baji\u0107": 1020, "flak": 1020, "hornstein": 1020, "ruiter": 1020, "paradi": 1020, "iljin": 1020, "misa": 1020, "ogura": 1020, "wilksch": 1020, "mrastgoo": 1020, "naois": 1020, "holohan": 1020, "nass": 1020, "jacobi": 1020, "nawazish": 1020, "alam": 1020, "nguy\u1ec5n": 1020, "v\u0103n": 1020, "di\u1ec5n": 1020, "fanelli": 1020, "nihal": 1020, "thukarama": 1020, "jare": 1020, "nima10khodaveisi": 1020, "nima": 1020, "sarajpoor": 1020, "nitinramvelraj": 1020, "nnlnr": 1020, "npach": 1020, "nwanna": 1020, "nymark": 1020, "kho": 1020, "holman": 1020, "oll": 1020, "lukowski": 1020, "hassoun": 1020, "tamer": 1020, "ouss1508": 1020, "oyindamola": 1020, "olatunji": 1020, "pab": 1020, "pandata": 1020, "soar": 1020, "petar": 1020, "mlinari\u0107": 1020, "pooja": 1020, "subramaniam": 1020, "priyam": 1020, "kakati": 1020, "freeland": 1020, "keerti": 1020, "rafal": 1020, "wojdyla": 1020, "raghuv": 1020, "makhija": 1020, "rehan": 1020, "guha": 1020, "klima": 1020, "crockett": 1020, "homm": 1020, "roman4oo": 1020, "rowan": 1020, "mankoo": 1020, "sabri": 1020, "monaf": 1020, "safikh": 1020, "salahuddin": 1020, "yojana": 1020, "menes": 1020, "ephrem": 1020, "sangam": 1020, "sangamswadik": 1020, "sanjai_3": 1020, "sarahremu": 1020, "sashka": 1020, "savkomax": 1020, "gustafson": 1020, "sec65": 1020, "seljak": 1020, "shadi": 1020, "gewili": 1020, "shellyfung": 1020, "shinsuk": 1020, "mori": 1020, "shiva": 1020, "shoaib": 1020, "khan": 1020, "shogo": 1020, "hida": 1020, "shrankhla": 1020, "sonniv": 1020, "sortofamudkip": 1020, "stanislav": 1020, "modrak": 1020, "stellalin7": 1020, "vaerenbergh": 1020, "schmerler": 1020, "tabea": 1020, "kossen": 1020, "thedevpanda": 1020, "syd": 1020, "sre": 1020, "weezel": [1020, 1021], "bonald": 1020, "germer": 1020, "ion": 1020, "timofei": 1020, "kornev": 1020, "pitter": 1020, "tomiock": 1020, "mathew": 1020, "tspeng": 1020, "egashira": 1020, "rey": 1020, "puerta": 1020, "vishal": 1020, "vyom": 1020, "pathak": 1020, "wattai": 1020, "wchathura": 1020, "wen": 1020, "x110": 1020, "xuniu": 1020, "yanhong": 1020, "ef": 1020, "yusuf": 1020, "raji": 1020, "adil": 1020, "khwaja": 1020, "zeeshan": 1020, "lone": 1020, "25196": 1021, "24871": 1021, "25438": 1021, "yotam": 1021, "avidar": 1021, "constantini": 1021, "25752": 1021, "25294": 1021, "25308": 1021, "25291": 1021, "25367": 1021, "25402": 1021, "25044": 1021, "smt": 1021, "26082": 1021, "24568": 1021, "26121": 1021, "25805": 1021, "25251": 1021, "26033": 1021, "graphical_lasso_path": 1021, "25784": 1021, "25490": 1021, "25956": 1021, "22409": 1021, "25177": 1021, "24882": 1021, "25186": 1021, "breve": 1021, "25506": 1021, "25601": 1021, "fidor": 1021, "25931": 1021, "25629": 1021, "sckit": 1021, "verion": 1021, "25297": 1021, "24230": 1021, "25102": 1021, "25973": 1021, "25232": 1021, "21809": 1021, "25732": 1021, "26207": 1021, "25587": 1021, "25697": 1021, "25214": 1021, "25713": 1021, "25531": 1021, "25432": 1021, "25672": 1021, "lene": 1021, "preuss": 1021, "18723": 1021, "sahil": 1021, "24677": 1021, "24668": 1021, "dberenbaum": 1021, "25987": 1021, "25299": 1021, "omarmanzoor": 1021, "25659": 1021, "24140": 1021, "25417": 1021, "24076": 1021, "25443": 1021, "feature_union": 1021, "25093": 1021, "25220": 1021, "25334": 1021, "22506": 1021, "24935": 1021, "seladu": 1021, "25257": 1021, "25677": 1021, "25190": 1021, "25387": 1021, "check_transformers_unfitted_stateless": 1021, "25733": 1021, "25813": 1021, "26106": 1021, "suport": 1021, "25814": 1021, "19664": 1021}, "objects": {"sklearn": [[394, 0, 0, "-", "base"], [394, 0, 0, "-", "calibration"], [394, 0, 0, "-", "cluster"], [394, 0, 0, "-", "compose"], [451, 4, 1, "", "config_context"], [394, 0, 0, "-", "covariance"], [394, 0, 0, "-", "cross_decomposition"], [394, 0, 0, "-", "datasets"], [394, 0, 0, "-", "decomposition"], [394, 0, 0, "-", "discriminant_analysis"], [394, 0, 0, "-", "dummy"], [394, 0, 0, "-", "ensemble"], [394, 0, 0, "-", "exceptions"], [394, 0, 0, "-", "experimental"], [394, 0, 0, "-", "feature_extraction"], [394, 0, 0, "-", "feature_selection"], [394, 0, 0, "-", "gaussian_process"], [609, 4, 1, "", "get_config"], [394, 0, 0, "-", "impute"], [394, 0, 0, "-", "inspection"], [394, 0, 0, "-", "isotonic"], [394, 0, 0, "-", "kernel_approximation"], [394, 0, 0, "-", "kernel_ridge"], [394, 0, 0, "-", "linear_model"], [394, 0, 0, "-", "manifold"], [394, 0, 0, "-", "metrics"], [394, 0, 0, "-", "mixture"], [394, 0, 0, "-", "model_selection"], [394, 0, 0, "-", "multiclass"], [394, 0, 0, "-", "multioutput"], [394, 0, 0, "-", "naive_bayes"], [394, 0, 0, "-", "neighbors"], [394, 0, 0, "-", "neural_network"], [394, 0, 0, "-", "pipeline"], [394, 0, 0, "-", "preprocessing"], [394, 0, 0, "-", "random_projection"], [394, 0, 0, "-", "semi_supervised"], [879, 4, 1, "", "set_config"], [880, 4, 1, "", "show_versions"], [394, 0, 0, "-", "svm"], [394, 0, 0, "-", "tree"], [394, 0, 0, "-", "utils"]], "sklearn.base": [[409, 1, 1, "", "BaseEstimator"], [410, 1, 1, "", "BiclusterMixin"], [411, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [412, 1, 1, "", "ClassifierMixin"], [413, 1, 1, "", "ClusterMixin"], [414, 1, 1, "", "DensityMixin"], [415, 1, 1, "", "OneToOneFeatureMixin"], [416, 1, 1, "", "RegressorMixin"], [417, 1, 1, "", "TransformerMixin"], [418, 4, 1, "", "clone"], [419, 4, 1, "", "is_classifier"], [420, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[409, 2, 1, "", "get_params"], [409, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[410, 3, 1, "", "biclusters_"], [410, 2, 1, "", "get_indices"], [410, 2, 1, "", "get_shape"], [410, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[411, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[412, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[413, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[414, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[415, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[416, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[417, 2, 1, "", "fit_transform"], [417, 2, 1, "", "set_output"]], "sklearn.calibration": [[421, 1, 1, "", "CalibratedClassifierCV"], [422, 1, 1, "", "CalibrationDisplay"], [423, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[421, 2, 1, "", "fit"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "predict"], [421, 2, 1, "", "predict_proba"], [421, 2, 1, "", "score"], [421, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[422, 2, 1, "", "from_estimator"], [422, 2, 1, "", "from_predictions"], [422, 2, 1, "", "plot"]], "sklearn.cluster": [[424, 1, 1, "", "AffinityPropagation"], [425, 1, 1, "", "AgglomerativeClustering"], [426, 1, 1, "", "Birch"], [427, 1, 1, "", "BisectingKMeans"], [428, 1, 1, "", "DBSCAN"], [429, 1, 1, "", "FeatureAgglomeration"], [430, 1, 1, "", "KMeans"], [431, 1, 1, "", "MeanShift"], [432, 1, 1, "", "MiniBatchKMeans"], [433, 1, 1, "", "OPTICS"], [434, 1, 1, "", "SpectralBiclustering"], [435, 1, 1, "", "SpectralClustering"], [436, 1, 1, "", "SpectralCoclustering"], [437, 4, 1, "", "affinity_propagation"], [438, 4, 1, "", "cluster_optics_dbscan"], [439, 4, 1, "", "cluster_optics_xi"], [440, 4, 1, "", "compute_optics_graph"], [406, 4, 1, "", "dbscan"], [441, 4, 1, "", "estimate_bandwidth"], [442, 4, 1, "", "k_means"], [443, 4, 1, "", "kmeans_plusplus"], [444, 4, 1, "", "mean_shift"], [445, 4, 1, "", "spectral_clustering"], [446, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[424, 2, 1, "", "fit"], [424, 2, 1, "", "fit_predict"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "predict"], [424, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[425, 2, 1, "", "fit"], [425, 2, 1, "", "fit_predict"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[426, 2, 1, "", "fit"], [426, 2, 1, "", "fit_predict"], [426, 2, 1, "", "fit_transform"], [426, 2, 1, "", "get_feature_names_out"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "partial_fit"], [426, 2, 1, "", "predict"], [426, 2, 1, "", "set_output"], [426, 2, 1, "", "set_params"], [426, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[427, 2, 1, "", "fit"], [427, 2, 1, "", "fit_predict"], [427, 2, 1, "", "fit_transform"], [427, 2, 1, "", "get_feature_names_out"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "predict"], [427, 2, 1, "", "score"], [427, 2, 1, "", "set_output"], [427, 2, 1, "", "set_params"], [427, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_predict"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[429, 2, 1, "", "fit"], [429, 3, 1, "", "fit_predict"], [429, 2, 1, "", "fit_transform"], [429, 2, 1, "", "get_feature_names_out"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "inverse_transform"], [429, 2, 1, "", "set_output"], [429, 2, 1, "", "set_params"], [429, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "fit_predict"], [430, 2, 1, "", "fit_transform"], [430, 2, 1, "", "get_feature_names_out"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "predict"], [430, 2, 1, "", "score"], [430, 2, 1, "", "set_output"], [430, 2, 1, "", "set_params"], [430, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[431, 2, 1, "", "fit"], [431, 2, 1, "", "fit_predict"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "predict"], [431, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[432, 2, 1, "", "fit"], [432, 2, 1, "", "fit_predict"], [432, 2, 1, "", "fit_transform"], [432, 2, 1, "", "get_feature_names_out"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "partial_fit"], [432, 2, 1, "", "predict"], [432, 2, 1, "", "score"], [432, 2, 1, "", "set_output"], [432, 2, 1, "", "set_params"], [432, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[434, 3, 1, "", "biclusters_"], [434, 2, 1, "", "fit"], [434, 2, 1, "", "get_indices"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "get_shape"], [434, 2, 1, "", "get_submatrix"], [434, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "fit_predict"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[436, 3, 1, "", "biclusters_"], [436, 2, 1, "", "fit"], [436, 2, 1, "", "get_indices"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "get_shape"], [436, 2, 1, "", "get_submatrix"], [436, 2, 1, "", "set_params"]], "sklearn.compose": [[447, 1, 1, "", "ColumnTransformer"], [448, 1, 1, "", "TransformedTargetRegressor"], [449, 4, 1, "", "make_column_selector"], [450, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_params"], [447, 3, 1, "", "named_transformers_"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "get_params"], [448, 3, 1, "", "n_features_in_"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_params"]], "sklearn.covariance": [[452, 1, 1, "", "EllipticEnvelope"], [453, 1, 1, "", "EmpiricalCovariance"], [454, 1, 1, "", "GraphicalLasso"], [455, 1, 1, "", "GraphicalLassoCV"], [456, 1, 1, "", "LedoitWolf"], [457, 1, 1, "", "MinCovDet"], [458, 1, 1, "", "OAS"], [459, 1, 1, "", "ShrunkCovariance"], [460, 4, 1, "", "empirical_covariance"], [461, 4, 1, "", "graphical_lasso"], [462, 4, 1, "", "ledoit_wolf"], [463, 4, 1, "", "ledoit_wolf_shrinkage"], [408, 4, 1, "", "oas"], [464, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[452, 2, 1, "", "correct_covariance"], [452, 2, 1, "", "decision_function"], [452, 2, 1, "", "error_norm"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_precision"], [452, 2, 1, "", "mahalanobis"], [452, 2, 1, "", "predict"], [452, 2, 1, "", "reweight_covariance"], [452, 2, 1, "", "score"], [452, 2, 1, "", "score_samples"], [452, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[453, 2, 1, "", "error_norm"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_precision"], [453, 2, 1, "", "mahalanobis"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[454, 2, 1, "", "error_norm"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_precision"], [454, 2, 1, "", "mahalanobis"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[455, 2, 1, "", "error_norm"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_precision"], [455, 2, 1, "", "mahalanobis"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[456, 2, 1, "", "error_norm"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "get_precision"], [456, 2, 1, "", "mahalanobis"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[457, 2, 1, "", "correct_covariance"], [457, 2, 1, "", "error_norm"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "get_precision"], [457, 2, 1, "", "mahalanobis"], [457, 2, 1, "", "reweight_covariance"], [457, 2, 1, "", "score"], [457, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[458, 2, 1, "", "error_norm"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "get_precision"], [458, 2, 1, "", "mahalanobis"], [458, 2, 1, "", "score"], [458, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[459, 2, 1, "", "error_norm"], [459, 2, 1, "", "fit"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "get_precision"], [459, 2, 1, "", "mahalanobis"], [459, 2, 1, "", "score"], [459, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[465, 1, 1, "", "CCA"], [466, 1, 1, "", "PLSCanonical"], [467, 1, 1, "", "PLSRegression"], [468, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[465, 3, 1, "", "coef_"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "fit_transform"], [465, 2, 1, "", "get_feature_names_out"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "inverse_transform"], [465, 2, 1, "", "predict"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_output"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[466, 3, 1, "", "coef_"], [466, 2, 1, "", "fit"], [466, 2, 1, "", "fit_transform"], [466, 2, 1, "", "get_feature_names_out"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "inverse_transform"], [466, 2, 1, "", "predict"], [466, 2, 1, "", "score"], [466, 2, 1, "", "set_output"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[467, 3, 1, "", "coef_"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "fit_transform"], [467, 2, 1, "", "get_feature_names_out"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "inverse_transform"], [467, 2, 1, "", "predict"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_output"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[468, 2, 1, "", "fit"], [468, 2, 1, "", "fit_transform"], [468, 2, 1, "", "get_feature_names_out"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "set_output"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "transform"]], "sklearn.datasets": [[469, 4, 1, "", "clear_data_home"], [470, 4, 1, "", "dump_svmlight_file"], [471, 4, 1, "", "fetch_20newsgroups"], [472, 4, 1, "", "fetch_20newsgroups_vectorized"], [473, 4, 1, "", "fetch_california_housing"], [474, 4, 1, "", "fetch_covtype"], [475, 4, 1, "", "fetch_kddcup99"], [476, 4, 1, "", "fetch_lfw_pairs"], [477, 4, 1, "", "fetch_lfw_people"], [478, 4, 1, "", "fetch_olivetti_faces"], [479, 4, 1, "", "fetch_openml"], [480, 4, 1, "", "fetch_rcv1"], [481, 4, 1, "", "fetch_species_distributions"], [482, 4, 1, "", "get_data_home"], [483, 4, 1, "", "load_breast_cancer"], [484, 4, 1, "", "load_diabetes"], [485, 4, 1, "", "load_digits"], [486, 4, 1, "", "load_files"], [487, 4, 1, "", "load_iris"], [488, 4, 1, "", "load_linnerud"], [489, 4, 1, "", "load_sample_image"], [490, 4, 1, "", "load_sample_images"], [491, 4, 1, "", "load_svmlight_file"], [492, 4, 1, "", "load_svmlight_files"], [493, 4, 1, "", "load_wine"], [494, 4, 1, "", "make_biclusters"], [495, 4, 1, "", "make_blobs"], [496, 4, 1, "", "make_checkerboard"], [497, 4, 1, "", "make_circles"], [498, 4, 1, "", "make_classification"], [499, 4, 1, "", "make_friedman1"], [500, 4, 1, "", "make_friedman2"], [501, 4, 1, "", "make_friedman3"], [502, 4, 1, "", "make_gaussian_quantiles"], [503, 4, 1, "", "make_hastie_10_2"], [504, 4, 1, "", "make_low_rank_matrix"], [505, 4, 1, "", "make_moons"], [506, 4, 1, "", "make_multilabel_classification"], [507, 4, 1, "", "make_regression"], [508, 4, 1, "", "make_s_curve"], [509, 4, 1, "", "make_sparse_coded_signal"], [510, 4, 1, "", "make_sparse_spd_matrix"], [511, 4, 1, "", "make_sparse_uncorrelated"], [512, 4, 1, "", "make_spd_matrix"], [513, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[514, 1, 1, "", "DictionaryLearning"], [515, 1, 1, "", "FactorAnalysis"], [516, 1, 1, "", "FastICA"], [517, 1, 1, "", "IncrementalPCA"], [518, 1, 1, "", "KernelPCA"], [519, 1, 1, "", "LatentDirichletAllocation"], [520, 1, 1, "", "MiniBatchDictionaryLearning"], [521, 1, 1, "", "MiniBatchNMF"], [522, 1, 1, "", "MiniBatchSparsePCA"], [523, 1, 1, "", "NMF"], [524, 1, 1, "", "PCA"], [525, 1, 1, "", "SparseCoder"], [526, 1, 1, "", "SparsePCA"], [527, 1, 1, "", "TruncatedSVD"], [528, 4, 1, "", "dict_learning"], [529, 4, 1, "", "dict_learning_online"], [407, 4, 1, "", "fastica"], [530, 4, 1, "", "non_negative_factorization"], [531, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_transform"], [514, 2, 1, "", "get_feature_names_out"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "set_output"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[515, 2, 1, "", "fit"], [515, 2, 1, "", "fit_transform"], [515, 2, 1, "", "get_covariance"], [515, 2, 1, "", "get_feature_names_out"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "get_precision"], [515, 2, 1, "", "score"], [515, 2, 1, "", "score_samples"], [515, 2, 1, "", "set_output"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "inverse_transform"], [516, 2, 1, "", "set_output"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_covariance"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "get_precision"], [517, 2, 1, "", "inverse_transform"], [517, 2, 1, "", "partial_fit"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "inverse_transform"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "partial_fit"], [519, 2, 1, "", "perplexity"], [519, 2, 1, "", "score"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "partial_fit"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "inverse_transform"], [521, 2, 1, "", "partial_fit"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "inverse_transform"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[523, 2, 1, "", "fit"], [523, 2, 1, "", "fit_transform"], [523, 2, 1, "", "get_feature_names_out"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "inverse_transform"], [523, 2, 1, "", "set_output"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[524, 2, 1, "", "fit"], [524, 2, 1, "", "fit_transform"], [524, 2, 1, "", "get_covariance"], [524, 2, 1, "", "get_feature_names_out"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "get_precision"], [524, 2, 1, "", "inverse_transform"], [524, 2, 1, "", "score"], [524, 2, 1, "", "score_samples"], [524, 2, 1, "", "set_output"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[525, 2, 1, "", "fit"], [525, 2, 1, "", "fit_transform"], [525, 2, 1, "", "get_feature_names_out"], [525, 2, 1, "", "get_params"], [525, 3, 1, "", "n_components_"], [525, 3, 1, "", "n_features_in_"], [525, 2, 1, "", "set_output"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "fit_transform"], [526, 2, 1, "", "get_feature_names_out"], [526, 2, 1, "", "get_params"], [526, 2, 1, "", "inverse_transform"], [526, 2, 1, "", "set_output"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "inverse_transform"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[532, 1, 1, "", "LinearDiscriminantAnalysis"], [533, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[532, 2, 1, "", "decision_function"], [532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "predict_log_proba"], [532, 2, 1, "", "predict_proba"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[533, 2, 1, "", "decision_function"], [533, 2, 1, "", "fit"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "predict_log_proba"], [533, 2, 1, "", "predict_proba"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_params"]], "sklearn.dummy": [[534, 1, 1, "", "DummyClassifier"], [535, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "predict_log_proba"], [534, 2, 1, "", "predict_proba"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_params"]], "sklearn.ensemble": [[536, 1, 1, "", "AdaBoostClassifier"], [537, 1, 1, "", "AdaBoostRegressor"], [538, 1, 1, "", "BaggingClassifier"], [539, 1, 1, "", "BaggingRegressor"], [540, 1, 1, "", "ExtraTreesClassifier"], [541, 1, 1, "", "ExtraTreesRegressor"], [542, 1, 1, "", "GradientBoostingClassifier"], [543, 1, 1, "", "GradientBoostingRegressor"], [544, 1, 1, "", "HistGradientBoostingClassifier"], [545, 1, 1, "", "HistGradientBoostingRegressor"], [546, 1, 1, "", "IsolationForest"], [547, 1, 1, "", "RandomForestClassifier"], [548, 1, 1, "", "RandomForestRegressor"], [549, 1, 1, "", "RandomTreesEmbedding"], [550, 1, 1, "", "StackingClassifier"], [551, 1, 1, "", "StackingRegressor"], [552, 1, 1, "", "VotingClassifier"], [553, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[536, 3, 1, "", "base_estimator_"], [536, 2, 1, "", "decision_function"], [536, 3, 1, "", "feature_importances_"], [536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "predict_log_proba"], [536, 2, 1, "", "predict_proba"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "staged_decision_function"], [536, 2, 1, "", "staged_predict"], [536, 2, 1, "", "staged_predict_proba"], [536, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[537, 3, 1, "", "base_estimator_"], [537, 3, 1, "", "feature_importances_"], [537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "staged_predict"], [537, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[538, 3, 1, "", "base_estimator_"], [538, 2, 1, "", "decision_function"], [538, 3, 1, "", "estimators_samples_"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "predict_log_proba"], [538, 2, 1, "", "predict_proba"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[539, 3, 1, "", "base_estimator_"], [539, 3, 1, "", "estimators_samples_"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[540, 2, 1, "", "apply"], [540, 3, 1, "", "base_estimator_"], [540, 2, 1, "", "decision_path"], [540, 3, 1, "", "feature_importances_"], [540, 2, 1, "", "fit"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "predict_log_proba"], [540, 2, 1, "", "predict_proba"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[541, 2, 1, "", "apply"], [541, 3, 1, "", "base_estimator_"], [541, 2, 1, "", "decision_path"], [541, 3, 1, "", "feature_importances_"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "score"], [541, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[542, 2, 1, "", "apply"], [542, 3, 1, "", "base_estimator_"], [542, 2, 1, "", "decision_function"], [542, 3, 1, "", "feature_importances_"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_log_proba"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "staged_decision_function"], [542, 2, 1, "", "staged_predict"], [542, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[543, 2, 1, "", "apply"], [543, 3, 1, "", "base_estimator_"], [543, 3, 1, "", "feature_importances_"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[544, 2, 1, "", "decision_function"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "get_params"], [544, 3, 1, "", "n_iter_"], [544, 2, 1, "", "predict"], [544, 2, 1, "", "predict_proba"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "staged_decision_function"], [544, 2, 1, "", "staged_predict"], [544, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "get_params"], [545, 3, 1, "", "n_iter_"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[546, 3, 1, "", "base_estimator_"], [546, 2, 1, "", "decision_function"], [546, 3, 1, "", "estimators_samples_"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_predict"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "score_samples"], [546, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[547, 2, 1, "", "apply"], [547, 3, 1, "", "base_estimator_"], [547, 2, 1, "", "decision_path"], [547, 3, 1, "", "feature_importances_"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_log_proba"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[548, 2, 1, "", "apply"], [548, 3, 1, "", "base_estimator_"], [548, 2, 1, "", "decision_path"], [548, 3, 1, "", "feature_importances_"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[549, 2, 1, "", "apply"], [549, 3, 1, "", "base_estimator_"], [549, 2, 1, "", "decision_path"], [549, 3, 1, "", "feature_importances_"], [549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_params"], [550, 3, 1, "", "n_features_in_"], [550, 3, 1, "", "named_estimators"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_params"], [551, 3, 1, "", "n_features_in_"], [551, 3, 1, "", "named_estimators"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_params"], [552, 3, 1, "", "n_features_in_"], [552, 3, 1, "", "named_estimators"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_params"], [553, 3, 1, "", "n_features_in_"], [553, 3, 1, "", "named_estimators"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "transform"]], "sklearn.exceptions": [[554, 1, 1, "", "ConvergenceWarning"], [555, 1, 1, "", "DataConversionWarning"], [556, 1, 1, "", "DataDimensionalityWarning"], [557, 1, 1, "", "EfficiencyWarning"], [558, 1, 1, "", "FitFailedWarning"], [559, 1, 1, "", "InconsistentVersionWarning"], [560, 1, 1, "", "NotFittedError"], [561, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[554, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[555, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[556, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[557, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[558, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[559, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[560, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[561, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[562, 0, 0, "-", "enable_halving_search_cv"], [563, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[564, 1, 1, "", "DictVectorizer"], [565, 1, 1, "", "FeatureHasher"], [394, 0, 0, "-", "image"], [394, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "inverse_transform"], [564, 2, 1, "", "restrict"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[566, 1, 1, "", "PatchExtractor"], [567, 4, 1, "", "extract_patches_2d"], [568, 4, 1, "", "grid_to_graph"], [569, 4, 1, "", "img_to_graph"], [570, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[571, 1, 1, "", "CountVectorizer"], [572, 1, 1, "", "HashingVectorizer"], [573, 1, 1, "", "TfidfTransformer"], [574, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[571, 2, 1, "", "build_analyzer"], [571, 2, 1, "", "build_preprocessor"], [571, 2, 1, "", "build_tokenizer"], [571, 2, 1, "", "decode"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "get_stop_words"], [571, 2, 1, "", "inverse_transform"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[572, 2, 1, "", "build_analyzer"], [572, 2, 1, "", "build_preprocessor"], [572, 2, 1, "", "build_tokenizer"], [572, 2, 1, "", "decode"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "get_stop_words"], [572, 2, 1, "", "partial_fit"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_params"], [573, 3, 1, "", "idf_"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[574, 2, 1, "", "build_analyzer"], [574, 2, 1, "", "build_preprocessor"], [574, 2, 1, "", "build_tokenizer"], [574, 2, 1, "", "decode"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_stop_words"], [574, 3, 1, "", "idf_"], [574, 2, 1, "", "inverse_transform"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_selection": [[575, 1, 1, "", "GenericUnivariateSelect"], [576, 1, 1, "", "RFE"], [577, 1, 1, "", "RFECV"], [578, 1, 1, "", "SelectFdr"], [579, 1, 1, "", "SelectFpr"], [580, 1, 1, "", "SelectFromModel"], [581, 1, 1, "", "SelectFwe"], [582, 1, 1, "", "SelectKBest"], [583, 1, 1, "", "SelectPercentile"], [584, 1, 1, "", "SelectorMixin"], [585, 1, 1, "", "SequentialFeatureSelector"], [586, 1, 1, "", "VarianceThreshold"], [587, 4, 1, "", "chi2"], [588, 4, 1, "", "f_classif"], [589, 4, 1, "", "f_regression"], [590, 4, 1, "", "mutual_info_classif"], [591, 4, 1, "", "mutual_info_regression"], [592, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "get_support"], [575, 2, 1, "", "inverse_transform"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[576, 3, 1, "", "classes_"], [576, 2, 1, "", "decision_function"], [576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "get_support"], [576, 2, 1, "", "inverse_transform"], [576, 2, 1, "", "predict"], [576, 2, 1, "", "predict_log_proba"], [576, 2, 1, "", "predict_proba"], [576, 2, 1, "", "score"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[577, 3, 1, "", "classes_"], [577, 2, 1, "", "decision_function"], [577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_support"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "predict"], [577, 2, 1, "", "predict_log_proba"], [577, 2, 1, "", "predict_proba"], [577, 2, 1, "", "score"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "get_support"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_support"], [580, 2, 1, "", "inverse_transform"], [580, 3, 1, "", "n_features_in_"], [580, 2, 1, "", "partial_fit"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 3, 1, "", "threshold_"], [580, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_support"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "get_support"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_feature_names_out"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "get_support"], [583, 2, 1, "", "inverse_transform"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_feature_names_out"], [584, 2, 1, "", "get_support"], [584, 2, 1, "", "inverse_transform"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_support"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "set_output"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_support"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[593, 1, 1, "", "GaussianProcessClassifier"], [594, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "get_params"], [593, 3, 1, "", "kernel_"], [593, 2, 1, "", "log_marginal_likelihood"], [593, 2, 1, "", "predict"], [593, 2, 1, "", "predict_proba"], [593, 2, 1, "", "score"], [593, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "log_marginal_likelihood"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "sample_y"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[595, 1, 1, "", "CompoundKernel"], [596, 1, 1, "", "ConstantKernel"], [597, 1, 1, "", "DotProduct"], [598, 1, 1, "", "ExpSineSquared"], [599, 1, 1, "", "Exponentiation"], [600, 1, 1, "", "Hyperparameter"], [601, 1, 1, "", "Kernel"], [602, 1, 1, "", "Matern"], [603, 1, 1, "", "PairwiseKernel"], [604, 1, 1, "", "Product"], [605, 1, 1, "", "RBF"], [606, 1, 1, "", "RationalQuadratic"], [607, 1, 1, "", "Sum"], [608, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[595, 2, 1, "", "__call__"], [595, 3, 1, "", "bounds"], [595, 2, 1, "", "clone_with_theta"], [595, 2, 1, "", "diag"], [595, 2, 1, "", "get_params"], [595, 3, 1, "", "hyperparameters"], [595, 2, 1, "", "is_stationary"], [595, 3, 1, "", "n_dims"], [595, 3, 1, "", "requires_vector_input"], [595, 2, 1, "", "set_params"], [595, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[596, 2, 1, "", "__call__"], [596, 3, 1, "", "bounds"], [596, 2, 1, "", "clone_with_theta"], [596, 2, 1, "", "diag"], [596, 2, 1, "", "get_params"], [596, 3, 1, "", "hyperparameters"], [596, 2, 1, "", "is_stationary"], [596, 3, 1, "", "n_dims"], [596, 3, 1, "", "requires_vector_input"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[597, 2, 1, "", "__call__"], [597, 3, 1, "", "bounds"], [597, 2, 1, "", "clone_with_theta"], [597, 2, 1, "", "diag"], [597, 2, 1, "", "get_params"], [597, 3, 1, "", "hyperparameters"], [597, 2, 1, "", "is_stationary"], [597, 3, 1, "", "n_dims"], [597, 3, 1, "", "requires_vector_input"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[598, 2, 1, "", "__call__"], [598, 3, 1, "", "bounds"], [598, 2, 1, "", "clone_with_theta"], [598, 2, 1, "", "diag"], [598, 2, 1, "", "get_params"], [598, 3, 1, "", "hyperparameter_length_scale"], [598, 3, 1, "", "hyperparameters"], [598, 2, 1, "", "is_stationary"], [598, 3, 1, "", "n_dims"], [598, 3, 1, "", "requires_vector_input"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[600, 2, 1, "", "__call__"], [600, 5, 1, "", "bounds"], [600, 2, 1, "", "count"], [600, 5, 1, "", "fixed"], [600, 2, 1, "", "index"], [600, 5, 1, "", "n_elements"], [600, 5, 1, "", "name"], [600, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[602, 2, 1, "", "__call__"], [602, 3, 1, "", "bounds"], [602, 2, 1, "", "clone_with_theta"], [602, 2, 1, "", "diag"], [602, 2, 1, "", "get_params"], [602, 3, 1, "", "hyperparameters"], [602, 2, 1, "", "is_stationary"], [602, 3, 1, "", "n_dims"], [602, 3, 1, "", "requires_vector_input"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[603, 2, 1, "", "__call__"], [603, 3, 1, "", "bounds"], [603, 2, 1, "", "clone_with_theta"], [603, 2, 1, "", "diag"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "hyperparameters"], [603, 2, 1, "", "is_stationary"], [603, 3, 1, "", "n_dims"], [603, 3, 1, "", "requires_vector_input"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[604, 2, 1, "", "__call__"], [604, 3, 1, "", "bounds"], [604, 2, 1, "", "clone_with_theta"], [604, 2, 1, "", "diag"], [604, 2, 1, "", "get_params"], [604, 3, 1, "", "hyperparameters"], [604, 2, 1, "", "is_stationary"], [604, 3, 1, "", "n_dims"], [604, 3, 1, "", "requires_vector_input"], [604, 2, 1, "", "set_params"], [604, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[605, 2, 1, "", "__call__"], [605, 3, 1, "", "bounds"], [605, 2, 1, "", "clone_with_theta"], [605, 2, 1, "", "diag"], [605, 2, 1, "", "get_params"], [605, 3, 1, "", "hyperparameters"], [605, 2, 1, "", "is_stationary"], [605, 3, 1, "", "n_dims"], [605, 3, 1, "", "requires_vector_input"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[606, 2, 1, "", "__call__"], [606, 3, 1, "", "bounds"], [606, 2, 1, "", "clone_with_theta"], [606, 2, 1, "", "diag"], [606, 2, 1, "", "get_params"], [606, 3, 1, "", "hyperparameters"], [606, 2, 1, "", "is_stationary"], [606, 3, 1, "", "n_dims"], [606, 3, 1, "", "requires_vector_input"], [606, 2, 1, "", "set_params"], [606, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[607, 2, 1, "", "__call__"], [607, 3, 1, "", "bounds"], [607, 2, 1, "", "clone_with_theta"], [607, 2, 1, "", "diag"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "hyperparameters"], [607, 2, 1, "", "is_stationary"], [607, 3, 1, "", "n_dims"], [607, 3, 1, "", "requires_vector_input"], [607, 2, 1, "", "set_params"], [607, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[608, 2, 1, "", "__call__"], [608, 3, 1, "", "bounds"], [608, 2, 1, "", "clone_with_theta"], [608, 2, 1, "", "diag"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "hyperparameters"], [608, 2, 1, "", "is_stationary"], [608, 3, 1, "", "n_dims"], [608, 3, 1, "", "requires_vector_input"], [608, 2, 1, "", "set_params"], [608, 3, 1, "", "theta"]], "sklearn.impute": [[610, 1, 1, "", "IterativeImputer"], [611, 1, 1, "", "KNNImputer"], [612, 1, 1, "", "MissingIndicator"], [613, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "fit_transform"], [610, 2, 1, "", "get_feature_names_out"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "set_output"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "fit_transform"], [611, 2, 1, "", "get_feature_names_out"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "set_output"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "fit_transform"], [612, 2, 1, "", "get_feature_names_out"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "set_output"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "fit_transform"], [613, 2, 1, "", "get_feature_names_out"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "inverse_transform"], [613, 2, 1, "", "set_output"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "transform"]], "sklearn.inspection": [[614, 1, 1, "", "DecisionBoundaryDisplay"], [615, 1, 1, "", "PartialDependenceDisplay"], [616, 4, 1, "", "partial_dependence"], [617, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[614, 2, 1, "", "from_estimator"], [614, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[615, 2, 1, "", "from_estimator"], [615, 2, 1, "", "plot"]], "sklearn.isotonic": [[618, 1, 1, "", "IsotonicRegression"], [619, 4, 1, "", "check_increasing"], [620, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "fit_transform"], [618, 2, 1, "", "get_feature_names_out"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "predict"], [618, 2, 1, "", "score"], [618, 2, 1, "", "set_output"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[621, 1, 1, "", "AdditiveChi2Sampler"], [622, 1, 1, "", "Nystroem"], [623, 1, 1, "", "PolynomialCountSketch"], [624, 1, 1, "", "RBFSampler"], [625, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "fit_transform"], [621, 2, 1, "", "get_feature_names_out"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "set_output"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "fit_transform"], [622, 2, 1, "", "get_feature_names_out"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "set_output"], [622, 2, 1, "", "set_params"], [622, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "fit_transform"], [623, 2, 1, "", "get_feature_names_out"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "set_output"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "fit_transform"], [624, 2, 1, "", "get_feature_names_out"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "set_output"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "fit_transform"], [625, 2, 1, "", "get_feature_names_out"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "set_output"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[626, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"]], "sklearn.linear_model": [[627, 1, 1, "", "ARDRegression"], [628, 1, 1, "", "BayesianRidge"], [629, 1, 1, "", "ElasticNet"], [630, 1, 1, "", "ElasticNetCV"], [631, 1, 1, "", "GammaRegressor"], [632, 1, 1, "", "HuberRegressor"], [633, 1, 1, "", "Lars"], [634, 1, 1, "", "LarsCV"], [635, 1, 1, "", "Lasso"], [636, 1, 1, "", "LassoCV"], [637, 1, 1, "", "LassoLars"], [638, 1, 1, "", "LassoLarsCV"], [639, 1, 1, "", "LassoLarsIC"], [640, 1, 1, "", "LinearRegression"], [641, 1, 1, "", "LogisticRegression"], [642, 1, 1, "", "LogisticRegressionCV"], [643, 1, 1, "", "MultiTaskElasticNet"], [644, 1, 1, "", "MultiTaskElasticNetCV"], [645, 1, 1, "", "MultiTaskLasso"], [646, 1, 1, "", "MultiTaskLassoCV"], [647, 1, 1, "", "OrthogonalMatchingPursuit"], [648, 1, 1, "", "OrthogonalMatchingPursuitCV"], [649, 1, 1, "", "PassiveAggressiveClassifier"], [650, 4, 1, "", "PassiveAggressiveRegressor"], [651, 1, 1, "", "Perceptron"], [652, 1, 1, "", "PoissonRegressor"], [653, 1, 1, "", "QuantileRegressor"], [654, 1, 1, "", "RANSACRegressor"], [655, 1, 1, "", "Ridge"], [656, 1, 1, "", "RidgeCV"], [657, 1, 1, "", "RidgeClassifier"], [658, 1, 1, "", "RidgeClassifierCV"], [659, 1, 1, "", "SGDClassifier"], [660, 1, 1, "", "SGDOneClassSVM"], [661, 1, 1, "", "SGDRegressor"], [662, 1, 1, "", "TheilSenRegressor"], [663, 1, 1, "", "TweedieRegressor"], [664, 4, 1, "", "enet_path"], [665, 4, 1, "", "lars_path"], [666, 4, 1, "", "lars_path_gram"], [667, 4, 1, "", "lasso_path"], [668, 4, 1, "", "orthogonal_mp"], [669, 4, 1, "", "orthogonal_mp_gram"], [670, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "path"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "path"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "path"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"], [635, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "path"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[641, 2, 1, "", "decision_function"], [641, 2, 1, "", "densify"], [641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "predict_log_proba"], [641, 2, 1, "", "predict_proba"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[642, 2, 1, "", "decision_function"], [642, 2, 1, "", "densify"], [642, 2, 1, "", "fit"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "predict_log_proba"], [642, 2, 1, "", "predict_proba"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "path"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "path"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "path"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"], [645, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "path"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[649, 2, 1, "", "decision_function"], [649, 2, 1, "", "densify"], [649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "partial_fit"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[651, 2, 1, "", "decision_function"], [651, 2, 1, "", "densify"], [651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "partial_fit"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[657, 3, 1, "", "classes_"], [657, 2, 1, "", "decision_function"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[658, 3, 1, "", "classes_"], [658, 2, 1, "", "decision_function"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "partial_fit"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "predict_log_proba"], [659, 2, 1, "", "predict_proba"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[660, 2, 1, "", "decision_function"], [660, 2, 1, "", "densify"], [660, 2, 1, "", "fit"], [660, 2, 1, "", "fit_predict"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "partial_fit"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score_samples"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[661, 2, 1, "", "densify"], [661, 2, 1, "", "fit"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "partial_fit"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_params"]], "sklearn.manifold": [[671, 1, 1, "", "Isomap"], [672, 1, 1, "", "LocallyLinearEmbedding"], [673, 1, 1, "", "MDS"], [674, 1, 1, "", "SpectralEmbedding"], [675, 1, 1, "", "TSNE"], [676, 4, 1, "", "locally_linear_embedding"], [677, 4, 1, "", "smacof"], [678, 4, 1, "", "spectral_embedding"], [679, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "fit_transform"], [671, 2, 1, "", "get_feature_names_out"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "reconstruction_error"], [671, 2, 1, "", "set_output"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "fit_transform"], [672, 2, 1, "", "get_feature_names_out"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "set_output"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "fit_transform"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "fit_transform"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[675, 2, 1, "", "fit"], [675, 2, 1, "", "fit_transform"], [675, 2, 1, "", "get_feature_names_out"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "set_output"], [675, 2, 1, "", "set_params"]], "sklearn.metrics": [[680, 1, 1, "", "ConfusionMatrixDisplay"], [681, 1, 1, "", "DetCurveDisplay"], [682, 1, 1, "", "DistanceMetric"], [683, 1, 1, "", "PrecisionRecallDisplay"], [684, 1, 1, "", "PredictionErrorDisplay"], [685, 1, 1, "", "RocCurveDisplay"], [686, 4, 1, "", "accuracy_score"], [687, 4, 1, "", "adjusted_mutual_info_score"], [688, 4, 1, "", "adjusted_rand_score"], [689, 4, 1, "", "auc"], [690, 4, 1, "", "average_precision_score"], [691, 4, 1, "", "balanced_accuracy_score"], [692, 4, 1, "", "brier_score_loss"], [693, 4, 1, "", "calinski_harabasz_score"], [694, 4, 1, "", "check_scoring"], [695, 4, 1, "", "class_likelihood_ratios"], [696, 4, 1, "", "classification_report"], [394, 0, 0, "-", "cluster"], [699, 4, 1, "", "cohen_kappa_score"], [700, 4, 1, "", "completeness_score"], [701, 4, 1, "", "confusion_matrix"], [702, 4, 1, "", "consensus_score"], [703, 4, 1, "", "coverage_error"], [704, 4, 1, "", "d2_absolute_error_score"], [705, 4, 1, "", "d2_pinball_score"], [706, 4, 1, "", "d2_tweedie_score"], [707, 4, 1, "", "davies_bouldin_score"], [708, 4, 1, "", "dcg_score"], [709, 4, 1, "", "det_curve"], [710, 4, 1, "", "explained_variance_score"], [711, 4, 1, "", "f1_score"], [712, 4, 1, "", "fbeta_score"], [713, 4, 1, "", "fowlkes_mallows_score"], [714, 4, 1, "", "get_scorer"], [715, 4, 1, "", "get_scorer_names"], [716, 4, 1, "", "hamming_loss"], [717, 4, 1, "", "hinge_loss"], [718, 4, 1, "", "homogeneity_completeness_v_measure"], [719, 4, 1, "", "homogeneity_score"], [720, 4, 1, "", "jaccard_score"], [721, 4, 1, "", "label_ranking_average_precision_score"], [722, 4, 1, "", "label_ranking_loss"], [723, 4, 1, "", "log_loss"], [724, 4, 1, "", "make_scorer"], [725, 4, 1, "", "matthews_corrcoef"], [726, 4, 1, "", "max_error"], [727, 4, 1, "", "mean_absolute_error"], [728, 4, 1, "", "mean_absolute_percentage_error"], [729, 4, 1, "", "mean_gamma_deviance"], [730, 4, 1, "", "mean_pinball_loss"], [731, 4, 1, "", "mean_poisson_deviance"], [732, 4, 1, "", "mean_squared_error"], [733, 4, 1, "", "mean_squared_log_error"], [734, 4, 1, "", "mean_tweedie_deviance"], [735, 4, 1, "", "median_absolute_error"], [736, 4, 1, "", "multilabel_confusion_matrix"], [737, 4, 1, "", "mutual_info_score"], [738, 4, 1, "", "ndcg_score"], [739, 4, 1, "", "normalized_mutual_info_score"], [394, 0, 0, "-", "pairwise"], [760, 4, 1, "", "pairwise_distances"], [761, 4, 1, "", "pairwise_distances_argmin"], [762, 4, 1, "", "pairwise_distances_argmin_min"], [763, 4, 1, "", "pairwise_distances_chunked"], [764, 4, 1, "", "precision_recall_curve"], [765, 4, 1, "", "precision_recall_fscore_support"], [766, 4, 1, "", "precision_score"], [767, 4, 1, "", "r2_score"], [768, 4, 1, "", "rand_score"], [769, 4, 1, "", "recall_score"], [770, 4, 1, "", "roc_auc_score"], [771, 4, 1, "", "roc_curve"], [772, 4, 1, "", "silhouette_samples"], [773, 4, 1, "", "silhouette_score"], [774, 4, 1, "", "top_k_accuracy_score"], [775, 4, 1, "", "v_measure_score"], [776, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[680, 2, 1, "", "from_estimator"], [680, 2, 1, "", "from_predictions"], [680, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[681, 2, 1, "", "from_estimator"], [681, 2, 1, "", "from_predictions"], [681, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[682, 2, 1, "", "dist_to_rdist"], [682, 2, 1, "", "get_metric"], [682, 2, 1, "", "pairwise"], [682, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[683, 2, 1, "", "from_estimator"], [683, 2, 1, "", "from_predictions"], [683, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[684, 2, 1, "", "from_estimator"], [684, 2, 1, "", "from_predictions"], [684, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[685, 2, 1, "", "from_estimator"], [685, 2, 1, "", "from_predictions"], [685, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[697, 4, 1, "", "contingency_matrix"], [698, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[740, 4, 1, "", "additive_chi2_kernel"], [741, 4, 1, "", "chi2_kernel"], [742, 4, 1, "", "cosine_distances"], [743, 4, 1, "", "cosine_similarity"], [744, 4, 1, "", "distance_metrics"], [745, 4, 1, "", "euclidean_distances"], [746, 4, 1, "", "haversine_distances"], [747, 4, 1, "", "kernel_metrics"], [748, 4, 1, "", "laplacian_kernel"], [749, 4, 1, "", "linear_kernel"], [750, 4, 1, "", "manhattan_distances"], [751, 4, 1, "", "nan_euclidean_distances"], [752, 4, 1, "", "paired_cosine_distances"], [753, 4, 1, "", "paired_distances"], [754, 4, 1, "", "paired_euclidean_distances"], [755, 4, 1, "", "paired_manhattan_distances"], [756, 4, 1, "", "pairwise_kernels"], [757, 4, 1, "", "polynomial_kernel"], [758, 4, 1, "", "rbf_kernel"], [759, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[777, 1, 1, "", "BayesianGaussianMixture"], [778, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[777, 2, 1, "", "fit"], [777, 2, 1, "", "fit_predict"], [777, 2, 1, "", "get_params"], [777, 2, 1, "", "predict"], [777, 2, 1, "", "predict_proba"], [777, 2, 1, "", "sample"], [777, 2, 1, "", "score"], [777, 2, 1, "", "score_samples"], [777, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[778, 2, 1, "", "aic"], [778, 2, 1, "", "bic"], [778, 2, 1, "", "fit"], [778, 2, 1, "", "fit_predict"], [778, 2, 1, "", "get_params"], [778, 2, 1, "", "predict"], [778, 2, 1, "", "predict_proba"], [778, 2, 1, "", "sample"], [778, 2, 1, "", "score"], [778, 2, 1, "", "score_samples"], [778, 2, 1, "", "set_params"]], "sklearn.model_selection": [[779, 1, 1, "", "GridSearchCV"], [780, 1, 1, "", "GroupKFold"], [781, 1, 1, "", "GroupShuffleSplit"], [782, 1, 1, "", "HalvingGridSearchCV"], [783, 1, 1, "", "HalvingRandomSearchCV"], [784, 1, 1, "", "KFold"], [785, 1, 1, "", "LearningCurveDisplay"], [786, 1, 1, "", "LeaveOneGroupOut"], [787, 1, 1, "", "LeaveOneOut"], [788, 1, 1, "", "LeavePGroupsOut"], [789, 1, 1, "", "LeavePOut"], [790, 1, 1, "", "ParameterGrid"], [791, 1, 1, "", "ParameterSampler"], [792, 1, 1, "", "PredefinedSplit"], [793, 1, 1, "", "RandomizedSearchCV"], [794, 1, 1, "", "RepeatedKFold"], [795, 1, 1, "", "RepeatedStratifiedKFold"], [796, 1, 1, "", "ShuffleSplit"], [797, 1, 1, "", "StratifiedGroupKFold"], [798, 1, 1, "", "StratifiedKFold"], [799, 1, 1, "", "StratifiedShuffleSplit"], [800, 1, 1, "", "TimeSeriesSplit"], [801, 4, 1, "", "check_cv"], [802, 4, 1, "", "cross_val_predict"], [803, 4, 1, "", "cross_val_score"], [804, 4, 1, "", "cross_validate"], [805, 4, 1, "", "learning_curve"], [806, 4, 1, "", "permutation_test_score"], [807, 4, 1, "", "train_test_split"], [808, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[779, 3, 1, "", "classes_"], [779, 2, 1, "", "decision_function"], [779, 2, 1, "", "fit"], [779, 2, 1, "", "get_params"], [779, 2, 1, "", "inverse_transform"], [779, 3, 1, "", "n_features_in_"], [779, 2, 1, "", "predict"], [779, 2, 1, "", "predict_log_proba"], [779, 2, 1, "", "predict_proba"], [779, 2, 1, "", "score"], [779, 2, 1, "", "score_samples"], [779, 2, 1, "", "set_params"], [779, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[780, 2, 1, "", "get_n_splits"], [780, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[781, 2, 1, "", "get_n_splits"], [781, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[782, 3, 1, "", "classes_"], [782, 2, 1, "", "decision_function"], [782, 2, 1, "", "fit"], [782, 2, 1, "", "get_params"], [782, 2, 1, "", "inverse_transform"], [782, 3, 1, "", "n_features_in_"], [782, 2, 1, "", "predict"], [782, 2, 1, "", "predict_log_proba"], [782, 2, 1, "", "predict_proba"], [782, 2, 1, "", "score"], [782, 2, 1, "", "score_samples"], [782, 2, 1, "", "set_params"], [782, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[783, 3, 1, "", "classes_"], [783, 2, 1, "", "decision_function"], [783, 2, 1, "", "fit"], [783, 2, 1, "", "get_params"], [783, 2, 1, "", "inverse_transform"], [783, 3, 1, "", "n_features_in_"], [783, 2, 1, "", "predict"], [783, 2, 1, "", "predict_log_proba"], [783, 2, 1, "", "predict_proba"], [783, 2, 1, "", "score"], [783, 2, 1, "", "score_samples"], [783, 2, 1, "", "set_params"], [783, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[785, 2, 1, "", "from_estimator"], [785, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[786, 2, 1, "", "get_n_splits"], [786, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[788, 2, 1, "", "get_n_splits"], [788, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[789, 2, 1, "", "get_n_splits"], [789, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[793, 3, 1, "", "classes_"], [793, 2, 1, "", "decision_function"], [793, 2, 1, "", "fit"], [793, 2, 1, "", "get_params"], [793, 2, 1, "", "inverse_transform"], [793, 3, 1, "", "n_features_in_"], [793, 2, 1, "", "predict"], [793, 2, 1, "", "predict_log_proba"], [793, 2, 1, "", "predict_proba"], [793, 2, 1, "", "score"], [793, 2, 1, "", "score_samples"], [793, 2, 1, "", "set_params"], [793, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[799, 2, 1, "", "get_n_splits"], [799, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "split"]], "sklearn.multiclass": [[809, 1, 1, "", "OneVsOneClassifier"], [810, 1, 1, "", "OneVsRestClassifier"], [811, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[809, 2, 1, "", "decision_function"], [809, 2, 1, "", "fit"], [809, 2, 1, "", "get_params"], [809, 3, 1, "", "n_classes_"], [809, 2, 1, "", "partial_fit"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "score"], [809, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[810, 2, 1, "", "decision_function"], [810, 2, 1, "", "fit"], [810, 2, 1, "", "get_params"], [810, 3, 1, "", "multilabel_"], [810, 3, 1, "", "n_classes_"], [810, 2, 1, "", "partial_fit"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[811, 2, 1, "", "fit"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "score"], [811, 2, 1, "", "set_params"]], "sklearn.multioutput": [[812, 1, 1, "", "ClassifierChain"], [813, 1, 1, "", "MultiOutputClassifier"], [814, 1, 1, "", "MultiOutputRegressor"], [815, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[812, 2, 1, "", "decision_function"], [812, 2, 1, "", "fit"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "predict_proba"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "partial_fit"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "predict_proba"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "partial_fit"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "score"], [814, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[816, 1, 1, "", "BernoulliNB"], [817, 1, 1, "", "CategoricalNB"], [818, 1, 1, "", "ComplementNB"], [819, 1, 1, "", "GaussianNB"], [820, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "partial_fit"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "predict_joint_log_proba"], [816, 2, 1, "", "predict_log_proba"], [816, 2, 1, "", "predict_proba"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "partial_fit"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "predict_joint_log_proba"], [817, 2, 1, "", "predict_log_proba"], [817, 2, 1, "", "predict_proba"], [817, 2, 1, "", "score"], [817, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "partial_fit"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "predict_joint_log_proba"], [818, 2, 1, "", "predict_log_proba"], [818, 2, 1, "", "predict_proba"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[819, 2, 1, "", "fit"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "partial_fit"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "predict_joint_log_proba"], [819, 2, 1, "", "predict_log_proba"], [819, 2, 1, "", "predict_proba"], [819, 2, 1, "", "score"], [819, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "partial_fit"], [820, 2, 1, "", "predict"], [820, 2, 1, "", "predict_joint_log_proba"], [820, 2, 1, "", "predict_log_proba"], [820, 2, 1, "", "predict_proba"], [820, 2, 1, "", "score"], [820, 2, 1, "", "set_params"]], "sklearn.neighbors": [[821, 1, 1, "", "BallTree"], [822, 1, 1, "", "KDTree"], [823, 1, 1, "", "KNeighborsClassifier"], [824, 1, 1, "", "KNeighborsRegressor"], [825, 1, 1, "", "KNeighborsTransformer"], [826, 1, 1, "", "KernelDensity"], [827, 1, 1, "", "LocalOutlierFactor"], [828, 1, 1, "", "NearestCentroid"], [829, 1, 1, "", "NearestNeighbors"], [830, 1, 1, "", "NeighborhoodComponentsAnalysis"], [831, 1, 1, "", "RadiusNeighborsClassifier"], [832, 1, 1, "", "RadiusNeighborsRegressor"], [833, 1, 1, "", "RadiusNeighborsTransformer"], [834, 4, 1, "", "kneighbors_graph"], [835, 4, 1, "", "radius_neighbors_graph"], [836, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[821, 2, 1, "", "get_arrays"], [821, 2, 1, "", "get_n_calls"], [821, 2, 1, "", "get_tree_stats"], [821, 2, 1, "", "kernel_density"], [821, 2, 1, "", "query"], [821, 2, 1, "", "query_radius"], [821, 2, 1, "", "reset_n_calls"], [821, 2, 1, "", "two_point_correlation"], [821, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KDTree": [[822, 2, 1, "", "get_arrays"], [822, 2, 1, "", "get_n_calls"], [822, 2, 1, "", "get_tree_stats"], [822, 2, 1, "", "kernel_density"], [822, 2, 1, "", "query"], [822, 2, 1, "", "query_radius"], [822, 2, 1, "", "reset_n_calls"], [822, 2, 1, "", "two_point_correlation"], [822, 2, 1, "", "valid_metrics"]], "sklearn.neighbors.KNeighborsClassifier": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "kneighbors"], [823, 2, 1, "", "kneighbors_graph"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "kneighbors"], [824, 2, 1, "", "kneighbors_graph"], [824, 2, 1, "", "predict"], [824, 2, 1, "", "score"], [824, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_transform"], [825, 2, 1, "", "get_feature_names_out"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "kneighbors"], [825, 2, 1, "", "kneighbors_graph"], [825, 2, 1, "", "set_output"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "sample"], [826, 2, 1, "", "score"], [826, 2, 1, "", "score_samples"], [826, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[827, 2, 1, "", "decision_function"], [827, 2, 1, "", "fit"], [827, 2, 1, "", "fit_predict"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "kneighbors"], [827, 2, 1, "", "kneighbors_graph"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "score_samples"], [827, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "kneighbors"], [829, 2, 1, "", "kneighbors_graph"], [829, 2, 1, "", "radius_neighbors"], [829, 2, 1, "", "radius_neighbors_graph"], [829, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "fit_transform"], [830, 2, 1, "", "get_feature_names_out"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "set_output"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "radius_neighbors"], [831, 2, 1, "", "radius_neighbors_graph"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "radius_neighbors"], [832, 2, 1, "", "radius_neighbors_graph"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "fit_transform"], [833, 2, 1, "", "get_feature_names_out"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "radius_neighbors"], [833, 2, 1, "", "radius_neighbors_graph"], [833, 2, 1, "", "set_output"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "transform"]], "sklearn.neural_network": [[837, 1, 1, "", "BernoulliRBM"], [838, 1, 1, "", "MLPClassifier"], [839, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "fit_transform"], [837, 2, 1, "", "get_feature_names_out"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "gibbs"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "score_samples"], [837, 2, 1, "", "set_output"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_log_proba"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "partial_fit"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"]], "sklearn.pipeline": [[840, 1, 1, "", "FeatureUnion"], [841, 1, 1, "", "Pipeline"], [842, 4, 1, "", "make_pipeline"], [843, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[840, 3, 1, "", "feature_names_in_"], [840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_params"], [840, 3, 1, "", "n_features_in_"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[841, 3, 1, "", "classes_"], [841, 2, 1, "", "decision_function"], [841, 3, 1, "", "feature_names_in_"], [841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_predict"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "inverse_transform"], [841, 3, 1, "", "n_features_in_"], [841, 3, 1, "", "named_steps"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "score_samples"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.preprocessing": [[844, 1, 1, "", "Binarizer"], [845, 1, 1, "", "FunctionTransformer"], [846, 1, 1, "", "KBinsDiscretizer"], [847, 1, 1, "", "KernelCenterer"], [848, 1, 1, "", "LabelBinarizer"], [849, 1, 1, "", "LabelEncoder"], [850, 1, 1, "", "MaxAbsScaler"], [851, 1, 1, "", "MinMaxScaler"], [852, 1, 1, "", "MultiLabelBinarizer"], [853, 1, 1, "", "Normalizer"], [854, 1, 1, "", "OneHotEncoder"], [855, 1, 1, "", "OrdinalEncoder"], [856, 1, 1, "", "PolynomialFeatures"], [857, 1, 1, "", "PowerTransformer"], [858, 1, 1, "", "QuantileTransformer"], [859, 1, 1, "", "RobustScaler"], [860, 1, 1, "", "SplineTransformer"], [861, 1, 1, "", "StandardScaler"], [862, 1, 1, "", "TargetEncoder"], [863, 4, 1, "", "add_dummy_feature"], [864, 4, 1, "", "binarize"], [865, 4, 1, "", "label_binarize"], [866, 4, 1, "", "maxabs_scale"], [867, 4, 1, "", "minmax_scale"], [868, 4, 1, "", "normalize"], [869, 4, 1, "", "power_transform"], [870, 4, 1, "", "quantile_transform"], [871, 4, 1, "", "robust_scale"], [872, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "inverse_transform"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "inverse_transform"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "inverse_transform"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "inverse_transform"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "inverse_transform"], [850, 2, 1, "", "partial_fit"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "inverse_transform"], [851, 2, 1, "", "partial_fit"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "inverse_transform"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_params"], [854, 3, 1, "", "infrequent_categories_"], [854, 2, 1, "", "inverse_transform"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_params"], [855, 3, 1, "", "infrequent_categories_"], [855, 2, 1, "", "inverse_transform"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_params"], [856, 3, 1, "", "powers_"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "inverse_transform"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "fit_transform"], [860, 2, 1, "", "get_feature_names_out"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "set_output"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "inverse_transform"], [861, 2, 1, "", "partial_fit"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_params"], [862, 3, 1, "", "infrequent_categories_"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.random_projection": [[873, 1, 1, "", "GaussianRandomProjection"], [874, 1, 1, "", "SparseRandomProjection"], [875, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[876, 1, 1, "", "LabelPropagation"], [877, 1, 1, "", "LabelSpreading"], [878, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "predict"], [876, 2, 1, "", "predict_proba"], [876, 2, 1, "", "score"], [876, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "predict"], [877, 2, 1, "", "predict_proba"], [877, 2, 1, "", "score"], [877, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[878, 2, 1, "", "decision_function"], [878, 2, 1, "", "fit"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "predict"], [878, 2, 1, "", "predict_log_proba"], [878, 2, 1, "", "predict_proba"], [878, 2, 1, "", "score"], [878, 2, 1, "", "set_params"]], "sklearn.svm": [[881, 1, 1, "", "LinearSVC"], [882, 1, 1, "", "LinearSVR"], [883, 1, 1, "", "NuSVC"], [884, 1, 1, "", "NuSVR"], [885, 1, 1, "", "OneClassSVM"], [886, 1, 1, "", "SVC"], [887, 1, 1, "", "SVR"], [888, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[881, 2, 1, "", "decision_function"], [881, 2, 1, "", "densify"], [881, 2, 1, "", "fit"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "predict"], [881, 2, 1, "", "score"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "predict"], [882, 2, 1, "", "score"], [882, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[883, 3, 1, "", "coef_"], [883, 2, 1, "", "decision_function"], [883, 2, 1, "", "fit"], [883, 2, 1, "", "get_params"], [883, 3, 1, "", "n_support_"], [883, 2, 1, "", "predict"], [883, 2, 1, "", "predict_log_proba"], [883, 2, 1, "", "predict_proba"], [883, 3, 1, "", "probA_"], [883, 3, 1, "", "probB_"], [883, 2, 1, "", "score"], [883, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[884, 3, 1, "", "coef_"], [884, 2, 1, "", "fit"], [884, 2, 1, "", "get_params"], [884, 3, 1, "", "n_support_"], [884, 2, 1, "", "predict"], [884, 2, 1, "", "score"], [884, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[885, 3, 1, "", "coef_"], [885, 2, 1, "", "decision_function"], [885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_predict"], [885, 2, 1, "", "get_params"], [885, 3, 1, "", "n_support_"], [885, 2, 1, "", "predict"], [885, 2, 1, "", "score_samples"], [885, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[886, 3, 1, "", "coef_"], [886, 2, 1, "", "decision_function"], [886, 2, 1, "", "fit"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "n_support_"], [886, 2, 1, "", "predict"], [886, 2, 1, "", "predict_log_proba"], [886, 2, 1, "", "predict_proba"], [886, 3, 1, "", "probA_"], [886, 3, 1, "", "probB_"], [886, 2, 1, "", "score"], [886, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[887, 3, 1, "", "coef_"], [887, 2, 1, "", "fit"], [887, 2, 1, "", "get_params"], [887, 3, 1, "", "n_support_"], [887, 2, 1, "", "predict"], [887, 2, 1, "", "score"], [887, 2, 1, "", "set_params"]], "sklearn.tree": [[889, 1, 1, "", "DecisionTreeClassifier"], [890, 1, 1, "", "DecisionTreeRegressor"], [891, 1, 1, "", "ExtraTreeClassifier"], [892, 1, 1, "", "ExtraTreeRegressor"], [893, 4, 1, "", "export_graphviz"], [894, 4, 1, "", "export_text"], [895, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[889, 2, 1, "", "apply"], [889, 2, 1, "", "cost_complexity_pruning_path"], [889, 2, 1, "", "decision_path"], [889, 3, 1, "", "feature_importances_"], [889, 2, 1, "", "fit"], [889, 2, 1, "", "get_depth"], [889, 2, 1, "", "get_n_leaves"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "predict"], [889, 2, 1, "", "predict_log_proba"], [889, 2, 1, "", "predict_proba"], [889, 2, 1, "", "score"], [889, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[890, 2, 1, "", "apply"], [890, 2, 1, "", "cost_complexity_pruning_path"], [890, 2, 1, "", "decision_path"], [890, 3, 1, "", "feature_importances_"], [890, 2, 1, "", "fit"], [890, 2, 1, "", "get_depth"], [890, 2, 1, "", "get_n_leaves"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "predict"], [890, 2, 1, "", "score"], [890, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[891, 2, 1, "", "apply"], [891, 2, 1, "", "cost_complexity_pruning_path"], [891, 2, 1, "", "decision_path"], [891, 3, 1, "", "feature_importances_"], [891, 2, 1, "", "fit"], [891, 2, 1, "", "get_depth"], [891, 2, 1, "", "get_n_leaves"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "predict"], [891, 2, 1, "", "predict_log_proba"], [891, 2, 1, "", "predict_proba"], [891, 2, 1, "", "score"], [891, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[892, 2, 1, "", "apply"], [892, 2, 1, "", "cost_complexity_pruning_path"], [892, 2, 1, "", "decision_path"], [892, 3, 1, "", "feature_importances_"], [892, 2, 1, "", "fit"], [892, 2, 1, "", "get_depth"], [892, 2, 1, "", "get_n_leaves"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "predict"], [892, 2, 1, "", "score"], [892, 2, 1, "", "set_params"]], "sklearn.utils": [[896, 1, 1, "", "Bunch"], [897, 4, 1, "", "_safe_indexing"], [899, 4, 1, "", "as_float_array"], [900, 4, 1, "", "assert_all_finite"], [901, 4, 1, "", "check_X_y"], [902, 4, 1, "", "check_array"], [903, 4, 1, "", "check_consistent_length"], [904, 4, 1, "", "check_random_state"], [905, 4, 1, "", "check_scalar"], [908, 4, 1, "", "deprecated"], [914, 4, 1, "", "estimator_html_repr"], [921, 4, 1, "", "gen_batches"], [922, 4, 1, "", "gen_even_slices"], [924, 4, 1, "", "indexable"], [929, 4, 1, "", "murmurhash3_32"], [932, 4, 1, "", "parallel_backend"], [934, 4, 1, "", "register_parallel_backend"], [935, 4, 1, "", "resample"], [936, 4, 1, "", "safe_mask"], [937, 4, 1, "", "safe_sqr"], [938, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[896, 2, 1, "", "clear"], [896, 2, 1, "", "copy"], [896, 2, 1, "", "fromkeys"], [896, 2, 1, "", "get"], [896, 2, 1, "", "items"], [896, 2, 1, "", "keys"], [896, 2, 1, "", "pop"], [896, 2, 1, "", "popitem"], [896, 2, 1, "", "setdefault"], [896, 2, 1, "", "update"], [896, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[898, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[906, 4, 1, "", "compute_class_weight"], [907, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[909, 4, 1, "", "all_displays"], [910, 4, 1, "", "all_estimators"], [911, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[912, 4, 1, "", "check_estimator"], [913, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[915, 4, 1, "", "density"], [916, 4, 1, "", "fast_logdet"], [917, 4, 1, "", "randomized_range_finder"], [918, 4, 1, "", "randomized_svd"], [919, 4, 1, "", "safe_sparse_dot"], [920, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[923, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[925, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[926, 4, 1, "", "is_multilabel"], [927, 4, 1, "", "type_of_target"], [928, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[930, 1, 1, "", "Parallel"], [931, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[930, 2, 1, "", "dispatch_next"], [930, 2, 1, "", "dispatch_one_batch"], [930, 2, 1, "", "format"], [930, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[933, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[939, 4, 1, "", "incr_mean_variance_axis"], [940, 4, 1, "", "inplace_column_scale"], [941, 4, 1, "", "inplace_csr_column_scale"], [942, 4, 1, "", "inplace_row_scale"], [943, 4, 1, "", "inplace_swap_column"], [944, 4, 1, "", "inplace_swap_row"], [945, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[946, 4, 1, "", "inplace_csr_row_normalize_l1"], [947, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[948, 4, 1, "", "check_is_fitted"], [949, 4, 1, "", "check_memory"], [950, 4, 1, "", "check_symmetric"], [951, 4, 1, "", "column_or_1d"], [952, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 381], "u": 0, "histori": [0, 1003], "govern": [0, 384], "author": [0, 1005], "contributor": [0, 369, 370, 384, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "experi": [0, 37, 369, 384], "team": [0, 369, 384], "commun": [0, 370, 384], "emeritu": 0, "core": [0, 8, 358, 369, 374, 376, 381, 384, 403, 966], "develop": [0, 368, 371, 372, 373, 374, 377, 378, 379, 953], "cite": 0, "scikit": [0, 251, 308, 309, 310, 311, 312, 313, 355, 356, 368, 371, 372, 374, 375, 381, 384, 386, 982, 984, 985, 988, 990, 991, 996, 999], "learn": [0, 5, 12, 50, 94, 97, 147, 163, 165, 166, 167, 172, 216, 217, 218, 219, 231, 251, 258, 286, 293, 308, 309, 310, 311, 312, 313, 316, 317, 318, 355, 356, 358, 366, 368, 370, 371, 372, 374, 375, 381, 384, 386, 394, 400, 402, 959, 961, 969, 977, 980, 982, 984, 985, 986, 988, 990, 991, 993, 996, 997, 998, 999, 1000], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 85, 99, 103, 229, 370, 372, 381, 394, 976, 981, 984], "infrastructur": 0, "support": [0, 25, 118, 163, 190, 304, 308, 309, 310, 311, 313, 323, 326, 335, 381, 386, 391, 393, 394, 402, 979, 987, 997, 1011], "exampl": [3, 6, 9, 53, 58, 74, 87, 101, 124, 155, 163, 192, 193, 333, 337, 358, 364, 365, 375, 381, 385, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 487, 489, 493, 494, 495, 496, 497, 498, 502, 503, 505, 506, 507, 508, 509, 510, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 564, 565, 567, 570, 571, 572, 573, 574, 576, 577, 580, 582, 583, 585, 587, 588, 589, 590, 591, 593, 594, 596, 597, 598, 600, 601, 602, 605, 606, 608, 610, 611, 613, 614, 615, 616, 617, 618, 622, 623, 624, 626, 627, 628, 629, 631, 632, 635, 636, 638, 639, 640, 641, 642, 645, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 671, 672, 673, 674, 675, 676, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 696, 700, 701, 702, 709, 711, 716, 719, 720, 723, 724, 727, 730, 731, 732, 734, 735, 737, 739, 760, 761, 764, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 810, 812, 814, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 834, 837, 838, 839, 840, 841, 842, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 867, 870, 874, 875, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 895, 896, 904, 913, 915, 922, 925, 938, 948, 953, 956, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980, 981, 990, 996, 997, 998, 1002, 1005], "base": [3, 4, 84, 115, 116, 145, 163, 231, 308, 309, 311, 313, 370, 394, 395, 399, 402, 404, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 960, 972, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "real": [3, 9, 74, 108, 163, 365], "world": [3, 74, 163, 365], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 57, 61, 69, 84, 87, 88, 89, 90, 91, 94, 103, 117, 118, 128, 134, 135, 148, 150, 152, 153, 155, 157, 163, 165, 166, 167, 175, 178, 185, 196, 198, 205, 214, 217, 218, 225, 230, 235, 254, 262, 263, 305, 320, 321, 325, 341, 347, 362, 363, 364, 365, 366, 367, 375, 381, 394, 405, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 990, 996, 997, 999, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "time": [4, 15, 22, 28, 35, 67, 75, 82, 86, 92, 106, 119, 132, 138, 146, 158, 162, 170, 173, 190, 215, 223, 230, 231, 239, 248, 272, 275, 290, 296, 306, 314, 322, 339, 341, 344, 351, 399], "relat": [4, 8, 364, 370, 972, 984, 1012], "featur": [4, 51, 54, 73, 99, 114, 115, 116, 118, 122, 125, 126, 139, 141, 143, 144, 145, 163, 168, 169, 172, 175, 190, 193, 214, 230, 235, 257, 295, 299, 300, 303, 304, 308, 310, 311, 331, 341, 342, 356, 358, 370, 374, 394, 396, 402, 403, 404, 954, 972, 974, 981, 998, 999, 1008, 1009, 1010, 1011, 1012], "engin": [4, 168, 984, 988], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 56, 57, 62, 63, 65, 66, 69, 74, 77, 79, 81, 84, 85, 95, 96, 99, 100, 101, 102, 108, 110, 115, 116, 122, 124, 128, 141, 144, 145, 153, 154, 156, 161, 165, 168, 169, 172, 176, 180, 182, 189, 190, 226, 231, 234, 237, 246, 251, 253, 257, 262, 263, 265, 266, 269, 283, 288, 295, 298, 302, 303, 304, 316, 328, 331, 335, 342, 343, 352, 356, 358, 365, 375, 381, 383, 395, 396, 398, 399, 404, 405, 974, 978, 980, 988, 990, 993, 996, 998, 999], "explor": 4, "bike": [4, 167], "share": [4, 167], "demand": 4, "cross": [4, 83, 84, 134, 135, 144, 163, 185, 251, 252, 254, 255, 259, 261, 266, 305, 331, 352, 370, 394, 398, 399, 953, 960, 994], "valid": [4, 134, 135, 144, 185, 229, 251, 252, 254, 255, 259, 261, 266, 271, 305, 331, 352, 356, 372, 379, 394, 399, 948, 949, 950, 951, 952, 953, 959, 960, 967, 994], "gradient": [4, 118, 119, 120, 121, 122, 123, 167, 196, 204, 210, 308, 309, 311, 313, 402, 960, 978], "boost": [4, 118, 119, 120, 121, 122, 123, 167, 196, 308, 309, 311, 313, 402], "naiv": [4, 24, 25, 394, 966], "linear": [4, 25, 33, 34, 121, 148, 163, 166, 174, 175, 192, 196, 199, 202, 217, 218, 230, 309, 327, 334, 335, 356, 379, 381, 394, 958, 960, 961, 962, 974, 997], "regress": [4, 72, 74, 84, 85, 110, 121, 122, 131, 148, 153, 154, 155, 156, 175, 176, 179, 185, 187, 188, 189, 192, 194, 196, 198, 211, 213, 214, 228, 231, 288, 335, 348, 349, 366, 394, 396, 402, 405, 955, 957, 960, 964, 965, 967, 968, 978, 979, 980, 997], "step": [4, 236, 382, 396], "categori": [4, 312, 974], "trigonometr": 4, "period": [4, 197], "spline": [4, 197, 311, 974], "qualit": 4, "analysi": [4, 33, 34, 59, 94, 100, 102, 105, 121, 167, 241, 258, 259, 266, 284, 285, 286, 341, 394, 398, 400, 958, 967, 981, 998, 999], "impact": [4, 60, 1020, 1021], "model": [4, 7, 11, 56, 74, 84, 95, 102, 108, 115, 116, 118, 122, 124, 144, 145, 148, 153, 163, 166, 167, 168, 172, 174, 175, 184, 185, 190, 196, 199, 214, 226, 231, 235, 240, 242, 246, 247, 249, 255, 256, 258, 263, 283, 288, 295, 303, 309, 311, 335, 341, 356, 372, 381, 382, 384, 389, 390, 394, 399, 953, 959, 960, 963, 964, 966, 968, 969, 990, 994, 997, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "predict": [4, 10, 24, 85, 110, 121, 131, 149, 165, 176, 196, 231, 234, 252, 263, 316, 356, 381, 382, 398, 399, 405, 964, 975, 990, 997], "pairwis": [4, 256, 394, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 962], "interact": [4, 167, 313, 402, 997], "polynomi": [4, 172, 175, 176, 197, 956, 960, 962, 974, 997], "non": [4, 14, 94, 121, 191, 196, 217, 261, 327, 334, 335, 400, 960, 974], "kernel": [4, 5, 99, 148, 153, 154, 156, 157, 163, 171, 172, 230, 231, 280, 281, 289, 310, 324, 327, 332, 335, 394, 400, 401, 405, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 956, 957, 962, 974, 979, 997], "conclud": [4, 108, 221], "remark": [4, 56, 108, 221, 229], "imag": [5, 47, 50, 53, 65, 97, 364, 394, 403, 566, 567, 568, 569, 570], "denois": [5, 97], "us": [5, 6, 12, 17, 48, 94, 95, 97, 125, 126, 128, 183, 199, 210, 212, 256, 260, 265, 299, 335, 341, 342, 352, 358, 371, 375, 376, 378, 381, 399, 400, 402, 403, 404, 409, 417, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 487, 489, 493, 494, 495, 496, 497, 498, 502, 503, 505, 506, 507, 508, 509, 510, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 564, 565, 567, 570, 571, 572, 573, 574, 576, 577, 580, 582, 583, 585, 587, 588, 589, 590, 591, 593, 594, 596, 597, 598, 600, 601, 602, 605, 606, 608, 610, 611, 613, 614, 615, 616, 617, 618, 622, 623, 624, 626, 627, 628, 629, 631, 632, 635, 636, 638, 639, 640, 641, 642, 645, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 671, 672, 673, 674, 675, 676, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 696, 700, 701, 702, 709, 711, 716, 719, 720, 723, 724, 727, 730, 731, 732, 734, 735, 737, 739, 760, 761, 764, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 810, 812, 814, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 834, 837, 838, 839, 840, 841, 842, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 867, 870, 874, 875, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 895, 896, 904, 913, 915, 922, 925, 938, 948, 958, 960, 961, 964, 968, 978, 979, 980, 988, 997, 999, 1015], "pca": [5, 57, 72, 94, 95, 98, 99, 100, 101, 102, 103, 303, 400, 524, 981, 998], "refer": [5, 11, 25, 27, 79, 80, 97, 112, 168, 172, 184, 256, 261, 262, 289, 364, 365, 367, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 953, 954, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 976, 977, 978, 979, 980], "load": [5, 7, 17, 50, 57, 116, 118, 122, 134, 145, 168, 189, 214, 218, 226, 230, 237, 257, 265, 266, 303, 304, 328, 331, 341, 342, 343, 363, 364, 375, 381, 403, 990, 998, 999], "via": [5, 53, 184, 185, 214, 402, 956], "openml": [5, 304, 308, 364], "basi": [5, 157, 405, 956, 960, 997], "reconstruct": [5, 13, 97], "test": [5, 77, 140, 259, 262, 269, 341, 346, 368, 370, 372, 378, 379, 399, 990, 997, 999], "face": [6, 50, 94, 233, 365, 988, 995], "recognit": [6, 365, 367, 995], "eigenfac": [6, 94, 995], "svm": [6, 137, 141, 142, 172, 210, 230, 311, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 394, 881, 882, 883, 884, 885, 886, 887, 888, 960, 970, 978, 997, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "complex": [7, 227, 236, 255, 258, 318, 346, 356, 395, 960, 961, 967, 968, 978, 979, 980], "influenc": [7, 10, 356], "benchmark": [7, 10, 57, 341], "choos": [7, 953, 990, 992, 994], "paramet": [7, 77, 121, 254, 310, 328, 336, 370, 372, 382, 383, 394, 396, 402, 953, 960, 964, 979, 990, 994, 999], "run": [7, 57, 260], "code": [7, 94, 104, 370, 372, 375, 376, 378, 400, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 56, 62, 63, 65, 66, 77, 81, 84, 90, 91, 95, 96, 100, 108, 110, 117, 122, 124, 128, 129, 130, 131, 134, 144, 161, 167, 175, 176, 180, 188, 189, 190, 200, 201, 205, 218, 226, 230, 234, 235, 237, 246, 252, 253, 258, 260, 263, 265, 269, 271, 283, 295, 304, 308, 310, 311, 316, 325, 326, 331, 341, 347, 377, 394, 959, 971, 1002], "result": [7, 8, 38, 47, 49, 50, 56, 57, 62, 63, 66, 77, 79, 81, 95, 96, 108, 110, 128, 131, 161, 172, 201, 231, 234, 260, 269, 283, 304, 335, 342, 352, 953], "conclus": [7, 148, 185, 305], "out": [8, 120, 358, 378, 399, 403, 953, 960, 966], "classif": [8, 26, 29, 30, 32, 33, 69, 90, 136, 149, 150, 151, 152, 156, 163, 212, 232, 259, 262, 263, 266, 279, 287, 295, 308, 315, 320, 341, 366, 394, 402, 405, 960, 964, 965, 967, 968, 978, 979, 980, 997, 999], "text": [8, 163, 227, 257, 320, 340, 341, 342, 343, 365, 394, 403, 571, 572, 573, 574, 999], "document": [8, 19, 163, 310, 311, 340, 341, 342, 370, 984, 985, 987, 1005, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "reuter": 8, "routin": [8, 357, 379], "main": [8, 196], "outlier": [9, 178, 213, 225, 234, 282, 283, 298, 394, 960, 970, 974], "detect": [9, 225, 234, 253, 282, 283, 964, 970, 979], "set": [9, 74, 77, 101, 128, 161, 263, 328, 346, 381, 399, 960, 990, 996, 997, 999], "first": [9, 37, 370], "second": [9, 37], "latenc": [10, 356], "helper": [10, 157, 218, 379], "function": [10, 34, 157, 186, 200, 201, 206, 218, 234, 251, 269, 310, 331, 343, 379, 394, 399, 402, 405, 956, 960, 964, 979, 997], "bulk": [10, 356], "atom": [10, 356], "speed": [10, 376], "variou": [10, 52, 203, 222], "regressor": [10, 110, 121, 175, 305, 308, 311, 394, 402], "n_featur": 10, "throughput": [10, 356], "speci": [11, 289], "distribut": [11, 214, 217, 289, 302, 386, 961, 974], "visual": [12, 57, 105, 226, 231, 237, 251, 294, 309, 328, 394, 395, 396, 964, 1002], "stock": [12, 995], "market": [12, 995], "structur": [12, 39, 47, 66, 156, 318, 350, 995], "retriev": [12, 308], "from": [12, 97, 145, 168, 304, 308, 357, 364, 368, 381, 394, 403, 960, 964, 990, 997, 998, 999, 1015], "internet": 12, "graph": [12, 308, 379, 381, 395, 403, 923], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 57, 59, 62, 63, 64, 65, 66, 94, 163, 312, 342, 366, 392, 394, 395, 400, 406, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 697, 698, 964, 998, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "affin": [12, 38, 395, 962], "propag": [12, 38, 316, 317, 318, 395, 977], "embed": [12, 52, 217, 218, 229, 286, 402, 961], "2d": [12, 52, 96, 103, 167], "space": [12, 99, 396, 953, 961, 980], "compress": [13, 53, 356, 404], "sens": [13, 404], "tomographi": 13, "l1": [13, 187, 189, 212, 336, 404], "prior": [13, 157, 241], "lasso": [13, 180, 181, 182, 183, 184, 185, 190, 309, 635, 960], "topic": 14, "extract": [14, 73, 97, 214, 257, 342, 356, 358, 394, 403, 999], "neg": [14, 94, 191, 400, 960], "matrix": [14, 17, 156, 177, 250, 394, 395, 400, 964, 979], "factor": [14, 94, 102, 105, 282, 283, 400, 970], "latent": [14, 84, 400], "dirichlet": [14, 400, 963], "alloc": [14, 400], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 62, 63, 66, 67, 75, 77, 82, 86, 92, 106, 132, 138, 146, 158, 162, 170, 173, 189, 201, 215, 223, 239, 248, 269, 272, 275, 290, 296, 306, 314, 322, 339, 344, 351, 355, 356, 395, 396, 399, 971], "libsvm": [16, 364], "gui": 16, "wikipedia": 17, "princip": [17, 85, 100, 400, 981, 998], "eigenvector": 17, "download": [17, 128, 161, 364], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 386, 403, 999], "adjac": 17, "singular": [17, 400], "vector": [17, 25, 53, 163, 323, 326, 335, 341, 343, 365, 394, 403, 979, 997, 998], "random": [17, 94, 113, 126, 127, 168, 169, 229, 237, 262, 264, 352, 372, 379, 394, 399, 400, 402, 933, 953, 960, 976, 981], "svd": [17, 94, 400], "central": 17, "score": [17, 84, 119, 134, 144, 161, 175, 246, 255, 262, 263, 331, 395, 399, 959, 964, 979, 994], "biclust": [18, 19, 20, 163, 366, 392, 394], "spectral": [19, 20, 21, 65, 217, 392, 395, 961], "co": [19, 21, 392], "algorithm": [19, 20, 21, 38, 44, 49, 62, 63, 64, 217, 225, 376, 381, 958, 960, 963, 965, 967, 968, 972, 980, 997], "A": [20, 21, 47, 57, 62, 196, 311, 369, 376, 389, 399, 993, 996], "demo": [20, 21, 38, 47, 49, 57, 62, 64], "calibr": [23, 24, 25, 26, 27, 121, 163, 196, 393, 394, 421, 422, 423, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "probabl": [24, 25, 26, 30, 130, 151, 393, 394, 402, 979], "classifi": [24, 25, 27, 31, 131, 179, 236, 253, 274, 308, 321, 325, 328, 341, 350, 393, 394, 402, 958, 967, 980, 997, 999], "gener": [24, 34, 38, 47, 49, 56, 62, 63, 65, 66, 77, 79, 81, 90, 91, 95, 96, 97, 115, 124, 141, 144, 148, 154, 155, 157, 163, 174, 175, 176, 180, 190, 196, 198, 231, 246, 253, 269, 283, 288, 295, 309, 316, 335, 352, 366, 370, 383, 394, 400, 402, 960, 974, 985, 994], "synthet": [24, 74, 175, 253, 305, 375], "gaussian": [24, 25, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 240, 241, 242, 245, 246, 247, 298, 394, 405, 963, 966, 974, 976], "bay": [24, 25, 394, 966], "curv": [25, 27, 176, 231, 237, 247, 253, 258, 263, 265, 271, 393, 959], "summari": [25, 185, 342, 343, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "3": [26, 179, 999, 1013, 1014, 1019, 1021], "class": [26, 37, 109, 111, 130, 179, 205, 210, 259, 263, 265, 311, 327, 330, 383, 394, 399, 402, 403, 963, 964, 967, 970, 978, 979, 1005, 1006], "fit": [26, 56, 95, 102, 115, 116, 119, 121, 122, 153, 175, 176, 177, 190, 193, 198, 202, 263, 283, 288, 335, 352, 372, 382, 402, 966, 970, 990], "compar": [26, 42, 44, 61, 77, 84, 119, 127, 141, 172, 175, 182, 198, 203, 225, 231, 256, 264, 284, 293, 298, 304, 381], "comparison": [27, 31, 43, 63, 79, 103, 118, 140, 148, 217, 218, 231, 256, 267, 343, 395, 405, 960], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 57, 88, 135, 136, 218, 295, 316, 317, 367, 996], "normal": [33, 172, 196, 298, 302, 394, 853, 868, 964, 974], "ledoit": [33, 78, 397], "wolf": [33, 78, 397], "oa": [33, 77, 78, 408, 458], "discrimin": [33, 34, 394, 958], "quadrat": [34, 405, 958], "covari": [34, 76, 77, 79, 80, 81, 163, 243, 394, 397, 408, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 958, 1013, 1017, 1018, 1019, 1021], "ellipsoid": [34, 242], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 259, 303, 310, 312, 316, 342, 356, 370, 371, 395, 399, 403, 999], "evalu": [37, 57, 60, 80, 196, 234, 257, 260, 295, 304, 342, 382, 390, 392, 395, 399, 402, 953, 959, 964, 999], "defin": [37, 47, 57, 66, 217, 234, 251, 253, 254, 343, 964], "list": [37, 987], "metric": [37, 40, 121, 260, 394, 395, 399, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 953, 961, 962, 964, 967, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "fix": [37, 374, 1005, 1008, 1009, 1010, 1011, 1012, 1018], "ground": [37, 175], "truth": [37, 175], "label": [37, 263, 316, 317, 318, 365, 366, 395, 399, 402, 964, 975, 977], "grow": 37, "number": [37, 59, 118, 144, 268, 356, 372, 953, 954, 963], "vari": [37, 292, 319, 395], "sampl": [38, 62, 77, 95, 96, 141, 177, 209, 231, 257, 269, 288, 309, 335, 338, 364, 379, 383, 394, 395, 402, 960], "agglom": [39, 40, 52, 998], "without": [39, 119, 284, 341], "differ": [40, 44, 61, 77, 157, 167, 298, 301, 304, 325, 372, 381, 395, 960, 997], "hierarch": [41, 47, 61, 66, 395, 998], "dendrogram": 41, "birch": [42, 395, 426], "minibatchkmean": [42, 63, 94, 432], "bisect": [43, 395], "k": [43, 45, 48, 56, 57, 58, 60, 63, 66, 84, 303, 342, 395, 399, 964, 967, 974, 997, 998], "mean": [43, 45, 48, 56, 57, 58, 60, 62, 63, 115, 116, 161, 168, 342, 395, 964, 974, 998], "regular": [43, 77, 123, 166, 189, 200, 201, 292, 336, 960, 968], "toi": [44, 61, 225, 367], "segment": [46, 65], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 256], "ward": [47, 66, 395, 998], "an": [47, 58, 161, 177, 185, 234, 286, 308, 312, 381, 403, 953, 970, 990, 996, 997], "color": 48, "quantiz": [48, 53, 998], "dbscan": [49, 395, 406, 428], "onlin": [50, 203, 311, 312, 978], "dictionari": [50, 94, 97, 104, 400], "part": [50, 404], "agglomer": [51, 54, 981, 998], "origin": [53, 99, 262, 286, 298], "encod": [53, 118, 304, 305, 974, 975], "strategi": [53, 254, 293, 301, 358, 394, 395, 964], "memori": [53, 356, 376, 378, 395], "footprint": 53, "v": [54, 66, 77, 78, 80, 85, 99, 144, 167, 168, 178, 188, 214, 259, 265, 269, 270, 346, 395, 954, 974, 990], "univari": [54, 84, 141, 331, 404, 954], "select": [54, 59, 71, 102, 134, 139, 141, 144, 145, 163, 184, 185, 190, 246, 249, 331, 381, 390, 394, 399, 404, 953, 960, 963, 994, 1011], "induct": [55, 980], "demonstr": [56, 260, 301, 316], "assumpt": 56, "possibl": [56, 375], "solut": 56, "final": [56, 148], "handwritten": [57, 218, 367], "our": [57, 251, 254, 370], "reduc": [57, 356], "initi": [58, 60, 244, 963], "silhouett": [59, 395], "kmean": [59, 63, 309, 430], "empir": [60, 80, 229, 397], "linkag": [61, 395], "method": [61, 73, 84, 107, 148, 163, 217, 219, 244, 273, 383, 394, 395, 402, 956, 963, 970, 971, 998], "shift": [62, 395], "meanshift": [62, 431], "establish": [63, 172], "pariti": 63, "between": [63, 267], "optic": [64, 367, 395, 433], "four": 65, "circl": 65, "two": [65, 111, 182, 235, 256], "unstructur": 66, "we": 66, "ar": [66, 311, 381], "nearest": [66, 163, 276, 277, 278, 279, 284, 287, 288, 308, 394, 954, 967, 997], "neighbor": [66, 163, 217, 276, 277, 278, 279, 284, 288, 303, 308, 394, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 954, 961, 967, 997, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021], "10": [66, 1005], "pipelin": [68, 69, 71, 72, 128, 142, 163, 166, 227, 236, 257, 304, 331, 372, 381, 382, 394, 396, 404, 840, 841, 842, 843, 981, 995, 999, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "composit": [68, 163, 394, 396, 953], "estim": [68, 76, 77, 78, 79, 80, 81, 112, 118, 120, 127, 154, 161, 163, 175, 199, 202, 227, 233, 234, 245, 264, 280, 281, 289, 308, 309, 310, 313, 352, 372, 381, 382, 383, 391, 394, 396, 397, 399, 401, 402, 405, 953, 954, 958, 960, 963, 964, 979, 984, 992, 994, 996, 1006, 1013, 1014, 1015], "column": [69, 70, 236], "transform": [69, 70, 71, 74, 84, 114, 126, 236, 310, 311, 312, 362, 381, 382, 396, 398, 399, 967, 974, 975, 976, 998], "heterogen": [69, 396], "sourc": [69, 95, 368], "20": [69, 341, 365, 999, 1013], "newsgroup": [69, 341, 365, 999], "creat": [69, 100, 102, 226, 263, 305, 331, 381], "mix": 70, "type": [70, 241, 372, 383, 395, 990], "dimension": [71, 217, 220, 236, 285, 303, 342, 958, 961, 967, 981, 997], "reduct": [71, 217, 221, 236, 285, 303, 342, 958, 967, 981], "gridsearchcv": [71, 134, 260, 402, 779], "illustr": [71, 152, 157, 286, 405], "cach": [71, 278, 396], "within": 71, "chain": [72, 236, 274, 382, 396], "logist": [72, 179, 186, 187, 188, 189, 211, 212, 960, 997], "concaten": 73, "multipl": [73, 236, 260, 352, 377, 399, 953, 954, 964, 1013, 1014], "effect": [74, 165, 222, 298, 303, 319, 346, 967], "target": [74, 155, 214, 304, 305, 381, 383, 396, 398, 965, 974, 975], "shrinkag": [77, 397, 402, 958, 997], "ledoitwolf": [77, 456], "max": [77, 964], "likelihood": [77, 175, 176, 259, 964, 969], "approach": [77, 185, 256], "robust": [79, 80, 175, 199, 202, 352, 394, 397, 953, 960], "mahalanobi": [79, 967], "distanc": [79, 394, 967], "relev": [79, 960], "minimum": [80, 397], "determin": [80, 397, 960, 964], "spars": [81, 94, 104, 166, 180, 182, 211, 308, 341, 342, 379, 397, 400, 404, 974, 976, 978], "invers": [81, 397, 976], "decomposit": [83, 84, 93, 94, 112, 163, 366, 394, 398, 400, 407, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 998, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "variabl": [84, 165, 166, 357, 381, 394, 997], "canon": [84, 398], "symmetr": 84, "pl": 84, "scatter": 84, "multivari": [84, 954], "respons": [84, 384], "pls2": 84, "pls1": 84, "cca": [84, 465], "mode": [84, 356, 368], "b": 84, "deflat": 84, "compon": [85, 94, 100, 284, 285, 286, 400, 963, 967, 981, 998], "partial": [85, 165, 167, 235, 971], "least": [85, 121, 185, 191, 194, 960], "squar": [85, 121, 157, 191, 194, 405, 956, 960, 962, 964], "The": [85, 88, 89, 165, 166, 196, 222, 229, 254, 263, 365, 374, 399, 403, 963, 964, 976, 997, 998], "one": [85, 118, 235, 960, 964], "power": [85, 196], "iri": [89, 101, 103, 117, 150, 205, 321, 325, 347, 367, 405, 996], "randomli": [90, 91], "multilabel": [91, 232, 366, 379, 394, 964, 965, 990], "prepar": [94, 108, 110, 172, 217, 265, 266, 303, 328, 374], "nmf": [94, 312, 400, 523], "independ": [94, 400, 998], "fastica": [94, 95, 96, 407, 516], "minibatchsparsepca": [94, 400, 522], "center": [94, 974], "fa": [94, 102], "posit": [94, 311], "blind": 95, "separ": [95, 208, 329, 330], "ica": [95, 400, 998], "point": [96, 286], "cloud": 96, "distort": 97, "displai": [97, 201, 226, 227, 236, 313, 378, 1002], "patch": [97, 403], "noisi": [97, 155], "them": [97, 369], "increment": [98, 358, 400], "kernelpca": [99, 518], "figur": 100, "probabilist": [102, 149, 400, 405], "lda": [103, 400, 958], "precomput": [104, 177, 308, 400], "rotat": 105, "pattern": 105, "ensembl": [107, 114, 117, 163, 312, 394, 402, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "discret": [108, 124, 156, 299, 300, 974], "versu": [108, 112, 210, 261, 321, 356], "adaboost": [108, 109, 110, 111, 402], "baselin": [108, 172, 196], "samm": 108, "r": 108, "multi": [109, 127, 167, 190, 205, 220, 233, 260, 263, 292, 349, 376, 394, 960, 961, 964, 968, 979, 980], "decis": [109, 110, 117, 124, 129, 163, 230, 321, 345, 346, 347, 348, 349, 350, 381, 384, 394, 980], "tree": [109, 110, 114, 115, 116, 117, 126, 163, 168, 196, 308, 313, 345, 346, 347, 348, 349, 350, 381, 394, 402, 404, 889, 890, 891, 892, 893, 894, 895, 967, 972, 980, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "train": [110, 122, 124, 131, 144, 226, 231, 235, 237, 246, 269, 295, 304, 305, 310, 319, 328, 341, 346, 347, 350, 365, 399, 967, 977, 990, 997, 999], "decisiontre": 110, "singl": [112, 128, 214, 226, 366, 395, 954], "bag": [112, 120, 341, 402, 403, 953, 999], "bia": [112, 980], "varianc": [112, 194, 404, 964, 974], "oob": 113, "error": [113, 121, 134, 175, 253, 269, 378, 386, 960, 964], "forest": [113, 115, 116, 127, 168, 169, 237, 365, 402, 970], "import": [115, 116, 122, 145, 168, 169, 230, 303, 308, 402, 972], "decreas": [115, 116, 168], "impur": [115, 116, 168, 346, 972], "permut": [115, 168, 169, 262, 308, 399, 972], "pixel": 116, "parallel": [116, 357, 368, 376, 395, 402, 930, 931, 953], "mdi": [116, 168], "surfac": [117, 230, 347], "categor": [118, 304, 310, 381, 402, 966, 974], "am": 118, "hous": [118, 365], "drop": 118, "hot": 118, "ordin": 118, "nativ": [118, 304, 308, 310], "limit": [118, 148, 356, 386, 389, 403], "split": [118, 310, 352, 399], "earli": [119, 204], "stop": [119, 204, 403, 978], "interv": 121, "quantil": [121, 198, 311, 312, 960], "confid": 121, "tune": [121, 254, 257, 310, 953, 999], "hyper": [121, 254, 310, 394, 953], "preprocess": [122, 128, 163, 166, 167, 234, 236, 297, 343, 352, 381, 394, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 974, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "devianc": [122, 964], "isolationforest": [124, 546], "boundari": [124, 129, 321], "path": [124, 183, 189, 201, 350, 386], "length": [124, 386], "monoton": [125, 402], "constraint": [125, 313, 395, 402], "name": [125, 311, 381], "specifi": [125, 381, 953], "hash": [126, 379, 403], "total": [126, 346, 402], "output": [127, 233, 298, 313, 349, 980, 997], "meta": [127, 310, 402], "combin": [128, 226], "predictor": 128, "stack": [128, 308, 402], "make": [128, 131, 161, 370, 374, 384], "measur": [128, 259, 395, 964, 980], "votingclassifi": [129, 130, 402, 552], "calcul": 130, "individu": [131, 167, 310, 971], "vote": [131, 402], "tutori": [133, 163, 983, 991, 993, 999], "exercis": [133, 134, 135, 136, 137, 163, 994, 997, 999], "diabet": [134, 235, 367, 997], "appli": 134, "line": [134, 151], "show": [134, 265], "std": [134, 175], "bonu": 134, "how": [134, 352, 370, 376, 381], "much": 134, "can": [134, 381], "you": [134, 381], "trust": 134, "alpha": [134, 346], "f": [140, 964], "mutual": [140, 395], "inform": [140, 161, 184, 185, 374, 395, 953, 960], "anova": [142, 331], "recurs": [143, 144, 404], "elimin": [143, 144, 404, 953], "sequenti": [145, 404], "coeffici": [145, 166, 175, 200, 201, 395, 964], "discuss": [145, 369], "process": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 166, 352, 384, 394, 405, 963, 993], "machin": [147, 163, 165, 166, 167, 295, 323, 378, 394, 969, 979, 990, 997], "ridg": [148, 176, 178, 194, 200, 201, 231, 305, 394, 405, 655, 957, 960], "simpl": [148, 281, 376, 996], "gpc": [149, 150, 151, 152, 405], "iso": [151, 263], "xor": [152, 405], "gpr": [153, 154, 405], "mauna": [153, 405], "loa": [153, 405], "co2": [153, 405], "build": [153, 161, 368, 370, 378, 999], "design": 153, "proper": 153, "extrapol": 153, "interpret": [153, 166, 234, 400, 402], "hyperparamet": [153, 154, 257, 264, 600], "nois": [154, 155, 176, 405], "level": [154, 357, 395, 402, 405], "optimis": 154, "basic": [155, 214, 382, 397, 405], "introductori": 155, "free": 155, "sequenc": [156, 381], "similar": [156, 962, 964], "under": [156, 381], "posterior": 157, "cookbook": 157, "radial": [157, 405, 956, 997], "ration": [157, 405], "quadradt": 157, "exp": [157, 405], "sine": [157, 247, 405], "dot": [157, 405], "product": [157, 214, 378, 381, 405, 604], "mat\u00e9rn": [157, 405], "miss": [159, 160, 161, 163, 308, 402, 954, 974], "valu": [159, 160, 161, 163, 222, 308, 370, 400, 402, 954, 964, 972, 974], "imput": [159, 160, 161, 163, 308, 394, 610, 611, 612, 613, 954, 974, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "variant": 160, "iterativeimput": [160, 610, 954], "befor": [161, 374], "replac": 161, "0": [161, 308, 309, 310, 311, 980, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "knn": [161, 308], "iter": [161, 268, 399, 953], "releas": [163, 307, 308, 309, 310, 311, 312, 313, 374, 386, 1003, 1011], "highlight": [163, 307, 308, 309, 310, 311, 312, 313, 1005, 1008, 1009, 1012, 1013], "mixtur": [163, 240, 241, 242, 245, 246, 247, 394, 777, 778, 963, 1013, 1014, 1018, 1019], "inspect": [163, 164, 385, 394, 614, 615, 616, 617, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "approxim": [163, 171, 172, 230, 276, 310, 394, 397, 956], "manifold": [163, 216, 217, 218, 219, 366, 394, 671, 672, 673, 674, 675, 676, 677, 678, 679, 961, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "miscellan": [163, 224, 394, 1013, 1014, 1015, 1016, 1017, 1018], "multioutput": [163, 273, 394, 812, 813, 814, 815, 965, 1013, 1014, 1015, 1016, 1017, 1020], "neural": [163, 167, 291, 394, 968, 969], "network": [163, 167, 291, 394, 968, 969], "semi": [163, 315, 316, 320, 321, 394, 977], "supervis": [163, 315, 316, 320, 321, 394, 968, 977, 986, 997], "work": [163, 340, 356, 369, 381, 999], "failur": [165, 953], "infer": [165, 963], "causal": [165, 166], "simul": 165, "hourli": 165, "wage": [165, 166], "descript": 165, "incom": 165, "fulli": 165, "observ": [165, 997, 998], "lesson": [165, 166], "common": [166, 352, 383, 403, 964], "pitfal": [166, 352], "scale": [166, 217, 220, 303, 336, 358, 403, 872, 961, 970, 974, 981], "matter": 166, "check": [166, 258, 308, 378, 1013, 1014, 1015], "problem": [166, 400, 979, 980, 990, 995, 997, 998], "correl": [166, 169, 398, 964, 972], "numer": [166, 357, 372], "wrong": [166, 381], "depend": [167, 235, 368, 971, 1005, 1018, 1019], "condit": [167, 310, 971], "expect": [167, 310, 963, 971], "preprocessor": 167, "1": [167, 193, 311, 312, 313, 381, 999, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "wai": [167, 370, 381], "layer": [167, 292, 968], "perceptron": [167, 292, 651, 960, 968], "ic": [167, 971], "pdp": 167, "3d": 167, "represent": [167, 227, 309, 356, 403, 998], "accuraci": [168, 230, 341, 346, 964], "": [168, 303, 305, 373, 381, 402, 964], "multicollinear": 169, "breast": [169, 367], "cancer": [169, 367], "handl": [169, 954], "scalabl": [172, 258, 309], "partit": 172, "bayesian": [175, 176, 241, 256, 394, 960, 963], "recov": 175, "weight": [175, 177, 209, 294, 309, 338, 402, 403], "true": [175, 176], "margin": [175, 176, 208, 329, 333], "log": [175, 176, 964], "expans": 175, "sinusoid": 176, "cubic": 176, "l": 176, "elast": [177, 180, 181, 960], "net": [177, 180, 181, 960], "gram": [177, 979], "huberregressor": [178, 632], "strong": 178, "signal": [180, 400, 998], "elasticnet": [180, 309, 629], "dens": 182, "implement": [182, 381, 395, 403, 964, 967, 978, 979], "lar": [183, 633, 960], "criteria": [184, 381, 960, 980], "aic": 185, "bic": [185, 246], "criterion": [185, 310, 953, 978], "coordin": 185, "descent": [185, 204, 210, 960, 978], "angl": [185, 960], "penalti": [187, 207, 336], "sparsiti": [187, 193, 403, 997], "multinomi": [188, 212, 960, 966], "One": [188, 210, 265, 311, 327, 399, 970, 978], "rest": [188, 265], "joint": 190, "task": [190, 394, 960, 984], "seri": [190, 399], "onli": [193, 213, 1016, 1018], "2": [193, 313, 999, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "ordinari": [194, 960], "orthogon": [195, 960], "match": [195, 960], "pursuit": [195, 960], "poisson": [196, 214, 309, 310, 964], "loss": [196, 206, 309, 312, 402, 964], "french": 196, "motor": 196, "third": [196, 386], "parti": [196, 386], "liabil": 196, "claim": [196, 214], "constant": [196, 954], "rank": [196, 394, 964], "takeawai": 196, "interpol": 197, "quantileregressor": [198, 653], "linearregress": [198, 640], "ransac": [199, 960], "l2": [200, 336], "solver": [203, 400, 960], "stochast": [204, 210, 217, 293, 960, 961, 969, 978], "sgd": [205, 206, 207, 208, 209, 960, 978], "convex": 206, "maximum": [208, 329, 969], "hyperplan": [208, 329, 330], "multiclass": [211, 265, 308, 379, 393, 394, 809, 810, 811, 926, 927, 928, 964, 965, 990, 997, 1014, 1017, 1018, 1019], "20newgroup": 211, "mnist": [212, 294], "theil": [213, 960], "sen": [213, 960], "y": [213, 381, 398, 975, 977], "direct": 213, "x": 213, "tweedi": [214, 964], "insur": 214, "definit": [214, 295, 971, 1015], "frequenc": [214, 999], "sever": [214, 219], "gamma": [214, 964], "pure": 214, "premium": 214, "tweedieregressor": [214, 663], "local": [217, 218, 282, 283, 961, 970], "isomap": [217, 218, 671, 961], "multidimension": 217, "t": [217, 222, 961], "techniqu": 218, "sphere": 219, "swiss": 221, "roll": [221, 372], "And": [221, 384], "hole": 221, "sne": [222, 961], "perplex": 222, "shape": [222, 990], "anomali": 225, "object": [226, 251, 372, 381, 953, 964, 996, 1002], "confusionmatrixdisplai": [226, 680], "roccurvedisplai": [226, 685], "precisionrecalldisplai": [226, 683], "compact": 227, "rich": [227, 309], "html": 227, "isoton": [228, 393, 394, 618, 619, 620, 955, 1013, 1014, 1015, 1017, 1019, 1020], "johnson": [229, 976], "lindenstrauss": [229, 976], "bound": 229, "theoret": [229, 960], "explicit": 230, "map": [230, 302, 974], "rbf": [230, 327, 328, 405, 605, 962, 979, 997], "python": [230, 357, 376, 389, 979, 983, 984, 1011], "packag": [230, 984, 1017], "svr": [231, 335, 887, 979], "construct": [231, 396], "look": [231, 335], "complet": [233, 395], "advanc": 235, "With": [235, 999], "togeth": [235, 265, 995, 998], "grid": [236, 254, 256, 264, 267, 953, 994, 999], "search": [236, 254, 256, 264, 267, 382, 953, 980, 994, 999], "over": 236, "roc": [237, 253, 265, 266, 308, 964], "api": [237, 238, 308, 311, 313, 357, 372, 377, 383, 391, 394, 405, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015], "svc": [237, 336, 886, 979], "introduc": 238, "set_output": [238, 313, 372], "concentr": 241, "variat": [241, 963], "gmm": [243, 244], "densiti": [245, 280, 281, 289, 401, 915, 979], "best": [246, 371, 381, 980], "confus": [250, 395, 964], "behavior": 251, "indic": 251, "mani": [251, 313, 357, 381], "cv": [251, 352], "tradeoff": [253, 964], "det": [253, 964], "custom": [254, 324, 403, 974, 979], "refit": [254, 990], "balanc": [255, 964], "statist": [256, 984, 993, 996], "frequentist": 256, "practic": [256, 352, 371, 375, 960, 961, 968, 978, 979, 980], "equival": 256, "all": [256, 265, 312, 386, 995, 1020, 1021], "take": 256, "home": 256, "messag": 256, "ratio": [259, 964], "pre": [259, 352, 382], "post": [259, 346], "invari": 259, "respect": 259, "preval": 259, "cross_val_scor": [260, 803], "nest": [261, 396, 994], "see": [261, 396], "also": [261, 374, 396], "signific": 262, "precis": [263, 964], "recal": [263, 964], "In": 263, "binari": [263, 960, 964], "averag": [263, 265, 395, 402, 964], "micro": [263, 265], "each": [263, 268, 341, 953], "f1": 263, "receiv": [265, 266, 964], "oper": [265, 266, 369, 379, 405, 964], "characterist": [265, 266, 964], "specif": [265, 368, 372, 389, 953, 984, 985], "ovr": 265, "macro": 265, "ovo": 265, "success": [267, 268, 310, 953], "halv": [267, 268, 310, 953], "candid": [268, 953], "amount": [268, 953], "resourc": [268, 357, 370, 953, 983, 987], "underfit": 270, "overfit": [270, 980], "tsne": [276, 675], "1d": 281, "novelti": [282, 970, 979], "lof": [282, 283], "default": [283, 370], "neighborhood": [284, 285, 286, 967], "centroid": [287, 967], "mlpclassifi": [293, 838], "mlp": 294, "restrict": [295, 969], "boltzmann": [295, 969], "scaler": 298, "standardscal": [298, 861], "minmaxscal": [298, 851], "maxabsscal": [298, 850], "robustscal": [298, 859], "powertransform": [298, 857], "quantiletransform": [298, 858], "uniform": [298, 974], "kbinsdiscret": [299, 301, 846], "continu": [299, 370], "rescal": 303, "other": [304, 364, 381, 980, 984, 1005], "intern": 305, "22": [308, 1015], "new": [308, 310, 311, 313, 370, 381, 983, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "prune": [308, 346, 980], "datafram": [308, 381], "compat": [308, 370, 372, 391], "auc": [308, 689], "now": [308, 311, 1015], "23": [309, 1016], "stabil": 309, "improv": [309, 310, 311, 312, 313, 369, 370, 1008, 1009], "histogram": [309, 311, 313, 401, 402], "24": [310, 1017], "histgradientboost": 310, "self": [310, 319, 977], "sequentialfeatureselector": [310, 585], "polynomialcountsketch": [310, 623], "decisiontreeregressor": [310, 890], "keyword": [311, 1016, 1018], "argument": [311, 372, 1016, 1018], "more": [311, 365, 381, 389, 968], "flexibl": [311, 954], "stabl": 311, "histgradientboostingregressor": [312, 545], "get_feature_names_out": 312, "avail": [312, 953, 1002], "group": [312, 399, 988, 998], "infrequ": [312, 974], "onehotencod": [312, 854], "minibatchnmf": [312, 521], "version": [312, 364, 368, 374, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "bisectingkmean": [312, 427], "divid": 312, "panda": [313, 375, 381], "enhanc": [313, 384, 984, 1008, 1009, 1010, 1011, 1012], "faster": [313, 402], "parser": [313, 364], "fetch_openml": [313, 479], "experiment": [313, 374, 391, 394, 562, 563], "arrai": [313, 379, 391, 990], "lineardiscriminantanalysi": [313, 532], "effici": [313, 379], "most": 316, "uncertain": 316, "activ": 317, "threshold": 319, "linearsvc": [326, 881, 979], "unbalanc": [330, 979], "some": 331, "plai": 331, "percentil": 331, "case": [336, 960, 964], "tie": 337, "break": 337, "word": [341, 403, 999], "metadata": 341, "strip": 341, "quantifi": [342, 964], "qualiti": [342, 964], "tfidfvector": [342, 343, 574], "lsa": 342, "top": [342, 964], "term": [342, 383, 403], "per": 342, "hashingvector": [342, 403, 572], "featurehash": [343, 565], "dictvector": [343, 564], "special": 343, "purpos": [343, 985], "cost": [346, 980], "leav": [346, 399, 960], "understand": 350, "recommend": [352, 365, 984], "inconsist": 352, "leakag": 352, "dure": 352, "avoid": [352, 396, 980], "control": [352, 402, 968], "none": 352, "randomst": 352, "instanc": [352, 358], "repeat": [352, 396, 399], "call": [352, 369], "splitter": [352, 394], "subtleti": 352, "get": [352, 381, 382], "reproduc": [352, 375], "across": 352, "execut": [352, 381], "configur": [356, 357], "overhead": 356, "input": [356, 372, 391, 395, 974], "tip": [356, 371, 378, 953, 961, 968, 978, 979, 980], "trick": [356, 376, 378, 403], "algebra": [356, 379], "librari": [356, 357], "reshap": [356, 996], "link": [356, 364, 964], "manag": [357, 386], "higher": 357, "joblib": [357, 376], "lower": 357, "openmp": [357, 371], "numpi": [357, 375], "scipi": 357, "oversubscript": 357, "spawn": 357, "too": 357, "thread": 357, "switch": 357, "environ": 357, "sklearn_assume_finit": 357, "sklearn_working_memori": 357, "sklearn_se": 357, "sklearn_tests_global_random_se": 357, "sklearn_skip_network_test": 357, "sklearn_run_float32_test": 357, "sklearn_enable_debug_cython_direct": 357, "sklearn_build_enable_debug_symbol": 357, "sklearn_pairwise_dist_chunk_s": 357, "computation": 358, "bigger": 358, "stream": 358, "note": [358, 396, 399, 960], "tabl": [359, 381], "Of": 359, "content": [359, 381, 990], "util": [363, 375, 379, 394, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 999, 1002, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "svmlight": 364, "format": [364, 375, 381, 389, 965], "org": [364, 374, 988], "repositori": 364, "arff": 364, "extern": [364, 983, 990, 1005, 1014], "olivetti": 365, "usag": [365, 376, 381, 391, 393, 396, 402, 403, 960], "convert": 365, "filter": 365, "realist": 365, "consider": [365, 960], "wild": 365, "covertyp": 365, "rcv1": 365, "kddcup": 365, "99": 365, "california": 365, "plant": 367, "linnerrud": 367, "wine": 367, "wisconsin": 367, "diagnost": 367, "instal": [368, 386], "nightli": 368, "runtim": 368, "tag": [368, 370, 372], "edit": 368, "platform": [368, 378, 386], "instruct": 368, "window": [368, 386], "maco": 368, "compil": [368, 376], "conda": [368, 386], "forg": 368, "homebrew": 368, "linux": [368, 381, 386], "system": 368, "freebsd": 368, "altern": [368, 953], "bug": [369, 370, 374, 987, 1008, 1009, 1010, 1011, 1012, 1013, 1014], "triag": 369, "issu": [369, 370, 980], "curat": 369, "fruit": 369, "pr": [369, 374], "help": [369, 370, 381], "review": [369, 370, 378, 999], "member": 369, "close": 369, "tough": 369, "typic": 369, "workflow": [369, 370], "contribut": [370, 381], "submit": 370, "report": [370, 375, 964], "request": [370, 374, 378, 381], "good": [370, 375], "video": [370, 983], "git": 370, "pull": [370, 374, 378, 381], "checklist": [370, 374], "integr": 370, "ci": 370, "stall": 370, "unclaim": 370, "easi": 370, "want": 370, "guidelin": [370, 372], "write": 370, "referenc": 370, "github": 370, "action": 370, "coverag": [370, 378, 964], "matplotlib": 370, "monitor": 370, "tracker": [370, 987], "maintain": [370, 374, 384, 389], "backward": 370, "deprec": [370, 394, 908, 1015], "chang": [370, 384, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "read": 370, "exist": 370, "cython": [371, 376, 378], "convent": [371, 990], "knowledg": 371, "eas": 371, "instanti": 372, "attribut": [372, 383, 953, 980], "option": 372, "univers": 372, "your": [372, 375, 964], "own": [372, 381, 964], "templat": 372, "baseestim": [372, 409], "mixin": 372, "get_param": 372, "set_param": 372, "init": 372, "clone": [372, 418], "assert": 372, "guid": [373, 1001], "major": [374, 402, 1013, 1014], "minor": 374, "known": [374, 1013, 1014], "merg": 374, "web": 374, "site": 374, "craft": 375, "minim": [375, 980, 1018, 1019], "provid": 375, "fail": 375, "comment": 375, "boil": 375, "down": 375, "script": 375, "someth": 375, "small": 375, "do": [375, 381], "NOT": 375, "unless": 375, "i": [375, 381, 399, 980, 988], "extrem": [375, 402], "necessari": 375, "markdown": 375, "make_regress": [375, 507], "make_classif": [375, 498], "make_blob": [375, 495], "optim": [376, 394, 953, 961], "c": 376, "profil": 376, "extens": 376, "yep": 376, "gperftool": 376, "debugg": 376, "gdb": 376, "gprof": 376, "valgrind": [376, 378], "callgrind": 376, "kcachegrind": 376, "warm": 376, "restart": 376, "overview": [377, 395, 970], "ax": 377, "saniti": 378, "preserv": 378, "fold": [378, 399], "unfold": 378, "outdat": 378, "diff": 378, "remot": 378, "track": 378, "branch": 378, "pytest": 378, "alias": 378, "flag": 378, "standard": [378, 974], "repli": 378, "debug": 378, "arm64": 378, "x86_64": 378, "tool": [379, 381], "matric": [379, 974], "warn": [379, 394], "except": [379, 394, 554, 555, 556, 557, 558, 559, 560, 561, 1017, 1021], "dispatch": 380, "frequent": 381, "ask": 381, "question": [381, 987], "what": 381, "lot": 381, "peopl": [381, 1005, 1006, 1007, 1008], "pronounc": 381, "why": [381, 402], "pypi": 381, "deep": 381, "reinforc": 381, "Will": 381, "add": 381, "graphic": [381, 969], "did": 381, "remov": [381, 404, 974, 1005], "hmm": 381, "gpu": 381, "need": 381, "doe": 381, "directli": 381, "plan": 381, "so": 381, "my": 381, "ani": 381, "attent": 381, "inclus": 381, "includ": 381, "should": 381, "save": 381, "export": 381, "deploi": 381, "bunch": [381, 896], "usabl": 381, "deal": 381, "string": 381, "sometim": 381, "crash": 381, "freez": 381, "n_job": 381, "osx": [381, 386], "job": 381, "than": 381, "random_st": 381, "entir": 381, "start": 382, "processor": 382, "automat": [382, 960], "next": 382, "glossari": 383, "element": 383, "concept": [383, 960], "properti": 383, "role": 384, "technic": 384, "committe": 384, "propos": 384, "slep": 384, "latest": 386, "appl": 386, "silicon": 386, "m1": 386, "hardwar": 386, "alpin": 386, "arch": 386, "debian": 386, "ubuntu": 386, "fedora": 386, "netbsd": 386, "macport": 386, "mac": 386, "anaconda": 386, "enthought": 386, "deploy": 386, "intel": 386, "channel": 386, "winpython": 386, "troubleshoot": 386, "caus": 386, "persist": 389, "serial": 389, "secur": 389, "skop": 389, "interoper": [389, 984], "pytorch": 391, "mathemat": [392, 395, 402, 956, 958, 960, 967, 968, 971, 978, 979, 980], "formul": [392, 395, 402, 958, 960, 967, 968, 978, 979, 980], "sigmoid": [393, 962], "sklearn": [394, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "compos": [394, 447, 448, 449, 450, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020], "cross_decomposit": [394, 465, 466, 467, 468, 1015, 1017, 1019], "loader": 394, "discriminant_analysi": [394, 532, 533, 1013, 1014, 1017, 1019, 1020, 1021], "dummi": [394, 534, 535, 964, 1013, 1014, 1015, 1018, 1019], "feature_extract": [394, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "feature_select": [394, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "gaussian_process": [394, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 1013, 1015, 1016, 1017, 1018, 1019, 1020], "kernel_approxim": [394, 621, 622, 623, 624, 625, 1015, 1017, 1018, 1019, 1020], "kernel_ridg": [394, 626], "linear_model": [394, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "classic": [394, 963], "glm": 394, "interfac": 394, "model_select": [394, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "naive_bay": [394, 816, 817, 818, 819, 820, 1013, 1015, 1016, 1017, 1018, 1020, 1021], "neural_network": [394, 837, 838, 839, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "random_project": [394, 873, 874, 875, 1019], "semi_supervis": [394, 876, 877, 878, 1015, 1016, 1017, 1021], "recent": 394, "low": [395, 402, 404], "mini": [395, 400], "batch": [395, 400], "assign": 395, "featureagglomer": [395, 429], "hierarchi": 395, "ad": 395, "connect": [395, 403, 998], "consumpt": 395, "larg": [395, 403], "size": [395, 402], "rand": 395, "index": [395, 924], "advantag": 395, "drawback": 395, "homogen": [395, 980], "fowlk": 395, "mallow": 395, "calinski": 395, "harabasz": 395, "davi": 395, "bouldin": 395, "conting": 395, "pair": 395, "access": 396, "featureunion": [396, 840], "columntransform": [396, 447], "shrunk": 397, "oracl": 397, "plscanon": [398, 466], "plssvd": [398, 468], "plsregress": [398, 467], "held": 399, "cross_valid": [399, 804], "obtain": 399, "d": [399, 967], "loo": 399, "p": [399, 988], "lpo": 399, "shuffl": [399, 938], "stratif": 399, "stratifi": 399, "stratifiedgroupkfold": [399, 797], "predefin": [399, 964], "decompos": 400, "exact": 400, "sparsepca": [400, 526], "kpca": 400, "choic": [400, 963, 967], "truncat": 400, "semant": 400, "nnmf": 400, "frobeniu": 400, "norm": 400, "beta": 400, "diverg": 400, "addit": [402, 956], "weak": 402, "learner": 402, "rate": 402, "subsampl": 402, "hard": 402, "soft": 402, "dict": 403, "detail": [403, 956, 960, 978, 979], "tf": 403, "idf": 403, "decod": 403, "applic": [403, 998], "corpu": 403, "selectfrommodel": [404, 580], "recoveri": 404, "biclustermixin": 410, "classnameprefixfeaturesoutmixin": 411, "classifiermixin": 412, "clustermixin": 413, "densitymixin": 414, "onetoonefeaturemixin": 415, "regressormixin": 416, "transformermixin": 417, "is_classifi": 419, "is_regressor": 420, "calibratedclassifiercv": 421, "calibrationdisplai": 422, "from_estim": [422, 614, 615, 680, 681, 683, 684, 685, 785], "calibration_curv": 423, "affinitypropag": 424, "agglomerativeclust": 425, "spectralbiclust": 434, "spectralclust": 435, "spectralcoclust": 436, "affinity_propag": 437, "cluster_optics_dbscan": 438, "cluster_optics_xi": 439, "compute_optics_graph": 440, "estimate_bandwidth": 441, "k_mean": 442, "kmeans_plusplu": 443, "mean_shift": 444, "spectral_clust": 445, "ward_tre": 446, "transformedtargetregressor": 448, "make_column_selector": 449, "make_column_transform": 450, "config_context": 451, "ellipticenvelop": 452, "empiricalcovari": 453, "graphicallasso": 454, "graphicallassocv": 455, "mincovdet": 457, "shrunkcovari": 459, "empirical_covari": 460, "graphical_lasso": 461, "ledoit_wolf": 462, "ledoit_wolf_shrinkag": 463, "shrunk_covari": 464, "clear_data_hom": 469, "dump_svmlight_fil": 470, "fetch_20newsgroup": 471, "fetch_20newsgroups_vector": 472, "fetch_california_h": 473, "fetch_covtyp": 474, "fetch_kddcup99": 475, "fetch_lfw_pair": 476, "fetch_lfw_peopl": 477, "fetch_olivetti_fac": 478, "fetch_rcv1": 480, "fetch_species_distribut": 481, "get_data_hom": 482, "load_breast_canc": 483, "load_diabet": 484, "load_digit": 485, "load_fil": 486, "load_iri": 487, "load_linnerud": 488, "load_sample_imag": [489, 490], "load_svmlight_fil": [491, 492], "load_win": 493, "make_biclust": 494, "make_checkerboard": 496, "make_circl": 497, "make_friedman1": 499, "make_friedman2": 500, "make_friedman3": 501, "make_gaussian_quantil": 502, "make_hastie_10_2": 503, "make_low_rank_matrix": 504, "make_moon": 505, "make_multilabel_classif": 506, "make_s_curv": 508, "make_sparse_coded_sign": 509, "make_sparse_spd_matrix": 510, "make_sparse_uncorrel": 511, "make_spd_matrix": 512, "make_swiss_rol": 513, "dictionarylearn": 514, "factoranalysi": 515, "incrementalpca": 517, "latentdirichletalloc": 519, "minibatchdictionarylearn": 520, "sparsecod": 525, "truncatedsvd": 527, "dict_learn": 528, "dict_learning_onlin": 529, "non_negative_factor": 530, "sparse_encod": 531, "quadraticdiscriminantanalysi": 533, "dummyclassifi": 534, "dummyregressor": 535, "adaboostclassifi": 536, "adaboostregressor": 537, "baggingclassifi": 538, "baggingregressor": 539, "extratreesclassifi": 540, "extratreesregressor": 541, "gradientboostingclassifi": 542, "gradientboostingregressor": 543, "histgradientboostingclassifi": 544, "randomforestclassifi": 547, "randomforestregressor": 548, "randomtreesembed": 549, "stackingclassifi": 550, "stackingregressor": 551, "votingregressor": 553, "convergencewarn": 554, "dataconversionwarn": 555, "datadimensionalitywarn": 556, "efficiencywarn": 557, "fitfailedwarn": 558, "inconsistentversionwarn": 559, "notfittederror": 560, "undefinedmetricwarn": 561, "enable_halving_search_cv": 562, "enable_iterative_imput": 563, "patchextractor": 566, "extract_patches_2d": 567, "grid_to_graph": 568, "img_to_graph": 569, "reconstruct_from_patches_2d": 570, "countvector": 571, "tfidftransform": 573, "genericunivariateselect": 575, "rfe": 576, "rfecv": 577, "selectfdr": 578, "selectfpr": 579, "selectfw": 581, "selectkbest": 582, "selectpercentil": 583, "selectormixin": 584, "variancethreshold": 586, "chi2": 587, "f_classif": 588, "f_regress": 589, "mutual_info_classif": 590, "mutual_info_regress": 591, "r_regress": 592, "gaussianprocessclassifi": 593, "gaussianprocessregressor": 594, "compoundkernel": 595, "constantkernel": 596, "dotproduct": 597, "expsinesquar": 598, "exponenti": 599, "matern": 602, "pairwisekernel": 603, "rationalquadrat": 606, "sum": 607, "whitekernel": 608, "get_config": 609, "knnimput": 611, "missingind": 612, "simpleimput": 613, "decisionboundarydisplai": 614, "partialdependencedisplai": 615, "partial_depend": 616, "permutation_import": 617, "isotonicregress": 618, "check_increas": 619, "isotonic_regress": 620, "additivechi2sampl": 621, "nystroem": [622, 956], "rbfsampler": 624, "skewedchi2sampl": 625, "kernelridg": 626, "ardregress": 627, "bayesianridg": 628, "elasticnetcv": 630, "gammaregressor": 631, "larscv": 634, "lassocv": 636, "lassolar": 637, "lassolarscv": 638, "lassolars": 639, "logisticregress": 641, "logisticregressioncv": 642, "multitaskelasticnet": 643, "multitaskelasticnetcv": 644, "multitasklasso": 645, "multitasklassocv": 646, "orthogonalmatchingpursuit": 647, "orthogonalmatchingpursuitcv": 648, "passiveaggressiveclassifi": 649, "passiveaggressiveregressor": 650, "poissonregressor": 652, "ransacregressor": 654, "ridgecv": 656, "ridgeclassifi": 657, "ridgeclassifiercv": 658, "sgdclassifi": 659, "sgdoneclasssvm": 660, "sgdregressor": 661, "theilsenregressor": 662, "enet_path": 664, "lars_path": 665, "lars_path_gram": 666, "lasso_path": 667, "orthogonal_mp": 668, "orthogonal_mp_gram": 669, "ridge_regress": 670, "locallylinearembed": 672, "md": [673, 961], "spectralembed": 674, "locally_linear_embed": 676, "smacof": 677, "spectral_embed": 678, "trustworthi": 679, "from_predict": [680, 683, 684, 685], "detcurvedisplai": 681, "distancemetr": 682, "predictionerrordisplai": 684, "accuracy_scor": 686, "adjusted_mutual_info_scor": 687, "adjusted_rand_scor": 688, "average_precision_scor": 690, "balanced_accuracy_scor": 691, "brier_score_loss": 692, "calinski_harabasz_scor": 693, "check_scor": 694, "class_likelihood_ratio": 695, "classification_report": 696, "contingency_matrix": 697, "pair_confusion_matrix": 698, "cohen_kappa_scor": 699, "completeness_scor": 700, "confusion_matrix": 701, "consensus_scor": 702, "coverage_error": 703, "d2_absolute_error_scor": 704, "d2_pinball_scor": 705, "d2_tweedie_scor": 706, "davies_bouldin_scor": 707, "dcg_score": 708, "det_curv": 709, "explained_variance_scor": 710, "f1_score": 711, "fbeta_scor": 712, "fowlkes_mallows_scor": 713, "get_scor": 714, "get_scorer_nam": 715, "hamming_loss": 716, "hinge_loss": 717, "homogeneity_completeness_v_measur": 718, "homogeneity_scor": 719, "jaccard_scor": 720, "label_ranking_average_precision_scor": 721, "label_ranking_loss": 722, "log_loss": 723, "make_scor": 724, "matthews_corrcoef": 725, "max_error": 726, "mean_absolute_error": 727, "mean_absolute_percentage_error": 728, "mean_gamma_devi": 729, "mean_pinball_loss": 730, "mean_poisson_devi": 731, "mean_squared_error": 732, "mean_squared_log_error": 733, "mean_tweedie_devi": 734, "median_absolute_error": 735, "multilabel_confusion_matrix": 736, "mutual_info_scor": 737, "ndcg_score": 738, "normalized_mutual_info_scor": 739, "additive_chi2_kernel": 740, "chi2_kernel": 741, "cosine_dist": 742, "cosine_similar": 743, "distance_metr": 744, "euclidean_dist": 745, "haversine_dist": 746, "kernel_metr": 747, "laplacian_kernel": 748, "linear_kernel": 749, "manhattan_dist": 750, "nan_euclidean_dist": 751, "paired_cosine_dist": 752, "paired_dist": 753, "paired_euclidean_dist": 754, "paired_manhattan_dist": 755, "pairwise_kernel": 756, "polynomial_kernel": 757, "rbf_kernel": 758, "sigmoid_kernel": 759, "pairwise_dist": 760, "pairwise_distances_argmin": 761, "pairwise_distances_argmin_min": 762, "pairwise_distances_chunk": 763, "precision_recall_curv": 764, "precision_recall_fscore_support": 765, "precision_scor": 766, "r2_score": 767, "rand_scor": 768, "recall_scor": 769, "roc_auc_scor": 770, "roc_curv": 771, "silhouette_sampl": 772, "silhouette_scor": 773, "top_k_accuracy_scor": 774, "v_measure_scor": 775, "zero_one_loss": 776, "bayesiangaussianmixtur": [777, 963], "gaussianmixtur": [778, 963], "groupkfold": 780, "groupshufflesplit": 781, "halvinggridsearchcv": 782, "halvingrandomsearchcv": 783, "kfold": 784, "learningcurvedisplai": 785, "leaveonegroupout": 786, "leaveoneout": 787, "leavepgroupsout": 788, "leavepout": 789, "parametergrid": 790, "parametersampl": 791, "predefinedsplit": 792, "randomizedsearchcv": 793, "repeatedkfold": 794, "repeatedstratifiedkfold": 795, "shufflesplit": 796, "stratifiedkfold": 798, "stratifiedshufflesplit": 799, "timeseriessplit": 800, "check_cv": 801, "cross_val_predict": 802, "learning_curv": 805, "permutation_test_scor": 806, "train_test_split": 807, "validation_curv": 808, "onevsoneclassifi": [809, 965], "onevsrestclassifi": [810, 965], "outputcodeclassifi": [811, 965], "classifierchain": [812, 965], "multioutputclassifi": [813, 965], "multioutputregressor": [814, 965], "regressorchain": [815, 965], "bernoullinb": 816, "categoricalnb": 817, "complementnb": 818, "gaussiannb": 819, "multinomialnb": 820, "balltre": [821, 967], "kdtree": [822, 967], "kneighborsclassifi": 823, "kneighborsregressor": 824, "kneighborstransform": 825, "kerneldens": 826, "localoutlierfactor": 827, "nearestcentroid": 828, "nearestneighbor": 829, "neighborhoodcomponentsanalysi": 830, "radiusneighborsclassifi": 831, "radiusneighborsregressor": 832, "radiusneighborstransform": 833, "kneighbors_graph": 834, "radius_neighbors_graph": 835, "sort_graph_by_row_valu": 836, "bernoullirbm": 837, "mlpregressor": 839, "make_pipelin": 842, "make_union": 843, "binar": [844, 864, 974, 975], "functiontransform": 845, "kernelcenter": 847, "labelbinar": [848, 975], "labelencod": 849, "multilabelbinar": [852, 975], "ordinalencod": 855, "polynomialfeatur": 856, "splinetransform": 860, "targetencod": 862, "add_dummy_featur": 863, "label_binar": 865, "maxabs_scal": 866, "minmax_scal": 867, "power_transform": 869, "quantile_transform": 870, "robust_scal": 871, "gaussianrandomproject": 873, "sparserandomproject": 874, "johnson_lindenstrauss_min_dim": 875, "labelpropag": 876, "labelspread": 877, "selftrainingclassifi": 878, "set_config": 879, "show_vers": 880, "linearsvr": [882, 979], "nusvc": [883, 979], "nusvr": 884, "oneclasssvm": 885, "l1_min_c": 888, "decisiontreeclassifi": 889, "extratreeclassifi": 891, "extratreeregressor": 892, "export_graphviz": 893, "export_text": 894, "plot_tre": 895, "_safe_index": 897, "arrayfunc": 898, "min_po": 898, "as_float_arrai": 899, "assert_all_finit": 900, "check_x_i": 901, "check_arrai": 902, "check_consistent_length": 903, "check_random_st": 904, "check_scalar": 905, "class_weight": [906, 907], "compute_class_weight": 906, "compute_sample_weight": 907, "discoveri": [909, 910, 911], "all_displai": 909, "all_estim": 910, "all_funct": 911, "estimator_check": [912, 913], "check_estim": 912, "parametrize_with_check": 913, "estimator_html_repr": 914, "extmath": [915, 916, 917, 918, 919, 920], "fast_logdet": 916, "randomized_range_find": 917, "randomized_svd": 918, "safe_sparse_dot": 919, "weighted_mod": 920, "gen_batch": 921, "gen_even_slic": 922, "single_source_shortest_path_length": 923, "metaestim": 925, "available_if": 925, "is_multilabel": 926, "type_of_target": 927, "unique_label": 928, "murmurhash3_32": 929, "delai": 931, "parallel_backend": 932, "sample_without_replac": 933, "register_parallel_backend": 934, "resampl": 935, "safe_mask": 936, "safe_sqr": 937, "sparsefunc": [939, 940, 941, 942, 943, 944, 945, 1014], "incr_mean_variance_axi": 939, "inplace_column_scal": 940, "inplace_csr_column_scal": 941, "inplace_row_scal": 942, "inplace_swap_column": 943, "inplace_swap_row": 944, "mean_variance_axi": 945, "sparsefuncs_fast": [946, 947], "inplace_csr_row_normalize_l1": 946, "inplace_csr_row_normalize_l2": 947, "check_is_fit": 948, "check_memori": 949, "check_symmetr": 950, "column_or_1d": 951, "has_fit_paramet": 952, "exhaust": 953, "min_resourc": 953, "aggress": [953, 960], "analyz": 953, "cv_results_": 953, "brute": [953, 967], "forc": [953, 967], "keep": 954, "mark": 954, "nan": 954, "chi": [956, 962], "skew": 956, "tensor": 956, "sketch": 956, "qda": 958, "omp": 960, "ard": 960, "liblinear": 960, "passiv": 960, "scenario": 960, "trade": 960, "off": 960, "which": [960, 980], "consensu": 960, "median": [960, 964], "huber": 960, "extend": 960, "introduct": [961, 990], "modifi": 961, "hessian": 961, "eigenmap": 961, "tangent": 961, "align": 961, "nonmetr": 961, "barn": 961, "hut": 961, "cosin": 962, "laplacian": 962, "pro": 963, "con": 963, "maxim": 963, "rule": 964, "cohen": 964, "kappa": 964, "ham": 964, "jaccard": 964, "hing": 964, "matthew": 964, "zero": 964, "brier": 964, "discount": 964, "cumul": 964, "gain": 964, "r\u00b2": 964, "absolut": 964, "logarithm": 964, "percentag": 964, "explain": 964, "pinbal": 964, "d\u00b2": 964, "complement": 966, "bernoulli": [966, 969], "unsupervis": [967, 969, 981, 998, 1000], "find": 967, "ball": 967, "leaf_siz": 967, "shrunken": 967, "warm_start": 968, "parametr": 969, "up": 970, "ellipt": 970, "envelop": 970, "isol": 970, "outlin": 972, "mislead": 972, "strongli": 972, "rang": 974, "whiten": 974, "bin": 974, "lemma": 976, "unlabel": 977, "entri": 977, "id3": 980, "c4": 980, "5": [980, 1005], "c5": 980, "cart": 980, "entropi": 980, "hypothesi": 980, "welcom": 982, "talk": 983, "scientif": [983, 993], "framework": 984, "domain": 984, "translat": 984, "roadmap": 985, "thi": 985, "statement": 985, "2018": 985, "architectur": 985, "goal": 985, "subpackag": 985, "mail": 987, "user": [987, 1001], "gitter": 987, "who": 988, "j": 988, "morgan": 988, "spotifi": 988, "inria": 988, "betawork": 988, "hug": 988, "evernot": 988, "t\u00e9l\u00e9com": 988, "paristech": 988, "book": 988, "com": 988, "aweb": 988, "yhat": 988, "rangespan": 988, "birchbox": 988, "bestofmedia": 988, "phimeca": 988, "howaboutw": 988, "peerindex": 988, "datarobot": 988, "okcupid": 988, "love": 988, "publica": 988, "machinali": 988, "solido": 988, "infonea": 988, "dataiku": 988, "otto": 988, "zopa": 988, "mar": 988, "bnp": 988, "pariba": 988, "cardif": 988, "section": 990, "cast": 990, "updat": [990, 1015], "right": 992, "put": 995, "open": 995, "ship": 996, "would": 996, "high": 997, "solv": [997, 998], "vocabulari": 997, "curs": 997, "iris": 997, "same": 997, "seek": 998, "constrain": 998, "inverse_transform": 998, "setup": 999, "token": 999, "occurr": 999, "languag": 999, "identif": 999, "sentiment": 999, "movi": 999, "cli": 999, "where": 999, "here": 999, "12": 1005, "changelog": [1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "11": 1005, "9": 1005, "8": 1005, "7": 1005, "6": [1005, 1011], "modul": [1005, 1013, 1014, 1020, 1021], "misc": 1005, "4": [1005, 1013], "earlier": 1005, "13": 1006, "14": 1007, "15": 1008, "16": 1009, "17": 1010, "18": 1011, "last": 1011, "19": 1012, "21": 1014, "legend": [1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021], "post1": 1015, "websit": 1015, "clear": 1015, "public": 1015, "futurewarn": 1015, "enforc": [1016, 1018]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1005, "authors"], [1005, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [384, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [163, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [108, "concluding-remarks"], [221, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [25, "references"], [27, "references"], [80, "references"], [112, "references"], [172, "references"], [184, null], [256, null], [289, "references"], [365, null], [365, null], [365, null], [367, null], [367, null], [367, null], [367, null], [367, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [403, null], [405, "references"], [954, "references"], [954, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [971, null], [974, null], [974, null], [977, null], [977, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [50, "load-the-data"], [122, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [185, "conclusion"], [305, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [49, "plot-results"], [77, "plot-results"], [95, "plot-results"], [96, "plot-results"], [283, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [356, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [328, "visualization"], [394, "visualization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[15, "computation-times"], [22, "computation-times"], [28, "computation-times"], [35, "computation-times"], [67, "computation-times"], [75, "computation-times"], [82, "computation-times"], [86, "computation-times"], [92, "computation-times"], [106, "computation-times"], [132, "computation-times"], [138, "computation-times"], [146, "computation-times"], [158, "computation-times"], [162, "computation-times"], [170, "computation-times"], [173, "computation-times"], [215, "computation-times"], [223, "computation-times"], [239, "computation-times"], [248, "computation-times"], [272, "computation-times"], [275, "computation-times"], [290, "computation-times"], [296, "computation-times"], [306, "computation-times"], [314, "computation-times"], [322, "computation-times"], [339, "computation-times"], [344, "computation-times"], [351, "computation-times"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [163, "biclustering"], [366, "biclustering"], [392, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[23, "calibration"], [163, "calibration"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [175, "generate-synthetic-dataset"], [175, "id1"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [185, "dataset"], [262, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [393, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [966, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [343, "summary"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Classification": [[29, "classification"], [32, "classification"], [156, "classification"], [163, "classification"], [402, "classification"], [402, "id18"], [960, "classification"], [967, "id4"], [968, "classification"], [978, "classification"], [979, "classification"], [980, "classification"], [997, "classification"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Classifier comparison": [[31, "classifier-comparison"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"], [180, "plot"]], "Clustering": [[36, "clustering"], [163, "clustering"], [395, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Generate sample data": [[38, "generate-sample-data"], [62, "generate-sample-data"], [77, "generate-sample-data"], [95, "generate-sample-data"], [96, "generate-sample-data"], [141, "generate-sample-data"], [231, "generate-sample-data"], [269, "generate-sample-data"], [288, "generate-sample-data"], [335, "generate-sample-data"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Plot result": [[38, "plot-result"], [62, "plot-result"], [66, "plot-result"], [66, "id2"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[47, "generate-data"], [66, "generate-data"], [79, "generate-data"], [190, "generate-data"], [295, "generate-data"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [66, "compute-clustering"], [66, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Data generation": [[49, "data-generation"], [56, "data-generation"], [124, "data-generation"], [144, "data-generation"], [154, "data-generation"], [246, "data-generation"], [316, "data-generation"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Plot the results": [[50, "plot-the-results"], [81, "plot-the-results"], [131, "plot-the-results"], [161, "plot-the-results"]], "Feature agglomeration": [[51, "feature-agglomeration"], [981, "feature-agglomeration"], [998, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "Inductive Clustering": [[55, "inductive-clustering"]], "Demonstration of k-means assumptions": [[56, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[56, "fit-models-and-plot-results"]], "Possible solutions": [[56, "possible-solutions"]], "Final remarks": [[56, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[57, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[57, "load-the-dataset"]], "Define our evaluation benchmark": [[57, "define-our-evaluation-benchmark"]], "Run the benchmark": [[57, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[57, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[58, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[59, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[60, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[61, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[62, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[62, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[63, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[63, "generate-the-data"], [65, "generate-the-data"], [81, "generate-the-data"]], "Compute clustering with KMeans": [[63, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[63, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[63, "establishing-parity-between-clusters"]], "Plotting the results": [[63, "plotting-the-results"], [108, "plotting-the-results"], [110, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[64, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[65, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[65, "plotting-four-circles"]], "Plotting two circles": [[65, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[66, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[66, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[68, "pipelines-and-composite-estimators"], [163, "pipelines-and-composite-estimators"], [396, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[69, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[69, "newsgroups-dataset"]], "Creating transformers": [[69, "creating-transformers"]], "Classification pipeline": [[69, "classification-pipeline"]], "Column Transformer with Mixed Types": [[70, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[71, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[71, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[71, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[72, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[73, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[74, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[74, "synthetic-example"]], "Real-world data set": [[74, "real-world-data-set"]], "Covariance estimation": [[76, "covariance-estimation"], [163, "covariance-estimation"], [397, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[77, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[77, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[77, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[78, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[79, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[79, null], [168, null], [261, null], [262, null], [364, null], [365, null], [392, null], [392, null], [392, null], [393, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [397, null], [397, null], [397, null], [397, null], [399, null], [399, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [403, null], [404, null], [953, null], [953, null], [956, null], [957, null], [958, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [961, null], [961, null], [961, null], [961, null], [961, null], [961, null], [961, null], [961, null], [962, null], [962, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [965, null], [965, null], [965, null], [966, null], [966, null], [966, null], [967, null], [967, null], [967, null], [968, null], [969, null], [970, null], [970, null], [970, null], [970, null], [972, null], [974, null], [974, null], [976, null], [976, null], [976, null], [978, null], [978, null], [979, null], [980, null], [980, null]], "Comparison of results": [[79, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[80, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[80, "minimum-covariance-determinant-estimator"]], "Evaluation": [[80, "evaluation"], [295, "evaluation"]], "Sparse inverse covariance estimation": [[81, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[81, "estimate-the-covariance"]], "Cross decomposition": [[83, "cross-decomposition"], [163, "cross-decomposition"], [398, "cross-decomposition"]], "Compare cross decomposition methods": [[84, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[84, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[84, "canonical-symmetric-pls"]], "Transform data": [[84, "transform-data"]], "Scatter plot of scores": [[84, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[84, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[84, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[84, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[85, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[85, "the-data"]], "Projection on one component and predictive power": [[85, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[87, "dataset-examples"], [163, "dataset-examples"]], "The Digit Dataset": [[88, "the-digit-dataset"]], "The Iris Dataset": [[89, "the-iris-dataset"]], "Plot randomly generated classification dataset": [[90, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[91, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[93, "decomposition"], [94, "decomposition"], [163, "decomposition"]], "Faces dataset decompositions": [[94, "faces-dataset-decompositions"]], "Dataset preparation": [[94, "dataset-preparation"], [217, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[94, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[94, "non-negative-components-nmf"]], "Independent components - FastICA": [[94, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[94, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[94, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[94, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[94, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[94, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[94, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[94, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[94, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[95, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[95, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[96, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[97, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[97, "generate-distorted-image"]], "Display the distorted image": [[97, "display-the-distorted-image"]], "Extract reference patches": [[97, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[97, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[97, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[98, "incremental-pca"], [400, "incremental-pca"]], "Kernel PCA": [[99, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[99, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[99, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[100, "principal-components-analysis-pca"]], "Create the data": [[100, "create-the-data"], [102, "create-the-data"]], "Plot the figures": [[100, "plot-the-figures"]], "PCA example with Iris Data-set": [[101, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[102, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[102, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[103, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[104, "sparse-coding-with-a-precomputed-dictionary"], [400, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[105, "factor-analysis-with-rotation-to-visualize-patterns"]], "Ensemble methods": [[107, "ensemble-methods"], [163, "ensemble-methods"], [402, "ensemble-methods"]], "Discrete versus Real AdaBoost": [[108, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[108, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[108, "adaboost-with-discrete-samme-and-real-samme-r"]], "Multi-class AdaBoosted Decision Trees": [[109, "multi-class-adaboosted-decision-trees"]], "Decision Tree Regression with AdaBoost": [[110, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[110, "preparing-the-data"], [172, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[110, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[111, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[112, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[113, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[114, "feature-transformations-with-ensembles-of-trees"]], "Feature importances with a forest of trees": [[115, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[115, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[115, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[115, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[116, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[116, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[116, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[117, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[118, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[118, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[118, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[118, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[118, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[118, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[118, "model-comparison"]], "Limiting the number of splits": [[118, "limiting-the-number-of-splits"]], "Early stopping of Gradient Boosting": [[119, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[119, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[119, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[120, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[121, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[121, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[121, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[121, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[121, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[122, "gradient-boosting-regression"]], "Data preprocessing": [[122, "data-preprocessing"]], "Fit regression model": [[122, "fit-regression-model"], [288, "fit-regression-model"], [335, "fit-regression-model"]], "Plot training deviance": [[122, "plot-training-deviance"]], "Plot feature importance": [[122, "plot-feature-importance"]], "Gradient Boosting regularization": [[123, "gradient-boosting-regularization"]], "IsolationForest example": [[124, "isolationforest-example"]], "Training of the model": [[124, "training-of-the-model"]], "Plot discrete decision boundary": [[124, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[124, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[125, "monotonic-constraints"], [402, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[125, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[126, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[127, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[128, "combine-predictors-using-stacking"]], "Download the dataset": [[128, "download-the-dataset"]], "Make pipeline to preprocess the data": [[128, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[128, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[128, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[129, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[130, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[131, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[131, "training-classifiers"]], "Making predictions": [[131, "making-predictions"]], "Tutorial exercises": [[133, "tutorial-exercises"], [163, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[134, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[134, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[134, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[134, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[135, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[136, "digits-classification-exercise"]], "SVM Exercise": [[137, "svm-exercise"]], "Feature Selection": [[139, "feature-selection"], [163, "feature-selection"]], "Comparison of F-test and mutual information": [[140, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[141, "univariate-feature-selection"]], "Univariate feature selection": [[141, "id1"], [404, "univariate-feature-selection"]], "Compare with SVMs": [[141, "compare-with-svms"]], "Pipeline ANOVA SVM": [[142, "pipeline-anova-svm"]], "Recursive feature elimination": [[143, "recursive-feature-elimination"], [404, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[144, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[144, "model-training-and-selection"], [246, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[144, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[145, "model-based-and-sequential-feature-selection"]], "Loading the data": [[145, "loading-the-data"]], "Feature importance from coefficients": [[145, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[145, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[145, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[145, "discussion"]], "Gaussian Process for Machine Learning": [[147, "gaussian-process-for-machine-learning"], [163, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[148, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[148, "generating-a-dataset"]], "Limitations of a simple linear model": [[148, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[148, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[148, "kernel-ridge"]], "Gaussian process regression": [[148, "gaussian-process-regression"]], "Final conclusion": [[148, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[149, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[150, "gaussian-process-classification-gpc-on-iris-dataset"], [405, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[151, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[152, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[153, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[153, "build-the-dataset"]], "Design the proper kernel": [[153, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[153, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[153, "interpretation-of-kernel-hyperparameters"]], "Gaussian process regression (GPR) with noise-level estimation": [[154, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[154, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[155, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[155, "dataset-generation"], [198, "dataset-generation"]], "Example with noise-free target": [[155, "example-with-noise-free-target"]], "Example with noisy targets": [[155, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[156, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[156, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[156, "regression"], [402, "regression"], [402, "id17"], [960, "regression"], [968, "regression"], [978, "regression"], [979, "regression"], [980, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[157, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[157, "helper-function"]], "Dataset and Gaussian process generation": [[157, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[157, "kernel-cookbook"]], "Radial Basis Function kernel": [[157, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[157, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[157, "exp-sine-squared-kernel"], [405, "exp-sine-squared-kernel"]], "Dot-product kernel": [[157, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[157, "matern-kernel"], [405, "matern-kernel"]], "Missing Value Imputation": [[159, "missing-value-imputation"], [163, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[160, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[161, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[161, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[161, "impute-the-missing-data-and-score"]], "Missing information": [[161, "missing-information"]], "Estimate the score": [[161, "estimate-the-score"]], "Replace missing values by 0": [[161, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[161, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[161, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[161, "iterative-imputation-of-the-missing-values"]], "Examples": [[163, "examples"], [358, "examples"], [365, null], [365, "examples"], [399, null], [399, null], [404, null], [404, null], [977, null], [977, null], [981, null], [981, null], [981, null], [1005, "examples"]], "Release Highlights": [[163, "release-highlights"], [307, "release-highlights"]], "Decision Trees": [[163, "decision-trees"], [345, "decision-trees"], [980, "decision-trees"]], "Gaussian Mixture Models": [[163, "gaussian-mixture-models"], [240, "gaussian-mixture-models"]], "Generalized Linear Models": [[163, "generalized-linear-models"], [174, "generalized-linear-models"], [960, "generalized-linear-models"]], "Inspection": [[163, "inspection"], [164, "inspection"], [385, "inspection"]], "Kernel Approximation": [[163, "kernel-approximation"], [171, "kernel-approximation"], [956, "kernel-approximation"]], "Manifold learning": [[163, "manifold-learning"], [216, "manifold-learning"], [961, "manifold-learning"]], "Miscellaneous": [[163, "miscellaneous"], [224, "miscellaneous"], [394, "miscellaneous"], [1013, "miscellaneous"], [1013, "id40"], [1014, "miscellaneous"], [1015, "miscellaneous"], [1016, "miscellaneous"], [1016, "id13"], [1017, "miscellaneous"], [1018, "miscellaneous"]], "Model Selection": [[163, "model-selection"], [249, "model-selection"]], "Multioutput methods": [[163, "multioutput-methods"], [273, "multioutput-methods"]], "Nearest Neighbors": [[163, "nearest-neighbors"], [277, "nearest-neighbors"], [967, "nearest-neighbors"]], "Neural Networks": [[163, "neural-networks"], [291, "neural-networks"]], "Preprocessing": [[163, "preprocessing"], [297, "preprocessing"]], "Semi Supervised Classification": [[163, "semi-supervised-classification"], [315, "semi-supervised-classification"]], "Support Vector Machines": [[163, "support-vector-machines"], [323, "support-vector-machines"], [979, "support-vector-machines"]], "Working with text documents": [[163, "working-with-text-documents"], [340, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[165, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[165, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[165, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[165, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[165, "income-prediction-with-partial-observations"]], "Lessons learned": [[165, "lessons-learned"], [166, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[166, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[166, "the-dataset-wages"]], "The machine-learning pipeline": [[166, "the-machine-learning-pipeline"]], "Processing the dataset": [[166, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[166, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[166, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[166, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[166, "preprocessing-numerical-variables"]], "Linear models with regularization": [[166, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[166, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[166, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[167, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[167, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[167, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[167, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[167, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[167, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[167, "multi-layer-perceptron"]], "Gradient boosting": [[167, "gradient-boosting"]], "Analysis of the plots": [[167, "analysis-of-the-plots"]], "ICE vs. PDP": [[167, "ice-vs-pdp"]], "2D interaction plots": [[167, "d-interaction-plots"]], "3D representation": [[167, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[168, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[168, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[168, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[168, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[169, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[169, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[169, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[172, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[172, "partitioning-the-data"]], "Feature normalization": [[172, "feature-normalization"]], "Establishing a baseline model": [[172, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[172, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[172, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[172, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[175, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[175, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[175, "fit-the-regressors"], [175, "id2"]], "Plot the true and estimated coefficients": [[175, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[175, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[175, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[175, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[176, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[176, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[176, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[176, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[177, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[178, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[179, "logistic-regression-3-class-classifier"]], "Lasso and Elastic Net for Sparse Signals": [[180, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[180, "data-generation"]], "Lasso": [[180, "lasso"], [960, "lasso"]], "ElasticNet": [[180, "elasticnet"]], "Lasso and Elastic Net": [[181, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[182, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[182, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[182, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[183, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[184, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[185, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[185, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[185, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[185, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[185, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[185, "summary-of-cross-validation-approach"]], "Logistic function": [[186, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[187, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[188, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[189, "regularization-path-of-l1-logistic-regression"]], "Load data": [[189, "load-data"]], "Compute regularization path": [[189, "compute-regularization-path"]], "Plot regularization path": [[189, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[190, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[190, "fit-models"]], "Plot support and time series": [[190, "plot-support-and-time-series"]], "Non-negative least squares": [[191, "non-negative-least-squares"]], "Linear Regression Example": [[192, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[193, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[194, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[195, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[196, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[196, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[196, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[196, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[196, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[196, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[196, "evaluation-of-the-ranking-power"]], "Main takeaways": [[196, "main-takeaways"]], "Polynomial and Spline interpolation": [[197, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[197, "periodic-splines"]], "Quantile regression": [[198, "quantile-regression"]], "Fitting a QuantileRegressor": [[198, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[198, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[199, "robust-linear-model-estimation-using-ransac"]], "Plot Ridge coefficients as a function of the L2 regularization": [[200, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Plot Ridge coefficients as a function of the regularization": [[201, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[201, "compute-paths"]], "Display results": [[201, "display-results"]], "Robust linear estimator fitting": [[202, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[203, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[204, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[205, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[206, "sgd-convex-loss-functions"]], "SGD: Penalties": [[207, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[208, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[209, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[210, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[211, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[212, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[213, "theil-sen-regression"]], "Outliers only in the y direction": [[213, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[213, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[214, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[214, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[214, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[214, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[214, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[217, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[217, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[217, "locally-linear-embeddings"]], "Isomap Embedding": [[217, "isomap-embedding"]], "Multidimensional scaling": [[217, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[217, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[217, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[218, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[218, "load-digits-dataset"]], "Helper function to plot embedding": [[218, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[218, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[219, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[220, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[221, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[221, "swiss-roll"]], "Swiss-Hole": [[221, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[222, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[225, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[226, "visualizations-with-display-objects"]], "Load Data and train model": [[226, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[226, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[226, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[226, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[226, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[227, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[227, "compact-text-representation"]], "Rich HTML representation": [[227, "rich-html-representation"]], "Isotonic Regression": [[228, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[229, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[229, "theoretical-bounds"]], "Empirical validation": [[229, "empirical-validation"]], "Remarks": [[229, "remarks"]], "Explicit feature map approximation for RBF kernels": [[230, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[230, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[230, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[230, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[231, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[231, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[231, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[231, "look-at-the-results"], [335, "look-at-the-results"]], "Visualize training and prediction times": [[231, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[231, "visualize-the-learning-curves"]], "Multilabel classification": [[232, "multilabel-classification"], [965, "multilabel-classification"]], "Face completion with a multi-output estimators": [[233, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[234, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[234, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[234, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[234, "plot-and-interpret-results"]], "Advanced Plotting With Partial Dependence": [[235, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[235, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[235, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[235, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[235, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[236, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[236, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[236, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[236, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[236, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[236, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[237, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[237, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[237, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[237, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[238, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[241, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[242, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[243, "gmm-covariances"]], "GMM Initialization Methods": [[244, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[245, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[246, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[246, "plot-the-bic-scores"]], "Plot the best model": [[246, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[247, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[250, "confusion-matrix"], [964, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[251, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[251, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[251, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[251, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[252, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[253, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[253, "generate-synthetic-data"]], "Define the classifiers": [[253, "define-the-classifiers"]], "Plot ROC and DET curves": [[253, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[254, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[254, "the-dataset"]], "Define our grid-search strategy": [[254, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[254, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[255, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[256, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[256, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[256, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[256, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[256, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[256, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[256, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[257, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[257, "data-loading"]], "Pipeline with hyperparameter tuning": [[257, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[258, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[258, "learning-curve"]], "Complexity analysis": [[258, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[259, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[259, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[259, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[259, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[260, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[260, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[260, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[261, "nested-versus-non-nested-cross-validation"]], "See Also:": [[261, null], [396, null]], "Test with permutations the significance of a classification score": [[262, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[262, "permutation-test-score"], [399, "permutation-test-score"]], "Original data": [[262, "original-data"], [298, "original-data"]], "Random data": [[262, "random-data"]], "Precision-Recall": [[263, "precision-recall"]], "In binary classification settings": [[263, "in-binary-classification-settings"]], "Dataset and model": [[263, "dataset-and-model"]], "Plot the Precision-Recall curve": [[263, "plot-the-precision-recall-curve"]], "In multi-label settings": [[263, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[263, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[263, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[263, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[263, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[264, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[265, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[265, "load-and-prepare-data"], [266, "load-and-prepare-data"], [303, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[265, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[265, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[265, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[265, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[265, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[265, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[265, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[265, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[266, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[266, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[267, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[268, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[268, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[269, "train-error-vs-test-error"]], "Compute train and test errors": [[269, "compute-train-and-test-errors"]], "Plot results functions": [[269, "plot-results-functions"]], "Underfitting vs. Overfitting": [[270, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[271, "plotting-validation-curves"]], "Classifier Chain": [[274, "classifier-chain"]], "Approximate nearest neighbors in TSNE": [[276, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[278, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[279, "nearest-neighbors-classification"], [967, "nearest-neighbors-classification"]], "Kernel Density Estimation": [[280, "kernel-density-estimation"], [401, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[281, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[282, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[283, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[283, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[283, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[284, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[285, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[286, "neighborhood-components-analysis-illustration"]], "Original points": [[286, "original-points"]], "Learning an embedding": [[286, "learning-an-embedding"]], "Nearest Centroid Classification": [[287, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[288, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[289, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[292, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[293, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[294, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[295, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[295, "models-definition"]], "Training": [[295, "training"], [967, "training"]], "Plotting": [[295, "plotting"], [394, "plotting"], [394, "id7"], [394, "id9"]], "Compare the effect of different scalers on data with outliers": [[298, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[298, "standardscaler"]], "MinMaxScaler": [[298, "minmaxscaler"]], "MaxAbsScaler": [[298, "maxabsscaler"]], "RobustScaler": [[298, "robustscaler"]], "PowerTransformer": [[298, "powertransformer"]], "QuantileTransformer (uniform output)": [[298, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[298, "quantiletransformer-gaussian-output"]], "Normalizer": [[298, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[299, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[300, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[301, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[302, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[303, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[303, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[303, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[303, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[304, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[304, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[304, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[304, "native-categorical-feature-support"]], "Plotting the Results": [[304, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross Validation": [[305, "target-encoder-s-internal-cross-validation"]], "Create Synthetic Dataset": [[305, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[305, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[308, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[308, "new-plotting-api"]], "Stacking Classifier and Regressor": [[308, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[308, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[308, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[308, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[308, "knn-based-imputation"]], "Tree pruning": [[308, "tree-pruning"]], "Retrieve dataframes from OpenML": [[308, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[308, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[308, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[309, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[309, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[309, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[309, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[309, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[309, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[310, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[310, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[310, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[310, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[310, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[310, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[310, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[310, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[310, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[310, "new-documentation-improvements"], [311, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[311, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[311, "keyword-and-positional-arguments"]], "Spline Transformers": [[311, "spline-transformers"]], "Quantile Regressor": [[311, "quantile-regressor"]], "Feature Names Support": [[311, "feature-names-support"]], "A more flexible plotting API": [[311, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[311, "online-one-class-svm"], [978, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[311, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[312, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[312, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[312, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[312, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[312, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[312, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[312, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[313, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[313, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[313, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[313, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[313, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[313, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[313, "improved-efficiency-of-many-estimators"]], "Label Propagation digits: Demonstrating performance": [[316, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[316, "semi-supervised-learning"], [977, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[316, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[317, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[318, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[319, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[320, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[321, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[324, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[325, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[326, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[327, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[328, "rbf-svm-parameters"]], "Load and prepare data set": [[328, "load-and-prepare-data-set"]], "Train classifiers": [[328, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[329, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[330, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[331, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[331, "load-some-data-to-play-with"]], "Create the pipeline": [[331, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[331, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "SVM-Kernels": [[332, "svm-kernels"]], "SVM Margins Example": [[333, "svm-margins-example"]], "Non-linear SVM": [[334, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[335, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[336, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[336, "l1-penalty-case"]], "L2-penalty case": [[336, "l2-penalty-case"]], "SVM Tie Breaking Example": [[337, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[338, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[341, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[341, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[341, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[341, "model-without-metadata-stripping"]], "Model with metadata stripping": [[341, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[341, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[341, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[342, "clustering-text-documents-using-k-means"]], "Loading text data": [[342, "loading-text-data"]], "Quantifying the quality of clustering results": [[342, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[342, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[342, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[342, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[342, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[342, "top-terms-per-cluster"]], "HashingVectorizer": [[342, "hashingvectorizer"]], "Clustering evaluation summary": [[342, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[343, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[343, "load-data"]], "Define preprocessing functions": [[343, "define-preprocessing-functions"]], "DictVectorizer": [[343, "dictvectorizer"]], "FeatureHasher": [[343, "featurehasher"]], "Comparison with special purpose text vectorizers": [[343, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[343, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[346, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[346, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[346, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[347, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[348, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[349, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[350, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[350, "train-tree-classifier"]], "Tree structure": [[350, "tree-structure"]], "Decision path": [[350, "decision-path"]], "Common pitfalls and recommended practices": [[352, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[352, "inconsistent-preprocessing"]], "Data leakage": [[352, "data-leakage"]], "Data leakage during pre-processing": [[352, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[352, "how-to-avoid-data-leakage"]], "Controlling randomness": [[352, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[352, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[352, "estimators"], [352, "id2"], [372, "estimators"], [394, "estimators"]], "CV splitters": [[352, "cv-splitters"], [352, "id3"]], "Common pitfalls and subtleties": [[352, "common-pitfalls-and-subtleties"]], "General recommendations": [[352, "general-recommendations"]], "Getting reproducible results across multiple executions": [[352, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[352, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[355, "computing-with-scikit-learn"]], "Computational Performance": [[356, "computational-performance"]], "Bulk versus Atomic mode": [[356, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[356, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[356, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[356, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[356, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[356, "feature-extraction-latency"]], "Prediction Throughput": [[356, "prediction-throughput"]], "Tips and Tricks": [[356, "tips-and-tricks"]], "Linear algebra libraries": [[356, "linear-algebra-libraries"]], "Limiting Working Memory": [[356, "limiting-working-memory"]], "Model Compression": [[356, "model-compression"]], "Model Reshaping": [[356, "model-reshaping"]], "Links": [[356, "links"]], "Parallelism, resource management, and configuration": [[357, "parallelism-resource-management-and-configuration"]], "Parallelism": [[357, "parallelism"], [953, "parallelism"]], "Higher-level parallelism with joblib": [[357, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[357, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[357, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[357, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[357, "configuration-switches"]], "Python API": [[357, "python-api"]], "Environment variables": [[357, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[357, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[357, "sklearn-working-memory"]], "SKLEARN_SEED": [[357, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[357, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[357, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[357, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[357, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[357, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[357, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[358, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[358, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[358, "streaming-instances"]], "Extracting features": [[358, "extracting-features"]], "Incremental learning": [[358, "incremental-learning"]], "Notes": [[358, "notes"], [396, "notes"], [960, "notes"]], "Table Of Contents": [[359, "table-of-contents"]], "Dataset transformations": [[362, "dataset-transformations"]], "Dataset loading utilities": [[363, "dataset-loading-utilities"], [375, "dataset-loading-utilities"]], "Loading other datasets": [[364, "loading-other-datasets"]], "Sample images": [[364, "sample-images"]], "Examples:": [[364, null], [385, null], [392, null], [392, null], [393, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [395, null], [396, null], [396, null], [396, null], [396, null], [396, null], [397, null], [397, null], [397, null], [397, null], [397, null], [397, null], [398, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [400, null], [401, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [402, null], [404, null], [404, null], [404, null], [404, null], [953, null], [953, null], [953, null], [956, null], [956, null], [958, null], [958, null], [958, null], [959, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [961, null], [963, null], [963, null], [963, null], [963, null], [964, null], [964, null], [964, null], [964, null], [964, null], [965, null], [967, null], [967, null], [967, null], [967, null], [967, null], [968, null], [968, null], [969, null], [970, null], [970, null], [970, null], [970, null], [970, null], [970, null], [971, null], [972, null], [974, null], [974, null], [974, null], [978, null], [978, null], [979, null], [979, null], [979, null], [979, null], [979, null], [979, null], [980, null], [980, null], [980, null], [980, null], [1002, null]], "Datasets in svmlight / libsvm format": [[364, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[364, null]], "Downloading datasets from the openml.org repository": [[364, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[364, "dataset-versions"]], "ARFF parser": [[364, "arff-parser"]], "Loading from external datasets": [[364, "loading-from-external-datasets"], [990, null]], "Real world datasets": [[365, "real-world-datasets"]], "The Olivetti faces dataset": [[365, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[365, "the-20-newsgroups-text-dataset"]], "Usage": [[365, "usage"], [365, "id2"], [393, "usage"], [396, "usage"], [396, "id1"], [402, "usage"], [402, "id26"], [402, "id31"], [402, "id32"], [402, "id34"], [960, "usage"]], "Converting text to vectors": [[365, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[365, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[365, null]], "Recommendation": [[365, null]], "The Labeled Faces in the Wild face recognition dataset": [[365, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[365, "forest-covertypes"]], "RCV1 dataset": [[365, "rcv1-dataset"]], "Kddcup 99 dataset": [[365, "kddcup-99-dataset"]], "California Housing dataset": [[365, "california-housing-dataset"]], "Generated datasets": [[366, "generated-datasets"]], "Generators for classification and clustering": [[366, "generators-for-classification-and-clustering"]], "Single label": [[366, "single-label"]], "Multilabel": [[366, "multilabel"]], "Generators for regression": [[366, "generators-for-regression"]], "Generators for manifold learning": [[366, "generators-for-manifold-learning"]], "Generators for decomposition": [[366, "generators-for-decomposition"]], "Toy datasets": [[367, "toy-datasets"]], "Iris plants dataset": [[367, "iris-plants-dataset"]], "Diabetes dataset": [[367, "diabetes-dataset"], [997, null]], "Optical recognition of handwritten digits dataset": [[367, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[367, "linnerrud-dataset"]], "Wine recognition dataset": [[367, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[367, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[368, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[368, "installing-nightly-builds"]], "Building from source": [[368, "building-from-source"]], "Dependencies": [[368, "dependencies"]], "Runtime dependencies": [[368, "runtime-dependencies"]], "Build dependencies": [[368, "build-dependencies"]], "Test dependencies": [[368, "test-dependencies"]], "Building a specific version from a tag": [[368, "building-a-specific-version-from-a-tag"]], "Editable mode": [[368, "editable-mode"]], "Platform-specific instructions": [[368, "platform-specific-instructions"]], "Windows": [[368, "windows"]], "macOS": [[368, "macos"]], "macOS compilers from conda-forge": [[368, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[368, "macos-compilers-from-homebrew"]], "Linux": [[368, "linux"]], "Linux compilers from the system": [[368, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[368, "linux-compilers-from-conda-forge"]], "FreeBSD": [[368, "freebsd"]], "Alternative compilers": [[368, "alternative-compilers"]], "Parallel builds": [[368, "parallel-builds"]], "Bug triaging and issue curation": [[369, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[369, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[369, null]], "Working on PRs to help review": [[369, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[369, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[369, null]], "A typical workflow for triaging issues": [[369, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[370, "contributing"], [381, "contributing"]], "Our community, our values": [[370, null]], "Ways to contribute": [[370, "ways-to-contribute"]], "Contributing to related projects": [[370, null]], "Submitting a bug report or a feature request": [[370, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[370, "how-to-make-a-good-bug-report"]], "Contributing code": [[370, "contributing-code"]], "Video resources": [[370, "video-resources"]], "How to contribute": [[370, "how-to-contribute"]], "Learning git:": [[370, null]], "Pull request checklist": [[370, "pull-request-checklist"]], "Continuous Integration (CI)": [[370, "continuous-integration-ci"]], "Stalled pull requests": [[370, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[370, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[370, "issues-for-new-contributors"]], "good first issue tag": [[370, null]], "Easy tag": [[370, null]], "help wanted tag": [[370, null]], "Documentation": [[370, "documentation"], [1005, "documentation"]], "Building the documentation": [[370, "building-the-documentation"]], "Guidelines for writing documentation": [[370, "guidelines-for-writing-documentation"]], "Cross-referencing": [[370, "cross-referencing"]], "Generated documentation on GitHub Actions": [[370, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[370, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[370, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[370, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[370, "monitoring-performance"]], "Issue Tracker Tags": [[370, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[370, "maintaining-backwards-compatibility"]], "Deprecation": [[370, "deprecation"]], "Change the default value of a parameter": [[370, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[370, "code-review-guidelines"]], "Communication Guidelines": [[370, "communication-guidelines"]], "Reading the existing code base": [[370, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[371, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[371, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[371, "tips-to-ease-development"]], "Tips for performance": [[371, "tips-for-performance"]], "Using OpenMP": [[371, "using-openmp"]], "Developing scikit-learn estimators": [[372, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[372, "apis-of-scikit-learn-objects"]], "Different objects": [[372, "different-objects"]], "Instantiation": [[372, "instantiation"]], "Fitting": [[372, "fitting"]], "Estimated Attributes": [[372, "estimated-attributes"]], "Optional Arguments": [[372, "optional-arguments"]], "Universal attributes": [[372, "universal-attributes"]], "Rolling your own estimator": [[372, "rolling-your-own-estimator"]], "Project template:": [[372, null]], "BaseEstimator and mixins:": [[372, null]], "get_params and set_params": [[372, "get-params-and-set-params"]], "Parameters and init": [[372, "parameters-and-init"]], "Cloning": [[372, "cloning"]], "Pipeline compatibility": [[372, "pipeline-compatibility"]], "Estimator types": [[372, "estimator-types"]], "Specific models": [[372, "specific-models"]], "Estimator Tags": [[372, "estimator-tags"]], "Developer API for set_output": [[372, "developer-api-for-set-output"]], "Coding guidelines": [[372, "coding-guidelines"]], "Input validation": [[372, "input-validation"]], "Random Numbers": [[372, "random-numbers"]], "Numerical assertions in tests": [[372, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[373, "developer-s-guide"]], "Maintainer / core-developer information": [[374, "maintainer-core-developer-information"]], "Releasing": [[374, "releasing"]], "Before a release": [[374, "before-a-release"]], "Preparing a release PR": [[374, "preparing-a-release-pr"]], "Major version release": [[374, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[374, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[374, "making-a-release"]], "Release checklist": [[374, "release-checklist"]], "Merging Pull Requests": [[374, "merging-pull-requests"]], "The scikit-learn.org web site": [[374, "the-scikit-learn-org-web-site"]], "Experimental features": [[374, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[375, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[375, "good-practices"]], "Provide a failing code example with minimal comments": [[375, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[375, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[375, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[375, "use-markdown-formatting"]], "Synthetic dataset": [[375, "synthetic-dataset"]], "NumPy": [[375, "numpy"]], "Pandas": [[375, "pandas"]], "make_regression": [[375, "make-regression"]], "make_classification": [[375, "make-classification"]], "make_blobs": [[375, "make-blobs"]], "How to optimize for speed": [[376, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[376, "python-cython-or-c-c"]], "Profiling Python code": [[376, "profiling-python-code"]], "Memory usage profiling": [[376, "memory-usage-profiling"]], "Using Cython": [[376, "using-cython"]], "Profiling compiled extensions": [[376, "profiling-compiled-extensions"]], "Using yep and gperftools": [[376, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[376, "using-a-debugger-gdb"]], "Using gprof": [[376, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[376, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[376, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[376, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[376, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[377, "developing-with-the-plotting-api"]], "Plotting API Overview": [[377, "plotting-api-overview"]], "Plotting with Multiple Axes": [[377, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[378, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[378, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[378, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[378, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[378, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[378, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[378, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[378, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[378, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[379, "utilities-for-developers"]], "Validation Tools": [[379, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[379, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[379, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[379, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[379, "graph-routines"]], "Testing Functions": [[379, "testing-functions"]], "Multiclass and multilabel utility function": [[379, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[379, "helper-functions"]], "Hash Functions": [[379, "hash-functions"]], "Warnings and Exceptions": [[379, "warnings-and-exceptions"]], "Dispatching": [[380, "dispatching"]], "Frequently Asked Questions": [[381, "frequently-asked-questions"]], "Table of Contents": [[381, "table-of-contents"]], "About the project": [[381, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[381, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[381, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[381, "why-scikit"]], "Do you support PyPy?": [[381, "do-you-support-pypy"]], "Implementation decisions": [[381, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[381, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[381, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[381, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[381, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[381, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[381, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[381, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[381, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[381, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[381, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[381, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[381, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[381, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[381, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[381, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[381, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[381, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[381, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[381, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[381, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[381, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[382, "getting-started"]], "Fitting and predicting: estimator basics": [[382, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[382, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[382, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[382, "model-evaluation"]], "Automatic parameter searches": [[382, "automatic-parameter-searches"]], "Next steps": [[382, "next-steps"]], "Glossary of Common Terms and API Elements": [[383, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[383, "general-concepts"]], "Class APIs and Estimator Types": [[383, "class-apis-and-estimator-types"]], "Target Types": [[383, "target-types"]], "Methods": [[383, "methods"]], "Parameters": [[383, "parameters"], [402, "parameters"]], "Attributes": [[383, "attributes"]], "Data and sample properties": [[383, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[384, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[384, "roles-and-responsibilities"]], "Contributors": [[384, "contributors"]], "Core Contributors": [[384, "core-contributors"]], "Communication team": [[384, "communication-team"]], "Maintainers": [[384, "maintainers"]], "Technical Committee": [[384, "technical-committee"]], "Decision Making Process": [[384, "decision-making-process"]], "Governance Model Changes": [[384, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[384, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[386, "installing-scikit-learn"]], "Installing the latest release": [[386, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[386, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[386, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[386, "alpine-linux"]], "Arch Linux": [[386, "arch-linux"]], "Debian/Ubuntu": [[386, "debian-ubuntu"]], "Fedora": [[386, "fedora"]], "NetBSD": [[386, "netbsd"]], "MacPorts for Mac OSX": [[386, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[386, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[386, "intel-conda-channel"]], "WinPython for Windows": [[386, "winpython-for-windows"]], "Troubleshooting": [[386, "troubleshooting"]], "Error caused by file path length limit on Windows": [[386, "error-caused-by-file-path-length-limit-on-windows"]], "Model persistence": [[389, "model-persistence"]], "Python specific serialization": [[389, "python-specific-serialization"]], "Security & maintainability limitations": [[389, "security-maintainability-limitations"]], "A more secure format: skops": [[389, "a-more-secure-format-skops"]], "Interoperable formats": [[389, "interoperable-formats"]], "Model selection and evaluation": [[390, "model-selection-and-evaluation"]], "Array API support (experimental)": [[391, "array-api-support-experimental"]], "Example usage": [[391, "example-usage"]], "PyTorch Support": [[391, "pytorch-support"]], "Estimators with support for Array API-compatible inputs": [[391, "estimators-with-support-for-array-api-compatible-inputs"]], "Spectral Co-Clustering": [[392, "spectral-co-clustering"]], "Mathematical formulation": [[392, "mathematical-formulation"], [392, "id3"], [395, "mathematical-formulation"], [395, "id12"], [395, "id19"], [395, "id29"], [395, "id33"], [402, "mathematical-formulation"], [960, "mathematical-formulation"], [967, "mathematical-formulation"], [968, "mathematical-formulation"], [978, "mathematical-formulation"], [979, "mathematical-formulation"], [980, "mathematical-formulation"]], "Spectral Biclustering": [[392, "spectral-biclustering"]], "Biclustering evaluation": [[392, "biclustering-evaluation"]], "Probability calibration": [[393, "probability-calibration"]], "Calibrating a classifier": [[393, "calibrating-a-classifier"]], "Sigmoid": [[393, "sigmoid"]], "Isotonic": [[393, "isotonic"]], "Multiclass support": [[393, "multiclass-support"]], "API Reference": [[394, "api-reference"]], "sklearn.base: Base classes and utility functions": [[394, "module-sklearn.base"]], "Base classes": [[394, "base-classes"]], "Functions": [[394, "functions"], [394, "id1"]], "sklearn.calibration: Probability Calibration": [[394, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[394, "module-sklearn.cluster"]], "Classes": [[394, "classes"]], "sklearn.compose: Composite Estimators": [[394, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[394, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[394, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[394, "module-sklearn.datasets"]], "Loaders": [[394, "loaders"]], "Samples generator": [[394, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[394, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[394, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[394, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[394, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[394, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[394, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[394, "module-sklearn.feature_extraction"]], "From images": [[394, "module-sklearn.feature_extraction.image"]], "From text": [[394, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[394, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[394, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[394, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[394, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[394, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[394, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[394, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[394, "module-sklearn.linear_model"]], "Linear classifiers": [[394, "linear-classifiers"]], "Classical linear regressors": [[394, "classical-linear-regressors"]], "Regressors with variable selection": [[394, "regressors-with-variable-selection"]], "Bayesian regressors": [[394, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[394, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[394, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[394, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[394, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[394, "sklearn-metrics-metrics"]], "Model Selection Interface": [[394, "model-selection-interface"]], "Classification metrics": [[394, "classification-metrics"], [964, "classification-metrics"]], "Regression metrics": [[394, "regression-metrics"], [964, "regression-metrics"]], "Multilabel ranking metrics": [[394, "multilabel-ranking-metrics"], [964, "multilabel-ranking-metrics"]], "Clustering metrics": [[394, "clustering-metrics"], [964, "clustering-metrics"]], "Biclustering metrics": [[394, "biclustering-metrics"]], "Distance metrics": [[394, "distance-metrics"]], "Pairwise metrics": [[394, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[394, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[394, "module-sklearn.model_selection"]], "Splitter Classes": [[394, "splitter-classes"]], "Splitter Functions": [[394, "splitter-functions"]], "Hyper-parameter optimizers": [[394, "hyper-parameter-optimizers"]], "Model validation": [[394, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[394, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[394, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[394, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[394, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[394, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[394, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[394, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[394, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[394, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[394, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[394, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[394, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[394, "module-sklearn.utils"]], "Recently deprecated": [[394, "recently-deprecated"]], "Input data": [[395, null]], "Overview of clustering methods": [[395, "overview-of-clustering-methods"]], "K-means": [[395, "k-means"]], "Low-level parallelism": [[395, "low-level-parallelism"], [402, "low-level-parallelism"]], "Mini Batch K-Means": [[395, "mini-batch-k-means"]], "Affinity Propagation": [[395, "affinity-propagation"]], "Mean Shift": [[395, "mean-shift"]], "Spectral clustering": [[395, "spectral-clustering"]], "Different label assignment strategies": [[395, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[395, "spectral-clustering-graphs"]], "Hierarchical clustering": [[395, "hierarchical-clustering"]], "FeatureAgglomeration": [[395, null]], "Different linkage type: Ward, complete, average, and single linkage": [[395, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[395, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[395, "adding-connectivity-constraints"]], "Varying the metric": [[395, "varying-the-metric"]], "Bisecting K-Means": [[395, "bisecting-k-means"]], "DBSCAN": [[395, "dbscan"]], "Implementation": [[395, null], [967, "implementation"]], "Memory consumption for large sample sizes": [[395, null]], "OPTICS": [[395, "optics"]], "Comparison with DBSCAN": [[395, null]], "Computational Complexity": [[395, null]], "BIRCH": [[395, "birch"]], "Clustering performance evaluation": [[395, "clustering-performance-evaluation"]], "Rand index": [[395, "rand-index"]], "Advantages": [[395, "advantages"], [395, "id10"], [395, "id17"], [395, "id21"], [395, "id24"], [395, "id27"], [395, "id31"], [395, "id35"]], "Drawbacks": [[395, "drawbacks"], [395, "id11"], [395, "id18"], [395, "id22"], [395, "id25"], [395, "id28"], [395, "id32"], [395, "id36"]], "Mutual Information based scores": [[395, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[395, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[395, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[395, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[395, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[395, "davies-bouldin-index"]], "Contingency Matrix": [[395, "contingency-matrix"]], "Pair Confusion Matrix": [[395, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[396, "pipeline-chaining-estimators"]], "Construction": [[396, "construction"]], "Accessing steps": [[396, "accessing-steps"]], "Nested parameters": [[396, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[396, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[396, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[396, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[396, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[396, "visualizing-composite-estimators"]], "Empirical covariance": [[397, "empirical-covariance"]], "Shrunk Covariance": [[397, "shrunk-covariance"]], "Basic shrinkage": [[397, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[397, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[397, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[397, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[397, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[397, "minimum-covariance-determinant"]], "PLSCanonical": [[398, "plscanonical"]], "Transforming data": [[398, "transforming-data"]], "Predicting the targets Y": [[398, "predicting-the-targets-y"]], "PLSSVD": [[398, "plssvd"]], "PLSRegression": [[398, "plsregression"]], "Canonical Correlation Analysis": [[398, "canonical-correlation-analysis"]], "Reference:": [[398, null]], "Cross-validation: evaluating estimator performance": [[399, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[399, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[399, null]], "The cross_validate function and multiple metric evaluation": [[399, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[399, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[399, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[399, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[399, "k-fold"]], "Repeated K-Fold": [[399, "repeated-k-fold"]], "Leave One Out (LOO)": [[399, "leave-one-out-loo"]], "Leave P Out (LPO)": [[399, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[399, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[399, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[399, "stratified-k-fold"]], "Stratified Shuffle Split": [[399, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[399, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[399, "group-k-fold"]], "StratifiedGroupKFold": [[399, "stratifiedgroupkfold"]], "Leave One Group Out": [[399, "leave-one-group-out"]], "Leave P Groups Out": [[399, "leave-p-groups-out"]], "Group Shuffle Split": [[399, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[399, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[399, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[399, "cross-validation-of-time-series-data"]], "Time Series Split": [[399, "time-series-split"]], "A note on shuffling": [[399, "a-note-on-shuffling"]], "Cross validation and model selection": [[399, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[400, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[400, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[400, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[400, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[400, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[400, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[400, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[400, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[400, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[400, "dictionary-learning"]], "Generic dictionary learning": [[400, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[400, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[400, null]], "Factor Analysis": [[400, "factor-analysis"]], "Independent component analysis (ICA)": [[400, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[400, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[400, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[400, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[400, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[400, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[401, "density-estimation"]], "Density Estimation: Histograms": [[401, "density-estimation-histograms"]], "Bagging meta-estimator": [[402, "bagging-meta-estimator"]], "Forests of randomized trees": [[402, "forests-of-randomized-trees"]], "Random Forests": [[402, "random-forests"]], "Extremely Randomized Trees": [[402, "extremely-randomized-trees"]], "Parallelization": [[402, "parallelization"]], "Feature importance evaluation": [[402, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[402, "totally-random-trees-embedding"]], "AdaBoost": [[402, "adaboost"]], "Gradient Tree Boosting": [[402, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[402, "fitting-additional-weak-learners"]], "Controlling the tree size": [[402, "controlling-the-tree-size"]], "Loss Functions": [[402, "loss-functions"]], "Shrinkage via learning rate": [[402, "shrinkage-via-learning-rate"]], "Subsampling": [[402, "subsampling"]], "Interpretation with feature importance": [[402, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[402, "histogram-based-gradient-boosting"]], "Missing values support": [[402, "missing-values-support"]], "Sample weight support": [[402, "sample-weight-support"]], "Categorical Features Support": [[402, "categorical-features-support"]], "Interaction constraints": [[402, "interaction-constraints"]], "Why it\u2019s faster": [[402, "why-it-s-faster"]], "Voting Classifier": [[402, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[402, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[402, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[402, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[402, "voting-regressor"]], "Stacked generalization": [[402, "stacked-generalization"]], "Feature extraction": [[403, "feature-extraction"]], "Loading features from dicts": [[403, "loading-features-from-dicts"]], "Feature hashing": [[403, "feature-hashing"]], "Implementation details": [[403, "implementation-details"], [978, "implementation-details"], [979, "implementation-details"]], "Text feature extraction": [[403, "text-feature-extraction"]], "The Bag of Words representation": [[403, "the-bag-of-words-representation"]], "Sparsity": [[403, "sparsity"], [997, "sparsity"]], "Common Vectorizer usage": [[403, "common-vectorizer-usage"]], "Using stop words": [[403, "using-stop-words"]], "Tf\u2013idf term weighting": [[403, "tfidf-term-weighting"]], "Decoding text files": [[403, "decoding-text-files"]], "Applications and examples": [[403, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[403, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[403, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[403, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[403, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[403, "image-feature-extraction"]], "Patch extraction": [[403, "patch-extraction"]], "Connectivity graph of an image": [[403, "connectivity-graph-of-an-image"]], "Feature selection": [[404, "feature-selection"]], "Removing features with low variance": [[404, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[404, null]], "Feature selection using SelectFromModel": [[404, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[404, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[404, "compressive-sensing"]], "Tree-based feature selection": [[404, "tree-based-feature-selection"]], "Sequential Feature Selection": [[404, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[404, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[405, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[405, "gaussian-process-regression-gpr"]], "GPR examples": [[405, "gpr-examples"]], "GPR with noise-level estimation": [[405, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[405, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[405, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[405, "gaussian-process-classification-gpc"]], "GPC examples": [[405, "gpc-examples"]], "Probabilistic predictions with GPC": [[405, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[405, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[405, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[405, "gaussian-process-kernel-api"]], "Basic kernels": [[405, "basic-kernels"]], "Kernel operators": [[405, "kernel-operators"]], "Radial basis function (RBF) kernel": [[405, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[405, "rational-quadratic-kernel"]], "Dot-Product kernel": [[405, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[406, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[407, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[408, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[409, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[409, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[410, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[411, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[412, "sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[413, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[414, "sklearn-base-densitymixin"]], "sklearn.base.OneToOneFeatureMixin": [[415, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.RegressorMixin": [[416, "sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[417, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[417, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[418, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[419, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[420, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[421, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[421, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[422, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[422, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[423, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[424, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[424, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[425, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[425, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[426, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[426, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[427, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[427, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[428, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[428, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[429, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[429, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.KMeans": [[430, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[430, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[431, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[431, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[432, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[432, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[433, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[433, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[434, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[434, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[435, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[435, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[436, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[436, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[437, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[437, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[438, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[438, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[439, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[440, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[441, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[441, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[442, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[443, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[443, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[444, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[445, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[445, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[446, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[447, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[447, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[448, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[448, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[449, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[449, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[450, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[450, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[451, "sklearn-config-context"]], "Examples using sklearn.config_context": [[451, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[452, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[452, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[453, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[453, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[454, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[455, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[455, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[456, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[456, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[457, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[457, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[458, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[458, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[459, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[459, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[460, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[460, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[461, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[462, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[462, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[463, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[464, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[465, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[465, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[466, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[466, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[467, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[467, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[468, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[469, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[470, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[470, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[471, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[471, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[472, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[472, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[473, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[473, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[474, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[474, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[475, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[475, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[476, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[477, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[477, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[478, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[478, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[479, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[479, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[480, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[481, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[481, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[482, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[482, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[483, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[483, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[484, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[484, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[485, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[485, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[486, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[487, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[487, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[488, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[489, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[489, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[490, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[491, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[492, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[493, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[493, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[494, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[494, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[495, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[495, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[496, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[496, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[497, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[497, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[498, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[498, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[499, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[500, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[501, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[502, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[502, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[503, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[503, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[504, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[505, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[505, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[506, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[506, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[507, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[507, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[508, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[508, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[509, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[509, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[510, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[510, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[511, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[512, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[513, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[513, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[514, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[515, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[515, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[516, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[516, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[517, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[517, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[518, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[518, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[519, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[519, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[520, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[520, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[521, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[521, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[522, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[522, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[523, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[523, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[524, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[524, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[525, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[525, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[526, "sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[527, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[527, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[528, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[529, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[530, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[531, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[532, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[532, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[533, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[533, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[534, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[534, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[535, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[535, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[536, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[536, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[537, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[537, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[538, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[539, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[539, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[540, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[540, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[541, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[541, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[542, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[542, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[543, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[543, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[544, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[544, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[545, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[545, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[546, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[546, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[547, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[547, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[548, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[548, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[549, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[549, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[550, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[550, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[551, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[551, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[552, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[552, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[553, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[553, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[554, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[554, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[555, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[556, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[557, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[558, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[559, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[560, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[561, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[562, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[563, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[564, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[564, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[565, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[565, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[566, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[567, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[567, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[568, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[569, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[570, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[570, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[571, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[571, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[572, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[572, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[573, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[573, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[574, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[574, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[575, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[576, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[576, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[577, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[577, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[578, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[579, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[580, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[580, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[581, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[582, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[582, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[583, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[583, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[584, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[585, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[585, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[586, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[587, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[587, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[588, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[588, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[589, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[589, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[590, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[590, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[591, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[591, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[592, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[593, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[593, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[594, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[594, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[595, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[596, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[596, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[597, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[597, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[598, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[598, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[599, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[600, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[600, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[601, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[601, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[602, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[602, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[603, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[604, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[605, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[605, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[606, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[606, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[607, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[608, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[608, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[609, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[610, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[610, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[611, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[611, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[612, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[613, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[613, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[614, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[614, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[614, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[615, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[615, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[615, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[616, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[616, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[617, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[617, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[618, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[618, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[619, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[620, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[621, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[622, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[622, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[623, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[623, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[624, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[624, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[625, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[626, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[626, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[627, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[627, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[628, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[628, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[629, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[629, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[630, "sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[631, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[631, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[632, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[632, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[633, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[634, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[635, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[635, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[636, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[636, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[637, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[638, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[638, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[639, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[639, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[640, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[640, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[641, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[641, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[642, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[642, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[643, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[644, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[645, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[645, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[646, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[647, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[647, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[648, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[648, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[649, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[649, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[650, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[651, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[651, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[652, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[652, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[653, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[653, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[654, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[654, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[655, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[655, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[656, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[656, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[657, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[657, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[658, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[659, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[659, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[660, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[660, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[661, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[661, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[662, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[662, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[663, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[663, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[664, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[664, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[665, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[665, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[666, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[667, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[667, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[668, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[669, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[670, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[671, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[671, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[672, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[672, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[673, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[673, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[674, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[674, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[675, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[675, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[676, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[676, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[677, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[678, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[679, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[680, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[680, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[680, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[680, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[681, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[681, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[682, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[683, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[683, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[683, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[683, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[684, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[684, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[684, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[684, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[685, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[685, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[685, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[685, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[686, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[686, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[687, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[687, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[688, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[688, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[689, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[689, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[690, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[690, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[691, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[692, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[692, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[693, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[694, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[695, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[695, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[696, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[696, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[697, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[698, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[699, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[700, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[700, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[701, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[701, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[702, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[702, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[703, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[704, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[705, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[706, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[707, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[708, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[709, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[709, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[710, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[711, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[711, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[712, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[713, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[714, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[715, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[716, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[716, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[717, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[718, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[719, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[719, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[720, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[720, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[721, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[722, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[723, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[723, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[724, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[724, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[725, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[726, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[727, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[727, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[728, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[729, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[730, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[730, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[731, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[731, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[732, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[732, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[733, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[734, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[734, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[735, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[735, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[736, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[737, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[737, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[738, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[739, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[739, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[740, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[741, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[742, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[743, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[744, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[745, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[746, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[747, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[748, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[749, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[750, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[751, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[752, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[753, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[754, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[755, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[756, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[757, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[758, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[759, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[760, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[760, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[761, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[761, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[762, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[763, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[764, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[764, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[765, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[766, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[766, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[767, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[767, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[768, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[768, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[769, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[769, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[770, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[770, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[771, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[771, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.silhouette_samples": [[772, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[772, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[773, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[773, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[774, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[775, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[775, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[776, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[776, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[777, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[777, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[778, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[778, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[779, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[779, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[780, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[780, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[781, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[781, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[782, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[782, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[783, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[783, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[784, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[784, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[785, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[785, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[785, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[786, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[787, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[788, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[789, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[790, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[791, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[792, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[793, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[793, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[794, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[794, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[795, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[795, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[796, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[796, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[797, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[797, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[798, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[798, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[799, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[799, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[800, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[800, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.check_cv": [[801, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[802, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[802, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[803, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[803, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[804, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[804, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[805, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[805, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[806, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[806, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[807, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[807, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[808, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[808, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[809, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[810, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[810, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[811, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[812, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[812, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[813, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[814, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[814, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[815, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[816, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[816, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[817, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[818, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[818, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[819, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[819, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[820, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[820, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[821, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[822, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[823, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[823, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[824, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[824, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[825, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[825, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[826, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[826, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[827, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[827, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[828, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[828, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[829, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[829, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[830, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[830, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[831, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[832, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[833, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[834, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[834, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[835, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[836, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[837, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[837, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[838, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[838, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[839, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[839, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[840, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[840, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[841, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[841, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[842, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[842, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[843, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[844, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[845, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[845, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[846, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[846, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[847, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[848, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[848, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[849, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[850, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[850, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[851, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[851, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[852, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[853, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[853, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[854, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[854, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[855, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[855, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[856, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[856, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[857, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[857, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[858, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[858, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[859, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[859, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[860, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[860, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[861, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[861, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[862, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[862, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[863, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[864, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[865, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[865, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[866, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[867, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[867, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[868, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[869, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[870, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[870, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[871, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[872, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[873, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[874, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[874, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[875, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[875, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[876, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[877, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[877, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[878, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[878, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[879, "sklearn-set-config"]], "Examples using sklearn.set_config": [[879, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[880, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[881, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[881, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[882, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[883, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[883, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[884, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[884, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[885, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[885, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[886, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[886, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[887, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[887, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[888, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[888, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[889, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[889, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[890, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[890, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[891, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[892, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[893, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[894, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[895, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[895, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[896, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[896, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[897, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[898, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[899, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[900, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[901, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[902, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[903, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[904, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[904, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[905, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[906, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[907, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[908, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[909, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[910, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[911, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[912, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[913, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[913, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[914, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[915, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[915, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[916, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[917, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[918, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[919, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[920, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[921, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[922, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[922, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[923, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[924, "sklearn-utils-indexable"]], "sklearn.utils.metaestimators.available_if": [[925, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[925, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[926, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[927, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[928, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[929, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[930, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[931, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[932, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[933, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[934, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[935, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[936, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[937, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[938, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[938, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[939, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[940, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[941, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[942, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[943, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[944, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[945, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[946, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[947, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[948, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[948, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[949, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[950, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[951, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[952, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[953, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[953, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[953, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[953, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[953, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[953, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[953, "choosing-a-resource"]], "Exhausting the available resources": [[953, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[953, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[953, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[953, "tips-for-parameter-search"]], "Specifying an objective metric": [[953, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[953, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[953, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[953, "model-selection-development-and-evaluation"]], "Robustness to failure": [[953, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[953, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[953, "model-specific-cross-validation"]], "Information Criterion": [[953, "information-criterion"]], "Out of Bag Estimates": [[953, "out-of-bag-estimates"]], "Imputation of missing values": [[954, "imputation-of-missing-values"], [974, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[954, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[954, "univariate-feature-imputation"]], "Multivariate feature imputation": [[954, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[954, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[954, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[954, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[954, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[954, "marking-imputed-values"]], "Estimators that handle NaN values": [[954, "estimators-that-handle-nan-values"]], "Isotonic regression": [[955, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[956, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[956, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[956, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[956, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[956, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[956, "mathematical-details"]], "Kernel ridge regression": [[957, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[958, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[958, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[958, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[958, "qda"]], "LDA": [[958, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[958, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[958, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[958, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[959, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[959, "validation-curve"]], "Learning curve": [[959, "learning-curve"]], "Linear Models": [[960, "linear-models"]], "Ordinary Least Squares": [[960, "ordinary-least-squares"]], "Non-Negative Least Squares": [[960, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[960, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[960, "ridge-regression-and-classification"]], "Ridge Complexity": [[960, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[960, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[960, "setting-regularization-parameter"]], "Using cross-validation": [[960, "using-cross-validation"]], "Information-criteria based model selection": [[960, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[960, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[960, "multi-task-lasso"]], "Elastic-Net": [[960, "elastic-net"]], "Multi-task Elastic-Net": [[960, "multi-task-elastic-net"]], "Least Angle Regression": [[960, "least-angle-regression"]], "LARS Lasso": [[960, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[960, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[960, "bayesian-regression"]], "Bayesian Ridge Regression": [[960, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[960, "automatic-relevance-determination-ard"]], "Logistic regression": [[960, "logistic-regression"]], "Binary Case": [[960, "binary-case"]], "Multinomial Case": [[960, "multinomial-case"]], "Solvers": [[960, "solvers"]], "Differences from liblinear:": [[960, "liblinear-differences"]], "Practical considerations": [[960, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[960, "stochastic-gradient-descent-sgd"]], "Perceptron": [[960, "perceptron"]], "Passive Aggressive Algorithms": [[960, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[960, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[960, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[960, null]], "RANSAC: RANdom SAmple Consensus": [[960, "ransac-random-sample-consensus"]], "Details of the algorithm": [[960, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[960, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[960, "theoretical-considerations"]], "Huber Regression": [[960, "huber-regression"]], "Quantile Regression": [[960, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[960, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[961, "introduction"]], "Isomap": [[961, "isomap"]], "Complexity": [[961, "complexity"], [961, "id3"], [961, "id4"], [961, "id5"], [961, "id7"], [961, "id8"], [967, "complexity"], [968, "complexity"], [978, "complexity"], [979, "complexity"], [980, "complexity"]], "Locally Linear Embedding": [[961, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[961, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[961, "hessian-eigenmapping"]], "Spectral Embedding": [[961, "spectral-embedding"]], "Local Tangent Space Alignment": [[961, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[961, "multi-dimensional-scaling-mds"]], "Metric MDS": [[961, "metric-mds"]], "Nonmetric MDS": [[961, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[961, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[961, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[961, "barnes-hut-t-sne"]], "Tips on practical use": [[961, "tips-on-practical-use"], [980, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[962, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[962, "cosine-similarity"]], "Linear kernel": [[962, "linear-kernel"], [997, "linear-kernel"]], "Polynomial kernel": [[962, "polynomial-kernel"], [997, "polynomial-kernel"]], "Sigmoid kernel": [[962, "sigmoid-kernel"]], "RBF kernel": [[962, "rbf-kernel"]], "Laplacian kernel": [[962, "laplacian-kernel"]], "Chi-squared kernel": [[962, "chi-squared-kernel"]], "Gaussian mixture models": [[963, "gaussian-mixture-models"]], "Gaussian Mixture": [[963, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[963, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[963, "pros"], [963, "id2"]], "Cons": [[963, "cons"], [963, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[963, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[963, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[963, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[963, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[963, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[963, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[963, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[964, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[964, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[964, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[964, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[964, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[964, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[964, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[964, "accuracy-score"]], "Example:": [[964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [964, null], [976, null], [997, null]], "Top-k accuracy score": [[964, "top-k-accuracy-score"]], "Balanced accuracy score": [[964, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[964, "cohen-s-kappa"]], "Classification report": [[964, "classification-report"]], "Hamming loss": [[964, "hamming-loss"]], "Precision, recall and F-measures": [[964, "precision-recall-and-f-measures"]], "Binary classification": [[964, "binary-classification"]], "Multiclass and multilabel classification": [[964, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[964, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[964, "hinge-loss"]], "Log loss": [[964, "log-loss"]], "Matthews correlation coefficient": [[964, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[964, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[964, "receiver-operating-characteristic-roc"]], "Binary case": [[964, "binary-case"]], "Multi-class case": [[964, "multi-class-case"]], "Multi-label case": [[964, "multi-label-case"]], "Detection error tradeoff (DET)": [[964, "detection-error-tradeoff-det"]], "Zero one loss": [[964, "zero-one-loss"]], "Brier score loss": [[964, "brier-score-loss"]], "Class likelihood ratios": [[964, "class-likelihood-ratios"]], "Coverage error": [[964, "coverage-error"]], "Label ranking average precision": [[964, "label-ranking-average-precision"]], "Ranking loss": [[964, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[964, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[964, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[964, "mean-absolute-error"]], "Mean squared error": [[964, "mean-squared-error"]], "Mean squared logarithmic error": [[964, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[964, "mean-absolute-percentage-error"]], "Median absolute error": [[964, "median-absolute-error"]], "Max error": [[964, "max-error"]], "Explained variance score": [[964, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[964, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[964, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[964, "pinball-loss"]], "D\u00b2 score": [[964, "d2-score"]], "D\u00b2 Tweedie score": [[964, "d2-tweedie-score"]], "D\u00b2 pinball score": [[964, "d2-pinball-score"]], "D\u00b2 absolute error score": [[964, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[964, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[964, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[965, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[965, "multiclass-classification"], [997, null]], "Target format": [[965, "target-format"], [965, "id5"], [965, "id8"], [965, "id10"]], "OneVsRestClassifier": [[965, "onevsrestclassifier"]], "OneVsOneClassifier": [[965, "onevsoneclassifier"]], "OutputCodeClassifier": [[965, "outputcodeclassifier"]], "MultiOutputClassifier": [[965, "multioutputclassifier"]], "ClassifierChain": [[965, "classifierchain"]], "Multiclass-multioutput classification": [[965, "multiclass-multioutput-classification"]], "Multioutput regression": [[965, "multioutput-regression"]], "MultiOutputRegressor": [[965, "multioutputregressor"]], "RegressorChain": [[965, "regressorchain"]], "Naive Bayes": [[966, "naive-bayes"]], "Multinomial Naive Bayes": [[966, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[966, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[966, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[966, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[966, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[967, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[967, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[967, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[967, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[967, "nearest-neighbor-algorithms"]], "Brute Force": [[967, "brute-force"]], "K-D Tree": [[967, "k-d-tree"]], "Ball Tree": [[967, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[967, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[967, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[967, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[967, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[967, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[967, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[967, "neighborhood-components-analysis"]], "Dimensionality reduction": [[967, "dimensionality-reduction"]], "Mahalanobis distance": [[967, "mahalanobis-distance"]], "Transform": [[967, "transform"]], "Neural network models (supervised)": [[968, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[968, "multi-layer-perceptron"]], "Regularization": [[968, "regularization"]], "Algorithms": [[968, "algorithms"]], "Tips on Practical Use": [[968, "tips-on-practical-use"], [978, "tips-on-practical-use"], [979, "tips-on-practical-use"]], "More control with warm_start": [[968, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[969, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[969, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[969, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[969, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[969, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[970, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[970, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[970, "novelty-detection"]], "Scaling up the One-Class SVM": [[970, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[970, "id1"]], "Fitting an elliptic envelope": [[970, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[970, "isolation-forest"]], "Local Outlier Factor": [[970, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[970, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[971, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[971, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[971, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[971, "mathematical-definition"]], "Computation methods": [[971, "computation-methods"]], "Permutation feature importance": [[972, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[972, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[972, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[972, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[974, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[974, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[974, "scaling-features-to-a-range"]], "Scaling sparse data": [[974, "scaling-sparse-data"]], "Scaling data with outliers": [[974, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[974, null]], "Centering kernel matrices": [[974, "centering-kernel-matrices"]], "Non-linear transformation": [[974, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[974, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[974, "mapping-to-a-gaussian-distribution"]], "Normalization": [[974, "normalization"]], "Sparse input": [[974, null], [974, null]], "Encoding categorical features": [[974, "encoding-categorical-features"]], "Infrequent categories": [[974, "infrequent-categories"]], "Target Encoder": [[974, "target-encoder"]], "Discretization": [[974, "discretization"]], "K-bins discretization": [[974, "k-bins-discretization"]], "Feature binarization": [[974, "feature-binarization"]], "Generating polynomial features": [[974, "generating-polynomial-features"]], "Polynomial features": [[974, "polynomial-features"]], "Spline transformer": [[974, "spline-transformer"]], "Custom transformers": [[974, "custom-transformers"]], "Transforming the prediction target (y)": [[975, "transforming-the-prediction-target-y"]], "Label binarization": [[975, "label-binarization"]], "LabelBinarizer": [[975, "labelbinarizer"]], "MultiLabelBinarizer": [[975, "multilabelbinarizer"]], "Label encoding": [[975, "label-encoding"]], "Random Projection": [[976, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[976, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[976, "gaussian-random-projection"]], "Sparse random projection": [[976, "sparse-random-projection"]], "Inverse Transform": [[976, "inverse-transform"]], "Unlabeled entries in y": [[977, null]], "Self Training": [[977, "self-training"]], "Label Propagation": [[977, "label-propagation"]], "Stochastic Gradient Descent": [[978, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[978, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[978, "stopping-criterion"]], "SGD": [[978, "id5"]], "Multi-class classification": [[979, "multi-class-classification"]], "Scores and probabilities": [[979, "scores-and-probabilities"]], "Unbalanced problems": [[979, "unbalanced-problems"]], "Density estimation, novelty detection": [[979, "density-estimation-novelty-detection"]], "Kernel functions": [[979, "kernel-functions"]], "Parameters of the RBF Kernel": [[979, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[979, "custom-kernels"]], "Using Python functions as kernels": [[979, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[979, "using-the-gram-matrix"]], "SVC": [[979, "svc"]], "LinearSVC": [[979, "linearsvc"]], "NuSVC": [[979, "nusvc"]], "SVR": [[979, "svr"]], "LinearSVR": [[979, "linearsvr"]], "Multi-output problems": [[980, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[980, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "ID3 Algorithm": [[980, "id3-algorithm"]], "Which Attribute Is the Best Classifier?": [[980, "which-attribute-is-the-best-classifier"]], "Entropy Measures Homogeneity of Examples": [[980, "entropy-measures-homogeneity-of-examples"]], "Hypothesis Space Search in Decision Tree Learning": [[980, "hypothesis-space-search-in-decision-tree-learning"]], "Inductive Bias in Decision Tree Learning": [[980, "inductive-bias-in-decision-tree-learning"]], "Issues in Decision Tree Learning": [[980, "issues-in-decision-tree-learning"]], "Avoiding Overfitting the Data": [[980, "avoiding-overfitting-the-data"]], "Other Algorithms": [[980, "other-algorithms"]], "Classification criteria": [[980, "classification-criteria"]], "Regression criteria": [[980, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[980, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[981, "unsupervised-dimensionality-reduction"]], "Pipelining": [[981, null], [995, "pipelining"]], "PCA: principal component analysis": [[981, "pca-principal-component-analysis"]], "Random projections": [[981, "random-projections"]], "Feature scaling": [[981, null]], "Welcome to scikit-learn": [[982, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[983, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[983, "new-to-scientific-python"]], "External Tutorials": [[983, "external-tutorials"]], "Videos": [[983, "videos"]], "Related Projects": [[984, "related-projects"]], "Interoperability and framework enhancements": [[984, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[984, "other-estimators-and-tasks"]], "Statistical learning with Python": [[984, "statistical-learning-with-python"]], "Recommendation Engine packages": [[984, "recommendation-engine-packages"]], "Domain specific packages": [[984, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[984, "translations-of-scikit-learn-documentation"]], "Roadmap": [[985, "id1"]], "Purpose of this document": [[985, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[985, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[985, "architectural-general-goals"]], "Subpackage-specific goals": [[985, "subpackage-specific-goals"]], "Supervised learning": [[986, "supervised-learning"]], "Support": [[987, "support"]], "Mailing List": [[987, "mailing-list"]], "User questions": [[987, "user-questions"]], "Bug tracker": [[987, "bug-tracker"]], "Gitter": [[987, "gitter"]], "Documentation resources": [[987, "documentation-resources"]], "Who is using scikit-learn?": [[988, "who-is-using-scikit-learn"]], "J.P.Morgan": [[988, "id1"]], "Spotify": [[988, "id2"]], "Inria": [[988, "id3"]], "betaworks": [[988, "id4"]], "Hugging Face": [[988, "id5"]], "Evernote": [[988, "id6"]], "T\u00e9l\u00e9com ParisTech": [[988, "id7"]], "Booking.com": [[988, "id8"]], "AWeber": [[988, "id9"]], "Yhat": [[988, "id10"]], "Rangespan": [[988, "id11"]], "Birchbox": [[988, "id12"]], "Bestofmedia Group": [[988, "id13"]], "Change.org": [[988, "id14"]], "PHIMECA Engineering": [[988, "id15"]], "HowAboutWe": [[988, "id16"]], "PeerIndex": [[988, "id17"]], "DataRobot": [[988, "id18"]], "OkCupid": [[988, "id19"]], "Lovely": [[988, "id20"]], "Data Publica": [[988, "id21"]], "Machinalis": [[988, "id22"]], "solido": [[988, "id23"]], "INFONEA": [[988, "id24"]], "Dataiku": [[988, "id25"]], "Otto Group": [[988, "id26"]], "Zopa": [[988, "id27"]], "MARS": [[988, "id28"]], "BNP Paribas Cardif": [[988, "id29"]], "An introduction to machine learning with scikit-learn": [[990, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[990, null]], "Machine learning: the problem setting": [[990, "machine-learning-the-problem-setting"]], "Training set and testing set": [[990, null], [997, null]], "Loading an example dataset": [[990, "loading-an-example-dataset"]], "Shape of the data arrays": [[990, null]], "Learning and predicting": [[990, "learning-and-predicting"]], "Choosing the parameters of the model": [[990, null]], "Conventions": [[990, "conventions"]], "Type casting": [[990, "type-casting"]], "Refitting and updating parameters": [[990, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[990, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[991, "scikit-learn-tutorials"]], "Choosing the right estimator": [[992, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[993, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[993, null]], "Model selection: choosing estimators and their parameters": [[994, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[994, "score-and-cross-validated-scores"]], "Cross-validation generators": [[994, "cross-validation-generators"]], "Exercise": [[994, null], [994, null], [997, null], [997, null]], "Grid-search and cross-validated estimators": [[994, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[994, "grid-search"]], "Nested cross-validation": [[994, null]], "Cross-validated estimators": [[994, "cross-validated-estimators"]], "Putting it all together": [[995, "putting-it-all-together"]], "Face recognition with eigenfaces": [[995, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[995, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[996, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[996, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[996, null]], "An example of reshaping data would be the digits dataset": [[996, null]], "Estimators objects": [[996, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[997, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[997, null]], "Vocabulary: classification and regression": [[997, null]], "Nearest neighbor and the curse of dimensionality": [[997, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[997, null]], "k-Nearest neighbors classifier": [[997, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[997, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[997, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[997, "linear-regression"]], "Shrinkage": [[997, "shrinkage"]], "Different algorithms for the same problem": [[997, null]], "Shrinkage and sparsity with logistic regression": [[997, null]], "Support vector machines (SVMs)": [[997, "support-vector-machines-svms"]], "Linear SVMs": [[997, "linear-svms"]], "Using kernels": [[997, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[997, "rbf-kernel-radial-basis-function"]], "Interactive example": [[997, null]], "Unsupervised learning: seeking representations of the data": [[998, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[998, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[998, null]], "K-means clustering": [[998, "k-means-clustering"]], "Application example: vector quantization": [[998, null]], "Hierarchical agglomerative clustering: Ward": [[998, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[998, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[998, null]], "Decompositions: from a signal to components and loadings": [[998, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[998, null]], "Principal component analysis: PCA": [[998, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[998, "independent-component-analysis-ica"]], "Working With Text Data": [[999, "working-with-text-data"]], "Tutorial setup": [[999, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[999, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[999, "extracting-features-from-text-files"]], "Bags of words": [[999, "bags-of-words"]], "Tokenizing text with scikit-learn": [[999, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[999, "from-occurrences-to-frequencies"]], "Training a classifier": [[999, "training-a-classifier"]], "Building a pipeline": [[999, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[999, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[999, "parameter-tuning-using-grid-search"]], "Exercises": [[999, "exercises"]], "Exercise 1: Language identification": [[999, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[999, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[999, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[999, "where-to-from-here"]], "Unsupervised learning": [[1000, "unsupervised-learning"]], "User Guide": [[1001, "user-guide"]], "Visualizations": [[1002, "visualizations"]], "Available Plotting Utilities": [[1002, "available-plotting-utilities"]], "Display Objects": [[1002, "display-objects"]], "Release History": [[1003, "release-history"]], "Version 0.12.1": [[1005, "version-0-12-1"]], "Changelog": [[1005, "changelog"], [1005, "id1"], [1005, "id3"], [1005, "id6"], [1005, "id9"], [1005, "id12"], [1005, "id14"], [1005, "id16"], [1005, "id18"], [1005, "id19"], [1006, "changelog"], [1006, "id1"], [1007, "changelog"], [1008, "changelog"], [1009, "changelog"], [1009, "id1"], [1010, "changelog"], [1010, "id1"], [1011, "changelog"], [1011, "id1"], [1011, "id2"], [1012, "changelog"], [1012, "id1"], [1013, "changelog"], [1013, "id1"], [1013, "id5"], [1013, "id10"], [1013, "id23"], [1014, "changelog"], [1014, "id1"], [1014, "id2"], [1014, "id7"], [1015, "changelog"], [1015, "id1"], [1015, "id4"], [1016, "changelog"], [1016, "id1"], [1016, "id4"], [1017, "changelog"], [1017, "id1"], [1017, "id4"], [1018, "changelog"], [1018, "id1"], [1018, "id7"], [1019, "changelog"], [1019, "id1"], [1019, "id7"], [1020, "changelog"], [1020, "id1"], [1020, "id9"], [1021, "changelog"]], "People": [[1005, "people"], [1005, "id2"], [1005, "id5"], [1005, "id8"], [1005, "id11"], [1005, "id13"], [1005, "id15"], [1005, "id17"], [1006, "people"], [1006, "id2"], [1007, "people"], [1008, "people"]], "Version 0.12": [[1005, "version-0-12"]], "API changes summary": [[1005, "api-changes-summary"], [1005, "id4"], [1005, "id7"], [1005, "id10"], [1006, "api-changes-summary"], [1007, "api-changes-summary"], [1008, "api-changes-summary"], [1009, "api-changes-summary"], [1010, "api-changes-summary"], [1011, "api-changes-summary"], [1011, "id5"], [1012, "api-changes-summary"]], "Version 0.11": [[1005, "version-0-11"]], "Highlights": [[1005, "highlights"], [1008, "highlights"], [1009, "highlights"], [1012, "highlights"], [1013, "highlights"]], "Other changes": [[1005, "other-changes"]], "Version 0.10": [[1005, "version-0-10"]], "Version 0.9": [[1005, "version-0-9"]], "Version 0.8": [[1005, "version-0-8"]], "Version 0.7": [[1005, "version-0-7"]], "Version 0.6": [[1005, "version-0-6"]], "Version 0.5": [[1005, "version-0-5"]], "New classes": [[1005, "new-classes"]], "Fixes": [[1005, "fixes"]], "External dependencies": [[1005, "external-dependencies"]], "Removed modules": [[1005, "removed-modules"]], "Misc": [[1005, "misc"]], "Version 0.4": [[1005, "version-0-4"]], "Earlier versions": [[1005, "earlier-versions"]], "Version 0.13.1": [[1006, "version-0-13-1"]], "Version 0.13": [[1006, "version-0-13"]], "New Estimator Classes": [[1006, "new-estimator-classes"]], "Version 0.14": [[1007, "version-0-14"]], "Version 0.15.2": [[1008, "version-0-15-2"]], "Bug fixes": [[1008, "bug-fixes"], [1008, "id1"], [1008, "id2"], [1009, "bug-fixes"], [1009, "id2"], [1010, "bug-fixes"], [1010, "id2"], [1011, "bug-fixes"], [1011, "id4"], [1012, "bug-fixes"], [1012, "id3"]], "Version 0.15.1": [[1008, "version-0-15-1"]], "Version 0.15": [[1008, "version-0-15"]], "New features": [[1008, "new-features"], [1009, "new-features"], [1010, "new-features"], [1011, "new-features"], [1012, "new-features"]], "Enhancements": [[1008, "enhancements"], [1009, "enhancements"], [1010, "enhancements"], [1011, "enhancements"], [1011, "id3"], [1012, "enhancements"], [1012, "id2"]], "Documentation improvements": [[1008, "documentation-improvements"], [1009, "documentation-improvements"]], "Version 0.16.1": [[1009, "version-0-16-1"]], "Version 0.16": [[1009, "version-0-16"]], "Code Contributors": [[1009, "code-contributors"], [1010, "code-contributors"], [1011, "code-contributors"], [1011, "id6"]], "Version 0.17.1": [[1010, "version-0-17-1"]], "Version 0.17": [[1010, "version-0-17"]], "Version 0.18.2": [[1011, "version-0-18-2"]], "Last release with Python 2.6 support": [[1011, null], [1011, null]], "Version 0.18.1": [[1011, "version-0-18-1"]], "Version 0.18": [[1011, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1011, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1012, "version-0-19-2"]], "Related changes": [[1012, "related-changes"]], "Version 0.19.1": [[1012, "version-0-19-1"]], "API changes": [[1012, "api-changes"]], "Code and Documentation Contributors": [[1012, "code-and-documentation-contributors"], [1012, "id9"], [1013, "code-and-documentation-contributors"], [1013, "id8"], [1013, "id21"], [1013, "id41"], [1014, "code-and-documentation-contributors"], [1015, "code-and-documentation-contributors"], [1016, "code-and-documentation-contributors"], [1017, "code-and-documentation-contributors"], [1018, "code-and-documentation-contributors"], [1019, "code-and-documentation-contributors"], [1020, "code-and-documentation-contributors"], [1021, "code-and-documentation-contributors"]], "Version 0.19": [[1012, "version-0-19"]], "Changed models": [[1012, "changed-models"], [1013, "changed-models"], [1013, "id9"], [1013, "id22"], [1014, "changed-models"], [1014, "id6"], [1015, "changed-models"], [1016, "changed-models"], [1016, "id3"], [1017, "changed-models"], [1018, "changed-models"], [1019, "changed-models"], [1019, "id6"], [1020, "changed-models"], [1020, "id7"], [1021, "changed-models"]], "Version 0.20.4": [[1013, "version-0-20-4"]], "sklearn.cluster": [[1013, "sklearn-cluster"], [1013, "id2"], [1013, "id11"], [1013, "id24"], [1014, "sklearn-cluster"], [1014, "id8"], [1015, "sklearn-cluster"], [1015, "id5"], [1016, "sklearn-cluster"], [1016, "id2"], [1016, "id5"], [1017, "sklearn-cluster"], [1018, "sklearn-cluster"], [1018, "id2"], [1018, "id9"], [1019, "sklearn-cluster"], [1019, "id8"], [1020, "sklearn-cluster"], [1020, "id12"], [1021, "sklearn-cluster"]], "sklearn.compose": [[1013, "sklearn-compose"], [1013, "id3"], [1013, "id6"], [1013, "id12"], [1013, "id25"], [1014, "sklearn-compose"], [1014, "id9"], [1015, "sklearn-compose"], [1016, "sklearn-compose"], [1017, "sklearn-compose"], [1017, "id5"], [1018, "sklearn-compose"], [1019, "sklearn-compose"], [1020, "sklearn-compose"]], "sklearn.decomposition": [[1013, "sklearn-decomposition"], [1013, "id4"], [1013, "id14"], [1013, "id28"], [1014, "sklearn-decomposition"], [1014, "id11"], [1015, "sklearn-decomposition"], [1016, "sklearn-decomposition"], [1016, "id6"], [1017, "sklearn-decomposition"], [1017, "id7"], [1018, "sklearn-decomposition"], [1018, "id11"], [1019, "sklearn-decomposition"], [1019, "id10"], [1020, "sklearn-decomposition"], [1020, "id14"], [1021, "sklearn-decomposition"]], "sklearn.model_selection": [[1013, "sklearn-model-selection"], [1013, "id35"], [1014, "sklearn-model-selection"], [1015, "sklearn-model-selection"], [1015, "id9"], [1015, "id13"], [1016, "sklearn-model-selection"], [1017, "sklearn-model-selection"], [1017, "id12"], [1018, "sklearn-model-selection"], [1019, "sklearn-model-selection"], [1020, "sklearn-model-selection"], [1020, "id20"], [1021, "sklearn-model-selection"]], "sklearn.neighbors": [[1013, "sklearn-neighbors"], [1013, "id7"], [1013, "id18"], [1013, "id36"], [1014, "sklearn-neighbors"], [1014, "id5"], [1014, "id17"], [1015, "sklearn-neighbors"], [1015, "id11"], [1017, "sklearn-neighbors"], [1018, "sklearn-neighbors"], [1018, "id5"], [1018, "id18"], [1019, "sklearn-neighbors"], [1020, "sklearn-neighbors"], [1021, "sklearn-neighbors"]], "Version 0.20.3": [[1013, "version-0-20-3"]], "sklearn.covariance": [[1013, "sklearn-covariance"], [1013, "id26"], [1017, "sklearn-covariance"], [1018, "sklearn-covariance"], [1019, "sklearn-covariance"], [1021, "sklearn-covariance"]], "sklearn.datasets": [[1013, "sklearn-datasets"], [1013, "id13"], [1013, "id27"], [1014, "sklearn-datasets"], [1014, "id10"], [1015, "sklearn-datasets"], [1016, "sklearn-datasets"], [1017, "sklearn-datasets"], [1018, "sklearn-datasets"], [1018, "id10"], [1019, "sklearn-datasets"], [1019, "id9"], [1020, "sklearn-datasets"], [1020, "id13"], [1021, "sklearn-datasets"]], "sklearn.feature_extraction": [[1013, "sklearn-feature-extraction"], [1013, "id15"], [1013, "id30"], [1014, "sklearn-feature-extraction"], [1015, "sklearn-feature-extraction"], [1016, "sklearn-feature-extraction"], [1016, "id8"], [1017, "sklearn-feature-extraction"], [1018, "sklearn-feature-extraction"], [1018, "id13"], [1019, "sklearn-feature-extraction"], [1020, "sklearn-feature-extraction"], [1021, "sklearn-feature-extraction"]], "sklearn.impute": [[1013, "sklearn-impute"], [1013, "id31"], [1014, "sklearn-impute"], [1014, "id13"], [1015, "sklearn-impute"], [1015, "id6"], [1016, "sklearn-impute"], [1017, "sklearn-impute"], [1018, "sklearn-impute"], [1019, "sklearn-impute"], [1019, "id12"], [1020, "sklearn-impute"], [1021, "sklearn-impute"]], "sklearn.linear_model": [[1013, "sklearn-linear-model"], [1013, "id16"], [1013, "id32"], [1014, "sklearn-linear-model"], [1014, "id15"], [1015, "sklearn-linear-model"], [1016, "sklearn-linear-model"], [1016, "id9"], [1017, "sklearn-linear-model"], [1017, "id10"], [1018, "sklearn-linear-model"], [1018, "id4"], [1018, "id15"], [1019, "sklearn-linear-model"], [1019, "id13"], [1020, "sklearn-linear-model"], [1020, "id18"], [1021, "sklearn-linear-model"]], "sklearn.preprocessing": [[1013, "sklearn-preprocessing"], [1013, "id19"], [1013, "id37"], [1014, "sklearn-preprocessing"], [1014, "id18"], [1015, "sklearn-preprocessing"], [1015, "id12"], [1016, "sklearn-preprocessing"], [1017, "sklearn-preprocessing"], [1017, "id14"], [1018, "sklearn-preprocessing"], [1018, "id20"], [1019, "sklearn-preprocessing"], [1019, "id4"], [1019, "id16"], [1020, "sklearn-preprocessing"], [1020, "id4"], [1020, "id22"], [1021, "sklearn-preprocessing"]], "sklearn.svm": [[1013, "sklearn-svm"], [1013, "id38"], [1014, "sklearn-svm"], [1015, "sklearn-svm"], [1016, "sklearn-svm"], [1017, "sklearn-svm"], [1018, "sklearn-svm"], [1018, "id21"], [1019, "sklearn-svm"], [1020, "sklearn-svm"]], "Version 0.20.2": [[1013, "version-0-20-2"]], "sklearn.metrics": [[1013, "sklearn-metrics"], [1013, "id17"], [1013, "id33"], [1014, "sklearn-metrics"], [1014, "id4"], [1014, "id16"], [1015, "sklearn-metrics"], [1015, "id2"], [1015, "id8"], [1016, "sklearn-metrics"], [1016, "id10"], [1017, "sklearn-metrics"], [1017, "id2"], [1017, "id11"], [1018, "sklearn-metrics"], [1018, "id17"], [1019, "sklearn-metrics"], [1019, "id3"], [1019, "id15"], [1020, "sklearn-metrics"], [1021, "sklearn-metrics"]], "sklearn.utils": [[1013, "sklearn-utils"], [1013, "id20"], [1013, "id39"], [1014, "sklearn-utils"], [1015, "sklearn-utils"], [1015, "id14"], [1016, "sklearn-utils"], [1016, "id12"], [1017, "sklearn-utils"], [1017, "id17"], [1018, "sklearn-utils"], [1018, "id6"], [1018, "id23"], [1019, "sklearn-utils"], [1019, "id18"], [1020, "sklearn-utils"], [1020, "id6"], [1020, "id24"], [1021, "sklearn-utils"]], "Version 0.20.1": [[1013, "version-0-20-1"]], "sklearn.ensemble": [[1013, "sklearn-ensemble"], [1013, "id29"], [1014, "sklearn-ensemble"], [1014, "id12"], [1015, "sklearn-ensemble"], [1016, "sklearn-ensemble"], [1016, "id7"], [1017, "sklearn-ensemble"], [1017, "id8"], [1018, "sklearn-ensemble"], [1018, "id3"], [1018, "id12"], [1019, "sklearn-ensemble"], [1020, "sklearn-ensemble"], [1020, "id3"], [1020, "id15"], [1021, "sklearn-ensemble"]], "sklearn.mixture": [[1013, "sklearn-mixture"], [1013, "id34"], [1014, "sklearn-mixture"], [1018, "sklearn-mixture"], [1019, "sklearn-mixture"]], "Version 0.20.0": [[1013, "version-0-20-0"]], "Known Major Bugs": [[1013, "known-major-bugs"], [1014, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1013, "sklearn-discriminant-analysis"], [1014, "sklearn-discriminant-analysis"], [1017, "sklearn-discriminant-analysis"], [1019, "sklearn-discriminant-analysis"], [1020, "sklearn-discriminant-analysis"], [1021, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1013, "sklearn-dummy"], [1014, "sklearn-dummy"], [1015, "sklearn-dummy"], [1018, "sklearn-dummy"], [1019, "sklearn-dummy"]], "sklearn.feature_selection": [[1013, "sklearn-feature-selection"], [1015, "sklearn-feature-selection"], [1016, "sklearn-feature-selection"], [1017, "sklearn-feature-selection"], [1018, "sklearn-feature-selection"], [1018, "id14"], [1019, "sklearn-feature-selection"], [1019, "id2"], [1019, "id11"], [1020, "sklearn-feature-selection"], [1020, "id16"], [1021, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1013, "sklearn-gaussian-process"], [1015, "sklearn-gaussian-process"], [1016, "sklearn-gaussian-process"], [1017, "sklearn-gaussian-process"], [1017, "id9"], [1018, "sklearn-gaussian-process"], [1019, "sklearn-gaussian-process"], [1020, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1013, "sklearn-isotonic"], [1014, "sklearn-isotonic"], [1015, "sklearn-isotonic"], [1017, "sklearn-isotonic"], [1019, "sklearn-isotonic"], [1020, "sklearn-isotonic"]], "sklearn.manifold": [[1013, "sklearn-manifold"], [1014, "sklearn-manifold"], [1015, "sklearn-manifold"], [1016, "sklearn-manifold"], [1017, "sklearn-manifold"], [1018, "sklearn-manifold"], [1018, "id16"], [1019, "sklearn-manifold"], [1019, "id14"], [1020, "sklearn-manifold"], [1020, "id19"]], "sklearn.multioutput": [[1013, "sklearn-multioutput"], [1014, "sklearn-multioutput"], [1015, "sklearn-multioutput"], [1016, "sklearn-multioutput"], [1017, "sklearn-multioutput"], [1017, "id13"], [1020, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1013, "sklearn-naive-bayes"], [1015, "sklearn-naive-bayes"], [1015, "id10"], [1016, "sklearn-naive-bayes"], [1017, "sklearn-naive-bayes"], [1018, "sklearn-naive-bayes"], [1020, "sklearn-naive-bayes"], [1021, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1013, "sklearn-neural-network"], [1014, "sklearn-neural-network"], [1015, "sklearn-neural-network"], [1016, "sklearn-neural-network"], [1017, "sklearn-neural-network"], [1018, "sklearn-neural-network"], [1019, "sklearn-neural-network"], [1020, "sklearn-neural-network"], [1020, "id21"], [1021, "sklearn-neural-network"]], "sklearn.pipeline": [[1013, "sklearn-pipeline"], [1014, "sklearn-pipeline"], [1015, "sklearn-pipeline"], [1016, "sklearn-pipeline"], [1017, "sklearn-pipeline"], [1018, "sklearn-pipeline"], [1018, "id19"], [1019, "sklearn-pipeline"], [1020, "sklearn-pipeline"], [1021, "sklearn-pipeline"]], "sklearn.tree": [[1013, "sklearn-tree"], [1014, "sklearn-tree"], [1014, "id19"], [1015, "sklearn-tree"], [1016, "sklearn-tree"], [1017, "sklearn-tree"], [1017, "id16"], [1018, "sklearn-tree"], [1018, "id22"], [1019, "sklearn-tree"], [1019, "id5"], [1019, "id17"], [1020, "sklearn-tree"], [1020, "id5"], [1020, "id23"], [1021, "sklearn-tree"]], "Multiple modules": [[1013, "multiple-modules"], [1014, "multiple-modules"]], "Changes to estimator checks": [[1013, "changes-to-estimator-checks"], [1014, "changes-to-estimator-checks"], [1015, "changes-to-estimator-checks"]], "Version 0.21.3": [[1014, "version-0-21-3"]], "Legend for changelogs": [[1014, "legend-for-changelogs"], [1015, "legend-for-changelogs"], [1016, "legend-for-changelogs"], [1017, "legend-for-changelogs"], [1018, "legend-for-changelogs"], [1019, "legend-for-changelogs"], [1020, "legend-for-changelogs"], [1021, "legend-for-changelogs"]], "sklearn.inspection": [[1014, "sklearn-inspection"], [1014, "id3"], [1014, "id14"], [1015, "sklearn-inspection"], [1015, "id7"], [1016, "sklearn-inspection"], [1016, "id11"], [1017, "sklearn-inspection"], [1018, "sklearn-inspection"], [1019, "sklearn-inspection"], [1020, "sklearn-inspection"], [1020, "id17"], [1021, "sklearn-inspection"]], "Version 0.21.2": [[1014, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1014, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1014, "version-0-21-1"]], "Version 0.21.0": [[1014, "version-0-21-0"]], "sklearn.base": [[1014, "sklearn-base"], [1015, "sklearn-base"], [1017, "sklearn-base"], [1018, "sklearn-base"], [1019, "sklearn-base"], [1020, "sklearn-base"], [1020, "id2"], [1020, "id10"], [1021, "sklearn-base"]], "sklearn.calibration": [[1014, "sklearn-calibration"], [1015, "sklearn-calibration"], [1017, "sklearn-calibration"], [1018, "sklearn-calibration"], [1018, "id8"], [1019, "sklearn-calibration"], [1020, "sklearn-calibration"], [1020, "id11"], [1021, "sklearn-calibration"]], "sklearn.externals": [[1014, "sklearn-externals"]], "sklearn.multiclass": [[1014, "sklearn-multiclass"], [1017, "sklearn-multiclass"], [1018, "sklearn-multiclass"], [1019, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1015, "version-0-22-2-post1"]], "Version 0.22.1": [[1015, "version-0-22-1"]], "sklearn.semi_supervised": [[1015, "sklearn-semi-supervised"], [1016, "sklearn-semi-supervised"], [1017, "sklearn-semi-supervised"], [1017, "id3"], [1017, "id15"], [1021, "sklearn-semi-supervised"]], "Version 0.22.0": [[1015, "version-0-22-0"]], "Website update": [[1015, "website-update"]], "Clear definition of the public API": [[1015, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1015, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1015, "sklearn-cross-decomposition"], [1017, "sklearn-cross-decomposition"], [1017, "id6"], [1019, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1015, "sklearn-kernel-approximation"], [1017, "sklearn-kernel-approximation"], [1018, "sklearn-kernel-approximation"], [1019, "sklearn-kernel-approximation"], [1020, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1016, "version-0-23-2"]], "Version 0.23.1": [[1016, "version-0-23-1"]], "Version 0.23.0": [[1016, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1016, "enforcing-keyword-only-arguments"], [1018, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1017, "version-0-24-2"]], "feature_extraction": [[1017, "feature-extraction"]], "Version 0.24.1": [[1017, "version-0-24-1"]], "Packaging": [[1017, "packaging"]], "Version 0.24.0": [[1017, "version-0-24-0"]], "sklearn.exceptions": [[1017, "sklearn-exceptions"]], "Version 1.0.2": [[1018, "version-1-0-2"]], "Version 1.0.1": [[1018, "version-1-0-1"]], "Fixed models": [[1018, "fixed-models"]], "Version 1.0.0": [[1018, "version-1-0-0"]], "Minimal dependencies": [[1018, "minimal-dependencies"], [1019, "minimal-dependencies"]], "Version 1.1.3": [[1019, "version-1-1-3"]], "Version 1.1.2": [[1019, "version-1-1-2"]], "Version 1.1.1": [[1019, "version-1-1-1"]], "Version 1.1.0": [[1019, "version-1-1-0"]], "sklearn.random_projection": [[1019, "sklearn-random-projection"]], "Version 1.2.2": [[1020, "version-1-2-2"]], "Version 1.2.1": [[1020, "version-1-2-1"]], "Changes impacting all modules": [[1020, "changes-impacting-all-modules"], [1020, "id8"], [1021, "changes-impacting-all-modules"]], "Version 1.2.0": [[1020, "version-1-2-0"]], "Version 1.3.0": [[1021, "version-1-3-0"]], "sklearn.exception": [[1021, "sklearn-exception"]]}, "indexentries": {"1d": [[383, "term-1d"]], "1d array": [[383, "term-1d-array"]], "2d": [[383, "term-2d"]], "2d array": [[383, "term-2d-array"]], "api": [[383, "term-API"]], "cv splitter": [[383, "term-CV-splitter"]], "slep": [[383, "term-SLEP"]], "sleps": [[383, "term-SLEPs"]], "x": [[383, "term-X"]], "xt": [[383, "term-Xt"]], "y": [[383, "term-Y"], [383, "term-y"]], "_estimator_type": [[383, "term-_estimator_type"]], "array-like": [[383, "term-array-like"]], "attribute": [[383, "term-attribute"]], "attributes": [[383, "term-attributes"]], "backwards compatibility": [[383, "term-backwards-compatibility"]], "binary": [[383, "term-binary"]], "callable": [[383, "term-callable"]], "categorical feature": [[383, "term-categorical-feature"]], "class_weight": [[383, "term-class_weight"]], "classes_": [[383, "term-classes_"]], "classifier": [[383, "term-classifier"]], "classifiers": [[383, "term-classifiers"]], "clone": [[383, "term-clone"]], "cloned": [[383, "term-cloned"]], "clusterer": [[383, "term-clusterer"]], "clusterers": [[383, "term-clusterers"]], "coef_": [[383, "term-coef_"]], "common tests": [[383, "term-common-tests"]], "components_": [[383, "term-components_"]], "continuous": [[383, "term-continuous"]], "continuous multi-output": [[383, "term-continuous-multi-output"]], "continuous multioutput": [[383, "term-continuous-multioutput"]], "cross-validation estimator": [[383, "term-cross-validation-estimator"]], "cross-validation generator": [[383, "term-cross-validation-generator"]], "cross-validation splitter": [[383, "term-cross-validation-splitter"]], "cv": [[383, "term-cv"]], "data leakage": [[383, "term-data-leakage"]], "data type": [[383, "term-data-type"]], "decision_function": [[383, "term-decision_function"]], "density estimator": [[383, "term-density-estimator"]], "deprecation": [[383, "term-deprecation"]], "dimensionality": [[383, "term-dimensionality"]], "docstring": [[383, "term-docstring"]], "double underscore": [[383, "term-double-underscore"]], "double underscore notation": [[383, "term-double-underscore-notation"]], "dtype": [[383, "term-dtype"]], "duck typing": [[383, "term-duck-typing"]], "early stopping": [[383, "term-early-stopping"]], "embedding_": [[383, "term-embedding_"]], "estimator": [[383, "term-estimator"]], "estimator instance": [[383, "term-estimator-instance"]], "estimator tags": [[383, "term-estimator-tags"]], "estimators": [[383, "term-estimators"]], "evaluation metric": [[383, "term-evaluation-metric"]], "evaluation metrics": [[383, "term-evaluation-metrics"]], "examples": [[383, "term-examples"]], "experimental": [[383, "term-experimental"]], "feature": [[383, "term-feature"]], "feature extractor": [[383, "term-feature-extractor"]], "feature extractors": [[383, "term-feature-extractors"]], "feature vector": [[383, "term-feature-vector"]], "feature_importances_": [[383, "term-feature_importances_"]], "features": [[383, "term-features"]], "fit": [[383, "term-fit"]], "fit_predict": [[383, "term-fit_predict"]], "fit_transform": [[383, "term-fit_transform"]], "fitted": [[383, "term-fitted"]], "fitting": [[383, "term-fitting"]], "function": [[383, "term-function"]], "gallery": [[383, "term-gallery"]], "get_feature_names_out": [[383, "term-get_feature_names_out"]], "get_n_splits": [[383, "term-get_n_splits"]], "get_params": [[383, "term-get_params"]], "groups": [[383, "term-groups"]], "hyper-parameter": [[383, "term-hyper-parameter"]], "hyperparameter": [[383, "term-hyperparameter"]], "imputation": [[383, "term-imputation"]], "impute": [[383, "term-impute"]], "indexable": [[383, "term-indexable"]], "induction": [[383, "term-induction"]], "inductive": [[383, "term-inductive"]], "joblib": [[383, "term-joblib"]], "kernel": [[383, "term-kernel"]], "label indicator matrix": [[383, "term-label-indicator-matrix"]], "labels_": [[383, "term-labels_"]], "leakage": [[383, "term-leakage"]], "max_iter": [[383, "term-max_iter"]], "memmapping": [[383, "term-memmapping"]], "memory": [[383, "term-memory"]], "memory map": [[383, "term-memory-map"]], "memory mapping": [[383, "term-memory-mapping"]], "meta-estimator": [[383, "term-meta-estimator"]], "meta-estimators": [[383, "term-meta-estimators"]], "metaestimator": [[383, "term-metaestimator"]], "metaestimators": [[383, "term-metaestimators"]], "metric": [[383, "term-metric"]], "missing values": [[383, "term-missing-values"]], "multi-class": [[383, "term-multi-class"]], "multi-class multi-output": [[383, "term-multi-class-multi-output"]], "multi-label": [[383, "term-multi-label"]], "multi-output": [[383, "term-multi-output"]], "multi-output continuous": [[383, "term-multi-output-continuous"]], "multi-output multi-class": [[383, "term-multi-output-multi-class"]], "multiclass": [[383, "term-multiclass"]], "multiclass multioutput": [[383, "term-multiclass-multioutput"]], "multilabel": [[383, "term-multilabel"]], "multilabel indicator matrices": [[383, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[383, "term-multilabel-indicator-matrix"]], "multioutput": [[383, "term-multioutput"]], "multioutput continuous": [[383, "term-multioutput-continuous"]], "multioutput multiclass": [[383, "term-multioutput-multiclass"]], "n_components": [[383, "term-n_components"]], "n_features": [[383, "term-n_features"]], "n_iter_": [[383, "term-n_iter_"]], "n_iter_no_change": [[383, "term-n_iter_no_change"]], "n_jobs": [[383, "term-n_jobs"]], "n_outputs": [[383, "term-n_outputs"]], "n_samples": [[383, "term-n_samples"]], "n_targets": [[383, "term-n_targets"]], "narrative docs": [[383, "term-narrative-docs"]], "narrative documentation": [[383, "term-narrative-documentation"]], "np": [[383, "term-np"]], "online learning": [[383, "term-online-learning"]], "out-of-core": [[383, "term-out-of-core"]], "outlier detector": [[383, "term-outlier-detector"]], "outlier detectors": [[383, "term-outlier-detectors"]], "outputs": [[383, "term-outputs"]], "pair": [[383, "term-pair"]], "pairwise metric": [[383, "term-pairwise-metric"]], "pairwise metrics": [[383, "term-pairwise-metrics"]], "param": [[383, "term-param"]], "parameter": [[383, "term-parameter"]], "parameters": [[383, "term-parameters"]], "params": [[383, "term-params"]], "partial_fit": [[383, "term-partial_fit"]], "pd": [[383, "term-pd"]], "pos_label": [[383, "term-pos_label"]], "precomputed": [[383, "term-precomputed"]], "predict": [[383, "term-predict"]], "predict_log_proba": [[383, "term-predict_log_proba"]], "predict_proba": [[383, "term-predict_proba"]], "predictor": [[383, "term-predictor"]], "predictors": [[383, "term-predictors"]], "random_state": [[383, "term-random_state"]], "rectangular": [[383, "term-rectangular"]], "regressor": [[383, "term-regressor"]], "regressors": [[383, "term-regressors"]], "sample": [[383, "term-sample"]], "sample properties": [[383, "term-sample-properties"]], "sample property": [[383, "term-sample-property"]], "sample_weight": [[383, "term-sample_weight"]], "samples": [[383, "term-samples"]], "scikit-learn enhancement proposals": [[383, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[383, "term-scikit-learn-contrib"]], "score": [[383, "term-score"]], "score_samples": [[383, "term-score_samples"]], "scorer": [[383, "term-scorer"]], "scoring": [[383, "term-scoring"]], "semi-supervised": [[383, "term-semi-supervised"]], "semi-supervised learning": [[383, "term-semi-supervised-learning"]], "semisupervised": [[383, "term-semisupervised"]], "set_params": [[383, "term-set_params"]], "sparse graph": [[383, "term-sparse-graph"]], "sparse matrix": [[383, "term-sparse-matrix"]], "split": [[383, "term-split"]], "stateless": [[383, "term-stateless"]], "supervised": [[383, "term-supervised"]], "supervised learning": [[383, "term-supervised-learning"]], "target": [[383, "term-target"]], "targets": [[383, "term-targets"]], "transduction": [[383, "term-transduction"]], "transductive": [[383, "term-transductive"]], "transform": [[383, "term-transform"]], "transformer": [[383, "term-transformer"]], "transformers": [[383, "term-transformers"]], "unlabeled": [[383, "term-unlabeled"]], "unlabeled data": [[383, "term-unlabeled-data"]], "unsupervised": [[383, "term-unsupervised"]], "unsupervised learning": [[383, "term-unsupervised-learning"]], "vectorizer": [[383, "term-vectorizer"]], "vectorizers": [[383, "term-vectorizers"]], "verbose": [[383, "term-verbose"]], "warm_start": [[383, "term-warm_start"]], "module": [[394, "module-sklearn.base"], [394, "module-sklearn.calibration"], [394, "module-sklearn.cluster"], [394, "module-sklearn.compose"], [394, "module-sklearn.covariance"], [394, "module-sklearn.cross_decomposition"], [394, "module-sklearn.datasets"], [394, "module-sklearn.decomposition"], [394, "module-sklearn.discriminant_analysis"], [394, "module-sklearn.dummy"], [394, "module-sklearn.ensemble"], [394, "module-sklearn.exceptions"], [394, "module-sklearn.experimental"], [394, "module-sklearn.feature_extraction"], [394, "module-sklearn.feature_extraction.image"], [394, "module-sklearn.feature_extraction.text"], [394, "module-sklearn.feature_selection"], [394, "module-sklearn.gaussian_process"], [394, "module-sklearn.impute"], [394, "module-sklearn.inspection"], [394, "module-sklearn.isotonic"], [394, "module-sklearn.kernel_approximation"], [394, "module-sklearn.kernel_ridge"], [394, "module-sklearn.linear_model"], [394, "module-sklearn.manifold"], [394, "module-sklearn.metrics"], [394, "module-sklearn.metrics.cluster"], [394, "module-sklearn.metrics.pairwise"], [394, "module-sklearn.mixture"], [394, "module-sklearn.model_selection"], [394, "module-sklearn.multiclass"], [394, "module-sklearn.multioutput"], [394, "module-sklearn.naive_bayes"], [394, "module-sklearn.neighbors"], [394, "module-sklearn.neural_network"], [394, "module-sklearn.pipeline"], [394, "module-sklearn.preprocessing"], [394, "module-sklearn.random_projection"], [394, "module-sklearn.semi_supervised"], [394, "module-sklearn.svm"], [394, "module-sklearn.tree"], [394, "module-sklearn.utils"], [562, "module-sklearn.experimental.enable_halving_search_cv"], [563, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[394, "module-sklearn.base"]], "sklearn.calibration": [[394, "module-sklearn.calibration"]], "sklearn.cluster": [[394, "module-sklearn.cluster"]], "sklearn.compose": [[394, "module-sklearn.compose"]], "sklearn.covariance": [[394, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[394, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[394, "module-sklearn.datasets"]], "sklearn.decomposition": [[394, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[394, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[394, "module-sklearn.dummy"]], "sklearn.ensemble": [[394, "module-sklearn.ensemble"]], "sklearn.exceptions": [[394, "module-sklearn.exceptions"]], "sklearn.experimental": [[394, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[394, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[394, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[394, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[394, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[394, "module-sklearn.gaussian_process"]], "sklearn.impute": [[394, "module-sklearn.impute"]], "sklearn.inspection": [[394, "module-sklearn.inspection"]], "sklearn.isotonic": [[394, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[394, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[394, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[394, "module-sklearn.linear_model"]], "sklearn.manifold": [[394, "module-sklearn.manifold"]], "sklearn.metrics": [[394, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[394, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[394, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[394, "module-sklearn.mixture"]], "sklearn.model_selection": [[394, "module-sklearn.model_selection"]], "sklearn.multiclass": [[394, "module-sklearn.multiclass"]], "sklearn.multioutput": [[394, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[394, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[394, "module-sklearn.neighbors"]], "sklearn.neural_network": [[394, "module-sklearn.neural_network"]], "sklearn.pipeline": [[394, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[394, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[394, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[394, "module-sklearn.semi_supervised"]], "sklearn.svm": [[394, "module-sklearn.svm"]], "sklearn.tree": [[394, "module-sklearn.tree"]], "sklearn.utils": [[394, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[406, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[407, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[408, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[409, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[409, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[409, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[410, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[410, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[410, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[410, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[410, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[411, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[411, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[412, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[412, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[413, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[413, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[414, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[414, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[415, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[415, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[416, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[416, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[417, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[417, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[417, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[418, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[419, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[420, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[421, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[421, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[421, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[421, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[421, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[421, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[421, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[422, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[422, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[422, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[422, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[423, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[424, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[424, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[424, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[424, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[424, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[424, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[425, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[425, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[425, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[425, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[425, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[426, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[426, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[427, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[427, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[428, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[428, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[428, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[428, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[428, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[429, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[429, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[429, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[430, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[430, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[431, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[431, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[431, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[431, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[431, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[431, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[432, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[432, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[433, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[433, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[433, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[433, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[433, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[434, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[434, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[434, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[434, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[434, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[434, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[434, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[434, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[435, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[435, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[435, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[435, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[435, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[436, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[436, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[436, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[436, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[436, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[436, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[436, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[436, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[437, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[438, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[439, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[440, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[441, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[442, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[443, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[444, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[445, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[446, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[447, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[447, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[447, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[447, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[447, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[447, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[447, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[447, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[447, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[448, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[448, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[448, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[448, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[448, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[448, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[448, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[449, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[450, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[451, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[452, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[452, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[453, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[453, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[453, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[453, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[453, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[453, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[453, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[453, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[454, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[454, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[454, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[454, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[454, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[454, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[454, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[454, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[455, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[455, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[455, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[455, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[455, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[455, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[455, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[455, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[456, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[456, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[456, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[456, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[456, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[456, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[456, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[456, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[457, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[457, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[458, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[458, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[458, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[458, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[458, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[458, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[458, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[458, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[459, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[459, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[459, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[459, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[459, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[459, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[459, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[459, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[460, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[461, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[462, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[463, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[464, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[465, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[465, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[465, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[466, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[466, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[466, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[467, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[467, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[467, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[468, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[468, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[468, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[468, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[468, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[468, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[468, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[468, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[469, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[470, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[471, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[472, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[473, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[474, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[475, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[476, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[477, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[478, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[479, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[480, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[481, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[482, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[483, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[484, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[485, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[486, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[487, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[488, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[489, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[490, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[491, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[492, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[493, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[495, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[496, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[514, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[514, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[514, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[514, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[514, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[514, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[514, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[514, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[515, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[515, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[516, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[516, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[517, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[517, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[518, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[518, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[519, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[519, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[520, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[521, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[521, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[522, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[522, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[523, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[523, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[524, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[524, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[525, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[525, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[525, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[525, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[525, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[525, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[525, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[525, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[525, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[525, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[526, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[526, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[527, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[527, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[528, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[529, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[530, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[531, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[532, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[533, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[534, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[534, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[534, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[534, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[534, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[534, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[534, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[534, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[535, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[535, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[535, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[535, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[535, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[535, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[536, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[536, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[536, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[536, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[537, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[537, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[537, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[537, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[537, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[537, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[537, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[537, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[537, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[537, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[538, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[538, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[538, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[538, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[539, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[539, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[539, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[539, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[539, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[539, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[539, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[539, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[540, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[540, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[540, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[540, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[541, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[541, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[541, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[541, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[541, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[541, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[541, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[541, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[541, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[541, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[542, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[542, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[542, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[542, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[543, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[543, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[543, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[543, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[543, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[543, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[543, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[543, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[543, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[543, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[544, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[545, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[546, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[546, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[546, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[546, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[546, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[546, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[546, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[546, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[546, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[546, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[547, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[547, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[547, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[547, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[548, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[548, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[548, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[548, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[548, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[548, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[548, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[548, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[548, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[548, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[549, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[549, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[549, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[549, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[550, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[550, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[550, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[550, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[551, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[551, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[551, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[551, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[552, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[552, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[552, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[552, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[553, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[553, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[553, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[553, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[554, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[554, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[555, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[555, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[556, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[556, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[557, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[557, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[558, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[558, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[559, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[559, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[560, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[560, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[561, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[561, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[562, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[563, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[564, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[564, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[565, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[565, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[565, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[565, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[565, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[565, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[565, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[566, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[566, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[566, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[566, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[566, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[566, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[566, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[567, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[568, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[569, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[570, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[571, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[571, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[572, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[572, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[573, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[573, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[574, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[575, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[575, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[576, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[576, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[576, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[577, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[577, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[577, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[578, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[579, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[579, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[580, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[580, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[580, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[580, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[581, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[581, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[582, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[582, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[583, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[583, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[584, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[584, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[584, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[584, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[584, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[584, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[584, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[585, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[585, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[586, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[586, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[587, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[588, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[589, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[590, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[591, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[592, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[593, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[594, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[595, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[596, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[597, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[597, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[597, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[597, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[597, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[597, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[597, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[597, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[597, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[597, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[597, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[597, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[598, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[599, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[600, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[601, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[601, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[601, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[601, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[601, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[601, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[601, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[601, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[601, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[601, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[601, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[602, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[602, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[602, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[602, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[602, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[602, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[602, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[602, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[602, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[602, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[602, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[603, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[604, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[604, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[604, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[604, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[604, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[604, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[604, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[604, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[604, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[604, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[604, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[604, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[605, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[605, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[605, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[605, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[605, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[605, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[605, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[605, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[605, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[605, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[605, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[605, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[606, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[607, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[607, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[607, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[607, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[607, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[607, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[607, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[607, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[607, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[607, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[607, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[607, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[608, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[609, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[610, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[610, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[610, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[610, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[610, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[610, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[610, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[610, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[611, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[611, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[611, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[611, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[611, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[611, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[611, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[611, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[612, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[612, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[612, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[612, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[612, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[612, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[612, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[612, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[613, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[613, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[614, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[614, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[614, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[615, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[615, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[615, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[616, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[617, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[618, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[618, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[619, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[620, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[621, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[622, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[622, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[622, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[622, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[622, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[622, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[622, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[622, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[623, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[624, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[624, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[624, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[624, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[624, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[624, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[624, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[624, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[625, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[626, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[626, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[626, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[626, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[626, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[626, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[627, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[627, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[627, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[627, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[627, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[627, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[628, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[628, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[628, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[628, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[628, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[628, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[629, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[629, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[629, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[629, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[629, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[629, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[629, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[629, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[630, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[630, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[630, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[630, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[630, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[630, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[630, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[631, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[631, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[631, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[631, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[631, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[631, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[632, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[632, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[632, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[632, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[632, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[632, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[633, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[633, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[633, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[633, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[633, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[633, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[634, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[634, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[634, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[634, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[634, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[634, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[635, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[635, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[635, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[635, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[635, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[635, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[635, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[635, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[636, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[636, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[636, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[636, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[636, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[636, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[636, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[637, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[637, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[637, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[637, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[637, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[637, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[638, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[638, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[638, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[638, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[638, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[638, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[639, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[639, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[639, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[639, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[639, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[639, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[640, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[640, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[640, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[640, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[640, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[640, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[641, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[641, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[642, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[642, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[643, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[643, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[643, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[643, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[643, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[643, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[643, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[643, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[644, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[644, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[644, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[644, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[644, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[644, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[645, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[645, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[645, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[645, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[645, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[645, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[645, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[645, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[646, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[646, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[646, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[646, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[646, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[646, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[646, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[647, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[647, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[647, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[647, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[647, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[647, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[648, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[648, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[648, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[648, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[648, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[649, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[650, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[651, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[651, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[652, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[652, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[652, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[652, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[652, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[652, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[653, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[653, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[653, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[653, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[653, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[653, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[654, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[654, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[654, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[654, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[654, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[654, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[655, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[655, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[655, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[655, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[655, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[655, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[656, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[656, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[656, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[656, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[656, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[657, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[657, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[657, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[657, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[657, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[657, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[657, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[657, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[658, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[658, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[658, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[658, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[658, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[658, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[658, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[659, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[659, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[660, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[660, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[661, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[661, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[662, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[662, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[662, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[662, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[662, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[662, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[663, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[663, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[663, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[663, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[663, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[663, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[664, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[665, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[666, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[667, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[668, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[669, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[670, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[671, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[671, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[672, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[672, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[672, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[672, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[672, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[672, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[672, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[672, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[673, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[673, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[673, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[673, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[673, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[674, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[674, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[674, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[674, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[674, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[675, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[675, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[675, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[675, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_params() (sklearn.manifold.tsne method)": [[675, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[675, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[675, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[676, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[677, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[678, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[679, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[680, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[680, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[680, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[680, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[681, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[681, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[681, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[681, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[682, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[682, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[682, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[682, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[682, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[683, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[683, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[683, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[683, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[684, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[684, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[684, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[684, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[685, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[685, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[685, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[685, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[687, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[689, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[690, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[691, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[692, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[694, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[695, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[696, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[697, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[698, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[701, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[703, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[709, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[710, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[714, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[715, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[716, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[717, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[718, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[722, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[723, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[724, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[725, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[726, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[727, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[728, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[729, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[730, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[731, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[732, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[733, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[734, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[735, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[736, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[741, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[742, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[760, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[761, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[762, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[763, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[764, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[765, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[766, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[767, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[768, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[769, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[770, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[771, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[772, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[773, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[774, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[775, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[776, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[777, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[777, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[778, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[778, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[779, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[779, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[779, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[779, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[780, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[780, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[780, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[781, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[781, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[781, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[782, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[782, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[782, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[782, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[783, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[783, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[784, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[784, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[784, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[785, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[785, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[785, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[786, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[786, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[786, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[787, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[787, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[787, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[788, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[788, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[788, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[789, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[789, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[789, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[790, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[791, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[792, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[792, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[792, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[793, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[793, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[793, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[793, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[794, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[794, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[794, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[795, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[795, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[795, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[796, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[796, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[796, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[797, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[797, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[797, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[798, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[798, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[798, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[799, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[799, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[799, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[800, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[800, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[800, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[801, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[802, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[803, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[804, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[805, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[806, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[807, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[808, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[809, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[809, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[809, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[809, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[809, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[809, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[809, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[809, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[809, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[810, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[810, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[810, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[810, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[811, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[811, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[811, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[811, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[811, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[811, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[812, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[812, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[812, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[812, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[812, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[812, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[812, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[812, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[813, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[813, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[813, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[813, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[813, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[813, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[813, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[813, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[814, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[814, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[814, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[814, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[814, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[814, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[814, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[815, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[815, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[815, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[815, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[815, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[815, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[816, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[816, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[817, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[817, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[818, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[818, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[819, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[819, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[820, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[820, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[821, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.balltree method)": [[821, "sklearn.neighbors.BallTree.valid_metrics"]], "kdtree (class in sklearn.neighbors)": [[822, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.two_point_correlation"]], "valid_metrics() (sklearn.neighbors.kdtree method)": [[822, "sklearn.neighbors.KDTree.valid_metrics"]], "kneighborsclassifier (class in sklearn.neighbors)": [[823, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[823, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[824, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[824, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[824, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[824, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[824, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[824, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[824, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[824, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[825, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[825, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[826, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[826, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[826, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[826, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[826, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[826, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[826, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[827, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[827, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[828, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[828, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[828, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[828, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[828, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[828, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[829, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[829, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[829, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[829, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[829, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[829, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[829, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[829, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[830, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[831, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[832, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[833, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[834, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[835, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[836, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[837, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[837, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[838, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[838, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[839, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[839, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[839, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[839, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[839, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[839, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[839, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[840, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[840, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[840, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[840, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[840, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[840, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[840, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[840, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[840, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[840, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[841, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[841, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[841, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[841, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[841, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[841, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[842, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[843, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[844, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[844, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[844, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[844, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[844, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[844, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[844, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[845, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[846, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[847, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[847, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[847, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[847, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[847, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[847, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[847, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[848, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[848, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[848, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[848, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[848, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[848, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[848, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[849, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[849, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[849, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[849, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[849, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[849, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[849, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[850, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[851, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[852, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[852, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[852, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[852, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[852, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[852, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[852, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[853, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[853, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[853, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[853, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[853, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[853, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[853, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[854, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[854, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[855, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[855, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[856, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[856, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[856, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[856, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[856, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[856, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[856, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[856, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[857, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[857, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[858, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[858, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[859, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[859, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[860, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[860, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[860, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[860, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[860, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[860, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[860, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[860, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[861, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[862, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[862, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[862, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[862, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[862, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[862, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[862, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[862, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[863, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[864, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[865, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[866, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[867, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[868, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[869, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[870, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[871, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[872, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[873, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[873, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[874, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[874, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[875, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[876, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[876, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[876, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[876, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[876, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[876, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[876, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[877, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[877, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[877, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[877, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[877, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[877, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[877, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[878, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[879, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[880, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[881, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[881, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[882, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[882, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[882, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[882, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[882, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[882, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[883, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[883, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[883, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[883, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[883, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[883, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[884, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[884, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[884, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[884, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[884, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[884, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[884, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[884, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[885, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[885, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[885, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[885, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[885, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[885, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[885, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[885, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[885, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[885, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[886, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[886, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[886, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[886, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[886, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[886, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[887, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[887, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[887, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[887, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[887, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[887, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[887, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[887, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[888, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[889, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[889, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[889, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[890, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[890, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[890, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[891, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[891, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[891, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[892, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[892, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[892, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[893, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[894, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[895, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[896, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[896, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[897, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[898, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[899, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[900, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[901, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[902, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[903, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[904, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[905, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[906, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[907, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[908, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[909, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[910, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[911, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[912, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[913, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[914, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[915, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[916, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[917, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[918, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[919, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[920, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[921, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[922, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[923, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[924, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[925, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[926, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[927, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[928, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[929, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[930, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[930, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[930, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[930, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[930, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[931, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[932, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[933, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[934, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[935, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[936, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[937, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[938, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[939, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[940, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[941, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[942, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[943, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[944, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[945, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[946, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[947, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[948, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[949, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[950, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[951, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[952, "sklearn.utils.validation.has_fit_parameter"]]}})